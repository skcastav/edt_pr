
&НаСервере
Перем оптМВТ, оптЗапросНорм, оптСоотРезультатов, оптЗапросАналогов, оптСоотРезультатовАналогов;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
ВидМПЗ = 1;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
      ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   КонецЕсли;
ВидМПЗПриИзменении(Неопределено); 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если ЭтаФорма.ВводДоступен() Тогда
		Если Не ЭтаФорма.ПроверитьЗаполнение() Тогда
		Возврат;
		КонецЕсли;
			Если Найти(Данные,"*") > 0 Тогда
			Массив = ОбщийМодульВызовСервера.РазложитьСтрокуВМассив(Данные,"$");
			МПЗ = НайтиМПЗ(Сред(Массив[0],2));
				Если МПЗ = Неопределено Тогда
				Сообщить(Сред(Массив[0],2)+" - МПЗ не найден!");
				Возврат;
				КонецЕсли; 
			Иначе
			Массив = ОбщийМодульВызовСервера.РазложитьСтрокуВМассив(Данные,";");
				Если Массив[0] = "3" Тогда
				МПЗ = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[3]);
					Если МПЗ = Неопределено Тогда
					Сообщить(Массив[3]+" - МПЗ не найдена!");
					Возврат;	
					КонецЕсли;
				Иначе
				Сообщить("Неверный QR-код!");
				Возврат;	
				КонецЕсли;
			КонецЕсли;
				Если ВидМПЗ = 1 Тогда
					Если ТипЗнч(МПЗ) <> Тип("СправочникСсылка.Материалы") Тогда
					Сообщить("МПЗ не является материалом!");
					Возврат;
					КонецЕсли;				
				Иначе
					Если ТипЗнч(МПЗ) <> Тип("СправочникСсылка.Номенклатура") Тогда
					Сообщить("МПЗ не является номенклатурой!");
					Возврат;
					КонецЕсли;				
				КонецЕсли; 
	СписокАналогов = ПодобратьАналоги(МПЗ);
	Аналог = СписокАналогов.ВыбратьЭлемент("Выберите МПЗ");
		Если Аналог <> Неопределено Тогда
			Если Аналог.ПолучитьИдентификатор() > 0 Тогда	
			ИзменитьЯчейкиКомплектации(МПЗ,Аналог.Значение);
			КонецЕсли; 
		ДобавитьВТаблицуКомплектации(Аналог.Значение);
			Если Вопрос("Заменить в незавершенных оборотах канбанов?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаменитьНаАналогНаСервере(МПЗ,Аналог.Значение);
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция НайтиМПЗ(НаименованиеSMD)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Материалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Материалы КАК Материалы
	|ГДЕ
	|	Материалы.НаименованиеSMD = &НаименованиеSMD";
Запрос.УстановитьПараметр("НаименованиеSMD", НаименованиеSMD);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

&НаСервере
Функция ЛинейкаКанбан()
	Для каждого Линейка Из СписокЛинеек Цикл 
		Если Линейка.Пометка Тогда
			Если Линейка.Значение.ВидЛинейки = Перечисления.ВидыЛинеек.Канбан Тогда
			Возврат(Истина);
			Иначе	
			Возврат(Ложь);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
КонецФункции
   
&НаСервере       
Процедура ПолучитьВидыКанбанов()
СписокВидовКанбанов.Очистить();
СписокЛинеекПотребителей.Очистить();
	Для каждого Линейка Из СписокЛинеек Цикл
		Если Линейка.Пометка Тогда
			Для каждого ТЧ Из Линейка.Значение.ВидыКанбанов Цикл
				Если СписокВидовКанбанов.НайтиПоЗначению(ТЧ.ВидКанбана) = Неопределено Тогда
				СписокВидовКанбанов.Добавить(ТЧ.ВидКанбана);
				КонецЕсли;		
			КонецЦикла;
				Для каждого ТЧ Из Линейка.Значение.ЛинейкиПотребители Цикл
					Если СписокЛинеекПотребителей.НайтиПоЗначению(ТЧ.Линейка) = Неопределено Тогда
					СписокЛинеекПотребителей.Добавить(ТЧ.Линейка);
					КонецЕсли;
				КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура МестоХраненияПриИзменении(Элемент)
СписокИзделий.Очистить();
ТаблицаМПЗ.Очистить();
СписокЛинеек = ОбщийМодульВызовСервера.ПолучитьСписокЛинеекПоМестуХранения(Отчет.МестоХранения);
	Если СписокЛинеек.Количество() > 0 Тогда               
    ПолучитьВидыКанбанов();
	Иначе
	Сообщить("По выбранному месту хранения канбанов не найдена ни одна линейка!");	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокЛинеекПометкаПриИзменении(Элемент)
ПолучитьВидыКанбанов();
КонецПроцедуры

&НаСервере
Процедура РаскрытьНаКанбаны(ЭтапСпецификации,СписокПроверенныхУзлов)
	Если оптМВТ = Неопределено Тогда
	оптМВТ = Новый МенеджерВременныхТаблиц;
	оптЗапрос = Новый Запрос;
	оптЗапрос.УстановитьПараметр("НаДату", ТекущаяДата());
	оптЗапрос.МенеджерВременныхТаблиц = оптМВТ;
	оптЗапрос.Текст = 			
		"ВЫБРАТЬ
		|	Т.НормаРасходов КАК НормаРасходов,
		|	Т.Норма КАК Норма
		|ПОМЕСТИТЬ втНРСрезПоследних
		|ИЗ
		|	РегистрСведений.НормыРасходов.СрезПоследних(&НаДату, ТИПЗНАЧЕНИЯ(НормаРасходов.Элемент) = ТИП(Справочник.Номенклатура)) КАК Т
		|ГДЕ
		|	Т.НормаРасходов.ПометкаУдаления = ЛОЖЬ
		|	И Т.Норма > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НормаРасходов";	
	оптЗапрос.Выполнить();
	КонецЕсли;
		Если оптЗапросНорм = Неопределено Тогда
		оптЗапросНорм = Новый Запрос;
		оптЗапросНорм.МенеджерВременныхТаблиц = оптМВТ;
		оптЗапросНорм.Текст = 
			"ВЫБРАТЬ
			|	НормыРасходов.Ссылка КАК Ссылка,
			|	НормыРасходов.Элемент КАК Элемент,
			|	НормыРасходов.ВидЭлемента КАК ВидЭлемента,
			|	НормыРасходов.Элемент.ОсновнаяЕдиницаИзмерения КАК ЭлементОЕИ,
			|	НормыРасходовСрезПоследних.Норма КАК Норма
			|ИЗ
			|	втНРСрезПоследних КАК НормыРасходовСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НормыРасходов КАК НормыРасходов
			|		ПО НормыРасходовСрезПоследних.НормаРасходов = НормыРасходов.Ссылка
			|ГДЕ
			|	НормыРасходов.Владелец = &Владелец";	
		КонецЕсли;
			Если оптСоотРезультатов = Неопределено Тогда
			оптСоотРезультатов = Новый Соответствие;
			КонецЕсли;
				Если оптСоотРезультатов.Получить(ЭтапСпецификации) = Неопределено Тогда 
				Запрос = оптЗапросНорм;
				Запрос.УстановитьПараметр("Владелец", ЭтапСпецификации);
				РезультатЗапроса = Запрос.Выполнить();
				оптСоотРезультатов.Вставить(ЭтапСпецификации, РезультатЗапроса);
				Иначе
				РезультатЗапроса = оптСоотРезультатов[ЭтапСпецификации];
				КонецЕсли;
ВыборкаНР = РезультатЗапроса.Выбрать();
	Пока ВыборкаНР.Следующий() Цикл 
		Если СписокПроверенныхУзлов.НайтиПоЗначению(ВыборкаНР.Элемент) = Неопределено Тогда
		СписокПроверенныхУзлов.Добавить(ВыборкаНР.Элемент);
		Иначе
		Продолжить;
		КонецЕсли;
			Если ВыборкаНР.Элемент.Канбан.Пустая() Тогда			
			РаскрытьНаКанбаны(ВыборкаНР.Элемент,СписокПроверенныхУзлов);
			Иначе
				Если СписокВидовКанбанов.НайтиПоЗначению(ВыборкаНР.Элемент.Канбан) <> Неопределено Тогда
					Если СписокИзделий.НайтиПоЗначению(ВыборкаНР.Элемент) = Неопределено Тогда
					СписокИзделий.Добавить(ВыборкаНР.Элемент,СокрЛП(ВыборкаНР.Элемент.Наименование)+" ["+ПолучитьСтатус(ВыборкаНР.Элемент)+"]",Истина);
					КонецЕсли;
				Иначе
				РаскрытьНаКанбаны(ВыборкаНР.Элемент,СписокПроверенныхУзлов);
				КонецЕсли; 	
			КонецЕсли;						
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Процедура ПолучитьСписокИзделий() 
СписокИзделий.Очистить();
СписокЛинеекГП = Новый СписокЗначений;
Запрос = Новый Запрос;
                       
	Если СписокВидовКанбанов.Количество() > 0 Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	СтатусыМПЗСрезПоследних.Статус КАК Статус
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
		|		ПО Номенклатура.Ссылка = СтатусыМПЗСрезПоследних.МПЗ
		|ГДЕ
		|	Номенклатура.Канбан В(&СписокВидовКанбанов)
		|	И СтатусыМПЗСрезПоследних.Статус <> &Статус";
	Запрос.УстановитьПараметр("СписокВидовКанбанов",СписокВидовКанбанов);
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыСпецификаций.Запрещённая);
	Запрос.УстановитьПараметр("НаДату",ТекущаяДата());
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл 
		ВхождениеВСпецификации(Выборка.Ссылка,Выборка.Ссылка);
		КонецЦикла;
	КонецЕсли;
		Для каждого Линейка Из СписокЛинеек Цикл
			Если Линейка.Пометка Тогда
				Если Линейка.Значение.ВидЛинейки <> Перечисления.ВидыЛинеек.Канбан Тогда
				СписокЛинеекГП.Добавить(Линейка.Значение);		
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
			Если СписокЛинеекГП.Количество() > 0 Тогда
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Номенклатура.Ссылка КАК Ссылка,
				|	Номенклатура.Наименование КАК Наименование,
				|	СтатусыМПЗСрезПоследних.Статус КАК Статус
				|ИЗ
				|	Справочник.Номенклатура КАК Номенклатура
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
				|		ПО Номенклатура.Ссылка = СтатусыМПЗСрезПоследних.МПЗ
				|ГДЕ
				|	Номенклатура.Линейка В(&СписокЛинеек)
				|	И СтатусыМПЗСрезПоследних.Статус <> &Статус";
			Запрос.УстановитьПараметр("СписокЛинеек",СписокЛинеекГП);
			Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыСпецификаций.Запрещённая);
			Запрос.УстановитьПараметр("НаДату",ТекущаяДата());
			РезультатЗапроса = Запрос.Выполнить();
			Выборка = РезультатЗапроса.Выбрать();
				Пока Выборка.Следующий() Цикл
				СписокИзделий.Добавить(Выборка.Ссылка,СокрЛП(Выборка.Наименование)+" ["+Выборка.Статус+"]",Истина); 
				КонецЦикла;
			КонецЕсли;
КонецПроцедуры
     
&НаСервере
Процедура ВхождениеВСпецификации(ПФ,Элемент)
спНомен = ОбщийМодульВызовСервера.ПолучитьСписокВхожденийБезСтатусов(Элемент,ТекущаяДата());
	Для каждого Строка Из спНомен Цикл
		Если Не Строка.Значение.Товар.Пустая() Тогда
			Если СписокЛинеекПотребителей.НайтиПоЗначению(Строка.Значение.Линейка) <> Неопределено Тогда
				Если СписокИзделий.НайтиПоЗначению(ПФ) = Неопределено Тогда
				СписокИзделий.Добавить(ПФ,СокрЛП(ПФ.Наименование)+" ["+ПолучитьСтатус(ПФ)+"]",Истина);
				КонецЕсли; 
			Прервать;
			КонецЕсли;
		Иначе
		ВхождениеВСпецификации(ПФ,Строка.Значение);			
		КонецЕсли;		
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокИзделийКанбан()
//Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	Номенклатура.Ссылка,
//	|	СтатусыМПЗСрезПоследних.Статус
//	|ИЗ
//	|	Справочник.Номенклатура КАК Номенклатура
//	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
//	|		ПО Номенклатура.Ссылка = СтатусыМПЗСрезПоследних.МПЗ
//	|ГДЕ
//	|	Номенклатура.Линейка В(&СписокЛинеек)
//	|	И СтатусыМПЗСрезПоследних.Статус <> &Статус";
//Запрос.УстановитьПараметр("СписокЛинеек",СписокЛинеекПотребителей);
//Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыСпецификаций.Запрещённая);
//Запрос.УстановитьПараметр("НаДату",ТекущаяДата());
//РезультатЗапроса = Запрос.Выполнить();
//Выборка = РезультатЗапроса.Выбрать();
//	Пока Выборка.Следующий() Цикл
//	РаскрытьНаКанбаны(Выборка.Ссылка,СписокПроверенныхУзлов);
//	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьИзделия(Команда)
	Если СписокЛинеек.Количество() > 0 Тогда
	Состояние("Обработка...",,"Получение изделий..."); 
	ПолучитьСписокИзделий();
	СписокИзделий.СортироватьПоЗначению();
	Иначе
	Сообщить("По выбранному месту хранения канбанов не найдена ни одна линейка!");	
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура ПолучитьАналоги(НР,ТЧ)
	Если оптЗапросАналогов = Неопределено Тогда
	оптЗапросАналогов = Новый Запрос;

	оптЗапросАналогов.Текст = 
		"ВЫБРАТЬ
		|	АналогиНормРасходов.ВидЭлемента КАК ВидЭлемента,
		|	АналогиНормРасходов.Элемент КАК Элемент,
		|	АналогиНормРасходовСрезПоследних.Норма КАК Норма
		|ИЗ
		|	Справочник.АналогиНормРасходов КАК АналогиНормРасходов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналогиНормРасходов.СрезПоследних(&НаДату, ) КАК АналогиНормРасходовСрезПоследних
		|		ПО АналогиНормРасходов.Ссылка = АналогиНормРасходовСрезПоследних.АналогНормыРасходов
		|ГДЕ
		|	АналогиНормРасходов.Владелец = &Владелец
		|	И АналогиНормРасходов.ПометкаУдаления = ЛОЖЬ
		|	И АналогиНормРасходовСрезПоследних.Норма > 0";
	оптЗапросАналогов.УстановитьПараметр("НаДату", ТекущаяДата());	
	КонецЕсли;
		Если оптСоотРезультатовАналогов = Неопределено Тогда
		оптСоотРезультатовАналогов = Новый Соответствие;
		КонецЕсли;
			Если оптСоотРезультатовАналогов.Получить(НР) = Неопределено Тогда 
			ЗапросАналога = оптЗапросАналогов;
			ЗапросАналога.УстановитьПараметр("Владелец", НР);
			РезультатЗапросаАналога = ЗапросАналога.Выполнить();
			оптСоотРезультатовАналогов.Вставить(НР, РезультатЗапросаАналога);
			Иначе
			РезультатЗапросаАналога = оптСоотРезультатовАналогов[НР];
			КонецЕсли;
ВыборкаАНР = РезультатЗапросаАналога.Выбрать();
	Пока ВыборкаАНР.Следующий() Цикл 
	МПЗ = ВыборкаАНР.Элемент;
	Выборка = ТЧ.ТаблицаАналогов.НайтиСтроки(Новый Структура("Аналог",МПЗ));
		Если Выборка.Количество() = 0 Тогда
		ТЧ_А = ТЧ.ТаблицаАналогов.Добавить();
		ТЧ_А.Аналог = МПЗ;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры  

&НаСервере
Процедура РаскрытьНаМПЗ(ЭтапСпецификации,СписокПроверенныхУзлов)
	Если оптМВТ = Неопределено Тогда
	оптМВТ = Новый МенеджерВременныхТаблиц;
	оптЗапрос = Новый Запрос;
	оптЗапрос.УстановитьПараметр("НаДату", ТекущаяДата());
	оптЗапрос.МенеджерВременныхТаблиц = оптМВТ;
	оптЗапрос.Текст = 			
		"ВЫБРАТЬ
		|	Т.НормаРасходов КАК НормаРасходов,
		|	Т.Норма КАК Норма
		|ПОМЕСТИТЬ втНРСрезПоследних
		|ИЗ
		|	РегистрСведений.НормыРасходов.СрезПоследних(
		|			&НаДату,
		|			ТИПЗНАЧЕНИЯ(НормаРасходов.Элемент) = ТИП(Справочник.Номенклатура)
		|				ИЛИ ТИПЗНАЧЕНИЯ(НормаРасходов.Элемент) = ТИП(Справочник.Материалы)) КАК Т
		|ГДЕ
		|	Т.НормаРасходов.ПометкаУдаления = ЛОЖЬ
		|	И Т.Норма > 0
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НормаРасходов";	
	оптЗапрос.Выполнить();
	КонецЕсли;
		Если оптЗапросНорм = Неопределено Тогда
		оптЗапросНорм = Новый Запрос;
		оптЗапросНорм.МенеджерВременныхТаблиц = оптМВТ;
		оптЗапросНорм.Текст = 
			"ВЫБРАТЬ
			|	НормыРасходов.Ссылка КАК Ссылка,
			|	НормыРасходов.Элемент КАК Элемент,
			|	НормыРасходов.ВидЭлемента КАК ВидЭлемента,
			|	НормыРасходов.Элемент.ОсновнаяЕдиницаИзмерения КАК ЭлементОЕИ,
			|	НормыРасходовСрезПоследних.Норма КАК Норма
			|ИЗ
			|	втНРСрезПоследних КАК НормыРасходовСрезПоследних
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.НормыРасходов КАК НормыРасходов
			|		ПО НормыРасходовСрезПоследних.НормаРасходов = НормыРасходов.Ссылка
			|ГДЕ
			|	НормыРасходов.Владелец = &Владелец";	
		КонецЕсли;
			Если оптСоотРезультатов = Неопределено Тогда
			оптСоотРезультатов = Новый Соответствие;
			КонецЕсли;
				Если оптСоотРезультатов.Получить(ЭтапСпецификации) = Неопределено Тогда 
				Запрос = оптЗапросНорм;
				Запрос.УстановитьПараметр("Владелец", ЭтапСпецификации);
				РезультатЗапроса = Запрос.Выполнить();
				оптСоотРезультатов.Вставить(ЭтапСпецификации, РезультатЗапроса);
				Иначе
				РезультатЗапроса = оптСоотРезультатов[ЭтапСпецификации];
				КонецЕсли;
ВыборкаНР = РезультатЗапроса.Выбрать();
	Пока ВыборкаНР.Следующий() Цикл
	МПЗ = ВыборкаНР.Элемент;
		Если ВидМПЗ = 1 Тогда
			Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Материалы") Тогда
			Выборка = ТаблицаМПЗ.НайтиСтроки(Новый Структура("МПЗ",МПЗ));
				Если Выборка.Количество() = 0 Тогда
				ЯчейкиКомплектации = ОбщийМодульРаботаСРегистрами.ПолучитьЯчейкуКомплектацииПоМестуХранения(Отчет.МестоХранения,МПЗ);		
				ТЧ = ТаблицаМПЗ.Добавить();
				ТЧ.МПЗ = МПЗ;
				ТЧ.Статус = ПолучитьСтатус(МПЗ,ТекущаяДата());
				ТЧ.ЕдиницаИзмерения = МПЗ.ЕдиницаИзмерения;
				ТЧ.КоличествоЯчеек = ЯчейкиКомплектации.КоличествоЯчеек;
				ТЧ.КоличествоВЯчейке = ЯчейкиКомплектации.КоличествоВЯчейке;
				ТЧ.ГруппаРасчёта = ЯчейкиКомплектации.ГруппаРасчёта;
				Иначе
				ТЧ = Выборка[0]; 
				КонецЕсли;                                          
			ПолучитьАналоги(ВыборкаНР.Ссылка,ТЧ);
			Иначе
				Если МПЗ.Канбан.Пустая() Тогда			
				РаскрытьНаМПЗ(МПЗ,СписокПроверенныхУзлов);	
				КонецЕсли;						
			КонецЕсли;
		Иначе
			Если СписокПроверенныхУзлов.НайтиПоЗначению(МПЗ) = Неопределено Тогда
			СписокПроверенныхУзлов.Добавить(МПЗ);
			Иначе
			Продолжить;
			КонецЕсли;
				Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если МПЗ.Канбан.Пустая() Тогда			
					РаскрытьНаМПЗ(МПЗ,СписокПроверенныхУзлов);
					Иначе
						Если Не Отчет.Подразделение.Пустая() Тогда
							Если МПЗ.Канбан.Подразделение <> Отчет.Подразделение Тогда
							Продолжить;
						    КонецЕсли;
						КонецЕсли;
					Выборка = ТаблицаМПЗ.НайтиСтроки(Новый Структура("МПЗ",МПЗ));
						Если Выборка.Количество() = 0 Тогда
						ЯчейкиКомплектации = ОбщийМодульРаботаСРегистрами.ПолучитьЯчейкуКомплектацииПоМестуХранения(Отчет.МестоХранения,МПЗ);		
						ТЧ = ТаблицаМПЗ.Добавить();
						ТЧ.МПЗ = МПЗ;
						ТЧ.Статус = ПолучитьСтатус(МПЗ,ТекущаяДата());
						ТЧ.ЕдиницаИзмерения = МПЗ.ЕдиницаИзмерения;
						ТЧ.КоличествоЯчеек = ЯчейкиКомплектации.КоличествоЯчеек;
						ТЧ.КоличествоВЯчейке = ЯчейкиКомплектации.КоличествоВЯчейке;
						ТЧ.КоличествоЯчеекКанбана = МПЗ.КолКанбан;
						ТЧ.ГруппаРасчёта = ЯчейкиКомплектации.ГруппаРасчёта;
						Иначе
						ТЧ = Выборка[0]; 
						КонецЕсли;                                          
					ПолучитьАналоги(ВыборкаНР.Ссылка,ТЧ);					 	
					КонецЕсли;		
				КонецЕсли;			
		КонецЕсли; 		
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ПолучитьКомплектациюНаСервере()
СписокПроверенныхУзлов = Новый СписокЗначений;
ТаблицаМПЗ.Очистить();
	Для каждого Стр Из СписокИзделий Цикл
		Если Стр.Пометка Тогда
		РаскрытьНаМПЗ(Стр.Значение,СписокПроверенныхУзлов);
		КонецЕсли; 		
	КонецЦикла;    
ТаблицаМПЗ.Сортировать("МПЗ");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКомплектацию(Команда)
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда 
	Состояние("Обработка...",,"Получение комплектации...");
	ПолучитьКомплектациюНаСервере();
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВидМПЗПриИзменении(Элемент)
Элементы.Подразделение.Доступность = ?(ВидМПЗ = 1,Ложь,Истина); 
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзФайлаНаСервере(Наименование,КоличествоЯчеек,КоличествоВЯчейке,ГруппаРасчёта)
	Если ВидМПЗ = 1 Тогда
	МПЗ = Справочники.Материалы.НайтиПоНаименованию(Наименование,Истина);	
	Иначе	
	МПЗ = Справочники.Номенклатура.НайтиПоНаименованию(Наименование,Истина);
	КонецЕсли; 
		Если Не МПЗ.Пустая() Тогда
		ТЧ = ТаблицаМПЗ.Добавить();
		ТЧ.МПЗ = МПЗ;
		ТЧ.Статус = ПолучитьСтатус(МПЗ);
		ТЧ.ЕдиницаИзмерения = МПЗ.ЕдиницаИзмерения;
		ТЧ.КоличествоЯчеек = КоличествоЯчеек;
		ТЧ.КоличествоВЯчейке = КоличествоВЯчейке;
		ТЧ.ГруппаРасчёта = ГруппаРасчёта;	
		Иначе		
		Сообщить(Наименование + " - не найдена в справочнике!");
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
Результат = ОбщийМодульКлиент.ОткрытьФайлExcel("Выберите файл c МПЗ");
	Если Результат <> Неопределено Тогда
	ТаблицаМПЗ.Очистить();
	ExcelЛист = Результат.ExcelЛист;
	КолСтрок = Результат.КоличествоСтрок;
	    Для к = 2 по КолСтрок Цикл
		ЗагрузитьИзФайлаНаСервере(СокрЛП(ExcelЛист.Cells(к,1).Value),Число(ExcelЛист.Cells(к,2).Value),Число(ExcelЛист.Cells(к,3).Value),СокрЛП(ExcelЛист.Cells(к,4).Value));
		КонецЦикла;
	Результат.Excel.Quit();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПодборМПЗНаСервере(ТаблицаВыбранныхМПЗ)
	Для каждого ТЧ Из ТаблицаВыбранныхМПЗ Цикл
	ТЧ_МПЗ = ТаблицаМПЗ.Добавить();
		Если ВидМПЗ = 1 Тогда
			Если ТипЗнч(ТЧ.МПЗ) <> Тип("СправочникСсылка.Материалы") Тогда
			Продолжить;		
			КонецЕсли; 
		Иначе
			Если ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Материалы") Тогда
			Продолжить;		
			КонецЕсли;
		КонецЕсли;
	ТЧ_МПЗ.МПЗ = ТЧ.МПЗ;
	ТЧ_МПЗ.Статус = ПолучитьСтатус(ТЧ.МПЗ);
	ТЧ_МПЗ.КоличествоВЯчейке = ПолучитьБазовоеКоличество(ТЧ.Количество,ТЧ.ЕдиницаИзмерения);
	ТЧ_МПЗ.ЕдиницаИзмерения = ТЧ.МПЗ.ЕдиницаИзмерения;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПодборМПЗ(Команда)
ТаблицаВыбранныхМПЗ = ОткрытьФормуМодально("ОбщаяФорма.ПодборМПЗ", Новый Структура("МестоХранения",Отчет.МестоХранения));
	Если ТаблицаВыбранныхМПЗ <> Неопределено Тогда
		Если ТаблицаВыбранныхМПЗ.Количество() > 0 Тогда
			Если ТаблицаМПЗ.Количество() > 0 Тогда
				Если Вопрос("Очистить таблицу?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ТаблицаМПЗ.Очистить();		
				КонецЕсли; 			
			КонецЕсли; 
		ПодборМПЗНаСервере(ТаблицаВыбранныхМПЗ);
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПечатьQRКодаНаСервере(ВыбСклад)
ТабДок = Новый ТабличныйДокумент;

Макет = ПолучитьОбщийМакет("QRКодКанбанР");
ОблQRКод = Макет.ПолучитьОбласть("QRКод");
	Для каждого ТЧ Из ТаблицаМПЗ Цикл
		Если ТЧ.Пометка Тогда
			Если ТЧ.КоличествоЯчеекКанбана > 0 Тогда
			КолЭтикеток = ТЧ.КоличествоЯчеекКанбана;
			Иначе
			КолЭтикеток = ТЧ.КоличествоЯчеек;
			КонецЕсли; 
				Для к = 1 По КолЭтикеток Цикл
				QRCode = "3;"+ЗначениеВСтрокуВнутр(Отчет.МестоХранения)+";"+СокрЛП(ВыбСклад.Код)+";"+ЗначениеВСтрокуВнутр(ТЧ.МПЗ)+";"+СтрЗаменить(Строка(ТЧ.КоличествоВЯчейке),Символы.НПП,"")+";"+к;
				ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRCode, 0, 100);	
					Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
					КартинкаQRКода = Новый Картинка(ДанныеQRКода);
					ОблQRКод.Рисунки.QRCode.Картинка = КартинкаQRКода;
					Иначе
					Сообщить("Не удалось сформировать QR-код!");
					КонецЕсли;
				ОблQRКод.Параметры.СкладПолучатель = СокрЛП(Отчет.МестоХранения.Наименование);
				ОблQRКод.Параметры.Наименование = СокрЛП(ТЧ.МПЗ.Наименование);
				ОблQRКод.Параметры.Количество = ТЧ.КоличествоВЯчейке;
				ОблQRКод.Параметры.ЕдИзм = ТЧ.МПЗ.ЕдиницаИзмерения;
				ОблQRКод.Параметры.СкладОтправитель = СокрЛП(ВыбСклад.Наименование);
				ОблQRКод.Параметры.НомерЯчейки = к;
				Стеллаж = "";
				Полка = "";
				ЯХ = РегистрыСведений.ЯчейкиХранения.Выбрать(Новый Структура("МПЗ",ТЧ.МПЗ));
					Пока ЯХ.Следующий() Цикл
						Если ЯХ.МестоХранения = ВыбСклад Тогда
						Стеллаж = ЯХ.Стеллаж;
						Полка = ЯХ.Полка;
						КонецЕсли; 	
					КонецЦикла;
				ОблQRКод.Параметры.Стеллаж = Стеллаж;
				ОблQRКод.Параметры.Полка = Полка;
				ТабДок.Вывести(ОблQRКод);
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
				ТабДок.Вывести(ОблQRКод);
				ТабДок.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
ТабДок.РазмерСтраницы = "Custom";
ТабДок.ВысотаСтраницы = 101;
ТабДок.ШиринаСтраницы = 57;
ТабДок.ПолеСлева = 0;
ТабДок.ПолеСверху = 0;
ТабДок.ПолеСнизу = 0;
ТабДок.ПолеСправа = 0;
ТабДок.РазмерКолонтитулаСверху = 0;
ТабДок.РазмерКолонтитулаСнизу = 0;
Возврат(ТабДок);
КонецФункции

&НаКлиенте
Процедура ПечатьQRКода(Команда)
ВыбСклад = Неопределено;
	Если ВвестиЗначение(ВыбСклад,"Введите склад-отправитель",Новый ОписаниеТипов("СправочникСсылка.МестаХранения")) Тогда
	ТабДок = ПечатьQRКодаНаСервере(ВыбСклад);
	ТабДок.Показать("QR-коды канбанов");
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПечатьКарточекМинитипографииНаСервере(ВыбСклад)
ТабДок = Новый ТабличныйДокумент;
	
Макет = ПолучитьОбщийМакет("QRКодКанбан2");
ОблQRКод = Макет.ПолучитьОбласть("QRКод|Секция");
	Для каждого ТЧ Из ТаблицаМПЗ Цикл
		Если ТЧ.Пометка Тогда
			Если ТЧ.КоличествоЯчеекКанбана > 0 Тогда
			КолЭтикеток = ТЧ.КоличествоЯчеекКанбана;
			Иначе
			КолЭтикеток = ТЧ.КоличествоЯчеек;
			КонецЕсли; 
				Для к = 1 По КолЭтикеток Цикл
				QRCode = "3;"+ЗначениеВСтрокуВнутр(Отчет.МестоХранения)+";"+СокрЛП(ВыбСклад.Код)+";"+ЗначениеВСтрокуВнутр(ТЧ.МПЗ)+";"+СтрЗаменить(Строка(ТЧ.КоличествоВЯчейке),Символы.НПП,"")+";"+к;
				ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRCode, 0, 100);	
					Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
					КартинкаQRКода = Новый Картинка(ДанныеQRКода);
					ОблQRКод.Рисунки.QRCode.Картинка = КартинкаQRКода;
					Иначе
					Сообщить("Не удалось сформировать QR-код!");
					КонецЕсли;
				ОблQRКод.Параметры.СкладПолучатель = СокрЛП(Отчет.МестоХранения.Наименование);
				ОблQRКод.Параметры.Наименование = СокрЛП(ТЧ.МПЗ.Наименование);
				ОблQRКод.Параметры.Количество = ТЧ.КоличествоВЯчейке;
				ОблQRКод.Параметры.ЕдИзм = ТЧ.МПЗ.ЕдиницаИзмерения;
				ОблQRКод.Параметры.СкладОтправитель = СокрЛП(ВыбСклад.Наименование);
				ОблQRКод.Параметры.НомерЯчейки = к;
				ТабДок.Вывести(ОблQRКод);
			    ТабДок.Присоединить(ОблQRКод);
				//УдалитьФайлы(ИмяФайла);
				КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
ТабДок.РазмерСтраницы = "A4";
ТабДок.АвтоМасштаб = Истина;
ТабДок.ПолеСлева = 0;
ТабДок.ПолеСверху = 7;
ТабДок.ПолеСнизу = 0;
ТабДок.ПолеСправа = 0;
ТабДок.РазмерКолонтитулаСверху = 0;
ТабДок.РазмерКолонтитулаСнизу = 0;
ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
Возврат(ТабДок);
КонецФункции

&НаКлиенте
Процедура ПечатьКарточекМинитипографии(Команда)
ВыбСклад = Неопределено;
	Если ВвестиЗначение(ВыбСклад,"Введите склад-отправитель",Новый ОписаниеТипов("СправочникСсылка.МестаХранения")) Тогда
	ТабДок = ПечатьКарточекМинитипографииНаСервере(ВыбСклад);
	ТабДок.Показать("Карточки мини-типографии");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПечатьQRКодаЯчейкиНаСервере(ВыбСклад,НомерЯчейки)
ТабДок = Новый ТабличныйДокумент;

Макет = ПолучитьОбщийМакет("QRКодКанбан");
ОблQRКод = Макет.ПолучитьОбласть("QRКод|Секция");
	Для каждого ТЧ Из ТаблицаМПЗ Цикл
		Если ТЧ.Пометка Тогда
		QRCode = "3;"+ЗначениеВСтрокуВнутр(Отчет.МестоХранения)+";"+СокрЛП(ВыбСклад.Код)+";"+ЗначениеВСтрокуВнутр(ТЧ.МПЗ)+";"+СтрЗаменить(Строка(ТЧ.КоличествоВЯчейке),Символы.НПП,"")+";"+НомерЯчейки;
		ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRCode, 0, 100);	
			Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
			КартинкаQRКода = Новый Картинка(ДанныеQRКода);
			ОблQRКод.Рисунки.QRCode.Картинка = КартинкаQRКода;
			Иначе
			Сообщить("Не удалось сформировать QR-код!");
			КонецЕсли;
		ОблQRКод.Параметры.СкладПолучатель = СокрЛП(Отчет.МестоХранения.Наименование);
		ОблQRКод.Параметры.Наименование = СокрЛП(ТЧ.МПЗ.Наименование);
		ОблQRКод.Параметры.Количество = ТЧ.КоличествоВЯчейке;
		ОблQRКод.Параметры.ЕдИзм = ТЧ.МПЗ.ЕдиницаИзмерения;
		ОблQRКод.Параметры.СкладОтправитель = СокрЛП(ВыбСклад.Наименование);
		ОблQRКод.Параметры.НомерЯчейки = НомерЯчейки;
		Стеллаж = "";
		Полка = "";
		ЯХ = РегистрыСведений.ЯчейкиХранения.Выбрать(Новый Структура("МПЗ",ТЧ.МПЗ));
			Пока ЯХ.Следующий() Цикл
				Если ЯХ.МестоХранения = ВыбСклад Тогда
				Стеллаж = ЯХ.Стеллаж;
				Полка = ЯХ.Полка;
				КонецЕсли; 	
			КонецЦикла;
		ОблQRКод.Параметры.Стеллаж = Стеллаж;
		ОблQRКод.Параметры.Полка = Полка;	
		ТабДок.Вывести(ОблQRКод);
	    ТабДок.Присоединить(ОблQRКод);
		//УдалитьФайлы(ИмяФайла); 
		КонецЕсли; 
	КонецЦикла; 
ТабДок.РазмерСтраницы = "A4";
ТабДок.АвтоМасштаб = Истина;
ТабДок.ПолеСлева = 0;
ТабДок.ПолеСверху = 7;
ТабДок.ПолеСнизу = 0;
ТабДок.ПолеСправа = 0;
ТабДок.РазмерКолонтитулаСверху = 0;
ТабДок.РазмерКолонтитулаСнизу = 0;
ТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
Возврат(ТабДок);
КонецФункции

&НаКлиенте
Процедура ПечатьQRКодаЯчейки(Команда)
ВыбСклад = Неопределено;
	Если ВвестиЗначение(ВыбСклад,"Введите склад-отправитель",Новый ОписаниеТипов("СправочникСсылка.МестаХранения")) Тогда
	НомерЯчейки = 1;
		Если ВвестиЧисло(НомерЯчейки,"Введите номер ячейки",2,0) Тогда
		ТабДок = ПечатьQRКодаЯчейкиНаСервере(ВыбСклад,НомерЯчейки);
		ТабДок.Показать("QR-коды канбанов");		
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПечатьQRКодовУИТНаСервере(ВыбСклад)
ТабДок = Новый ТабличныйДокумент;

Макет = ПолучитьОбщийМакет("QRКодКанбан");
ОблQRКод = Макет.ПолучитьОбласть("QRКод|Секция");
	Для каждого ТЧ Из ТаблицаМПЗ Цикл
		Если ТЧ.Пометка Тогда
			Если ТЧ.КоличествоЯчеекКанбана > 0 Тогда
			КолЭтикеток = ТЧ.КоличествоЯчеекКанбана;
			Иначе
			КолЭтикеток = ТЧ.КоличествоЯчеек;
			КонецЕсли; 
				Для к = 1 По КолЭтикеток Цикл
				QRCode = "3;"+ЗначениеВСтрокуВнутр(Отчет.МестоХранения)+";"+СокрЛП(ВыбСклад.Код)+";"+ЗначениеВСтрокуВнутр(ТЧ.МПЗ)+";"+СтрЗаменить(Строка(ТЧ.КоличествоВЯчейке),Символы.НПП,"")+";"+к;
				ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRCode, 0, 100);	
					Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
					КартинкаQRКода = Новый Картинка(ДанныеQRКода);
					ОблQRКод.Рисунки.QRCode.Картинка = КартинкаQRКода;
					Иначе
					Сообщить("Не удалось сформировать QR-код!");
					КонецЕсли;
				ОблQRКод.Параметры.СкладПолучатель = СокрЛП(Отчет.МестоХранения.Наименование);
				ОблQRКод.Параметры.Наименование = СокрЛП(ТЧ.МПЗ.Наименование);
				ОблQRКод.Параметры.Количество = ТЧ.КоличествоВЯчейке;
				ОблQRКод.Параметры.ЕдИзм = ТЧ.МПЗ.ЕдиницаИзмерения;
				ОблQRКод.Параметры.СкладОтправитель = СокрЛП(ВыбСклад.Наименование);
				ОблQRКод.Параметры.НомерЯчейки = к;
				Стеллаж = "";
				Полка = "";
				ЯХ = РегистрыСведений.ЯчейкиХранения.Выбрать(Новый Структура("МПЗ",ТЧ.МПЗ));
					Пока ЯХ.Следующий() Цикл
						Если ЯХ.МестоХранения = ВыбСклад Тогда
						Стеллаж = ЯХ.Стеллаж;
						Полка = ЯХ.Полка;
						КонецЕсли; 	
					КонецЦикла;
				ОблQRКод.Параметры.Стеллаж = Стеллаж;
				ОблQRКод.Параметры.Полка = Полка;
				ТабДок.Вывести(ОблQRКод);
	    		ТабДок.Присоединить(ОблQRКод);
				КонецЦикла; 
		КонецЕсли; 
	КонецЦикла; 
ТабДок.РазмерСтраницы = "Custom";
ТабДок.ВысотаСтраницы = 101;
ТабДок.ШиринаСтраницы = 57;
ТабДок.ПолеСлева = 0;
ТабДок.ПолеСверху = 0;
ТабДок.ПолеСнизу = 0;
ТабДок.ПолеСправа = 0;
ТабДок.РазмерКолонтитулаСверху = 0;
ТабДок.РазмерКолонтитулаСнизу = 0;
Возврат(ТабДок);
КонецФункции

&НаКлиенте
Процедура ПечатьQRКодовУИТ(Команда)
ВыбСклад = Неопределено;
	Если ВвестиЗначение(ВыбСклад,"Введите склад-отправитель",Новый ОписаниеТипов("СправочникСсылка.МестаХранения")) Тогда
	ТабДок = ПечатьQRКодовУИТНаСервере(ВыбСклад);
	ТабДок.Показать("QR-коды канбанов УИТ");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеНаСервере()
	Для каждого ТЧ Из ТаблицаМПЗ Цикл
	ТЧ.Пометка = Истина;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
ВыбратьВсеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеНаСервере()
	Для каждого ТЧ Из ТаблицаМПЗ Цикл
	ТЧ.Пометка = Ложь;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсе(Команда)
ОтменитьВсеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеИзделияНаСервере()
	Для каждого Стр Из СписокИзделий Цикл
	Стр.Пометка = Истина;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсеИзделия(Команда)
ВыбратьВсеИзделияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеИзделияНаСервере()
	Для каждого Стр Из СписокИзделий Цикл
	Стр.Пометка = Ложь;	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсеИзделия(Команда)
ОтменитьВсеИзделияНаСервере();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзмененияНаСервере()
	Для каждого ТЧ Из ТаблицаМПЗ Цикл
		Если ТЧ.Пометка Тогда
			Если ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если ТЧ.КоличествоЯчеекКанбана <> ТЧ.МПЗ.КолКанбан Тогда
				Номен = ТЧ.МПЗ.ПолучитьОбъект();
				Номен.КолКанбан = ТЧ.КоличествоЯчеекКанбана;
				Номен.Записать();
				КонецЕсли; 
			КонецЕсли;
		ЯчейкиКомплектации = ОбщийМодульРаботаСРегистрами.ПолучитьЯчейкуКомплектацииПоМестуХранения(Отчет.МестоХранения,ТЧ.МПЗ);
			Если (ЯчейкиКомплектации.КоличествоЯчеек <> ТЧ.КоличествоЯчеек)или(ЯчейкиКомплектации.КоличествоВЯчейке <> ТЧ.КоличествоВЯчейке) Тогда
			ЯК = РегистрыСведений.ЯчейкиКомплектации.СоздатьМенеджерЗаписи();
			ЯК.Период = ТекущаяДата();
			ЯК.МестоХранения = Отчет.МестоХранения; 
			ЯК.МПЗ = ТЧ.МПЗ;
			ЯК.КоличествоЯчеек = ТЧ.КоличествоЯчеек;
			ЯК.КоличествоВЯчейке = ТЧ.КоличествоВЯчейке;
			ЯК.ГруппаРасчёта = ТЧ.ГруппаРасчёта;
			ЯК.Записать(Истина);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзменения(Команда)
ЗагрузитьИзмененияНаСервере();
КонецПроцедуры

&НаСервере
Функция ПодобратьАналоги(МПЗ)
СписокАналогов = Новый СписокЗначений;
Запрос = Новый Запрос;

СписокАналогов.Добавить(МПЗ);
Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналогиНормРасходов.Ссылка КАК Ссылка,
	|	АналогиНормРасходов.Элемент КАК Элемент
	|ИЗ
	|	Справочник.АналогиНормРасходов КАК АналогиНормРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормыРасходов.СрезПоследних(&НаДату, ) КАК НормыРасходовСрезПоследних
	|		ПО АналогиНормРасходов.Владелец = НормыРасходовСрезПоследних.НормаРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыМПЗ.СрезПоследних КАК СтатусыМПЗСрезПоследних
	|		ПО АналогиНормРасходов.Владелец.Владелец = СтатусыМПЗСрезПоследних.МПЗ
	|ГДЕ
	|	АналогиНормРасходов.Владелец.Элемент = &Элемент
	|	И НормыРасходовСрезПоследних.Норма > 0
	|	И СтатусыМПЗСрезПоследних.Статус <> &Статус";
Запрос.УстановитьПараметр("Элемент", МПЗ);
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыСпецификаций.Запрещённая);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НормыАНР = ОбщегоНазначенияПовтИсп.АналогиНормРасходов_ПолучитьПоследнее(ВыборкаДетальныеЗаписи.Ссылка,ТекущаяДата());
		Если НормыАНР.Норма > 0 Тогда
			Если СписокАналогов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Элемент) = Неопределено Тогда
			ЯчейкиКомплектации = ОбщийМодульРаботаСРегистрами.ПолучитьЯчейкуКомплектацииПоМестуХранения(Отчет.МестоХранения,ВыборкаДетальныеЗаписи.Элемент);
				Если ЯчейкиКомплектации.КоличествоЯчеек > 0 Тогда
				СписокАналогов.Добавить(ВыборкаДетальныеЗаписи.Элемент,"+(А) "+СокрЛП(ВыборкаДетальныеЗаписи.Элемент.Наименование));
				Иначе
				СписокАналогов.Добавить(ВыборкаДетальныеЗаписи.Элемент,"(А) "+СокрЛП(ВыборкаДетальныеЗаписи.Элемент.Наименование));
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;		
	КонецЦикла;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналогиНормРасходов.Владелец КАК Владелец
	|ИЗ
	|	Справочник.АналогиНормРасходов КАК АналогиНормРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.АналогиНормРасходов.СрезПоследних(&НаДату, ) КАК АналогиНормРасходовСрезПоследних
	|		ПО АналогиНормРасходов.Ссылка = АналогиНормРасходовСрезПоследних.АналогНормыРасходов
	|ГДЕ
	|	АналогиНормРасходов.Элемент = &Элемент
	|	И АналогиНормРасходовСрезПоследних.Норма > 0";
Запрос.УстановитьПараметр("Элемент", МПЗ);
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НормыНР = ОбщегоНазначенияПовтИсп.НормыРасходов_ПолучитьПоследнее(ВыборкаДетальныеЗаписи.Владелец,ТекущаяДата());
		Если НормыНР.Норма > 0 Тогда
			Если ПолучитьСтатус(ВыборкаДетальныеЗаписи.Владелец.Владелец) <> Перечисления.СтатусыСпецификаций.Запрещённая Тогда
				Если СписокАналогов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Владелец.Элемент) = Неопределено Тогда
				СписокАналогов.Добавить(ВыборкаДетальныеЗаписи.Владелец.Элемент,"(О) "+СокрЛП(ВыборкаДетальныеЗаписи.Владелец.Элемент.Наименование));
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;		
	КонецЦикла;
Возврат(СписокАналогов);
КонецФункции

&НаСервере
Процедура ИзменитьЯчейкиКомплектации(МПЗ,Аналог)
	Попытка
	ЯчейкиКомплектации = ОбщийМодульРаботаСРегистрами.ПолучитьЯчейкуКомплектацииПоМестуХранения(Отчет.МестоХранения,МПЗ);
		Если ЯчейкиКомплектации.КоличествоВЯчейке > 0 Тогда
		ЯК = РегистрыСведений.ЯчейкиКомплектации.СоздатьМенеджерЗаписи();
		ЯК.Период = ТекущаяДата();
		ЯК.МестоХранения = Отчет.МестоХранения; 
		ЯК.МПЗ = Аналог;
		ЯК.КоличествоЯчеек = ЯчейкиКомплектации.КоличествоЯчеек;
		ЯК.КоличествоВЯчейке = ЯчейкиКомплектации.КоличествоВЯчейке;
		ЯК.ГруппаРасчёта = ЯчейкиКомплектации.ГруппаРасчёта;
		ЯК.Записать(Истина);
		ЯК = РегистрыСведений.ЯчейкиКомплектации.СоздатьМенеджерЗаписи();
		ЯК.Период = ТекущаяДата();
		ЯК.МестоХранения = Отчет.МестоХранения; 
		ЯК.МПЗ = МПЗ;
		ЯК.КоличествоЯчеек = 0;
		ЯК.КоличествоВЯчейке = 0;
		ЯК.Записать(Истина);
		КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ДобавитьВТаблицуКомплектации(МПЗ)
ЯчейкиКомплектации = ОбщийМодульРаботаСРегистрами.ПолучитьЯчейкуКомплектацииПоМестуХранения(Отчет.МестоХранения,МПЗ);
ТЧ = ТаблицаМПЗ.Добавить();
ТЧ.МПЗ = МПЗ;
ТЧ.Статус = ПолучитьСтатус(МПЗ);
ТЧ.ЕдиницаИзмерения = МПЗ.ЕдиницаИзмерения;
ТЧ.КоличествоЯчеек = ЯчейкиКомплектации.КоличествоЯчеек;
ТЧ.КоличествоВЯчейке = ЯчейкиКомплектации.КоличествоВЯчейке;
ТЧ.ГруппаРасчёта = ЯчейкиКомплектации.ГруппаРасчёта;
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
	ТЧ.КоличествоЯчеекКанбана = МПЗ.КолКанбан;
	КонецЕсли;
КонецПроцедуры
         
&НаСервере
Процедура ЗаменитьНаАналогНаСервере(МПЗ,Аналог)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОборотКанбанов.Период КАК Период,              
	|	ОборотКанбанов.МестоХраненияОтправитель КАК МестоХраненияОтправитель,
	|	ОборотКанбанов.МестоХранения КАК МестоХранения,
	|	ОборотКанбанов.Подразделение КАК Подразделение,
	|	ОборотКанбанов.МПЗ КАК МПЗ,
	|	ОборотКанбанов.НомерЯчейки КАК НомерЯчейки,
	|	ОборотКанбанов.ДатаПринятия КАК ДатаПринятия,
	|	ОборотКанбанов.ДатаПередачи КАК ДатаПередачи,
	|	ОборотКанбанов.ДатаОкончания КАК ДатаОкончания,
	|	ОборотКанбанов.Оформил КАК Оформил,
	|	ОборотКанбанов.Принял КАК Принял,
	|	ОборотКанбанов.Аналог КАК Аналог,
	|	ОборотКанбанов.ДатаЗамены КАК ДатаЗамены
	|ИЗ
	|	РегистрСведений.ОборотКанбанов КАК ОборотКанбанов
	|ГДЕ
	|	ОборотКанбанов.МПЗ = &МПЗ
	|	И ОборотКанбанов.МестоХранения = &МестоХранения
	|	И ОборотКанбанов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)"; 
Запрос.УстановитьПараметр("МестоХранения",Отчет.МестоХранения);
Запрос.УстановитьПараметр("МПЗ",МПЗ);		
РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1; 
		ВыборкаДетальныхЗаписей = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныхЗаписей.Следующий() Цикл			
			НаборЗаписей = РегистрыСведений.ОборотКанбанов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныхЗаписей.Период);
			НаборЗаписей.Отбор.Подразделение.Установить(ВыборкаДетальныхЗаписей.Подразделение);
			НаборЗаписей.Отбор.МестоХранения.Установить(ВыборкаДетальныхЗаписей.МестоХранения);
			НаборЗаписей.Отбор.МестоХраненияОтправитель.Установить(ВыборкаДетальныхЗаписей.МестоХраненияОтправитель);
			НаборЗаписей.Отбор.МПЗ.Установить(ВыборкаДетальныхЗаписей.МПЗ);
			НаборЗаписей.Отбор.НомерЯчейки.Установить(ВыборкаДетальныхЗаписей.НомерЯчейки);
			НаборЗаписей.Записать();
			РОК = РегистрыСведений.ОборотКанбанов.СоздатьМенеджерЗаписи();
			РОК.Период = ВыборкаДетальныхЗаписей.Период;
			РОК.Оформил = ВыборкаДетальныхЗаписей.Оформил;
			РОК.Подразделение = ВыборкаДетальныхЗаписей.Подразделение;
			РОК.МестоХранения = ВыборкаДетальныхЗаписей.МестоХранения;
			РОК.МестоХраненияОтправитель = ВыборкаДетальныхЗаписей.МестоХраненияОтправитель;
			РОК.МПЗ = Аналог;
			РОК.НомерЯчейки = ВыборкаДетальныхЗаписей.НомерЯчейки;
			РОК.Аналог = Истина;
			РОК.ДатаЗамены = ТекущаяДата();
			РОК.ДатаПринятия = ВыборкаДетальныхЗаписей.ДатаПринятия;
			РОК.Принял = ВыборкаДетальныхЗаписей.Принял;
			РОК.Записать();
			КонецЦикла;
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьНаАналог(Команда)
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
	МПЗ = Неопределено;
		Если ВидМПЗ = 1 Тогда
			Если Не ВвестиЗначение(МПЗ,"Выберите МПЗ",Тип("СправочникСсылка.Материалы")) Тогда
			Возврат;
			КонецЕсли; 
		Иначе	
			Если Не ВвестиЗначение(МПЗ,"Выберите МПЗ",Тип("СправочникСсылка.Номенклатура")) Тогда
			Возврат;
			КонецЕсли;	
		КонецЕсли; 
	СписокАналогов = ПодобратьАналоги(МПЗ);
	Аналог = СписокАналогов.ВыбратьЭлемент("Выберите МПЗ");
		Если Аналог <> Неопределено Тогда
			Если Аналог.ПолучитьИдентификатор() > 0 Тогда	
			ИзменитьЯчейкиКомплектации(МПЗ,Аналог.Значение);
			КонецЕсли; 
		ДобавитьВТаблицуКомплектации(Аналог.Значение);	
			Если Вопрос("Заменить в незавершенных оборотах канбанов?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаменитьНаАналогНаСервере(МПЗ,Аналог.Значение);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Процедура ПолучитьАналогиВыбранногоНаСервере(МПЗ)

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьАналогиВыбранного(Команда)
	Если Элементы.ТаблицаМПЗ.ТекущаяСтрока <> Неопределено Тогда
		Если Элементы.ТаблицаМПЗ.ТекущиеДанные.ТаблицаАналогов.Количество() = 0 Тогда
		ПолучитьАналогиВыбранногоНаСервере(Элементы.ТаблицаМПЗ.ТекущиеДанные.МПЗ);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры
