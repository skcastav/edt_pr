
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
тДеревоСпецификации = РеквизитФормыВЗначение("ДеревоСпецификации");
СтрСпец = тДеревоСпецификации.Строки.Добавить();
СтрСпец.МПЗ = Параметры.Спецификация;
СтрСпец.Канбан = Параметры.Спецификация.Канбан;
	Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
	НаДату = Параметры.Документ.ДатаЗапуска;
	Иначе
	НаДату = ТекущаяДата();
	КонецЕсли;	 
ПолучитьСписокЭлементовСпецификации(Параметры.Спецификация,Параметры.Спецификация,СтрСпец,НаДату);
ЗначениеВРеквизитФормы(тДеревоСпецификации, "ДеревоСпецификации");
Элементы.ДеревоСпецификацииМестоХранения.Видимость = Параметры.ПоказыватьОстатки;
Элементы.ДеревоСпецификацииКоличествоНаСкладе.Видимость = Параметры.ПоказыватьОстатки;
КонецПроцедуры

&НаСервере
Функция СортироватьПоПорядку(ТекЗнач)
Перем ТемпНач,ТемпКон;

	Если (ТекЗнач = "")или(Найти(ТекЗнач,"-") > 0) Тогда
	Возврат(ТекЗнач);		
	КонецЕсли;
		Для к = 1 по 3 Цикл
			Если (КодСимвола(Сред(ТекЗнач,к,1)) > 47)и(КодСимвола(Сред(ТекЗнач,к,1)) < 58) Тогда
			ТемпНач = Лев(ТекЗнач,к-1);
			ТекЗнач = СтрЗаменить(ТекЗнач,ТемпНач,"");
				Если Найти(ТекЗнач,".") > 0 Тогда
				ТемпКон = Сред(ТекЗнач,Найти(ТекЗнач,"."));
				ТекЗнач = СтрЗаменить(ТекЗнач,ТемпКон,"");
				КонецЕсли;	                            
			    	Пока СтрДлина(ТекЗнач) < 5 Цикл
			    	ТекЗнач = "#"+ТекЗнач;	
					КонецЦикла;
			ТекЗнач = ТемпНач+ТекЗнач+ТемпКон;		
			Прервать;		
			КонецЕсли;
		КонецЦикла;
Возврат(СокрЛП(ТекЗнач));	
КонецФункции

&НаСервере
Функция ПолучитьКоличествоНаСкладе(МПЗ)
Результат = Новый Структура("МестоХранения,Количество");	
СписокМестХранения = Новый СписокЗначений;

	Если ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
	Подразделение = Параметры.Документ.Линейка.Подразделение;
	СписокМестХранения.Добавить(Параметры.Документ.Линейка.МестоХраненияКанбанов);
	ИначеЕсли ТипЗнч(Параметры.Документ) = Тип("ДокументСсылка.ДвижениеМПЗ") Тогда
	Подразделение = Параметры.Документ.РабочееМесто.Линейка.Подразделение;
	СписокМестХранения.Добавить(Параметры.Документ.РабочееМесто.Линейка.МестоХраненияКанбанов);
	Иначе	
	Подразделение = Параметры.Спецификация.Канбан.Подразделение;
	КонецЕсли;
СписокМестХраненияДляМониторинга = ОбщийМодульВызовСервера.ПолучитьСписокМестХраненияДляМониторинга(Подразделение);
	Для каждого МестоХранения Из СписокМестХраненияДляМониторинга Цикл
		Если СписокМестХранения.НайтиПоЗначению(МестоХранения.Значение) = Неопределено Тогда
		СписокМестХранения.Добавить(МестоХранения.Значение);
		КонецЕсли;
	КонецЦикла;			
СписокМестХранения.Добавить(Подразделение.МестоХраненияПоУмолчанию);				
	Для каждого МестоХранения Из СписокМестХранения Цикл
	КоличествоСклад = ОбщийМодульВызовСервера.ПолучитьОстатокПоМестуХранения(МестоХранения.Значение,МПЗ);
		Если КоличествоСклад > 0 Тогда
		Результат.Количество = КоличествоСклад;
		Результат.МестоХранения = МестоХранения.Значение;
		Возврат(Результат);
		КонецЕсли;
	КонецЦикла;
Возврат(Результат);	
КонецФункции 

&НаСервере
Процедура ДобавитьАналоги(ЭтапСпецификации,НР,СтрЭтап,НаДату)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналогиНормРасходов.Ссылка КАК Ссылка,
	|	АналогиНормРасходов.ВидЭлемента КАК ВидЭлемента,
	|	АналогиНормРасходов.Элемент КАК Элемент,
	|	АналогиНормРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.АналогиНормРасходов.СрезПоследних(&НаДату, ) КАК АналогиНормРасходовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНормРасходов КАК АналогиНормРасходов
	|		ПО АналогиНормРасходовСрезПоследних.АналогНормыРасходов = АналогиНормРасходов.Ссылка
	|ГДЕ
	|	АналогиНормРасходов.Владелец = &Владелец
	|	И АналогиНормРасходовСрезПоследних.Норма > 0";
Запрос.УстановитьПараметр("НаДату", НаДату);
Запрос.УстановитьПараметр("Владелец", НР);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаАНР = РезультатЗапроса.Выбрать();
	Пока ВыборкаАНР.Следующий() Цикл
	Стр = СтрЭтап.Строки.Добавить();
	Стр.НормаРасходов = НР;
	Стр.АналогНормыРасхода = ВыборкаАНР.Ссылка;
	Стр.ВидМПЗ = ВыборкаАНР.ВидЭлемента;
	Стр.МПЗ = ВыборкаАНР.Элемент;
		Если ТипЗнч(ВыборкаАНР.Элемент) = Тип("СправочникСсылка.Номенклатура") Тогда
		Стр.Канбан = ВыборкаАНР.Элемент.Канбан;	
		КонецЕсли;
	Стр.ЭтапСпецификации = ЭтапСпецификации;
	Стр.Аналог = Истина;
		Если Параметры.ПоказыватьОстатки Тогда
		Результат = ПолучитьКоличествоНаСкладе(ВыборкаАНР.Элемент);
		Стр.КоличествоНаСкладе = Результат.Количество;
		Стр.МестоХранения = Результат.МестоХранения;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокЭлементовСпецификации(ЭтапСпецификации,Этап,СтрЭтап,НаДату)
ТаблицаМПЗ = Новый ТаблицаЗначений;

ТаблицаМПЗ.Колонки.Добавить("НР",Новый ОписаниеТипов("СправочникСсылка.НормыРасходов"));
ТаблицаМПЗ.Колонки.Добавить("ПозицияСортировка",Новый ОписаниеТипов("Строка",Новый КвалификаторыСтроки(100)));

Основа = Справочники.НормыРасходов.ПустаяСсылка();
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_М(ЭтапСпецификации,НаДату);
	Пока ВыборкаНР.Следующий() Цикл	
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа Тогда
			Основа = ВыборкаНР.Ссылка;
			Иначе
			Стр = СтрЭтап.Строки.Добавить();
			Стр.НормаРасходов = ВыборкаНР.Ссылка;
			Стр.ВидМПЗ = ВыборкаНР.ВидЭлемента;
			Стр.МПЗ = ВыборкаНР.Элемент;
			Стр.Канбан = ВыборкаНР.Элемент.Канбан;	
			Стр.Позиция = ВыборкаНР.Позиция;
			Стр.ЭтапСпецификации = Этап;
				Если Не ВыборкаНР.Элемент.Канбан.Пустая() Тогда
				Результат = ПолучитьКоличествоНаСкладе(ВыборкаНР.Элемент);
				Стр.КоличествоНаСкладе = Результат.Количество;
				Стр.МестоХранения = Результат.МестоХранения;
				КонецЕсли; 
			ДобавитьАналоги(ЭтапСпецификации,ВыборкаНР.Ссылка,Стр,НаДату);
				Если Не ВыборкаНР.Элемент.Канбан.НеРаскрыватьСпецификациюПриРемонте Тогда
					Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда
					ПолучитьСписокЭлементовСпецификации(ВыборкаНР.Элемент,ЭтапСпецификации,Стр,НаДату);
					Иначе	
					ПолучитьСписокЭлементовСпецификации(ВыборкаНР.Элемент,ВыборкаНР.Элемент,Стр,НаДату);
					КонецЕсли; 
				КонецЕсли;  
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Материалы") Тогда
		ТЧ = ТаблицаМПЗ.Добавить();
		ТЧ.НР = ВыборкаНР.Ссылка;
		ТЧ.ПозицияСортировка = СортироватьПоПорядку(СокрЛП(ВыборкаНР.Позиция));
		КонецЕсли;
	КонецЦикла;	
		Если Не Основа.Пустая() Тогда
		Стр = СтрЭтап.Строки.Добавить();
		Стр.НормаРасходов = Основа;
		Стр.ВидМПЗ = Основа.ВидЭлемента;
		Стр.МПЗ = Основа.Элемент;
		Стр.Канбан = Основа.Элемент.Канбан;
		Стр.ЭтапСпецификации = Этап;
		//ДобавитьАналоги(ЭтапСпецификации,Основа,Стр,НаДату);
		ПолучитьСписокЭлементовСпецификации(Основа.Элемент,Основа.Элемент,Стр,НаДату);
		КонецЕсли;
ТаблицаМПЗ.Сортировать("ПозицияСортировка");
	Для каждого ТЧ Из ТаблицаМПЗ Цикл
	Стр = СтрЭтап.Строки.Добавить();
	Стр.НормаРасходов = ТЧ.НР;
	Стр.ВидМПЗ = ТЧ.НР.ВидЭлемента;
	Стр.МПЗ = ТЧ.НР.Элемент;		
	Стр.Позиция = ТЧ.НР.Позиция;
	Стр.ЭтапСпецификации = Этап;
		Если Параметры.ПоказыватьОстатки Тогда
		Результат = ПолучитьКоличествоНаСкладе(ТЧ.НР.Элемент);
		Стр.КоличествоНаСкладе = Результат.Количество;
		Стр.МестоХранения = Результат.МестоХранения;
		КонецЕсли;
	ДобавитьАналоги(ЭтапСпецификации,ТЧ.НР,Стр,НаДату);
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ВыборРазрешён(СписокНР)
	Для каждого НР Из СписокНР Цикл
		Если ЗначениеЗаполнено(НР.Значение) Тогда
			Если НР.Значение.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда	
			Сообщить("Запрещено выбирать набор в качестве неисправного элемента!");
			Возврат(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
Возврат(Истина);
КонецФункции

&НаКлиенте
Процедура ДеревоСпецификацииВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
СписокСтрок = Новый СписокЗначений;
СписокНР = Новый СписокЗначений;
СписокМПЗ = Новый СписокЗначений;
СписокЭтапы = Новый СписокЗначений;

	Для каждого Стр Из Элементы.ДеревоСпецификации.ВыделенныеСтроки Цикл
	СписокСтрок.Добавить(Стр);
	КонецЦикла; 	
		Для каждого Стр Из СписокСтрок Цикл
		Элементы.ДеревоСпецификации.ТекущаяСтрока = Стр.Значение;	
		СписокНР.Добавить(Элементы.ДеревоСпецификации.ТекущиеДанные.НормаРасходов);
		СписокМПЗ.Добавить(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ);
		СписокЭтапы.Добавить(Элементы.ДеревоСпецификации.ТекущиеДанные.ЭтапСпецификации);
		КонецЦикла; 
			Если ВыборРазрешён(СписокНР) Тогда
			ЭтаФорма.Закрыть(Новый Структура("СписокНР,СписокМПЗ,СписокЭтапы",СписокНР,СписокМПЗ,СписокЭтапы));
			КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура НайтиВДереве(КоллекцияСтрокДереваОдногоУровня)
    Для Каждого Стр Из КоллекцияСтрокДереваОдногоУровня Цикл
        Если ВРег(СокрЛП(Стр.Позиция)) = ВРег(СокрЛП(СтрокаПоиска)) Тогда
       	СписокИдентификаторов.Добавить(Стр.ПолучитьИдентификатор());
        КонецЕсли;
    НайтиВДереве(Стр.ПолучитьЭлементы());
    КонецЦикла;   
КонецПроцедуры

&НаСервере
Процедура НайтиПоПозицииНаСервере()
НайтиВДереве(ДеревоСпецификации.ПолучитьЭлементы());
	Если СписокИдентификаторов.Количество() > 0 Тогда
	Элементы.ДеревоСпецификации.ТекущаяСтрока =  СписокИдентификаторов[0].Значение;
	КонецЕсли; 
КонецПроцедуры 

&НаКлиенте
Процедура НайтиПоПозиции(Команда)
СписокИдентификаторов.Очистить();
ПоказатьВводСтроки(Новый ОписаниеОповещения("НайтиПоПозицииЗавершение", ЭтотОбъект, Новый Структура("СтрокаПоиска", СтрокаПоиска)), СтрокаПоиска,"Введите позицию для поиска",100,Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоПозицииЗавершение(Строка, ДополнительныеПараметры) Экспорт
СтрокаПоиска = ?(Строка = Неопределено, ДополнительныеПараметры.СтрокаПоиска, Строка);
	Если (Строка <> Неопределено) Тогда
	НайтиПоПозицииНаСервере();
	КонецЕсли; 
ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоСпецификации;
КонецПроцедуры

&НаКлиенте
Процедура НайтиДалее(Команда)
ВыбЗнач = СписокИдентификаторов.НайтиПоЗначению(Элементы.ДеревоСпецификации.ТекущаяСтрока);
	Если СписокИдентификаторов.Количество() > 0 Тогда
		Если ВыбЗнач <> Неопределено Тогда
			Если СписокИдентификаторов.Индекс(ВыбЗнач) = СписокИдентификаторов.Количество() - 1 Тогда
			Иден = -1;		
			Иначе	
			Иден = ВыбЗнач.ПолучитьИдентификатор();		
			КонецЕсли;
		Иначе
		Иден = -1;		
		КонецЕсли; 
	КонецЕсли; 
	Для каждого Стр Из СписокИдентификаторов Цикл
		Если Стр.ПолучитьИдентификатор() > Иден Тогда
		Элементы.ДеревоСпецификации.ТекущаяСтрока = Стр.Значение;
		Прервать;		
		КонецЕсли; 
	КонецЦикла;
ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоСпецификации; 	 
КонецПроцедуры

&НаСервере
Процедура НайтиВДеревеПоМПЗ(КоллекцияСтрокДереваОдногоУровня)
    Для Каждого Стр Из КоллекцияСтрокДереваОдногоУровня Цикл
        Если Найти(ВРег(Стр.МПЗ),ВРег(СокрЛП(СтрокаПоиска))) > 0 Тогда
       	СписокИдентификаторов.Добавить(Стр.ПолучитьИдентификатор());
        КонецЕсли;
	НайтиВДеревеПоМПЗ(Стр.ПолучитьЭлементы());
    КонецЦикла;   
КонецПроцедуры

&НаСервере
Процедура НайтиПоСочитаниюНаСервере()
НайтиВДеревеПоМПЗ(ДеревоСпецификации.ПолучитьЭлементы());
	Если СписокИдентификаторов.Количество() > 0 Тогда
	Элементы.ДеревоСпецификации.ТекущаяСтрока =  СписокИдентификаторов[0].Значение;
	КонецЕсли; 
КонецПроцедуры 

&НаКлиенте
Процедура НайтиПоСочетанию(Команда)
СписокИдентификаторов.Очистить();
ПоказатьВводСтроки(Новый ОписаниеОповещения("НайтиПоСочетаниюЗавершение", ЭтотОбъект, Новый Структура("СтрокаПоиска", СтрокаПоиска)), СтрокаПоиска,"Введите строку для поиска",100,Ложь); 
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоСочетаниюЗавершение(Строка, ДополнительныеПараметры) Экспорт
СтрокаПоиска = ?(Строка = Неопределено, ДополнительныеПараметры.СтрокаПоиска, Строка);
	Если (Строка <> Неопределено) Тогда
	НайтиПоСочитаниюНаСервере();
	КонецЕсли;
ЭтаФорма.ТекущийЭлемент = Элементы.ДеревоСпецификации;
КонецПроцедуры
