
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если РольДоступна("АРМ_Ремонтник") Тогда
	Элементы.Подтверждено.Доступность = Ложь;
	КонецЕсли; 
		Если Константы.КодБазы.Получить() = "ХРК" Тогда
		Элементы.СоздатьМТКРазукомплектовка.Видимость = Ложь;
		КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Объект.Проведен Тогда
	ЭтаФорма.ТолькоПросмотр = Истина;
	Элементы.КнопкиУправления.Доступность = Ложь;
	Элементы.ДобавитьНеисправныйЭлемент.Доступность = Ложь;
	Элементы.ДобавитьЗаменяемыйЭлемент.Доступность = Ложь;	
	Иначе	
		Если Не ЗначениеЗаполнено(Объект.ДатаНачала) Тогда
		ЭтаФорма.ТолькоПросмотр = Истина;
		Элементы.КнопкиУправления.Доступность = Ложь;
		Элементы.ДобавитьНеисправныйЭлемент.Доступность = Ложь;
		Элементы.ДобавитьЗаменяемыйЭлемент.Доступность = Ложь;
		КонецЕсли; 
	КонецЕсли; 
ВидРемонтаПриИзменении(Неопределено);
КодDanfoss = ОбщийМодульВызовСервера.ПолучитьКодDanfoss(Объект.БарКод);
МАС = ОбщийМодульВызовСервера.ПолучитьMACАдрес(Объект.БарКод);
IMEI = ОбщийМодульВызовСервера.ПолучитьIMEI(Объект.БарКод);
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
    ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
    Сообщить(ТекстСообщения);
   	КонецЕсли; 
ЗаполнитьТаблицуРазукомплектовки();
КонецПроцедуры  

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры 

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если ЭтаФорма.ВводДоступен() Тогда
		Если СтрДлина(Данные) = 4 Тогда
		Объект.ВозвратнаяТара = Данные;		
		Иначе	
		СчитатьIMEI(Неопределено,СокрЛП(Данные));		
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры
  
&НаСервере             
Процедура ЗаполнитьТаблицуРазукомплектовки()
	Для каждого ТЧ Из Объект.Разукомплектовка Цикл
		Если ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если Не ТЧ.МПЗ.Канбан.Пустая() Тогда
			ТЧ.ТребуетсяМТК = ТЧ.МПЗ.Канбан.ПриЗаменеСоздаватьМТК; 
			Иначе
            ТЧ.ТребуетсяМТК = Ложь;
			КонецЕсли;
		Иначе
	    ТЧ.ТребуетсяМТК = Ложь;
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Процедура ДокументОснованиеПриИзмененииНаСервере()
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
	Объект.Изделие = Объект.ДокументОснование.Изделие;
	Объект.Количество = Объект.ДокументОснование.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеПриИзменении(Элемент)
ДокументОснованиеПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьГруппуПричинРемонта(РабочееМесто)
Возврат(РабочееМесто.ГруппаРабочихМест.ГруппаПричинРемонта);
КонецФункции

&НаКлиенте
Процедура ПричинаРемонтаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
ОткрытьФорму("Справочник.ПричиныРемонта.Форма.ФормаВыбораПоГруппе",Новый Структура("Родитель",ПолучитьГруппуПричинРемонта(Объект.РабочееМесто)),,,,, Новый ОписаниеОповещения("ПричинаРемонтаНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ПричинаРемонтаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	Объект.ПричинаРемонта = Результат;
	КонецЕсли;
КонецПроцедуры
                                            
&НаСервере
Функция ПроверитьПравильностьЗаполненияОтложенного()
	Если Объект.ВидРемонта = Перечисления.ВидыРемонта.Разукомплектовка Тогда	
		Для каждого ТЧ Из Объект.Разукомплектовка Цикл
			Если ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если Не ТЧ.МПЗ.Канбан.Пустая() Тогда
					Если ТЧ.МПЗ.Канбан.ПриЗаменеСоздаватьМТК Тогда
						Если ТЧ.Документ.Пустая() Тогда
						Сообщить("Не создана ремонтная МТК!");	
						Возврат(Ложь);
						КонецЕсли;			
					КонецЕсли; 
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли; 
Возврат(Истина);
КонецФункции

&НаКлиенте
Процедура Отложить(Команда)
	Если ПроверитьПравильностьЗаполненияОтложенного() Тогда
		Если Не ЗначениеЗаполнено(Объект.ДатаОтложен) Тогда
		Объект.ДатаОтложен = ТекущаяДата();
		КонецЕсли;
	ЭтаФорма.Записать();
	ЭтаФорма.Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СписаниеНеремонтопригодныхИзделий()


КонецФункции

&НаСервере
Функция СоздатьПеремещениеНаЛинейку()
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Перемещение = Документы.ДвижениеМПЗ.СоздатьДокумент();
	Перемещение.Дата = ТекущаяДата();
	Перемещение.УстановитьНовыйНомер(ПрисвоитьПрефикс(Объект.Линейка.Подразделение));
	Перемещение.Автор = ПараметрыСеанса.Пользователь;
	Перемещение.ДокументОснование = Объект.Ссылка;
	Перемещение.Подразделение = Объект.Линейка.Подразделение;
	Перемещение.МестоХранения = Объект.Линейка.Подразделение.МестоХраненияРемонта;
		Если Объект.ДокументОснование.ДокументОснование.МестоХраненияПотребитель.Пустая() Тогда
		Перемещение.МестоХраненияВ = Объект.Линейка.МестоХраненияГП;
		Иначе
		Перемещение.МестоХраненияВ = Объект.ДокументОснование.ДокументОснование.МестоХраненияПотребитель;
		КонецЕсли;
	ТЧ = Перемещение.ТабличнаяЧасть.Добавить();
	ТЧ.ВидМПЗ = Перечисления.ВидыМПЗ.Полуфабрикаты;
	ТЧ.МПЗ = Объект.Изделие;
	ТЧ.Количество = Объект.Количество/Объект.Изделие.ОсновнаяЕдиницаИзмерения.Коэффициент;
	ТЧ.ЕдиницаИзмерения =  Объект.Изделие.ОсновнаяЕдиницаИзмерения;	
	Перемещение.Записать(РежимЗаписиДокумента.Проведение);
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);	
КонецФункции

&НаСервере
Функция ФлагРемонтаУстановлен(ПЗ)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ = &ПЗ
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ИСТИНА";
Запрос.УстановитьПараметр("ПЗ", ПЗ);
РезультатЗапроса = Запрос.Выполнить();
Возврат(Не РезультатЗапроса.Пустой());
КонецФункции

&НаСервере
Функция СоздатьПеремещенияНаСкладБрака()
	Попытка
	Перемещение = Документы.ДвижениеМПЗ.СоздатьДокумент();
	Перемещение.Дата = ТекущаяДата();
	Перемещение.УстановитьНовыйНомер(ПрисвоитьПрефикс(Объект.Линейка.Подразделение));
	Перемещение.Автор = ПараметрыСеанса.Пользователь;
	Перемещение.ДокументОснование = Объект.Ссылка;
	Перемещение.Подразделение = Объект.Линейка.Подразделение;
	Перемещение.МестоХранения = Объект.Линейка.МестоХраненияКанбанов;
	Перемещение.МестоХраненияВ = Объект.Линейка.Подразделение.МестоХраненияБрака;
		Для каждого ТЧ Из Объект.ЗаменяемыеЭлементы Цикл
			Если ТипЗнч(ТЧ.Документ) = Тип("ДокументСсылка.МаршрутнаяКарта") Тогда
			ТЧ_МПЗ = Перемещение.ТабличнаяЧасть.Добавить();
			ТЧ_МПЗ.ВидМПЗ = Перечисления.ВидыМПЗ.Полуфабрикаты;
			ТЧ_МПЗ.МПЗ = ТЧ.Документ.Номенклатура;
			ТЧ_МПЗ.Количество = ТЧ.Документ.Количество/ТЧ.Документ.Номенклатура.ОсновнаяЕдиницаИзмерения.Коэффициент;
			ТЧ_МПЗ.ЕдиницаИзмерения =  ТЧ.Документ.Номенклатура.ОсновнаяЕдиницаИзмерения;
			КонецЕсли;		
		КонецЦикла;
			Если Перемещение.ТабличнаяЧасть.Количество() > 0 Тогда
			Перемещение.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли; 	
	Исключение
	Сообщить(ОписаниеОшибки());
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции 

&НаСервере
Функция ЗавершитьНаСервере()
	Если Объект.ВидРемонта = Перечисления.ВидыРемонта.Разукомплектовка Тогда
	ЭПЗ = РегистрыСведений.ЭтапыПроизводственныхЗаданий.ПолучитьПоследнее(ТекущаяДата(),Новый Структура("ПЗ",Объект.ДокументОснование));
		Если ЭПЗ.Ремонт Тогда
		флНайдено = Ложь;
		Выборка = РегистрыСведений.ЭтапыПроизводственныхЗаданий.Выбрать(,,Новый Структура("ПЗ",Объект.ДокументОснование));
			Пока Выборка.Следующий() Цикл
			МенеджерЗаписи = Выборка.ПолучитьМенеджерЗаписи();
			МенеджерЗаписи.Прочитать();
			ПрефиксРМ = СокрЛП(МенеджерЗаписи.РабочееМесто.ГруппаРабочихМест.Префикс);
		   		Если МенеджерЗаписи.РабочееМесто = Объект.РабочееМестоРазукомплектовки Тогда
				флНайдено = Истина;
					Если СокрЛП(Объект.РабочееМестоРазукомплектовки.ГруппаРабочихМест.Префикс) = "СТ" Тогда
					СуществующийСП = РегистрыСведений.СтендовыйПрогон.ПолучитьПоследнее(,Новый Структура("ПЗ",Объект.ДокументОснование));
					СП = РегистрыСведений.СтендовыйПрогон.СоздатьМенеджерЗаписи();
					СП.Период = ТекущаяДата();
					СП.ПЗ = Объект.ДокументОснование;
					СП.Изделие = Объект.ДокументОснование.Изделие;
					СП.БарКод = Объект.ДокументОснование.БарКод;
					СП.Стенд = Объект.РабочееМестоРазукомплектовки.Стенд;
					СП.Прогон = СуществующийСП.Прогон+1;
					СП.ИсполнительПоступление = Объект.РабочееМестоРазукомплектовки.Стенд.Исполнитель;
					СП.ДатаПоступления = ТекущаяДата();
					СП.ИсполнительПостановка = Объект.РабочееМестоРазукомплектовки.Стенд.Исполнитель;
					СП.ДатаПостановки = ТекущаяДата();
					СП.Записать();
					МенеджерЗаписи.ДатаОкончания = Дата(1,1,1);
					МенеджерЗаписи.Ремонт = Ложь;
					МенеджерЗаписи.Записать();
					Иначе
					МенеджерЗаписи.Исполнитель = Справочники.Сотрудники.ПустаяСсылка();
					МенеджерЗаписи.ДатаНачала = Дата(1,1,1);
					МенеджерЗаписи.ДатаОкончания = Дата(1,1,1);	
					МенеджерЗаписи.Ремонт = Ложь;
					МенеджерЗаписи.Записать();
					КонецЕсли; 
				Выпуск = Документы.ВыпускПродукции.НайтиПоНомеру(СокрЛП(Объект.ДокументОснование.Номер)+"-"+ПрефиксРМ,Объект.Дата);
					Если Не Выпуск.Пустая() Тогда
					ДокВыпуск = Выпуск.ПолучитьОбъект();					
					ДокВыпуск.Удалить();
					Иначе
					Выпуск = Документы.ВыпускПродукции.НайтиПоНомеру(СокрЛП(Объект.ДокументОснование.Номер)+"-"+ПрефиксРМ,НачалоГода(ТекущаяДата())-1);
						Если Не Выпуск.Пустая() Тогда
						ДокВыпуск = Выпуск.ПолучитьОбъект();					
						ДокВыпуск.Удалить();
						КонецЕсли;
					КонецЕсли;
				Иначе
					Если флНайдено Тогда
					Выпуск = Документы.ВыпускПродукции.НайтиПоНомеру(СокрЛП(Объект.ДокументОснование.Номер)+"-"+ПрефиксРМ,Объект.Дата);
						Если Не Выпуск.Пустая() Тогда
						ДокВыпуск = Выпуск.ПолучитьОбъект();					
						ДокВыпуск.Удалить();
						Иначе
						Выпуск = Документы.ВыпускПродукции.НайтиПоНомеру(СокрЛП(Объект.ДокументОснование.Номер)+"-"+ПрефиксРМ,НачалоГода(ТекущаяДата())-1);
							Если Не Выпуск.Пустая() Тогда
							ДокВыпуск = Выпуск.ПолучитьОбъект();					
							ДокВыпуск.Удалить();
							КонецЕсли;
						КонецЕсли; 
					МенеджерЗаписи.Удалить();	
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли; 
	ИначеЕсли Объект.ВидРемонта <> Перечисления.ВидыРемонта.БракКанбан Тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
			Если ФлагРемонтаУстановлен(Объект.ДокументОснование) Тогда
				Попытка
				НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
					Если Не СоздатьПеремещенияНаСкладБрака() Тогда
					Сообщить("Документ перемещения по МТК не создан!");
					ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
					Возврат(Ложь);
					КонецЕсли;
						Если СокрЛП(Объект.РабочееМесто.ГруппаРабочихМест.Префикс) = "БФ" Тогда
						РабочиеМеста = Справочники.РабочиеМестаЛинеек.Выбрать(,,Новый Структура("Линейка",Объект.Линейка));
						ВыбРабочееМесто = Неопределено;
							Пока РабочиеМеста.Следующий() Цикл
								Если РабочиеМеста.ЭтоГруппа Тогда
								Продолжить;		
								КонецЕсли;
									Если СокрЛП(РабочиеМеста.ГруппаРабочихМест.Префикс) = "СТ" Тогда	
										Если РабочиеМеста.Стенд.СБуфером Тогда
										ВыбРабочееМесто = РабочиеМеста.Ссылка;
										Прервать;						
										КонецЕсли; 
									КонецЕсли; 
							КонецЦикла;
								Если ВыбРабочееМесто = Неопределено Тогда
								Сообщить("Рабочее место <Стенд с буфером> не найдено в выбранной линейке!");
								ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
								Возврат(Ложь);
								КонецЕсли; 
						Иначе
						ВыбРабочееМесто = Объект.РабочееМесто;
						КонецЕсли;
				ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(Объект.ДокументОснование,Новый Структура("РабочееМесто,Ремонт",ВыбРабочееМесто,Ложь));
					Если СокрЛП(ВыбРабочееМесто.ГруппаРабочихМест.Префикс) = "СТ" Тогда
					СуществующийСП = РегистрыСведений.СтендовыйПрогон.ПолучитьПоследнее(,Новый Структура("ПЗ",Объект.ДокументОснование));
					СП = РегистрыСведений.СтендовыйПрогон.СоздатьМенеджерЗаписи();
					СП.Период = ТекущаяДата();
					СП.ПЗ = Объект.ДокументОснование;
					СП.Изделие = Объект.Изделие;
					СП.БарКод = Объект.БарКод;
					СП.Стенд = ВыбРабочееМесто.Стенд;
					СП.Прогон = СуществующийСП.Прогон+1;
					СП.ИсполнительПоступление = ВыбРабочееМесто.Стенд.Исполнитель;
					СП.ДатаПоступления = ТекущаяДата();
					СП.ИсполнительПостановка = ВыбРабочееМесто.Стенд.Исполнитель;
					СП.ДатаПостановки = ТекущаяДата();
					СП.Записать();		
					КонецЕсли; 
						//Если Объект.ВидРемонта = Перечисления.ВидыРемонта.Канбан Тогда
						//	Если Не Объект.Линейка.Подразделение.МестоХраненияРемонта.Пустая() Тогда
						//		Если Не СоздатьПеремещениеНаЛинейку() Тогда
						//		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
						//		Возврат(Ложь);
						//		КонецЕсли; 
						//	КонецЕсли; 
						//КонецЕсли;
				ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
				Исключение
				Сообщить(ОписаниеОшибки());
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат(Ложь);
				КонецПопытки;			 
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
Возврат(Истина);
КонецФункции

&НаСервере 
Функция МТКЗавершены()
	Для каждого ТЧ Из Объект.ЗаменяемыеЭлементы Цикл
	 	Если ТипЗнч(ТЧ.Документ) = Тип("ДокументСсылка.МаршрутнаяКарта") Тогда
			Если ТЧ.Документ.Статус <> 3 Тогда
			Возврат(Ложь);
			КонецЕсли; 
		КонецЕсли;	
	КонецЦикла; 
Возврат(Истина);
КонецФункции

&НаСервере 
Функция СоздатьСписаниеРазукомплектовки()
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Списание = Документы.СписаниеМПЗПрочее.СоздатьДокумент();
	Списание.Дата = ТекущаяДата();
	Списание.УстановитьНовыйНомер(ПрисвоитьПрефикс(Объект.Подразделение));
	Списание.Автор = ПараметрыСеанса.Пользователь;
	Списание.ДокументОснование = Объект.Ссылка;
	Списание.Подразделение = Объект.Подразделение;
	Списание.МестоХранения = Объект.Линейка.МестоХраненияКанбанов;
	Списание.Статья = Справочники.СтатьиПоступленийСписанийПрочих.НайтиПоНаименованию("Переделка/Модернизация полуфабрикатов и ГП",Истина);
	Списание.Утвердил = Объект.Подразделение.Руководитель;
	Списание.Комментарий = "Списание элементов разукомплектовки"; 
		Для каждого ТЧ Из Объект.Разукомплектовка Цикл
		ТЧ_С = Списание.ТабличнаяЧасть.Добавить();
			Если ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Материалы") Тогда
			ТЧ_С.ВидМПЗ = Перечисления.ВидыМПЗ.Материалы;
			Иначе				
			ТЧ_С.ВидМПЗ = Перечисления.ВидыМПЗ.Полуфабрикаты;
			КонецЕсли; 
		ТЧ_С.МПЗ = ТЧ.МПЗ;
		ТЧ_С.Количество = ТЧ.Количество;
		ТЧ_С.ЕдиницаИзмерения = ТЧ.ЕдиницаИзмерения;
		КонецЦикла;
	Списание.Записать(РежимЗаписиДокумента.Проведение);
	Объект.ДокументСписания = Списание.Ссылка;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции

&НаСервере
Функция ПроверитьПравильностьЗаполнения()
	Если Объект.Неисправности.Количество() = 0 Тогда
	Сообщить("Не заполнена таблица неисправностей!");
	Возврат(Ложь);
	КонецЕсли; 
		Если Объект.ВидРемонта = Перечисления.ВидыРемонта.Разукомплектовка Тогда	
			Если ЗначениеЗаполнено(Объект.РабочееМестоРазукомплектовки) Тогда
				Если Объект.Разукомплектовка.Количество() > 0 Тогда
					Для каждого ТЧ Из Объект.Разукомплектовка Цикл
						Если ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
							Если Не ТЧ.МПЗ.Канбан.Пустая() Тогда
								Если ТЧ.МПЗ.Канбан.ПриЗаменеСоздаватьМТК Тогда
									Если Не ТЧ.Документ.Пустая() Тогда
										Если ТЧ.Документ.Статус <> 3 Тогда
										Сообщить("Не завершена ремонтная МТК!");
										Возврат(Ложь);
										КонецЕсли;
									Иначе
									Сообщить("Не создана ремонтная МТК!");	
									Возврат(Ложь);
									КонецЕсли;			
								КонецЕсли; 
							КонецЕсли;	
						КонецЕсли;
					КонецЦикла;
						Если Не СоздатьСписаниеРазукомплектовки() Тогда				
						Сообщить("Списание элементов разукомплектовки не создано!");
						Возврат(Ложь);				
						КонецЕсли;
				КонецЕсли; 
			Иначе	
			Сообщить("Не заполнено рабочее место разукомплектовки!");
			Возврат(Ложь);
			КонецЕсли; 
		КонецЕсли; 
Возврат(Истина);
КонецФункции

&НаКлиенте
Процедура Завершить(Команда)
ПоказатьВопрос(Новый ОписаниеОповещения("ЗавершитьЗавершение", ЭтотОбъект), "Вы уверены, что завершили все работы по ремонтной карте?", РежимДиалогаВопрос.ДаНет); 
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ПроверитьПравильностьЗаполнения() Тогда
			Если МТКЗавершены() Тогда
				Если ЗавершитьНаСервере() Тогда
				Объект.ДатаОкончания = ТекущаяДата();
				ЭтаФорма.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
				ЭтаФорма.Закрыть();
				КонецЕсли;
			Иначе
			Сообщить("Имеются незавершённые МТК!");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДатуСпецификации()
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
	Возврат(Объект.ДокументОснование.ДатаЗапуска);
	Иначе	
	Возврат(ТекущаяДата());
	КонецЕсли; 
КонецФункции

&НаСервере
Процедура ДобавитьНеисправныйЭлементНаСервере(СписокНР,СписокМПЗ)
	Для к = 0 по СписокНР.Количество()-1 Цикл
	ТЧ = Объект.Неисправности.Добавить();
	ТЧ.НеисправныйМПЗ = СписокМПЗ[к].Значение;
		Если ЗначениеЗаполнено(СписокНР[к].Значение) Тогда
		ТЧ.ПозицияНеисправногоМПЗ = СписокНР[к].Значение.Позиция;
		//ТЧ.Количество = Объект.Количество*РегистрыСведений.НормыРасходов.ПолучитьПоследнее(ПолучитьДатуСпецификации(),Новый Структура("НормаРасходов",СписокНР[к].Значение)).Норма;
		//Иначе
		//ТЧ.Количество = Объект.Количество;
		КонецЕсли;
	ТЧ.Количество = 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНеисправныйЭлемент(Команда)
ОткрытьФорму("Документ.РемонтнаяКарта.Форма.ВыборЭлементаПриРемонте",Новый Структура("Документ,Спецификация,ПоказыватьОстатки",Объект.ДокументОснование,Объект.Изделие,Ложь),,,,, Новый ОписаниеОповещения("ДобавитьНеисправныйЭлементЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНеисправныйЭлементЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда	
	ДобавитьНеисправныйЭлементНаСервере(Результат.СписокНР,Результат.СписокМПЗ);
	ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НеисправностиНеисправныйМПЗПриИзмененииНаСервере(Стр)
ТЧ = Объект.Неисправности.НайтиПоИдентификатору(Стр);
ТЧ.ЭтапЖизненногоЦикла = ОбщийМодульВызовСервера.ПолучитьЭтапЖизненногоЦикла(ТЧ.НеисправныйМПЗ);
ТЧ.Количество = Объект.Количество;
КонецПроцедуры

&НаКлиенте
Процедура НеисправностиНеисправныйМПЗПриИзменении(Элемент)
НеисправностиНеисправныйМПЗПриИзмененииНаСервере(Элементы.Неисправности.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ДобавитьМестоНахожденияБракаНаСервере(Стр,СписокНР,СписокМПЗ,СписокЭтапы)
ТЧ = Объект.Неисправности.НайтиПоИдентификатору(Стр);
	Для к = 0 по СписокНР.Количество()-1 Цикл
		Если к = 0 Тогда
		ТЧ.МестоНахожденияБрака = СписокМПЗ[к].Значение;
			Если ЗначениеЗаполнено(СписокНР[к].Значение) Тогда
			ТЧ.ЭтапЖизненногоЦикла = ОбщийМодульВызовСервера.ПолучитьЭтапЖизненногоЦикла(СписокЭтапы[к].Значение);
			ТЧ.ПозицияМестаНахожденияБрака = СписокНР[к].Значение.Позиция;
			//ТЧ.Количество = Объект.Количество*РегистрыСведений.НормыРасходов.ПолучитьПоследнее(ПолучитьДатуСпецификации(),Новый Структура("НормаРасходов",СписокНР[к].Значение)).Норма;
			ТЧ.Количество = 1;
			Иначе
			//ТЧ.Количество = Объект.Количество;
			ТЧ.Количество = 1;
			КонецЕсли;
		Иначе
		ТЧ_Новая = Объект.Неисправности.Добавить();	
		ТЧ_Новая.НеисправныйМПЗ = ТЧ.НеисправныйМПЗ;
		ТЧ_Новая.ПозицияНеисправногоМПЗ = ТЧ.ПозицияНеисправногоМПЗ;
		ТЧ_Новая.ВидБрака = ТЧ.ВидБрака; 
		ТЧ_Новая.МестоНахожденияБрака = СписокМПЗ[к].Значение;
			Если ЗначениеЗаполнено(СписокНР[к].Значение) Тогда
			ТЧ_Новая.ЭтапЖизненногоЦикла = ОбщийМодульВызовСервера.ПолучитьЭтапЖизненногоЦикла(СписокЭтапы[к].Значение);
			ТЧ_Новая.ПозицияМестаНахожденияБрака = СписокНР[к].Значение.Позиция;
			//ТЧ_Новая.Количество = Объект.Количество*РегистрыСведений.НормыРасходов.ПолучитьПоследнее(ПолучитьДатуСпецификации(),Новый Структура("НормаРасходов",СписокНР[к].Значение)).Норма;
			ТЧ_Новая.Количество = 1;
			Иначе
			//ТЧ_Новая.Количество = Объект.Количество;
			ТЧ_Новая.Количество = 1;                               
			КонецЕсли;	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НеисправностиМестоНахожденияБракаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.Неисправности.ТекущиеДанные.ВидБрака) Тогда
		Если ТипЗнч(Элементы.Неисправности.ТекущиеДанные.НеисправныйМПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
		ОткрытьФорму("Документ.РемонтнаяКарта.Форма.ВыборЭлементаПриРемонте",Новый Структура("Документ,Спецификация,ПоказыватьОстатки",Объект.ДокументОснование,Элементы.Неисправности.ТекущиеДанные.НеисправныйМПЗ,Ложь),,,,, Новый ОписаниеОповещения("НеисправностиМестоНахожденияБракаНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		КонецЕсли;
	Иначе
	Сообщить("Выберите вид брака!");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура НеисправностиМестоНахожденияБракаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда	
	ДобавитьМестоНахожденияБракаНаСервере(Элементы.Неисправности.ТекущаяСтрока,Результат.СписокНР,Результат.СписокМПЗ,Результат.СписокЭтапы);
	ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаменяемыйЭлементНаСервере(СписокНР,СписокМПЗ)
	Для к = 0 по СписокНР.Количество()-1 Цикл
		Если ЗначениеЗаполнено(СписокНР[к].Значение) Тогда
		ТЧ = Объект.ЗаменяемыеЭлементы.Добавить();
		ТЧ.НормаРасхода = СписокНР[к].Значение;
		ТЧ.МПЗ = СписокМПЗ[к].Значение;
		ТЧ.Количество = Объект.Количество*РегистрыСведений.НормыРасходов.ПолучитьПоследнее(ПолучитьДатуСпецификации(),Новый Структура("НормаРасходов",СписокНР[к].Значение)).Норма;
		ТЧ.ЕдиницаИзмерения = СписокМПЗ[к].Значение.ОсновнаяЕдиницаИзмерения;
		Иначе
		Сообщить("Запрещено выбирать изделие ремонта в качестве заменяемого элемента!");	
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЭтоКанбан(МПЗ)
Возврат(ЗначениеЗаполнено(МПЗ.Канбан));
КонецФункции

&НаКлиенте
Процедура ДобавитьЗаменяемыйЭлемент(Команда)
ОткрытьФорму("Документ.РемонтнаяКарта.Форма.ВыборЭлементаПриРемонте",Новый Структура("Документ,Спецификация,ПоказыватьОстатки",Объект.ДокументОснование,Объект.Изделие,Истина),,,,, Новый ОписаниеОповещения("ДобавитьЗаменяемыйЭлементЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс); 
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаменяемыйЭлементЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	ДобавитьЗаменяемыйЭлементНаСервере(Результат.СписокНР,Результат.СписокМПЗ);
	ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьОсновнуюЕИ(МПЗ)
Возврат(МПЗ.ОсновнаяЕдиницаИзмерения);	
КонецФункции

&НаКлиенте
Процедура ДобавитьСписываемыеЭлементы(Команда)
Объект.Разукомплектовка.Очистить();
ОткрытьФорму("Документ.РемонтнаяКарта.Форма.ФормаРазукомплектовка",Новый Структура("Документ,Спецификация",Объект.ДокументОснование,Объект.Изделие),,,,, Новый ОписаниеОповещения("ДобавитьСписываемыеЭлементыЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСписываемыеЭлементыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Для каждого МПЗ Из Результат.СписокСписания Цикл
		ТЧ = Объект.Разукомплектовка.Добавить();
		ТЧ.МПЗ = МПЗ.Значение;
		ТЧ.Количество = Число(МПЗ.Представление)*Объект.Количество;
		ТЧ.ЕдиницаИзмерения = ПолучитьОсновнуюЕИ(МПЗ.Значение);
		КонецЦикла;
	ЗаполнитьТаблицуРазукомплектовки();
	ЭтаФорма.Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СчитатьIMEIНаСервере(IMEI)
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
		Попытка				
		НаборЗаписей = РегистрыСведений.БарКоды.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(Объект.ДокументОснование);
		НаборЗаписей.Прочитать();
		    Для Каждого Запись Из НаборЗаписей Цикл 
			Запись.IMEI = IMEI; 
		    КонецЦикла;
		НаборЗаписей.Записать(Истина);
		Сообщить("Присвоен новый код IMEI: "+IMEI);
		Исключение
		Сообщить(ОписаниеОшибки());
		КонецПопытки;
	Иначе
	Сообщить("Нет производственного задания!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СчитатьIMEI(Команда,КодIMEI = "")
ПоказатьВводСтроки(Новый ОписаниеОповещения("СчитатьIMEIЗавершение", ЭтотОбъект, Новый Структура("КодIMEI", КодIMEI)), КодIMEI,"Введите IMEI",0); 		
КонецПроцедуры

&НаКлиенте
Процедура СчитатьIMEIЗавершение(Строка, ДополнительныеПараметры) Экспорт
КодIMEI = ?(Строка = Неопределено, ДополнительныеПараметры.КодIMEI, Строка);
	Если ЗначениеЗаполнено(КодIMEI) Тогда
		Если Найти(КодIMEI,"IMEI:") > 0 Тогда
		КодIMEI = Сред(КодIMEI,Найти(КодIMEI,"IMEI:")+5);
		IMEI = Лев(КодIMEI,Найти(КодIMEI,";")-1);
		Иначе	
		IMEI = КодIMEI;
		КонецЕсли;
	СчитатьIMEIНаСервере(IMEI);		
	Иначе
	Сообщить("Введите код IMEI!");
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Процедура ВидРемонтаПриИзмененииСервере()
	Если Объект.ВидРемонта = Перечисления.ВидыРемонта.Разукомплектовка Тогда	
	Элементы.ГруппаРазукомплектовка.Видимость = Истина;
	Элементы.ГруппаЗаменяемыеЭлементы.Видимость = Ложь;		
	Иначе
	Элементы.ГруппаРазукомплектовка.Видимость = Ложь;
	Элементы.ГруппаЗаменяемыеЭлементы.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидРемонтаПриИзменении(Элемент)
ВидРемонтаПриИзмененииСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьПроизводственноеЗадание()
	Если Объект.ДокументОснование <> Неопределено Тогда
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда	
		Возврат(Объект.ДокументОснование);
		Иначе
		Возврат(Объект.ДокументОснование.ДокументОснование);
		КонецЕсли;
	Иначе
	Возврат(Документы.ПроизводственноеЗадание.ПустаяСсылка());
	КонецЕсли;
КонецФункции 

&НаКлиенте
Процедура ПечатьСпецификации(Команда)
ОткрытьФорму("Отчет.ПечатьСпецификации.Форма.ФормаОтчета",Новый Структура("ПЗ",ПолучитьПроизводственноеЗадание()));
КонецПроцедуры

&НаСервере
Функция ПечатьЗаменаЭлементовРемонтаНаСервере()
ТабДок = Новый ТабличныйДокумент;

ОбъектЗн = РеквизитФормыВЗначение("Объект");
Макет = ОбъектЗн.ПолучитьМакет("Макет");

ОблШапка = Макет.ПолучитьОбласть("Шапка");
ОблСтрока = Макет.ПолучитьОбласть("Строка");

ОблШапка.Параметры.РемонтнаяКарта = Объект.Ссылка; 
ТабДок.Вывести(ОблШапка);
	Для каждого ТЧ Из Объект.ЗаменяемыеЭлементы Цикл
	ОблСтрока.Параметры.МПЗ = СокрЛП(ТЧ.МПЗ.Наименование);
	ОблСтрока.Параметры.Количество = ТЧ.Количество;
  	ОблСтрока.Параметры.ЕдиницаИзмерения = СокрЛП(ТЧ.ЕдиницаИзмерения.Наименование);
	ОблСтрока.Параметры.Документ = ТЧ.Документ;
		Если ТипЗнч(ТЧ.Документ) = Тип("ДокументСсылка.МаршрутнаяКарта") Тогда
		ОблСтрока.Параметры.МестоХранения = СокрЛП(ТЧ.Документ.Линейка.МестоХраненияКанбанов.Наименование);
		Иначе	
		ОблСтрока.Параметры.МестоХранения = СокрЛП(ТЧ.Документ.МестоХранения.Наименование);
		КонецЕсли;
	ТабДок.Вывести(ОблСтрока);
	КонецЦикла; 
Возврат(ТабДок);
КонецФункции

&НаКлиенте
Процедура ПечатьЗаменаЭлементовРемонта(Команда)
ТД = ПечатьЗаменаЭлементовРемонтаНаСервере();
ТД.Показать("Перечень заменяемых элементов при ремонте");
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
Отказ = Не ЭтаФорма.ПроверитьЗаполнение();
КонецПроцедуры

&НаСервере
Процедура УстановитьВидБракаНаСервере(Стр,ВидБрака)
ТЧ = Объект.Неисправности.НайтиПоИдентификатору(Стр);
ТЧ.ВидБрака = ВидБрака;
	Если ЗначениеЗаполнено(ТЧ.ВидБрака.ЭтапЖизненногоЦикла) Тогда
	ТЧ.ЭтапЖизненногоЦикла = ТЧ.ВидБрака.ЭтапЖизненногоЦикла;
	Иначе
		Если ТипЗнч(ТЧ.НеисправныйМПЗ) = Тип("СправочникСсылка.Материалы") Тогда
		ВерхнийРодитель = ПолучитьВерхнегоРодителя(ТЧ.НеисправныйМПЗ);
		ТЧ.ЭтапЖизненногоЦикла = ВерхнийРодитель.ЭтапЖизненногоЦикла;		
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьГруппуВидовБрака(ЭтапСпецификации)
ТекРодитель = ЭтапСпецификации.Родитель;
	Пока Не ТекРодитель.Пустая() Цикл		
		Если Не ТекРодитель.ВидБрака.Пустая() Тогда
		Возврат(ТекРодитель.ВидБрака);
		КонецЕсли; 
	ТекРодитель = ТекРодитель.Родитель;	
	КонецЦикла; 
Возврат(Справочники.ВидыБрака.ПустаяСсылка());
КонецФункции

&НаКлиенте
Процедура НеисправностиВидБракаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
ОткрытьФорму("Справочник.ВидыБрака.Форма.ФормаВыбораПоГруппе",Новый Структура("Родитель",ПолучитьГруппуВидовБрака(Элементы.Неисправности.ТекущиеДанные.НеисправныйМПЗ)),,,,, Новый ОписаниеОповещения("НеисправностиВидБракаНачалоВыбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура НеисправностиВидБракаНачалоВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат <> Неопределено Тогда
	УстановитьВидБракаНаСервере(Элементы.Неисправности.ТекущаяСтрока,Результат);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НеисправностиКомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
ВвестиСтроку(Элементы.Неисправности.ТекущиеДанные.Комментарий,"Введите комментарий",0,Истина); 
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяемыеЭлементыПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(Элементы.ЗаменяемыеЭлементы.ТекущиеДанные.Документ) Тогда
		Если Вопрос("Документ будет удален! Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда			
		Отказ = Истина;
		КонецЕсли; 
	ОбщийМодульВызовСервера.УдалитьЦепочкуДокументов(Элементы.ЗаменяемыеЭлементы.ТекущиеДанные.Документ);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗаменяемыеЭлементыПослеУдаления(Элемент)
ЭтаФорма.Записать();
ЭтаФорма.Модифицированность = Ложь;
КонецПроцедуры

&НаСервере
Функция СоздатьМТКНаСервере(Стр)
ТЧ = Объект.ЗаменяемыеЭлементы.НайтиПоИдентификатору(Стр);
СтдКомментарий = Справочники.СтандартныеКомментарии.НайтиПоНаименованию("Полуфабрикаты, созданные по заказу ремонтника",Истина);				
МТК = ОбщийМодульСозданиеДокументов.СоздатьМТК(Объект.Линейка,ТЧ.МПЗ,ТЧ.Количество,СтдКомментарий,Справочники.Проекты.ПустаяСсылка(),Истина,Ложь,,,,Объект.Ссылка,,,,,"Для ремонтной тары №"+Объект.ВозвратнаяТара);
	Если ЗначениеЗаполнено(МТК) Тогда
	ТЧ.Документ = МТК;
	Возврат(Истина);
	КонецЕсли;
Возврат(Ложь);
КонецФункции

&НаСервере
Функция МожноСоздатьМТК(Стр)
ТЧ = Объект.ЗаменяемыеЭлементы.НайтиПоИдентификатору(Стр);
	Если ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ТЧ.МПЗ.Канбан.Пустая() Тогда
		Возврат(Истина);
		Иначе
			Если ТЧ.МПЗ.Канбан.ПриЗаменеСоздаватьМТК Тогда
			Возврат(Истина);			
			КонецЕсли; 
		КонецЕсли;	
	КонецЕсли;
Сообщить("МТК создаются только на полуфабрикаты без признака канбана или на канбаны с флагом <При замене создавать МТК>!");
Возврат(Ложь);
КонецФункции 

&НаКлиенте
Процедура СоздатьМТК(Команда)
	Если Элементы.ЗаменяемыеЭлементы.ТекущаяСтрока = Неопределено Тогда
	Сообщить("Выберите строку с заменяемым элементом!");
	Возврат;
	КонецЕсли;
		Если ЗначениеЗаполнено(Элементы.ЗаменяемыеЭлементы.ТекущиеДанные.Документ) Тогда
		Сообщить("По выбранной строке уже создан документ!");
		Возврат;
		КонецЕсли;
			Если МожноСоздатьМТК(Элементы.ЗаменяемыеЭлементы.ТекущаяСтрока) Тогда
				Если СоздатьМТКНаСервере(Элементы.ЗаменяемыеЭлементы.ТекущаяСтрока) Тогда
				ЭтаФорма.Записать();
				КонецЕсли;	
			КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПолучитьЛинейкуКанбана(Линейка,ВидКанбана)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЛинейкиЛинейкиПотребители.Ссылка
	|ИЗ
	|	Справочник.Линейки.ЛинейкиПотребители КАК ЛинейкиЛинейкиПотребители
	|ГДЕ
	|	ЛинейкиЛинейкиПотребители.Линейка = &Линейка
	|	И ЛинейкиЛинейкиПотребители.Ссылка.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("Линейка", Линейка);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныхЗаписей = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
		Если ВыборкаДетальныхЗаписей.Ссылка.ВидыКанбанов.Найти(ВидКанбана,"ВидКанбана") <> Неопределено Тогда
		Возврат(ВыборкаДетальныхЗаписей.Ссылка);
		КонецЕсли;
	КонецЦикла;
Сообщить("Не определена линейка производства канбана "+ВидКанбана); 
Возврат(Неопределено);
КонецФункции

&НаСервере
Функция ДобавитьПодчиненныеДетали(МТК,Номенклатура,Норма)
Результат = Истина;
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н(Номенклатура,ТекущаяДата());
	Пока ВыборкаНР.Следующий() Цикл
	Количество = ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*Норма;
		Если ЗначениеЗаполнено(ВыборкаНР.Элемент.Канбан) Тогда
			Если ВыборкаНР.Элемент.Канбан.Служебный Тогда
			СтдКомментарий = Справочники.СтандартныеКомментарии.НайтиПоНаименованию("Полуфабрикаты, созданные по заказу ремонтника",Истина);
			Линейка = ПолучитьЛинейкуКанбана(МТК.Линейка,ВыборкаНР.Элемент.Канбан);
				Если Линейка <> неопределено Тогда
				МТКПодч = ОбщийМодульСозданиеДокументов.СоздатьМТККанбан(Линейка,Справочники.МестаХранения.ПустаяСсылка(),1,ВыборкаНР.Элемент,Количество,Ложь,МТК,"",1,"",Истина,СтдКомментарий);
					Если Не ЗначениеЗаполнено(МТКПодч) Тогда
					Возврат(Ложь);
					КонецЕсли;
				Иначе
				Возврат(Ложь);
				КонецЕсли;			
			Результат = ДобавитьПодчиненныеДетали(МТКПодч,ВыборкаНР.Элемент,Количество);
			КонецЕсли;
		Иначе
		Результат = ДобавитьПодчиненныеДетали(МТК,ВыборкаНР.Элемент,Количество);		
		КонецЕсли; 
	КонецЦикла;
Возврат(Результат);
КонецФункции

&НаСервере
Функция СоздатьМТКРазукомплектовкиНаСервере(Стр,Линейка)
ТЧ = Объект.Разукомплектовка.НайтиПоИдентификатору(Стр);
СтдКомментарий = Справочники.СтандартныеКомментарии.НайтиПоНаименованию("Полуфабрикаты, созданные по заказу ремонтника",Истина);
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1; 
	МТК = ОбщийМодульСозданиеДокументов.СоздатьМТККанбан(Линейка,Объект.Линейка.МестоХраненияКанбанов,1,ТЧ.МПЗ,ТЧ.Количество,Ложь,Объект.Ссылка,"",1,Объект.ВозвратнаяТара,Истина,СтдКомментарий);
		Если ЗначениеЗаполнено(МТК) Тогда
			Если Не ДобавитьПодчиненныеДетали(МТК,ТЧ.МПЗ,ТЧ.Количество) Тогда
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат(Ложь);
			КонецЕсли;
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		ТЧ.Документ = МТК;
		КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции

&НаКлиенте
Процедура СоздатьМТКРазукомплектовка(Команда)
	Если Элементы.Разукомплектовка.ТекущаяСтрока = Неопределено Тогда
	Сообщить("Выберите строку с заменяемым полуфабрикатом!");
	Возврат;
	КонецЕсли;
		Если ЗначениеЗаполнено(Элементы.Разукомплектовка.ТекущиеДанные.Документ) Тогда
		Сообщить("По выбранной строке уже создан документ!");
		Возврат;
		КонецЕсли;
			Если Элементы.Разукомплектовка.ТекущиеДанные.ТребуетсяМТК Тогда
			Линейка = Неопределено;
				Если ВвестиЗначение(Линейка,"Выберите линейку",Тип("СправочникСсылка.Линейки")) Тогда
					Если СоздатьМТКРазукомплектовкиНаСервере(Элементы.Разукомплектовка.ТекущаяСтрока,Линейка) Тогда
					ЭтаФорма.Записать();
					ЗаполнитьТаблицуРазукомплектовки();
					КонецЕсли;
				КонецЕсли;
			Иначе
	        Сообщить("МТК создаются только на полуфабрикаты канбанов с флагом <При замене создавать МТК>!");
			КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПечатьАктаОСписанииПоСтатьеЗатратНаСервере(ТабДок)
Макет = Документы.СписаниеМПЗПрочее.ПолучитьМакет("АктОСписанииПоСтатьеЗатрат");
ОблШапка = Макет.ПолучитьОбласть("Шапка");	
ОблСтрока = Макет.ПолучитьОбласть("Строка");
ОблПодвал = Макет.ПолучитьОбласть("Подвал");
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.ДвижениеМПЗ") Тогда	
		Если ТипЗнч(Объект.ДокументОснование.ДокументОснование) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
		Линейка = СокрЛП(Объект.ДокументОснование.ДокументОснование.Линейка);
		ПаспортЛинейки = РегистрыСведений.ПаспортЛинейки.ПолучитьПоследнее(Объект.Дата,Новый Структура("Линейка",Линейка));
		Мастер = ПаспортЛинейки.Мастер;
		Иначе
		Линейка = "";
		Мастер = "";
		КонецЕсли;		
	КонецЕсли; 
ОблШапка.Параметры.НазваниеОрганизации = Константы.НазваниеОрганизации.Получить();
ОблШапка.Параметры.ИННАдрес = СокрЛП(Константы.ИННОрганизации.Получить())+", "+СокрЛП(Константы.АдресОрганизации.Получить());
ОблШапка.Параметры.ЗаместительДиректораПоПроизводству = ОбщийМодульВызовСервера.ПолучитьСотрудникаПоДолжности("Заместитель директора по производству");
ОблШапка.Параметры.РуководительПодразделения = СокрЛП(Объект.Подразделение.Руководитель.Наименование);
ОблШапка.Параметры.ДолжностьРуководителяПодразделения = СокрЛП(Объект.Подразделение.Руководитель.Должность.Наименование); 
ОблШапка.Параметры.Мастер = Мастер;
ОблШапка.Параметры.НачальникСТК = ОбщийМодульВызовСервера.ПолучитьСотрудникаПоДолжности("Начальник СТК");
ОблШапка.Параметры.Номер = Объект.Номер;
ТабДок.Вывести(ОблШапка);
	Для каждого ТЧ Из Объект.Разукомплектовка Цикл
	ОблСтрока.Параметры.Код = ?(ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Материалы"),ТЧ.МПЗ.Код,"");
	ОблСтрока.Параметры.Наименование = СокрЛП(ТЧ.МПЗ.Наименование);
	ОблСтрока.Параметры.ЕдиницаИзмерения = СокрЛП(ТЧ.ЕдиницаИзмерения.Наименование);
	ОблСтрока.Параметры.Количество = ТЧ.Количество;
	ОблСтрока.Параметры.Сумма = ОбщийМодульВызовСервера.ПолучитьСтоимостьМПЗ(ТЧ.МПЗ,1,Объект.Дата,0)*ТЧ.ЕдиницаИзмерения.Коэффициент*ТЧ.Количество;	
	ТабДок.Вывести(ОблСтрока);
	КонецЦикла;
ОблПодвал.Параметры.СтатьяСписания = СокрЛП(Объект.Статья.Наименование);
ОблПодвал.Параметры.АвторДокумента = СокрЛП(Объект.Автор.Наименование); 
ОблПодвал.Параметры.РуководительПодразделения = СокрЛП(Объект.Подразделение.Руководитель.Наименование);
ОблПодвал.Параметры.ДолжностьРуководителяПодразделения = СокрЛП(Объект.Подразделение.Руководитель.Должность.Наименование); 
ОблПодвал.Параметры.Мастер = Мастер;
ОблПодвал.Параметры.НачальникСТК = ОбщийМодульВызовСервера.ПолучитьСотрудникаПоДолжности("Начальник СТК");
ТабДок.Вывести(ОблПодвал);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьАктаОСписанииПоСтатьеЗатрат(Команда)
	Если ЭтаФорма.Модифицированность Тогда	
	Сообщить("Для печати документ необходимо перепровести.");
	Возврат;		
	КонецЕсли;
ТабДок = Новый ТабличныйДокумент;

ПечатьАктаОСписанииПоСтатьеЗатратНаСервере(ТабДок);
ТабДок.Показать("Печать акта о списании по статье затрат");
КонецПроцедуры

&НаКлиенте
Процедура СписатьМПЗ(Команда)
	Если Элементы.ЗаменяемыеЭлементы.ТекущаяСтрока = Неопределено Тогда
	Сообщить("Выберите строку с заменяемым элементом!");
	Возврат;
	КонецЕсли;
		Если ЗначениеЗаполнено(Элементы.ЗаменяемыеЭлементы.ТекущиеДанные.Документ) Тогда
		Сообщить("По выбранной строке уже создан документ!");
		Возврат;
		КонецЕсли;  
			Если ТипЗнч(Элементы.ЗаменяемыеЭлементы.ТекущиеДанные.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если Не ЭтоКанбан(Элементы.ЗаменяемыеЭлементы.ТекущиеДанные.МПЗ) Тогда
				Сообщить("Запрещено заменять полуфабрикат без признака канбана!");
				Возврат;					 
				КонецЕсли; 
			КонецЕсли;
Результат = ОткрытьФормуМодально("ОбщаяФорма.ЗаменаЭлементаПриРемонте",Новый Структура("Ссылка,НормаРасхода,Количество",Объект.Ссылка,Элементы.ЗаменяемыеЭлементы.ТекущиеДанные.НормаРасхода,Элементы.ЗаменяемыеЭлементы.ТекущиеДанные.Количество));
	Если Результат <> Неопределено Тогда	
	Элементы.ЗаменяемыеЭлементы.ТекущиеДанные.НормаРасхода = Результат.НормаРасхода;
	Элементы.ЗаменяемыеЭлементы.ТекущиеДанные.МПЗ = Результат.МПЗ;
	Элементы.ЗаменяемыеЭлементы.ТекущиеДанные.Документ = Результат.Документ;
	ЭтаФорма.Записать();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьФайл(Команда)
Режим = РежимДиалогаВыбораФайла.Открытие; 
ДиалогОткрытияФайла = Новый ДиалогВыбораФайла(Режим); 
ДиалогОткрытияФайла.Фильтр               = "Картинка в JPEG(*.jpg)|*.jpg"; 
ДиалогОткрытияФайла.МножественныйВыбор   = Ложь; 
ДиалогОткрытияФайла.Заголовок            = "Выберите файл с фотографией...";
ДиалогОткрытияФайла.Каталог = ПолучитьКаталогФотографий(); 
	Если ДиалогОткрытияФайла.Выбрать() Тогда 
	ИмяФайла = ДиалогОткрытияФайла.ВыбранныеФайлы[0];
	Ф = Новый Файл(ИмяФайла);
	
	Элементы.Неисправности.ТекущиеДанные.Файл = Ф.Имя;
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьКаталогФотографий()
Возврат(СокрЛП(Константы.КаталогФотографий.Получить())+СокрЛП(Объект.Линейка.ПодкаталогФотографий));
КонецФункции

&НаКлиенте
Процедура НеисправностиФайлОткрытие(Элемент, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
ЗапуститьПриложение(ПолучитьКаталогФотографий()+"\"+Элементы.Неисправности.ТекущиеДанные.Файл);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
ЗапуститьПриложение(ПолучитьКаталогФотографий()+"\"+Элементы.Неисправности.ТекущиеДанные.Файл);
КонецПроцедуры

&НаСервере
Процедура ПолучитьДокументациюНаСервере(ЭтапСпецификации,СписокДокументов)
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_Д(ЭтапСпецификации,ТекущаяДата());
	Пока ВыборкаНР.Следующий() Цикл
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Документация") Тогда
			Если СписокДокументов.НайтиПоЗначению(ВыборкаНР.Элемент) = Неопределено Тогда
			СписокДокументов.Добавить(ВыборкаНР.Элемент,""+ВыборкаНР.Элемент.ВидДокумента+", "+ВыборкаНР.Элемент);
			КонецЕсли;			
		Иначе
		ПолучитьДокументациюНаСервере(ВыборкаНР.Элемент,СписокДокументов); 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДокументацию(Команда)
СписокДокументов = Новый СписокЗначений;

ПолучитьДокументациюНаСервере(Объект.Изделие,СписокДокументов);
СписокДокументов.СортироватьПоПредставлению();
ВыбДокумент = СписокДокументов.ВыбратьЭлемент("Выберите документ");
	Если ВыбДокумент <> Неопределено Тогда	
	ОбщийМодульКлиент.ОткрытьФайлДокумента(ВыбДокумент.Значение);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура РазукомплектовкаМПЗПриИзмененииНаСервере(Стр)
ТЧ = Объект.Разукомплектовка.НайтиПоИдентификатору(Стр);
ТЧ.ЕдиницаИзмерения = ТЧ.МПЗ.ОсновнаяЕдиницаИзмерения;
КонецПроцедуры

&НаКлиенте
Процедура РазукомплектовкаМПЗПриИзменении(Элемент)
РазукомплектовкаМПЗПриИзмененииНаСервере(Элементы.Разукомплектовка.ТекущаяСтрока);
КонецПроцедуры
