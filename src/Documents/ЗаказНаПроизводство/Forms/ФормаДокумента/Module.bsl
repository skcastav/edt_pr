
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Для каждого ТЧ Из Объект.Заказ Цикл
	КоличествоВЗаказе = ТЧ.КоличествоВЗаказе - ОбщийМодульВызовСервера.ПолучитьКорректировкуЗНП(Объект.Ссылка,ТЧ.Продукция);
	СуммаПоЗаказу = СуммаПоЗаказу + ТЧ.Цена*КоличествоВЗаказе;
	КонецЦикла; 
ОбновитьДополнительныеКолонки();
	Если Объект.Закрыт Тогда
	ЭтаФорма.ТолькоПросмотр = Не РольДоступна("Администратор");	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ОбщийМодульВызовСервера.ДоступностьРоли("Отгрузка") Тогда
	Элементы.РезервироватьНеликвиды.Доступность = Ложь;
	Элементы.РезервироватьСвободныеОстатки.Доступность = Ложь;		
	Элементы.ФормаСоздатьПодчиненныйЗНП.Доступность = Ложь;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РезервироватьНеликвидыНаСервере()
	Для каждого ТЧ Из Объект.Заказ Цикл
	Остаток = ОбщийМодульВызовСервера.ПолучитьНезарезервированныйОстатокПоМестуХранения(Константы.МестоХраненияНеликвидов.Получить(),ТЧ.Продукция,Объект.Дата);
		Если Остаток >= ТЧ.Количество Тогда
		ТЧ.РезервПерепрогон = ТЧ.Количество;
		ТЧ.Количество = 0;
		ИначеЕсли Остаток > 0 Тогда
		ТЧ.РезервПерепрогон = Остаток;
		ТЧ.Количество = ТЧ.Количество - Остаток;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьНеликвиды(Команда)
	Если Не Объект.Проведен Тогда
	РезервироватьНеликвидыНаСервере();
	Иначе
	Сообщить("Перед резервированием отмените проведение документа!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РезервироватьСвободныеОстаткиНаСервере()
	Для каждого ТЧ Из Объект.Заказ Цикл
		Если ТипЗнч(ТЧ.Продукция) = Тип("СправочникСсылка.Номенклатура") Тогда
		МестоХраненияГП = ТЧ.Продукция.Линейка.МестоХраненияГП;
		Иначе
		//МестоХраненияГП = Константы.МестоХраненияТНП.Получить();
		Продолжить;
		КонецЕсли;
	Остаток = ОбщийМодульВызовСервера.ПолучитьНезарезервированныйОстатокПоМестуХранения(МестоХраненияГП,ТЧ.Продукция,Объект.Дата);
		Если Остаток >= ТЧ.Количество Тогда
		ТЧ.РезервСвободныйОстаток = ТЧ.Количество;
		ТЧ.Количество = 0;
		ИначеЕсли Остаток > 0 Тогда
		ТЧ.РезервСвободныйОстаток = Остаток;
		ТЧ.Количество = ТЧ.Количество - Остаток;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РезервироватьСвободныеОстатки(Команда)
	Если Не Объект.Проведен Тогда
	РезервироватьСвободныеОстаткиНаСервере();
	Иначе
	Сообщить("Перед резервированием отмените проведение документа!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОбновитьДополнительныеКолонки()
	Для каждого ТЧ Из Объект.Заказ Цикл	
		Если ТипЗнч(ТЧ.Продукция) = Тип("СправочникСсылка.Номенклатура") Тогда
		ТЧ.Линейка = ТЧ.Продукция.Линейка;
		ТЧ.ВидПродукции = "Производимый";
		ИначеЕсли ТипЗнч(ТЧ.Продукция) = Тип("СправочникСсылка.Материалы") Тогда
		ТЧ.ВидПродукции = "Покупной";
		Иначе
		ТЧ.ВидПродукции = "";	
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеНаСервере()
Возврат(ЭтаФорма.ПроверитьЗаполнение());
КонецФункции

&НаКлиенте
Процедура ТаблицаЗаказаПродукцияПриИзменении(Элемент)
ОбновитьДополнительныеКолонки();
КонецПроцедуры

&НаКлиенте
Функция ПересчитатьКоличествоКПроизводству()
Возврат(Элементы.ТаблицаЗаказа.ТекущиеДанные.КоличествоВЗаказе - Элементы.ТаблицаЗаказа.ТекущиеДанные.РезервСвободныйОстаток - Элементы.ТаблицаЗаказа.ТекущиеДанные.РезервПерепрогон);
КонецФункции

&НаКлиенте
Процедура ТаблицаЗаказаКоличествоВЗаказеПриИзменении(Элемент)
Элементы.ТаблицаЗаказа.ТекущиеДанные.Количество = ПересчитатьКоличествоКПроизводству();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказаРезервСвободныйОстатокПриИзменении(Элемент)
Элементы.ТаблицаЗаказа.ТекущиеДанные.Количество = ПересчитатьКоличествоКПроизводству();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаказаРезервПерепрогонПриИзменении(Элемент)
Элементы.ТаблицаЗаказа.ТекущиеДанные.Количество = ПересчитатьКоличествоКПроизводству();
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПродукции(Товар)
СписокПродукции = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО СтатусыМПЗСрезПоследних.МПЗ = Номенклатура.Ссылка
	|ГДЕ
	|	Номенклатура.Товар = &Товар
	|	И СтатусыМПЗСрезПоследних.Статус <> &Статус";
Запрос.УстановитьПараметр("Товар",Товар);
Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыСпецификаций.Запрещённая);
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
РезультатЗапроса = Запрос.Выполнить();
Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	СписокПродукции.Добавить(Выборка.Ссылка,СокрЛП(Выборка.Ссылка.Наименование));
	КонецЦикла;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	Материалы.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Материалы КАК Материалы
	|		ПО СтатусыМПЗСрезПоследних.МПЗ = Материалы.Ссылка
	|ГДЕ
	|	Материалы.Товар = &Товар
	|	И СтатусыМПЗСрезПоследних.Статус <> &Статус";
Запрос.УстановитьПараметр("Товар",Товар);
Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыМПЗ.Запрещённая);
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
РезультатЗапроса = Запрос.Выполнить();
Выборка = РезультатЗапроса.Выбрать();
	Пока Выборка.Следующий() Цикл
	СписокПродукции.Добавить(Выборка.Ссылка,СокрЛП(Выборка.Ссылка.Наименование));
	КонецЦикла;
Возврат(СписокПродукции);
КонецФункции 

&НаКлиенте
Процедура ТаблицаЗаказаПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Элементы.ТаблицаЗаказа.ТекущиеДанные.Товар) Тогда
	СписокПродукции = ПолучитьСписокПродукции(Элементы.ТаблицаЗаказа.ТекущиеДанные.Товар);
		Если СписокПродукции.Количество() > 0 Тогда
		ВыбПродукция = СписокПродукции.ВыбратьЭлемент("Выберите продукцию");
			Если ВыбПродукция <> Неопределено Тогда
			Элементы.ТаблицаЗаказа.ТекущиеДанные.Продукция = ВыбПродукция.Значение;
			ОбновитьДополнительныеКолонки();
			КонецЕсли;
		Иначе
		Сообщить("Товар не привязан ни к одной спецификации или материалу!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокМТК(Продукция)
СписокМТК = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутнаяКарта.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.МаршрутнаяКарта КАК МаршрутнаяКарта
	|ГДЕ
	|	МаршрутнаяКарта.ДокументОснование = &ДокументОснование
	|	И МаршрутнаяКарта.Номенклатура = &Номенклатура";
Запрос.УстановитьПараметр("ДокументОснование", Объект.Ссылка);
Запрос.УстановитьПараметр("Номенклатура", Продукция);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокМТК.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
Возврат(СписокМТК);
КонецФункции

&НаСервере
Функция МожноУдалятьМТК(СписокМТК)
	Для каждого МТК Из СписокМТК Цикл 
		Если МТК.Значение.Статус <> 0 Тогда
		Возврат(Ложь);
		КонецЕсли; 
	КонецЦикла;
Возврат(Истина); 	
КонецФункции 

&НаСервере
Функция УдалитьМТК(СписокМТК)
Запрос = Новый Запрос;

	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		Для каждого МТК Из СписокМТК Цикл 
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПроизводственноеЗадание.Ссылка
			|ИЗ
			|	Документ.ПроизводственноеЗадание КАК ПроизводственноеЗадание
			|ГДЕ
			|	ПроизводственноеЗадание.ДокументОснование = &ДокументОснование";
		Запрос.УстановитьПараметр("ДокументОснование", МТК.Значение);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ПЗ = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();		
			ПЗ.Удалить();
			КонецЦикла;
		МТКОбъект = МТК.Значение.ПолучитьОбъект();
		МТКОбъект.Удалить();		
		КонецЦикла; 	
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
КонецФункции 

&НаКлиенте
Процедура ТаблицаЗаказаПередУдалением(Элемент, Отказ)
СписокМТК = ПолучитьСписокМТК(Элементы.ТаблицаЗаказа.ТекущиеДанные.Продукция);
	Если СписокМТК.Количество() > 0 Тогда
		Если МожноУдалятьМТК(СписокМТК) Тогда
			Если Вопрос("Удалить связанные МТК?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда	
			УдалитьМТК(СписокМТК);
			Иначе
			Отказ = Истина;
			КонецЕсли;
		Иначе
		Сообщить("Одна из связанных МТК не в статусе ожидания! Удаление невозможно!");
		Отказ = Истина;
		КонецЕсли; 	
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДляВнутреннихСчетов()
//Объект.Контрагент = Справочники.Контрагенты.НайтиПоКоду("99999951578");
Объект.ВидОтгрузки = Перечисления.ВидыОтгрузки.Полная;
Объект.Понедельник = Истина;
Объект.Вторник = Истина;
Объект.Среда = Истина;
Объект.Четверг = Истина;
Объект.Пятница = Истина;
Объект.Суббота = Истина;
Объект.Воскресенье = Истина;
Объект.ОтгрузкаРазрешена = Истина;
Объект.ДатаОтгрузки = ТекущаяДата();
КонецПроцедуры

&НаКлиенте
Процедура ДляСобственныхНуждПриИзменении(Элемент)
	Если Объект.ВнутренниеСчета Тогда	
	ЗаполнитьДляВнутреннихСчетов();
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Процедура СтраницыПриСменеСтраницыНаСервере()
Элементы.Метрика.ТолькоПросмотр = Не РольДоступна("Администратор");
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
СтраницыПриСменеСтраницыНаСервере();
КонецПроцедуры

&НаСервере
Процедура ГодоваяДоверенностьПриИзмененииНаСервере()
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Доверенности.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Доверенности КАК Доверенности
	|ГДЕ
	|	Доверенности.Владелец = &Владелец
	|	И Доверенности.ДоверенностьСрок >= &ДоверенностьСрок";

Запрос.УстановитьПараметр("Владелец", Объект.Контрагент);
Запрос.УстановитьПараметр("ДоверенностьСрок", ТекущаяДата());
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Объект.ДоверенностьНомер = ВыборкаДетальныеЗаписи.Ссылка.Код;
	Объект.ДоверенностьДата = ВыборкаДетальныеЗаписи.Ссылка.ДоверенностьДата;
	Объект.ДоверенностьСрок = ВыборкаДетальныеЗаписи.Ссылка.ДоверенностьСрок;
	Объект.ДоверенностьНаКого = ВыборкаДетальныеЗаписи.Ссылка.ДоверенностьНаКого;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ГодоваяДоверенностьПриИзменении(Элемент)
	Если Объект.ГодоваяДоверенность Тогда
	ГодоваяДоверенностьПриИзмененииНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если Объект.ГодоваяДоверенность Тогда
	Доверенность = Справочники.Доверенности.НайтиПоКоду(СокрЛП(Объект.ДоверенностьНомер),,,Объект.Контрагент);	
		Если Доверенность.Пустая() Тогда	
		Доверенность = Справочники.Доверенности.СоздатьЭлемент();
		Доверенность.Владелец = Объект.Контрагент;
		Доверенность.Код = Объект.ДоверенностьНомер;
		Доверенность.ДоверенностьДата = Объект.ДоверенностьДата;
		Доверенность.ДоверенностьСрок = Объект.ДоверенностьСрок;
		Доверенность.ДоверенностьНаКого = Объект.ДоверенностьНаКого;
		Доверенность.Записать();		
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция СоздатьПодчиненныйЗНПНаСервере(Материал,КоличествоВЗаказе)
	Попытка
	ЗаказНаПроизводство = Документы.ЗаказНаПроизводство.СоздатьДокумент();
	ЗаказНаПроизводство.Дата = ТекущаяДата();
	ЗаказНаПроизводство.Автор = ПараметрыСеанса.Пользователь;
	ЗаказНаПроизводство.ДокументОснование = Объект.Ссылка;
	ЗаказНаПроизводство.ВнутренниеСчета = Истина;
	ЗаказНаПроизводство.Контрагент = Справочники.Контрагенты.НайтиПоКоду("1");
	ЗаказНаПроизводство.КартаДоставки = Справочники.КартыДоставки.НайтиПоКоду("000033027");
	ЗаказНаПроизводство.Понедельник = Истина;
	ЗаказНаПроизводство.Вторник = Истина;
	ЗаказНаПроизводство.Среда = Истина;
	ЗаказНаПроизводство.Четверг = Истина;
	ЗаказНаПроизводство.Пятница = Истина;
	ЗаказНаПроизводство.Суббота = Истина;
	ЗаказНаПроизводство.Воскресенье = Истина;
	ЗаказНаПроизводство.ОтгрузкаРазрешена = Истина;
	ЗаказНаПроизводство.ДатаОтгрузки = ТекущаяДата();
	ЗаказНаПроизводство.ЛинейкаУпаковки = 3;
	ЗаказНаПроизводство.ВидОтгрузки = Перечисления.ВидыОтгрузки.Частичная;
	ЗаказНаПроизводство.ВнешняяПродукция = Материал; 
	ЗаказНаПроизводство.КоличествоВнешнейПродукции = КоличествоВЗаказе;

	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
		|	НормыРасходовСрезПоследних.Норма КАК Норма
		|ИЗ
		|	РегистрСведений.НормыРасходов.СрезПоследних(
		|			&НаДату,
		|			Владелец = &Владелец
		|				И Элемент.Товар <> &Товар) КАК НормыРасходовСрезПоследних
		|ГДЕ
		|	НормыРасходовСрезПоследних.Норма > 0
		|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Запрос.УстановитьПараметр("Владелец", Материал);
	Запрос.УстановитьПараметр("Товар", Справочники.Товары.ПустаяСсылка());
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаНР = РезультатЗапроса.Выбрать();
		Пока ВыборкаНР.Следующий() Цикл
		ТЧ_ЗП = ЗаказНаПроизводство.Заказ.Добавить();
		ТЧ_ЗП.Товар = ВыборкаНР.Элемент.Товар;
		ТЧ_ЗП.Продукция = ВыборкаНР.Элемент;
		ТЧ_ЗП.КоличествоВЗаказе = ВыборкаНР.Норма*КоличествоВЗаказе;
		ТЧ_ЗП.Количество = ТЧ_ЗП.КоличествоВЗаказе;
		ТЧ_ЗП.СрокПоставки = ВыборкаНР.Элемент.Товар.СрокПоставки;
		ТЧ_ЗП.ДатаОтгрузкиОбещанная = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Константы.ОсновнойПроизводственныйКалендарь.Получить(),ЗаказНаПроизводство.Дата,ТЧ_ЗП.СрокПоставки);
		ЗаказНаПроизводство.ДатаОтгрузкиОбещанная = Макс(ЗаказНаПроизводство.ДатаОтгрузкиОбещанная,ТЧ_ЗП.ДатаОтгрузкиОбещанная);
			Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Номенклатура") Тогда
			КоличествоНеликвиды = ОбщийМодульВызовСервера.ПолучитьНезарезервированныйОстатокПоМестуХранения(Константы.МестоХраненияНеликвидов.Получить(),ТЧ_ЗП.Продукция,ТекущаяДата());
				Если КоличествоНеликвиды > 0 Тогда						
					Если ТЧ_ЗП.Количество <= КоличествоНеликвиды Тогда
					ТЧ_ЗП.РезервПерепрогон = ТЧ_ЗП.Количество;
					ТЧ_ЗП.Количество = 0;
					Иначе
					ТЧ_ЗП.РезервПерепрогон = КоличествоНеликвиды;
					ТЧ_ЗП.Количество = ТЧ_ЗП.Количество - КоличествоНеликвиды;							
					КонецЕсли;
				КонецЕсли;
			КоличествоСвободныйОстаток = ОбщийМодульВызовСервера.ПолучитьНезарезервированныйОстатокПоМестуХранения(ТЧ_ЗП.Продукция.Линейка.МестоХраненияГП,ТЧ_ЗП.Продукция,ТекущаяДата());
				Если КоличествоСвободныйОстаток > 0 Тогда						
					Если ТЧ_ЗП.Количество <= КоличествоСвободныйОстаток Тогда
					ТЧ_ЗП.РезервСвободныйОстаток = ТЧ_ЗП.Количество;
					ТЧ_ЗП.Количество = 0;
					Иначе
					ТЧ_ЗП.РезервСвободныйОстаток = КоличествоСвободныйОстаток;
					ТЧ_ЗП.Количество = ТЧ_ЗП.Количество - КоличествоСвободныйОстаток;							
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ЗаказНаПроизводство.Записать(РежимЗаписиДокумента.Проведение);
	Возврат(ЗаказНаПроизводство.Ссылка);
	Исключение
	Сообщить(ОписаниеОшибки());	
	КонецПопытки;
Возврат(Неопределено);
КонецФункции

&НаСервере
Функция ПолучитьСписокМатериалов(Продукция)
СписокМатериалов = Новый СписокЗначений;

ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_М(Продукция,ТекущаяДата());
	Пока ВыборкаНР.Следующий() Цикл
	СписокМатериалов.Добавить(ВыборкаНР.Элемент);
	КонецЦикла;
Возврат(СписокМатериалов);
КонецФункции
 
&НаКлиенте
Процедура СоздатьПодчиненныйЗНП(Команда)
СписокМатериалов = ПолучитьСписокМатериалов(Элементы.ТаблицаЗаказа.ТекущиеДанные.Продукция);
	Если СписокМатериалов.Количество() > 0 Тогда
	ВыбМатериал = СписокМатериалов.ВыбратьЭлемент("Выберите материал");
		Если ВыбМатериал <> Неопределено Тогда
		ЗНП = СоздатьПодчиненныйЗНПНаСервере(ВыбМатериал.Значение,Элементы.ТаблицаЗаказа.ТекущиеДанные.КоличествоВЗаказе);
			Если ЗНП <> Неопределено Тогда
			ОткрытьФорму("Документ.ЗаказНаПроизводство.ФормаОбъекта",Новый Структура("Ключ",ЗНП));
			КонецЕсли; 	
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

