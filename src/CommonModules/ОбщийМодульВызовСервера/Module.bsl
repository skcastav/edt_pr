
#Область ФункцииАдминистрирования

Функция ПолучитьСообщения() Экспорт
МассивСообщений = Новый Массив;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	СообщенияПользователям.Отправитель КАК Отправитель,
	|	СообщенияПользователям.Получатель КАК Получатель,
	|	СообщенияПользователям.Сообщение КАК Сообщение,
	|	СообщенияПользователям.ТекстСообщения КАК ТекстСообщения,
	|	СообщенияПользователям.Время КАК Время,
	|	СообщенияПользователям.Срок КАК Срок,
	|	СообщенияПользователям.Период КАК Период,
	|	СообщенияПользователям.Важное КАК Важное
	|ИЗ
	|	РегистрСведений.СообщенияПользователям КАК СообщенияПользователям
	|ГДЕ
	|	(СообщенияПользователям.Получатель = &Сотрудник
	|			ИЛИ СообщенияПользователям.Получатель = &ПустойСотрудник)
	|	И СообщенияПользователям.Время <= &ТекущееВремя";
Запрос.УстановитьПараметр("ПустойСотрудник", Справочники.Сотрудники.ПустаяСсылка());
Запрос.УстановитьПараметр("Сотрудник", ПараметрыСеанса.Пользователь);
Запрос.УстановитьПараметр("ТекущееВремя", ТекущаяДата());
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Не ВыборкаДетальныеЗаписи.Получатель.Пустая() Тогда
			Если ВыборкаДетальныеЗаписи.Получатель <> ПараметрыСеанса.Пользователь Тогда
			Продолжить;
			КонецЕсли; 		
		КонецЕсли; 
	Срок = ВыборкаДетальныеЗаписи.Срок;
		Если Срок > 0 Тогда
			Если ВыборкаДетальныеЗаписи.Время+Срок*60 < ТекущаяДата() Тогда
			НаборЗаписей = РегистрыСведений.СообщенияПользователям.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
			НаборЗаписей.Отбор.Отправитель.Установить(ВыборкаДетальныеЗаписи.Отправитель);
			НаборЗаписей.Отбор.Получатель.Установить(ВыборкаДетальныеЗаписи.Получатель);
			НаборЗаписей.Записать();
		    Продолжить;
			КонецЕсли; 
		КонецЕсли;
	Сообщение = Новый Структура("Отправитель,Время,Сообщение,ТекстСообщения,Важное");

	Сообщение.Отправитель = СокрЛП(ВыборкаДетальныеЗаписи.Отправитель.Наименование);
	Сообщение.Время = ВыборкаДетальныеЗаписи.Время;
	Сообщение.Сообщение = ВыборкаДетальныеЗаписи.Сообщение;
	Сообщение.ТекстСообщения = ВыборкаДетальныеЗаписи.ТекстСообщения;
	Сообщение.Важное = ВыборкаДетальныеЗаписи.Важное;
	МассивСообщений.Добавить(Сообщение); 
	КонецЦикла; 
Возврат(МассивСообщений);
КонецФункции

Функция ПолучитьПользователя() Экспорт
Возврат(ПараметрыСеанса.Пользователь);	
КонецФункции

Функция ДоступностьРоли(Роль) Экспорт
Возврат(РольДоступна(Роль));	
КонецФункции

Функция ПолучитьСписокРолей() Экспорт
СписокРолей = Новый СписокЗначений;

	Для каждого ТЧ Из ПользователиИнформационнойБазы.ТекущийПользователь().Роли Цикл
	СписокРолей.Добавить(ТЧ.Имя);
	КонецЦикла;
Возврат(СписокРолей);	
КонецФункции

Функция ПросмотрЗапрещён(ВыбДок) Экспорт
ТекРодитель = ВыбДок.Родитель;
	Пока Не ТекРодитель.Пустая() Цикл
		Если ТекРодитель.ЗапретитьПросмотрДляСЦ Тогда
		Возврат(Истина);		
		КонецЕсли;	
	ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
Возврат(Ложь);	
КонецФункции

Функция ПолучитьСписокДоступныхПодразделений() Экспорт
СписокПодразделений = Новый СписокЗначений;

	Для каждого ТЧ Из ПараметрыСеанса.Пользователь.Подразделения Цикл
	СписокПодразделений.Добавить(ТЧ.Подразделение);
	КонецЦикла; 
Возврат(СписокПодразделений);	
КонецФункции

Функция РазрешенноеПодразделение(Подразделение) Экспорт
Возврат(?(ПараметрыСеанса.Пользователь.Подразделения.Найти(Подразделение,"Подразделение") = Неопределено,Ложь,Истина));
КонецФункции

Функция РазрешенныйСписокЛинеек(СписокЛинеек) Экспорт
Результат = Истина;
	Для каждого Линейка Из СписокЛинеек Цикл
		Если ПараметрыСеанса.Пользователь.Подразделения.Найти(Линейка.Значение.Подразделение,"Подразделение") = Неопределено Тогда
		Результат = Ложь;
		Сообщить("У Вас нет прав для просмотра отчёта по линейке "+СокрЛП(Линейка.Значение.Наименование)+"!");		
		КонецЕсли; 
	КонецЦикла; 
Возврат(Результат);
КонецФункции

Функция РазрешенныйСписокВидовКанбанов(СписокВидовКанбанов) Экспорт
Результат = Истина;
	Для каждого ВидКанбана Из СписокВидовКанбанов Цикл
		Если ПараметрыСеанса.Пользователь.Подразделения.Найти(ВидКанбана.Значение.Подразделение,"Подразделение") = Неопределено Тогда
		Результат = Ложь;
		Сообщить("У Вас нет прав для просмотра отчёта по виду канбана "+СокрЛП(ВидКанбана.Значение.Наименование)+"!");		
		КонецЕсли; 
	КонецЦикла; 
Возврат(Результат);
КонецФункции

Процедура ОбновлениеИндексовПолнотекстовогоПоиска() Экспорт
ПолнотекстовыйПоиск.ОбновитьИндекс();
КонецПроцедуры 

Функция ИдётСинхронизация() Экспорт
Возврат(Константы.Синхронизация.Получить());
КонецФункции

Процедура ЗаблокироватьСинхронизацию() Экспорт
Константы.Синхронизация.Установить(ПараметрыСеанса.Пользователь);
КонецПроцедуры

Процедура РазблокироватьСинхронизацию() Экспорт
Константы.Синхронизация.Установить(Справочники.Сотрудники.ПустаяСсылка())
КонецПроцедуры

Функция МожноВыполнить(Линейка) Экспорт
	Если Не Константы.ПроверятьПризнакБазыЛинеек.Получить() Тогда
	Возврат(Истина);
	КонецЕсли; 
СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
ПозицияПоиска = Найти(Врег(СтрокаСоединения), "SRVR=");
	Если ПозицияПоиска <> 1 Тогда
	Возврат Истина;
	КонецЕсли;
		//Если Константы.КодБазы.Получить() = "БГР" Тогда
		//ИмяСервераОсновнойБазы = "1cv8server";
		//Иначе	
		//ИмяСервераОсновнойБазы = "iv-1c8-2";
		//КонецЕсли;
ИмяСервераОсновнойБазы = НРег(СокрЛП(Константы.РабочийСервер.Получить())); 
ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
НачальнаяПозицияКопирования = 7;
КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
ИмяСервера = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
	Если Найти(НРег(ИмяСервера),ИмяСервераОсновнойБазы) > 0 Тогда
	Возврат(Не Линейка.БазаЛинеек); 
	Иначе
	Возврат(Линейка.БазаЛинеек);
	КонецЕсли;
КонецФункции 

#КонецОбласти

#Область ФункцииРаботыСЛинейками

Функция ЭтоЛинейкаКанбан(Линейка) Экспорт
Возврат(?(Линейка.ВидЛинейки = Перечисления.ВидыЛинеек.Канбан,Истина,Ложь));
КонецФункции

Функция ПолучитьЛинейкуПоРабочемуМесту(РабочееМесто) Экспорт
Возврат(РабочееМесто.Линейка);
КонецФункции

Функция ПолучитьМестоХраненияПоРабочемуМесту(РабочееМесто) Экспорт
Возврат(РабочееМесто.Линейка.МестоХраненияКанбанов);
КонецФункции

Функция ПолучитьРабочееМестоВЛинейке(Линейка,Наименование,СБуфером = Ложь) Экспорт
РабочиеМеста = Справочники.РабочиеМестаЛинеек.Выбрать(,,Новый Структура("Линейка",Линейка));
	Пока РабочиеМеста.Следующий() Цикл		
		Если Найти(РабочиеМеста.Наименование,Наименование) > 0 Тогда
			Если РабочиеМеста.Стенд.СБуфером = СБуфером Тогда
			Возврат(РабочиеМеста.Ссылка);
			КонецЕсли; 		
		КонецЕсли; 
	КонецЦикла;
Возврат(Справочники.РабочиеМестаЛинеек.ПустаяСсылка());
КонецФункции

Функция ПолучитьПрефиксРабочегоМеста(РабочееМесто) Экспорт
Возврат(СокрЛП(РабочееМесто.ГруппаРабочихМест.Префикс));	
КонецФункции

Функция ПолучитьПредыдущееРабочееМесто(ТекущееРабочееМесто) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РабочиеМестаЛинеек.Ссылка
	|ИЗ
	|	Справочник.РабочиеМестаЛинеек КАК РабочиеМестаЛинеек
	|ГДЕ
	|	РабочиеМестаЛинеек.Линейка = &Линейка
	|	И РабочиеМестаЛинеек.Код = &Код
	|	И РабочиеМестаЛинеек.ЭтоГруппа = ЛОЖЬ
	|	И РабочиеМестаЛинеек.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("Код", ТекущееРабочееМесто.Код-1);
Запрос.УстановитьПараметр("Линейка", ТекущееРабочееМесто.Линейка);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
Возврат(Справочники.РабочиеМестаЛинеек.ПустаяСсылка());	
КонецФункции

Функция ПолучитьСледующееРабочееМесто(ТекущееРабочееМесто) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РабочиеМестаЛинеек.Ссылка
	|ИЗ
	|	Справочник.РабочиеМестаЛинеек КАК РабочиеМестаЛинеек
	|ГДЕ
	|	РабочиеМестаЛинеек.Линейка = &Линейка
	|	И РабочиеМестаЛинеек.Код = &Код
	|	И РабочиеМестаЛинеек.ЭтоГруппа = ЛОЖЬ
	|	И РабочиеМестаЛинеек.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("Код", ТекущееРабочееМесто.Код+1);
Запрос.УстановитьПараметр("Линейка", ТекущееРабочееМесто.Линейка);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
Возврат(Справочники.РабочиеМестаЛинеек.ПустаяСсылка());	
КонецФункции

Функция ПолучитьНомерОчередиЛинейки(Линейка) Экспорт
НумераторОчереди = Справочники.НумераторОчереди.НайтиПоРеквизиту("Линейка",Линейка);
	Если НумераторОчереди.Пустая() Тогда
	Возврат(Неопределено);
	КонецЕсли;
СледующийНомер = НумераторОчереди.СледующийНомер;
НО = НумераторОчереди.ПолучитьОбъект();
НО.СледующийНомер = СледующийНомер + 1;
НО.Записать();
Возврат СледующийНомер;	
КонецФункции

Функция ЛинейкаОстановлена(Линейка) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПростойЛинейки.Период,
	|	ПростойЛинейки.Причина,
	|	ПростойЛинейки.Примечание
	|ИЗ
	|	РегистрСведений.ПростойЛинейки КАК ПростойЛинейки
	|ГДЕ
	|	ПростойЛинейки.Линейка = &Линейка
	|	И ПростойЛинейки.Остановка = ИСТИНА";
Запрос.УстановитьПараметр("Линейка",Линейка);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл	
	Сообщить("Линейка остановлена с "+ВыборкаДетальныеЗаписи.Период);
	Сообщить("Причина: "+СокрЛП(ВыборкаДетальныеЗаписи.Примечание)+" ("+СокрЛП(ВыборкаДетальныеЗаписи.Причина)+")");
	Возврат(Истина);
	КонецЦикла;
Возврат(Ложь);
КонецФункции 

Функция ЛинейкаОстановленаПричины(Линейка) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПростойЛинейки.Период,
	|	ПростойЛинейки.Причина,
	|	ПростойЛинейки.Примечание
	|ИЗ
	|	РегистрСведений.ПростойЛинейки КАК ПростойЛинейки
	|ГДЕ
	|	ПростойЛинейки.Линейка = &Линейка
	|	И ПростойЛинейки.Остановка = ИСТИНА";
Запрос.УстановитьПараметр("Линейка",Линейка);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Результат = Новый Структура("Период,Причина,Примечание",ВыборкаДетальныеЗаписи.Период,СокрЛП(ВыборкаДетальныеЗаписи.Причина),СокрЛП(ВыборкаДетальныеЗаписи.Примечание));	
	Возврат(Результат);
	КонецЦикла;
Возврат(Неопределено);
КонецФункции 

Функция ОстановкаЛинейки(РабочееМесто) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПростойЛинейки.Период,
	|	ПростойЛинейки.Причина,
	|	ПростойЛинейки.Примечание
	|ИЗ
	|	РегистрСведений.ПростойЛинейки КАК ПростойЛинейки
	|ГДЕ
	|	ПростойЛинейки.Линейка = &Линейка
	|	И ПростойЛинейки.Остановка = ИСТИНА";
Запрос.УстановитьПараметр("Линейка",РабочееМесто.Линейка);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если РабочееМесто.Код > 1 Тогда
		Сообщить("Линейка остановлена с "+ВыборкаДетальныеЗаписи.Период);
		Сообщить("Причина: "+СокрЛП(ВыборкаДетальныеЗаписи.Примечание)+" ("+СокрЛП(ВыборкаДетальныеЗаписи.Причина)+")");
		КонецЕсли;
	Возврат(Истина);
	КонецЦикла;
Возврат(Ложь);
КонецФункции 

Функция ПолучитьСписокЛинеекПоМестуХранения(МестоХранения) Экспорт
Запрос = Новый Запрос;
СписокЛинеек = Новый СписокЗначений;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Линейки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Линейки КАК Линейки
	|ГДЕ
	|	Линейки.МестоХраненияКанбанов = &МестоХраненияКанбанов
	|	И Линейки.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("МестоХраненияКанбанов", МестоХранения);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокЛинеек.Добавить(ВыборкаДетальныеЗаписи.Ссылка,,Истина);
	КонецЦикла;
Возврат(СписокЛинеек);	
КонецФункции

Функция КанбанПринадлежитЛинейке(Линейка,МПЗ) Экспорт
Выборка = Линейка.ВидыКанбанов.НайтиСтроки(Новый Структура("ВидКанбана",МПЗ.Канбан));
Возврат(?(Выборка.Количество() > 0,Истина,Ложь)); 
КонецФункции

Функция КанбанПринадлежитЛинейкеПоВидуКанбана(Линейка,ВидКанбана) Экспорт
Выборка = Линейка.ВидыКанбанов.НайтиСтроки(Новый Структура("ВидКанбана",ВидКанбана));
Возврат(?(Выборка.Количество() > 0,Истина,Ложь)); 
КонецФункции

Функция АнализироватьБракПоМестуХранения(МестоХраненияБрака) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Подразделения.Ссылка
	|ИЗ
	|	Справочник.Подразделения КАК Подразделения
	|ГДЕ
	|	Подразделения.МестоХраненияБрака = &МестоХраненияБрака
	|	И Подразделения.ПодробныйАнализБрака = ИСТИНА";
Запрос.УстановитьПараметр("МестоХраненияБрака", МестоХраненияБрака);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(Истина);
	КонецЦикла;
Возврат(Ложь);
КонецФункции

Функция ПолучитьПодкаталогЛинейкиSMD(Линейка) Экспорт
	Если Найти(Линейка.Наименование,"С01") > 0 Тогда
	Возврат("Line7");
	ИначеЕсли Найти(Линейка.Наименование,"С02") > 0 Тогда
	Возврат("Line1");
	ИначеЕсли Найти(Линейка.Наименование,"С03") > 0 Тогда
	Возврат("Line6");
	Иначе
	Возврат("");
	КонецЕсли;
КонецФункции

#КонецОбласти

#Область ФункцииРаботыСоСпецификациями

Процедура ПолучитьТаблицуЭтаповСпецификации(ТаблицаЭтапов,ЭтапСпецификации,КолУзла,флНабор,НаДатуВремя) Экспорт
Основа = Справочники.Номенклатура.ПустаяСсылка();
	Если Не флНабор Тогда
	ТЧ = ТаблицаЭтапов.Вставить(0);
	ТЧ.ЭтапСпецификации = ЭтапСпецификации;
	ТЧ.ГруппаНоменклатуры = ПолучитьГруппуЭтапаПроизводства(ЭтапСпецификации.Родитель);
	ТЧ.Количество = КолУзла;
	КонецЕсли; 
ВыборкаНР = ПолучитьНормыРасходовПоВладельцу_Н(ЭтапСпецификации,НаДатуВремя);
	Пока ВыборкаНР.Следующий() Цикл
		Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда
		ПолучитьТаблицуЭтаповСпецификации(ТаблицаЭтапов,ВыборкаНР.Элемент,ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла,Истина,НаДатуВремя);	
		ИначеЕсли ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа Тогда
		Основа = ВыборкаНР.Элемент;
		НормаОсновы = ВыборкаНР.Норма;
		Иначе
			Если ВыборкаНР.Элемент.Канбан.Пустая() Тогда
           	ПолучитьТаблицуЭтаповСпецификации(ТаблицаЭтапов,ВыборкаНР.Элемент,ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла,Ложь,НаДатуВремя);					
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;	
		Если Не Основа.Пустая() Тогда
			Если Не Основа.Канбан.Пустая() Тогда
				Если Не Основа.Канбан.Служебный Тогда
				Возврат;
				КонецЕсли; 
			КонецЕсли; 
		ПолучитьТаблицуЭтаповСпецификации(ТаблицаЭтапов,Основа,ПолучитьБазовоеКоличество(НормаОсновы,Основа.ОсновнаяЕдиницаИзмерения)*КолУзла,Ложь,НаДатуВремя);
		КонецЕсли;
КонецПроцедуры

Функция СоздатьТаблицуЭтаповПроизводства(ПЗ,Этапы,ЭтапыАРМ,РабочееМесто,Исполнитель,ОбработкаОшибок = Истина) Экспорт
Этапы.Очистить();
ЭтапыАРМ.Очистить(); 
ОбщийМодульВызовСервера.ПолучитьТаблицуЭтаповСпецификации(Этапы,ПЗ.Изделие,1,Ложь,?(ЗначениеЗаполнено(ПЗ.ДатаЗапуска),ПЗ.ДатаЗапуска,ТекущаяДата()));
Запрос = Новый Запрос; 
СписокГруппНоменклатуры = Новый СписокЗначений;

	Для каждого ТЧ Из Этапы Цикл
	СписокГруппНоменклатуры.Добавить(ТЧ.ГруппаНоменклатуры);
	КонецЦикла;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	РабочиеМестаТабличнаяЧасть.ГруппаНоменклатуры,
	|	РабочиеМестаТабличнаяЧасть.Ссылка,
	|	РабочиеМестаТабличнаяЧасть.Ссылка.Код КАК Код
	|ИЗ
	|	Справочник.РабочиеМестаЛинеек.ТабличнаяЧасть КАК РабочиеМестаТабличнаяЧасть
	|ГДЕ
	|	РабочиеМестаТабличнаяЧасть.Ссылка.Линейка = &Линейка
	|	И РабочиеМестаТабличнаяЧасть.ГруппаНоменклатуры В(&СписокГруппНоменклатуры)
	|	И РабочиеМестаТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РабочиеМестаТабличнаяЧасть.Ссылка.Авторизовано = ИСТИНА";	
Запрос.УстановитьПараметр("Линейка", ПЗ.Линейка); 
Запрос.УстановитьПараметр("СписокГруппНоменклатуры", СписокГруппНоменклатуры);
РезультатЗапроса = Запрос.Выполнить();	
ВыборкаРабочиеМеста = РезультатЗапроса.Выбрать();
	Для каждого ТЧ Из Этапы Цикл
	ВыборкаРабочиеМеста.Сбросить();
	флНайден = Ложь;
		Пока ВыборкаРабочиеМеста.НайтиСледующий(Новый Структура("ГруппаНоменклатуры",ТЧ.ГруппаНоменклатуры)) Цикл
		флНайден = Истина;
		ЭтапАРМ = ЭтапыАРМ.НайтиПоЗначению(ВыборкаРабочиеМеста.Ссылка);
			Если ЭтапАРМ = Неопределено Тогда
			ЭтапыАРМ.Добавить(ВыборкаРабочиеМеста.Ссылка,Формат(ВыборкаРабочиеМеста.Код,"ЧЦ=2; ЧВН="));		
			КонецЕсли;		
		КонецЦикла; 
			Если Не флНайден Тогда
				Если ОбработкаОшибок Тогда
				ОбщийМодульВызовСервера.ОстановитьМТК(ПЗ.ДокументОснование,Исполнитель,"Автоматическое сообщение! "+СокрЛП(ТЧ.ЭтапСпецификации.Наименование)+" не найдено рабочее место для производства.",Неопределено,Неопределено,РабочееМесто);
				КонецЕсли;
			Возврат(Ложь);
			КонецЕсли;  	
	КонецЦикла;
ЭтапыАРМ.СортироватьПоПредставлению();
	Если ЭтапыАРМ.НайтиПоЗначению(РабочееМесто) = Неопределено Тогда
		Если ОбработкаОшибок Тогда
		ОбщийМодульВызовСервера.ОстановитьМТК(ПЗ.ДокументОснование,Исполнитель,"Автоматическое сообщение! Ни один этап спецификации не привязан к рабочему месту: "+СокрЛП(РабочееМесто.Наименование),Неопределено,Неопределено,РабочееМесто);
		КонецЕсли;
	Возврат(Ложь);
	КонецЕсли;	
Возврат(Истина); 
КонецФункции 

Функция ПолучитьФайлДокумента(ВыбДок,ИмяФайла = "") Экспорт
Каталог = ПолучитьТекущийКаталог(ВыбДок.Родитель);
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
	ИмяФайла = СокрЛП(ВыбДок.ИмяФайла);
	КонецЕсли; 
Возврат(Каталог+ИмяФайла);
КонецФункции

Функция ПолучитьСписокФайлов(ВыбДок) Экспорт
СписокФайлов = Новый СписокЗначений;

ИмяФайла = СокрЛП(ВыбДок.ИмяФайла);
Каталог = ПолучитьТекущийКаталог(ВыбДок.Родитель);
СписокФайлов.Добавить(ВыбДок,ИмяФайла);
СписокФайлов.Добавить("______________");
Маска = СокрЛП(Лев(ИмяФайла,СтрДлина(ИмяФайла)-4))+"*.*";
МассивНайденных = НайтиФайлы(Каталог,Маска,Истина); 
	Для Каждого Файл из МассивНайденных Цикл 
		Если Не Файл.ЭтоФайл() Тогда
		Продолжить;		
		КонецЕсли;
			Если Файл.Имя = ИмяФайла Тогда
			Продолжить;
			КонецЕсли; 
	СписокФайлов.Добавить(Файл.Имя);
	КонецЦикла;	 
Возврат(СписокФайлов);
КонецФункции

Функция ПолучитьСписокВхождений(ВыбЭлемент,НаДату) Экспорт
спНомен = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НормыРасходовСрезПоследних.Владелец КАК Владелец,
	|	СтатусыМПЗСрезПоследних.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(&НаДату, Элемент = &Элемент) КАК НормыРасходовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
	|		ПО НормыРасходовСрезПоследних.Владелец = СтатусыМПЗСрезПоследних.МПЗ
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НормыРасходовСрезПоследних.Владелец.Наименование";
Запрос.УстановитьПараметр("НаДату", КонецДня(НаДату));
Запрос.УстановитьПараметр("Элемент", ВыбЭлемент);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Владелец = ВыборкаДетальныеЗаписи.Владелец;
	спНомен.Добавить(Владелец,"["+ВыборкаДетальныеЗаписи.Статус+"] "+Владелец);
	КонецЦикла;
Возврат(спНомен);
КонецФункции

Функция ПолучитьСписокВхожденийБезСтатусов(ВыбЭлемент,НаДату) Экспорт
спНомен = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НормыРасходовСрезПоследних.Владелец КАК Владелец
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(&НаДату, Элемент = &Элемент) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	НормыРасходовСрезПоследних.Владелец.Наименование";
Запрос.УстановитьПараметр("НаДату", КонецДня(НаДату));
Запрос.УстановитьПараметр("Элемент", ВыбЭлемент);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	спНомен.Добавить(ВыборкаДетальныеЗаписи.Владелец);
	КонецЦикла;
Возврат(спНомен);
КонецФункции

Функция ПолучитьСписокВхожденийСНормой(ВыбЭлемент,НаДатуВремя) Экспорт
спНомен = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходовСрезПоследних.Владелец КАК Владелец,
	|	СУММА(НормыРасходовСрезПоследних.Норма) КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(&НаДату, Элемент = &Элемент) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	НормыРасходовСрезПоследних.Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	НормыРасходовСрезПоследних.Владелец.Наименование";
Запрос.УстановитьПараметр("НаДату", НаДатуВремя);
Запрос.УстановитьПараметр("Элемент", ВыбЭлемент);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	спНомен.Добавить(ВыборкаДетальныеЗаписи.Владелец,ВыборкаДетальныеЗаписи.Норма);
	КонецЦикла;
Возврат(спНомен);
КонецФункции

Функция ПолучитьСписокВхожденийАналога(ВыбЭлемент,НаДату) Экспорт
СписокНормРасходов = Новый СписокЗначений;

Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналогиНормРасходов.Владелец КАК Владелец
	|ИЗ
	|	РегистрСведений.АналогиНормРасходов.СрезПоследних(&НаДату, ) КАК АналогиНормРасходовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНормРасходов КАК АналогиНормРасходов
	|		ПО АналогиНормРасходовСрезПоследних.АналогНормыРасходов = АналогиНормРасходов.Ссылка
	|ГДЕ
	|	АналогиНормРасходов.Элемент = &Элемент
	|	И АналогиНормРасходовСрезПоследних.Норма > 0";
Запрос.УстановитьПараметр("НаДату", КонецДня(НаДату));
Запрос.УстановитьПараметр("Элемент", ВыбЭлемент);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокНормРасходов.Добавить(ВыборкаДетальныеЗаписи.Владелец);
	КонецЦикла;
Возврат(СписокНормРасходов);
КонецФункции

Функция ПолучитьСписокВозможныхАналогов(МПЗ,НаДату = Неопределено) Экспорт
СписокАналогов = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналогиНормРасходов.Ссылка КАК Ссылка,
	|	АналогиНормРасходов.Элемент КАК Элемент
	|ИЗ
	|	Справочник.АналогиНормРасходов КАК АналогиНормРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормыРасходов.СрезПоследних(&НаДату, ) КАК НормыРасходовСрезПоследних
	|		ПО АналогиНормРасходов.Владелец = НормыРасходовСрезПоследних.НормаРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
	|		ПО АналогиНормРасходов.Владелец.Владелец = СтатусыМПЗСрезПоследних.МПЗ
	|ГДЕ
	|	АналогиНормРасходов.Владелец.Элемент = &Элемент
	|	И НормыРасходовСрезПоследних.Норма > 0
	|	И СтатусыМПЗСрезПоследних.Статус <> &Статус";
Запрос.УстановитьПараметр("Элемент", МПЗ);
Запрос.УстановитьПараметр("НаДату", ?(НаДату = Неопределено,КонецДня(ТекущаяДата()),НаДату));
Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыСпецификаций.Запрещённая);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НормыАНР = ОбщегоНазначенияПовтИсп.АналогиНормРасходов_ПолучитьПоследнее(ВыборкаДетальныеЗаписи.Ссылка);
		Если НормыАНР.Норма > 0 Тогда
			Если СписокАналогов.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Элемент) = Неопределено Тогда
			СписокАналогов.Добавить(ВыборкаДетальныеЗаписи.Элемент,ВыборкаДетальныеЗаписи.Ссылка.Наименование);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
СписокАналогов.СортироватьПоЗначению();
Возврат(СписокАналогов);
КонецФункции

Функция ПолучитьСписокПримененияВКачествеАналога(МПЗ,НаДату) Экспорт
СписокОсновныхМПЗ = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналогиНормРасходов.Владелец.Элемент КАК Элемент,
	|	АналогиНормРасходов.Владелец КАК Ссылка
	|ИЗ
	|	Справочник.АналогиНормРасходов КАК АналогиНормРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НормыРасходов.СрезПоследних(&НаДату, ) КАК НормыРасходовСрезПоследних
	|		ПО АналогиНормРасходов.Владелец = НормыРасходовСрезПоследних.НормаРасходов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
	|		ПО АналогиНормРасходов.Владелец.Владелец = СтатусыМПЗСрезПоследних.МПЗ
	|ГДЕ
	|	АналогиНормРасходов.Элемент = &Элемент
	|	И НормыРасходовСрезПоследних.Норма > 0
	|	И СтатусыМПЗСрезПоследних.Статус <> &Статус";
Запрос.УстановитьПараметр("Элемент", МПЗ);
Запрос.УстановитьПараметр("НаДату", КонецДня(НаДату));
Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыСпецификаций.Запрещённая);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	НормыАНР = ОбщегоНазначенияПовтИсп.АналогиНормРасходов_ПолучитьПоследнее(ВыборкаДетальныеЗаписи.Ссылка,ТекущаяДата());
		Если НормыАНР.Норма > 0 Тогда
			Если СписокОсновныхМПЗ.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Элемент) = Неопределено Тогда
			СписокОсновныхМПЗ.Добавить(ВыборкаДетальныеЗаписи.Элемент);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
СписокОсновныхМПЗ.СортироватьПоЗначению();
Возврат(СписокОсновныхМПЗ);
КонецФункции

Процедура ПолучитьСпецификациюСАналогами(ТаблицаСпецификации,ПЗ,Спецификация,ЭтапСпецификации,КолУзла,Владелец = "") Экспорт
ТаблицаАналогов = ?(ПЗ.Линейка.ВидЛинейки = Перечисления.ВидыЛинеек.Канбан,ПЗ.ДокументОснование.Аналоги,ПЗ.Аналоги); 
ВыборкаНР = ПолучитьНормыРасходовПоВладельцу_Все(ЭтапСпецификации,ПЗ.ДатаЗапуска);
	Пока ВыборкаНР.Следующий() Цикл
	ТипЗнач = ТипЗнч(ВыборкаНР.Ссылка.Элемент);
	Позиция = ВыборкаНР.Ссылка.Позиция;
		Если ТипЗнач = Тип("СправочникСсылка.Материалы")Тогда
		ВыбАналог = ТаблицаАналогов.НайтиСтроки(Новый Структура("Спецификация,НормаРасходов",Спецификация,ВыборкаНР.Ссылка)); 
			Если ВыбАналог.Количество() = 0 Тогда
			НР = ВыборкаНР.Ссылка;
			Количество = ВыборкаНР.Норма*КолУзла; 
			Аналог = Ложь;
			Иначе
			НР = ВыбАналог[0].АналогНормыРасходов;
			НормыАНР = РегистрыСведений.АналогиНормРасходов.ПолучитьПоследнее(ПЗ.ДатаЗапуска,Новый Структура("АналогНормыРасходов",НР));
			Количество = НормыАНР.Норма*КолУзла;
			Аналог = Истина;
			КонецЕсли;
		ИначеЕсли ТипЗнач = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда
			ПолучитьСпецификациюСАналогами(ТаблицаСпецификации,ПЗ,Спецификация,ВыборкаНР.Ссылка.Элемент,ВыборкаНР.Норма*КолУзла,ВыборкаНР.Ссылка);
			Продолжить;
			КонецЕсли;
		ВыбАналог = ТаблицаАналогов.НайтиСтроки(Новый Структура("Спецификация,НормаРасходов",Спецификация,ВыборкаНР.Ссылка));  
			Если ВыбАналог.Количество() = 0 Тогда
			НР = ВыборкаНР.Ссылка;
			Количество = ВыборкаНР.Норма*КолУзла; 
			Аналог = Ложь;
			Иначе
			НР = ВыбАналог[0].АналогНормыРасходов;
			НормыАНР = РегистрыСведений.АналогиНормРасходов.ПолучитьПоследнее(ПЗ.ДатаЗапуска,Новый Структура("АналогНормыРасходов",НР));
			Количество = НормыАНР.Норма*КолУзла;
			Аналог = Истина;
			КонецЕсли;	
		ИначеЕсли ТипЗнач = Тип("СправочникСсылка.Документация")Тогда
		НР = ВыборкаНР.Ссылка;
		Количество = 0;
		Аналог = Ложь;
		Иначе
		Продолжить;
		КонецЕсли; 
	ТЧ = ТаблицаСпецификации.Добавить();
	ТЧ.Владелец = Владелец;	
	ТЧ.ЭтапСпецификации = Спецификация;
		Если ЗначениеЗаполнено(Владелец) Тогда
			Если Не ЗначениеЗаполнено(Владелец.Позиция) Тогда
			ТЧ.Позиция = Позиция;
			Иначе	
			ТЧ.Позиция = СокрЛП(Владелец.Позиция)+":"+Позиция;
			КонецЕсли;
		Иначе
		ТЧ.Позиция = Позиция;
		КонецЕсли;
	ТЧ.ТипСправочника = ТипЗнч(НР.Элемент);
	ТЧ.ВидМПЗ = НР.ВидЭлемента;
	ТЧ.МПЗ = НР.Элемент;
	ТЧ.Количество = Количество;
		Попытка
		ТЧ.ЕдиницаИзмерения = НР.Элемент.ОсновнаяЕдиницаИзмерения;
		Исключение
		КонецПопытки;
	ТЧ.Примечание = НР.Примечание;
	ТЧ.Аналог = Аналог;		
	КонецЦикла;	
КонецПроцедуры

Процедура ПроверитьНаличиеНаСкладе(МестоХраненияКанбанов,Этапы,ТаблицаМПЗ,ТаблицаРезервирования,СписокЛО,КолМТК = 1) Экспорт
ТаблицаРезервирования.Очистить();
СписокЛО.Очистить();
ТаблицаСкладаВиртуальная = СоздатьТаблицуОстатковВиртуальногоСклада(МестоХраненияКанбанов,ТекущаяДата());
	Для каждого ТЧ Из Этапы Цикл
	ЗаполнитьПроверочныеТаблицы(ТЧ.ЭтапСпецификации,ТЧ.ЭтапСпецификации,ТЧ.Количество*КолМТК,ТаблицаСкладаВиртуальная,Этапы,ТаблицаМПЗ,ТаблицаРезервирования,СписокЛО);
	КонецЦикла; 
КонецПроцедуры

Функция ПроверитьНаборАналогов(ТаблицаСкладаВиртуальная,Набор,Количество)
ВыборкаНР = ПолучитьНормыРасходовПоВладельцу_М(Набор,ТекущаяДата());
	Пока ВыборкаНР.Следующий() Цикл       
	Требуется = ВыборкаНР.Норма*Количество;
	Выборка = ТаблицаСкладаВиртуальная.Найти(ВыборкаНР.Элемент,"МПЗ");
		Если Выборка <> Неопределено Тогда
			Если Выборка.Количество >= Требуется Тогда
			Выборка.Количество = Выборка.Количество - Требуется; 
			Иначе
			Возврат(Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
Возврат(Истина);
КонецФункции

Процедура ЗаполнитьПроверочныеТаблицы(Спецификация,ЭтапСпецификации,КолУзла,ТаблицаСкладаВиртуальная,Этапы,ТаблицаМПЗ,ТаблицаРезервирования,СписокЛО,ТаблицаОстановленныхКанбанов = Неопределено)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходовСрезПоследних.НормаРасходов.Ссылка КАК Ссылка,
	|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
	|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(
	|			&НаДату,
	|			Владелец = &Владелец
	|				И НормаРасходов.ПометкаУдаления = ЛОЖЬ
	|				И (Элемент ССЫЛКА Справочник.Номенклатура
	|					ИЛИ Элемент ССЫЛКА Справочник.Материалы)) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0";
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
Запрос.УстановитьПараметр("Владелец", ЭтапСпецификации);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
	Пока ВыборкаНР.Следующий() Цикл
	Ссылка = ВыборкаНР.Ссылка;
	Элемент = ВыборкаНР.Элемент;
		Если ТипЗнч(Элемент) = Тип("СправочникСсылка.Материалы") Тогда
			Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.МатериалВспомогательный Тогда
			Продолжить;
			КонецЕсли;
		ВидМПЗ = Перечисления.ВидыМПЗ.Материалы;		
		Иначе
			Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда
			ЗаполнитьПроверочныеТаблицы(Спецификация,Элемент,ВыборкаНР.Норма*КолУзла,ТаблицаСкладаВиртуальная,Этапы,ТаблицаМПЗ,ТаблицаРезервирования,СписокЛО,ТаблицаОстановленныхКанбанов); 
			Продолжить;
			ИначеЕсли Не Элемент.Канбан.Пустая() Тогда
				Если Не Элемент.Канбан.РезервироватьВПроизводстве Тогда
					Если ТаблицаОстановленныхКанбанов <> Неопределено Тогда	
					Запрос.Текст = 
						"ВЫБРАТЬ ПЕРВЫЕ 1
						|	ОстановкиКанбанов.Причина
						|ИЗ
						|	РегистрСведений.ОстановкиКанбанов КАК ОстановкиКанбанов
						|ГДЕ
						|	ОстановкиКанбанов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
						|	И ОстановкиКанбанов.МПЗ = &МПЗ";
					Запрос.УстановитьПараметр("МПЗ", Элемент);
					РезультатЗапроса = Запрос.Выполнить();
					ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
						Если ВыборкаДетальныеЗаписи.Следующий() Тогда
						ТЧ = ТаблицаОстановленныхКанбанов.Добавить();
						ТЧ.МПЗ = Элемент;
						ТЧ.Причина = ВыборкаДетальныеЗаписи.Причина;
						КонецЕсли; 
					КонецЕсли;
				Продолжить;
				КонецЕсли;			
			КонецЕсли;
		Выборка = Этапы.НайтиСтроки(Новый Структура("ЭтапСпецификации",Элемент));
        	Если Выборка.Количество() > 0 Тогда
			Продолжить;
			КонецЕсли;
		ВидМПЗ = Перечисления.ВидыМПЗ.Полуфабрикаты;
		КонецЕсли; 
	ТаблицаМПЗ.Очистить();
	ТЧ = ТаблицаМПЗ.Добавить();
	ТЧ.ВидМПЗ = ВидМПЗ;
	ТЧ.МПЗ = Элемент;
	ТЧ.НормаРасходов = Ссылка;
	ТЧ.Количество = ВыборкаНР.Норма*КолУзла;
	ТЧ.Приоритет = 1;
	ТаблицаАналогов = ОбщегоНазначенияПовтИсп.ПолучитьАналогиНормРасходов(Ссылка);
		Для каждого ТЧ_ТА Из ТаблицаАналогов Цикл 
		ТЧ = ТаблицаМПЗ.Добавить();
		ТЧ.ВидМПЗ = ?(ТипЗнч(ТЧ_ТА.Ссылка.Элемент) = Тип("СправочникСсылка.Материалы"),Перечисления.ВидыМПЗ.Материалы,Перечисления.ВидыМПЗ.Полуфабрикаты);
		ТЧ.МПЗ = ТЧ_ТА.Ссылка.Элемент;
		ТЧ.НормаРасходов = ТЧ_ТА.Ссылка;
		ТЧ.Количество = ТЧ_ТА.Норма*КолУзла;
		ТЧ.Аналог = Истина;
		Статус = ПолучитьСтатус(ТЧ_ТА.Ссылка.Элемент);
			Если Статус = Перечисления.СтатусыМПЗ.ДоИсчерпанияЗапасов Тогда
			ТЧ.Приоритет = 0;
			ИначеЕсли Статус = Перечисления.СтатусыМПЗ.ПроблеммыЛогистики Тогда
			ТЧ.Приоритет = 0;			
			Иначе	
			ТЧ.Приоритет = ТЧ_ТА.Ссылка.Приоритет + 1;
			КонецЕсли; 
		КонецЦикла;
	ТаблицаМПЗ.Сортировать("Приоритет");
	флЗарезервирован = Ложь;
		Для каждого ТЧ Из ТаблицаМПЗ Цикл
		Требуется = ПолучитьБазовоеКоличество(ТЧ.Количество,ТЧ.МПЗ.ОсновнаяЕдиницаИзмерения);
			Если ТЧ.НормаРасходов.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда
				Если ПроверитьНаборАналогов(ТаблицаСкладаВиртуальная,ТЧ.МПЗ,ТЧ.Количество) Тогда
				ТЧРезерв = ТаблицаРезервирования.Добавить();
				ТЧРезерв.Номенклатура = Спецификация;
				ТЧРезерв.ВидМПЗ = ТЧ.ВидМПЗ;
				ТЧРезерв.МПЗ = ТЧ.МПЗ;
				ТЧРезерв.НормаРасходов = ТЧ.НормаРасходов;
				ТЧРезерв.Количество = ТЧ.Количество;
				ТЧРезерв.ЕдиницаИзмерения = ТЧ.МПЗ.ОсновнаяЕдиницаИзмерения;
					Если ТЧ.Аналог Тогда
					ТЧРезерв.ОсновнаяНормаРасходов = Ссылка;
					КонецЕсли; 
				флЗарезервирован = Истина;
				Прервать;
				КонецЕсли;			
			Иначе
			Выборка = ТаблицаСкладаВиртуальная.Найти(ТЧ.МПЗ,"МПЗ");
				Если Выборка <> Неопределено Тогда
					Если Выборка.Количество >= Требуется Тогда
					Выборка.Количество = Выборка.Количество - Требуется;
					ТЧРезерв = ТаблицаРезервирования.Добавить();
					ТЧРезерв.Номенклатура = Спецификация;
					ТЧРезерв.ВидМПЗ = ТЧ.ВидМПЗ;
					ТЧРезерв.МПЗ = ТЧ.МПЗ;
					ТЧРезерв.НормаРасходов = ТЧ.НормаРасходов;
					ТЧРезерв.Количество = ТЧ.Количество;
					ТЧРезерв.ЕдиницаИзмерения = ТЧ.МПЗ.ОсновнаяЕдиницаИзмерения;
						Если ТЧ.Аналог Тогда
						ТЧРезерв.ОсновнаяНормаРасходов = Ссылка;
						КонецЕсли; 
					флЗарезервирован = Истина;
					Прервать;
					КонецЕсли;
				КонецЕсли;			
			КонецЕсли; 
		КонецЦикла;
			Если Не флЗарезервирован Тогда
			СписокЛО.Добавить(Ссылка);	
			КонецЕсли;  		
	КонецЦикла;	 
КонецПроцедуры

Функция ЗапуститьВПроизводство(ПЗ,РабочееМесто,Этапы,БарКод = Неопределено,ЗаписатьДатуНачалаЭтапа = Истина,Исполнитель = Неопределено,ДатаПП = Неопределено) Экспорт
	Если Не ПЗ.Изделие.Товар.Пустая() Тогда
		Если ПЗ.Изделие.Товар.ТоварнаяГруппа.Пустая() Тогда
		ОстановитьМТК(ПЗ.ДокументОснование,ПЗ.Подразделение,"Товару не присвоена товарная группа!",,,,"Автоматическое сообщение!");
		Возврат(0); //Остановка МТК
		КонецЕсли;
	КонецЕсли;
СписокЛО = Новый СписокЗначений;
МассивМПЗ = Новый Массив;

МассивМПЗ.Добавить(Тип("СправочникСсылка.Номенклатура"));
МассивМПЗ.Добавить(Тип("СправочникСсылка.Материалы"));
ОписаниеТиповСправочниковМПЗ = Новый ОписаниеТипов(МассивМПЗ);

МассивНормРасходов = Новый Массив;

МассивНормРасходов.Добавить(Тип("СправочникСсылка.НормыРасходов"));
МассивНормРасходов.Добавить(Тип("СправочникСсылка.АналогиНормРасходов"));

ОписаниеТиповСправочниковНормРасходов = Новый ОписаниеТипов(МассивНормРасходов);
ТаблицаМПЗ = Новый ТаблицаЗначений;

ТаблицаМПЗ.Колонки.Добавить("ВидМПЗ",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
ТаблицаМПЗ.Колонки.Добавить("МПЗ",ОписаниеТиповСправочниковМПЗ);
ТаблицаМПЗ.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(9,3)));
ТаблицаМПЗ.Колонки.Добавить("Аналог",Новый ОписаниеТипов("Булево"));
ТаблицаМПЗ.Колонки.Добавить("Приоритет",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(2,0)));
ТаблицаМПЗ.Колонки.Добавить("НормаРасходов",ОписаниеТиповСправочниковНормРасходов);

ТаблицаРезервирования = Новый ТаблицаЗначений;

ТаблицаРезервирования.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ТаблицаРезервирования.Колонки.Добавить("ВидМПЗ",Новый ОписаниеТипов("ПеречислениеСсылка.ВидыМПЗ"));
ТаблицаРезервирования.Колонки.Добавить("МПЗ",ОписаниеТиповСправочниковМПЗ);
ТаблицаРезервирования.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(9,3)));
ТаблицаРезервирования.Колонки.Добавить("ЕдиницаИзмерения",Новый ОписаниеТипов("СправочникСсылка.ОсновныеЕдиницыИзмерений"));
ТаблицаРезервирования.Колонки.Добавить("ОсновнаяНормаРасходов",Новый ОписаниеТипов("СправочникСсылка.НормыРасходов"));
ТаблицаРезервирования.Колонки.Добавить("НормаРасходов",ОписаниеТиповСправочниковНормРасходов);

ТаблицаОстановленныхКанбанов = Новый ТаблицаЗначений;

ТаблицаОстановленныхКанбанов.Колонки.Добавить("МПЗ",ОписаниеТиповСправочниковМПЗ);
ТаблицаОстановленныхКанбанов.Колонки.Добавить("Причина");

ТаблицаСкладаВиртуальная = СоздатьТаблицуОстатковВиртуальногоСклада(ПЗ.Линейка.МестоХраненияКанбанов,?(ДатаПП = Неопределено,ТекущаяДата(),ДатаПП));
	Для каждого ТЧ Из Этапы Цикл
	ЗаполнитьПроверочныеТаблицы(ТЧ.ЭтапСпецификации,ТЧ.ЭтапСпецификации,ТЧ.Количество*ПЗ.Количество,ТаблицаСкладаВиртуальная,Этапы,ТаблицаМПЗ,ТаблицаРезервирования,СписокЛО,ТаблицаОстановленныхКанбанов);
	КонецЦикла; 
		Если ТаблицаОстановленныхКанбанов.Количество() > 0 Тогда
		ОстановитьМТК(ПЗ.ДокументОснование,ТаблицаОстановленныхКанбанов[0].МПЗ.Канбан.Подразделение,ТаблицаОстановленныхКанбанов[0].Причина,ТаблицаОстановленныхКанбанов[0].МПЗ);
		Возврат(0); //Остановка МТК или ПЗ в ЛО
		ИначеЕсли СписокЛО.Количество() > 0 Тогда
			Если ОбщийМодульРаботаСРегистрами.ОбработкаЛьготнойОчереди(ПЗ,СписокЛО) Тогда
			Возврат(0); //Остановка МТК или ПЗ в ЛО			
			Иначе	
			Возврат(-1); //Ошибка обработки ЛО			
			КонецЕсли;
		Иначе
			Попытка
			НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
				Если Не ОбщийМодульРаботаСРегистрами.ОбработкаЛьготнойОчереди(ПЗ,СписокЛО) Тогда
				Возврат(-1); //Ошибка обработки ЛО			
				КонецЕсли;
			ОбщийМодульРаботаСРегистрами.ОбработкаЛьготнойОчереди(ПЗ,СписокЛО);
				Если БарКод <> Неопределено Тогда
				ПЗОбъект = ПЗ.ПолучитьОбъект();
				ПЗОбъект.БарКод = БарКод;
				ПЗОбъект.Записать();
				БарКоды = РегистрыСведений.БарКоды.СоздатьМенеджерЗаписи();
				БарКоды.Период = ТекущаяДата();
				БарКоды.ПЗ = ПЗ;
				БарКоды.Изделие = ПЗ.Изделие;
				БарКоды.Товар = ПЗ.Изделие.Товар;
				БарКоды.БарКод = БарКод;
				БарКоды.Записать();
				НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПЗ.Установить(ПЗ);
				НаборЗаписей.Прочитать();
				    Для Каждого Запись Из НаборЗаписей Цикл 
				    	Если Запись.РабочееМесто = РабочееМесто Тогда
		        		Запись.БарКод = БарКод;
						Прервать;
						КонецЕсли;  
				    КонецЦикла;
				НаборЗаписей.Записать();
				КонецЕсли;
					Если ОбщийМодульСозданиеДокументов.СоздатьПередачуВПроизводство(ПЗ,ТаблицаРезервирования,ДатаПП) Тогда
						Если ЗаписатьДатуНачалаЭтапа Тогда
							Если Исполнитель <> Неопределено Тогда
							Парам = Новый Структура("РабочееМесто,Исполнитель,ДатаНачала",РабочееМесто,Исполнитель,ТекущаяДата());
							Иначе	
							Парам = Новый Структура("РабочееМесто,Исполнитель,ДатаНачала",РабочееМесто,ПараметрыСеанса.Пользователь,ТекущаяДата());
							КонецЕсли;
						ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(ПЗ,Парам);
						КонецЕсли;
					ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
					Возврат(1); //Запуск ПЗ
					Иначе
					ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
					Возврат(-1); //Ошибка создания передачи в производство
					КонецЕсли;
			Исключение
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Сообщить(ОписаниеОшибки());
			Возврат(-1);
			КонецПопытки; 
		КонецЕсли;
КонецФункции

Функция ПроверитьОстановкуКанбана(ПЗ,ТаблицаСпецификации) Экспорт
Запрос = Новый Запрос;

	Для каждого ТЧ Из ТаблицаСпецификации Цикл
		Если ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда			
			Если Не ТЧ.МПЗ.Канбан.Пустая() Тогда
				Если Не ТЧ.МПЗ.Канбан.РезервироватьВПроизводстве Тогда	
				Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	ОстановкиКанбанов.Причина
					|ИЗ
					|	РегистрСведений.ОстановкиКанбанов КАК ОстановкиКанбанов
					|ГДЕ
					|	ОстановкиКанбанов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
					|	И ОстановкиКанбанов.МПЗ = &МПЗ";
				Запрос.УстановитьПараметр("МПЗ", ТЧ.МПЗ);
				РезультатЗапроса = Запрос.Выполнить();
				ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
					Если ВыборкаДетальныеЗаписи.Следующий() Тогда
					ОстановитьМТК(ПЗ.ДокументОснование,ТЧ.МПЗ.Канбан.Подразделение,ВыборкаДетальныеЗаписи.Причина,ТЧ.МПЗ);
					Возврат(Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли; 		
		КонецЕсли; 	
	КонецЦикла;
Возврат(Истина); 
КонецФункции

Процедура ПолучитьКомплектацию(Спецификация,ЭтапСпецификации,КолУзла,флКомплектация,ТаблицаКомплектации,НаДату) Экспорт
Запрос = Новый Запрос;

Запрос.Текст =
	"ВЫБРАТЬ
	|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
	|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(
	|			&НаДату,
	|			Владелец = &Владелец
	|				И (Элемент ССЫЛКА Справочник.Номенклатура
	|					ИЛИ Элемент ССЫЛКА Справочник.Документация)) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("НаДату", НаДату);
Запрос.УстановитьПараметр("Владелец", ЭтапСпецификации);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
	Пока ВыборкаНР.Следующий() Цикл
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда
			ПолучитьКомплектацию(Спецификация,ВыборкаНР.Элемент,ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла,флКомплектация,ТаблицаКомплектации,НаДату);
			Продолжить;
			КонецЕсли; 
				Если флКомплектация Тогда
					Если ВыборкаНР.Элемент.Канбан.Пустая() Тогда
					Продолжить;
					КонецЕсли; 
				КонецЕсли; 
		Выборка = ТаблицаКомплектации.НайтиСтроки(Новый Структура("ЭтапСпецификации,Комплектация",Спецификация,ВыборкаНР.Элемент));
			Если Выборка.Количество() = 0 Тогда
            ТЧТК = ТаблицаКомплектации.Добавить();
			ТЧТК.ЭтапСпецификации = Спецификация;
			ТЧТК.ВидЭлемента = ВыборкаНР.ВидЭлемента;
			ТЧТК.Комплектация = ВыборкаНР.Элемент;
	        ТЧТК.Количество = ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла;
			ТЧТК.ЕдиницаИзмерения = ВыборкаНР.Элемент.ЕдиницаИзмерения;
			ТЧТК.Компл = флКомплектация;
				Если Не ВыборкаНР.Элемент.Канбан.Пустая() Тогда	
				ТЧТК.КанбанБезРезервирования = Не ВыборкаНР.Элемент.Канбан.РезервироватьВПроизводстве; 					
				КонецЕсли; 
			Иначе
			Выборка[0].Количество = Выборка[0].Количество + ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла;
			КонецЕсли;
		Иначе
			Если флКомплектация Тогда
            ТЧТК = ТаблицаКомплектации.Добавить();
			ТЧТК.ЭтапСпецификации = Спецификация;
			ТЧТК.ВидЭлемента = ВыборкаНР.ВидЭлемента;
			ТЧТК.Комплектация = ВыборкаНР.Элемент;
			ТЧТК.Компл = флКомплектация;
	        КонецЕсли;
		КонецЕсли; 	
	КонецЦикла;	
КонецПроцедуры

Функция ПолучитьСтоимостьМПЗ(МПЗ,КолУзла,НаДатуВремя,Стоимость = 0,ПолнаяСебестоимость = Ложь) Экспорт
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ПолнаяСебестоимость Тогда
		РС = РегистрыСведений.Себестоимость.ПолучитьПоследнее(НаДатуВремя,Новый Структура("Номенклатура,Подразделение,Линейка",МПЗ,МПЗ.Канбан.Подразделение,МПЗ.Линейка));
		Возврат(РС.СебестоимостьПолная);
		Иначе
		ВыборкаНР = ПолучитьНормыРасходовПоВладельцу_Н_М(МПЗ,НаДатуВремя);
			Пока ВыборкаНР.Следующий() Цикл			
				Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Материалы")Тогда
				Цены = РегистрыСведений.Цены.ПолучитьПоследнее(НаДатуВремя,Новый Структура("МПЗ",ВыборкаНР.Элемент));
				Стоимость = Стоимость + ПолучитьБазовоеКоличествоБезОкругления(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*Цены.Цена*КолУзла;
				Иначе
				ПолучитьСтоимостьМПЗ(ВыборкаНР.Элемент,ПолучитьБазовоеКоличествоБезОкругления(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла,НаДатуВремя,Стоимость,ПолнаяСебестоимость);
				КонецЕсли;
			КонецЦикла;
		Возврат(Окр(Стоимость,2,1));
		КонецЕсли;
	Иначе	
	Цены = РегистрыСведений.Цены.ПолучитьПоследнее(НаДатуВремя,Новый Структура("МПЗ",МПЗ));
	Возврат(Цены.Цена);	
	КонецЕсли;
КонецФункции

Функция ПолучитьСредневзвешеннуюСтоимостьМПЗ(МПЗ,НаДатуВремя) Экспорт
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
	РС = РегистрыСведений.Себестоимость.ПолучитьПоследнее(НаДатуВремя,Новый Структура("Номенклатура,Подразделение,Линейка",МПЗ,МПЗ.Канбан.Подразделение,МПЗ.Линейка));
	Возврат(РС.СебестоимостьПолная);
	Иначе	
	ЦеныСредние = РегистрыСведений.ЦеныСредние.ПолучитьПоследнее(НаДатуВремя,Новый Структура("МПЗ",МПЗ));
	Возврат(ЦеныСредние.Цена);	
	КонецЕсли;
КонецФункции

Процедура ПолучитьСебестоимостьНоменклатуры(ЭтапСпецификации,КолУзла,НаДатуВремя,Себестоимость = 0,ТаблицаЦенИзмененных = Неопределено) Экспорт
ВыборкаНР = ПолучитьНормыРасходовПоВладельцу_Н_М(ЭтапСпецификации,НаДатуВремя);
	Пока ВыборкаНР.Следующий() Цикл			
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Материалы")Тогда
		Цена = РегистрыСведений.Цены.ПолучитьПоследнее(НаДатуВремя,Новый Структура("МПЗ",ВыборкаНР.Элемент)).Цена;
			Если Цена = 0 Тогда
			Выборка = РегистрыСведений.ЦеныПлановые.СрезПоследних(НаДатуВремя,Новый Структура("МПЗ",ВыборкаНР.Элемент));			
				Если Выборка.Количество() > 0 Тогда
				Цена = Выборка[0].Цена;
				Иначе
				Цена = 0;
				КонецЕсли; 
			КонецЕсли;
				Если ТаблицаЦенИзмененных <> Неопределено Тогда
				Выборка = ТаблицаЦенИзмененных.НайтиСтроки(Новый Структура("МПЗ",ВыборкаНР.Элемент));
					Если Выборка.Количество() > 0 Тогда
						Если Выборка[0].ЦенаИзмененная > 0 Тогда
						Цена = Выборка[0].ЦенаИзмененная;
						КонецЕсли;				
					КонецЕсли;
				КонецЕсли;  
		Себестоимость = Себестоимость + ПолучитьБазовоеКоличествоБезОкругления(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*Цена*КолУзла;
		Иначе
		ПолучитьСебестоимостьНоменклатуры(ВыборкаНР.Элемент,ПолучитьБазовоеКоличествоБезОкругления(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла,НаДатуВремя,Себестоимость,ТаблицаЦенИзмененных);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ПолучитьСебестоимостьНоменклатурыСИзмененнымиЦенами(ЭтапСпецификации,КолУзла,НаДатуВремя,Себестоимость = 0,СебестоимостьИзм = 0,ТаблицаЦенИзмененных = Неопределено) Экспорт
ВыборкаНР = ПолучитьНормыРасходовПоВладельцу_Н_М(ЭтапСпецификации,НаДатуВремя);
	Пока ВыборкаНР.Следующий() Цикл			
	Количество = ПолучитьБазовоеКоличествоБезОкругления(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения);
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Материалы")Тогда
		Цена = РегистрыСведений.Цены.ПолучитьПоследнее(НаДатуВремя,Новый Структура("МПЗ",ВыборкаНР.Элемент)).Цена;
			Если Цена = 0 Тогда
			Выборка = РегистрыСведений.ЦеныПлановые.СрезПоследних(НаДатуВремя,Новый Структура("МПЗ",ВыборкаНР.Элемент));			
				Если Выборка.Количество() > 0 Тогда
				Цена = Выборка[0].Цена;
				КонецЕсли; 
			КонецЕсли;
		ЦенаИзм = Цена;
			Если ТаблицаЦенИзмененных <> Неопределено Тогда
			Выборка = ТаблицаЦенИзмененных.НайтиСтроки(Новый Структура("МПЗ",ВыборкаНР.Элемент));
				Если Выборка.Количество() > 0 Тогда
					Если Выборка[0].ЦенаИзмененная > 0 Тогда
					ЦенаИзм = Выборка[0].ЦенаИзмененная;
					КонецЕсли;				
				КонецЕсли;
			КонецЕсли;  
		Себестоимость = Себестоимость + Количество*КолУзла*Цена;
		СебестоимостьИзм = СебестоимостьИзм + Количество*КолУзла*ЦенаИзм;
		Иначе
		ПолучитьСебестоимостьНоменклатурыСИзмененнымиЦенами(ВыборкаНР.Элемент,Количество*КолУзла,НаДатуВремя,Себестоимость,СебестоимостьИзм,ТаблицаЦенИзмененных);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция ОпределитьДатуПоследнегоИзменения(Спецификация,ВсяСпецификация,НаДату,ДатаПоследнегоИзменения) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходовСрезПоследних.Период КАК Период,
	|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
	|	НормыРасходовСрезПоследних.НормаРасходов.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(&НаДату, Владелец = &Владелец) КАК НормыРасходовСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
Запрос.УстановитьПараметр("Владелец", Спецификация);
Запрос.УстановитьПараметр("НаДату", КонецДня(НаДату));
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
флПервый = Истина;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если флПервый Тогда
		ДатаПоследнегоИзменения = ?(ДатаПоследнегоИзменения > ВыборкаДетальныеЗаписи.Период,ДатаПоследнегоИзменения,ВыборкаДетальныеЗаписи.Период);
		флПервый = Ложь;		
		КонецЕсли;
			Если ВыборкаДетальныеЗаписи.Норма > 0 Тогда
				Если ВсяСпецификация Тогда
					Если (ВыборкаДетальныеЗаписи.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа)или(ВыборкаДетальныеЗаписи.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор) Тогда		
					ОпределитьДатуПоследнегоИзменения(ВыборкаДетальныеЗаписи.Элемент,ВсяСпецификация,НаДату,ДатаПоследнегоИзменения);
					КонецЕсли; 
				Иначе
					Если ВыборкаДетальныеЗаписи.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда		
					ОпределитьДатуПоследнегоИзменения(ВыборкаДетальныеЗаписи.Элемент,ВсяСпецификация,НаДату,ДатаПоследнегоИзменения);
					КонецЕсли;	
				КонецЕсли;
			КонецЕсли; 
	КонецЦикла;	
Возврат(ДатаПоследнегоИзменения);		
КонецФункции

Процедура ПолучитьТаблицуМПЗиАналогов(ТаблицаМПЗ,ЭтапСпецификации,МПЗ,КолУзла) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходовСрезПоследних.НормаРасходов КАК Ссылка,
	|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
	|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(
	|			&НаДату,
	|			Владелец = &Владелец
	|				И (ТИПЗНАЧЕНИЯ(Элемент) = ТИП(Справочник.Номенклатура)
	|					ИЛИ Элемент = &МПЗ)) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
Запрос.УстановитьПараметр("Владелец", ЭтапСпецификации);
Запрос.УстановитьПараметр("МПЗ", МПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
	Пока ВыборкаНР.Следующий() Цикл 
	Элемент = ВыборкаНР.Элемент;
		Если ТипЗнч(Элемент) = Тип("СправочникСсылка.Материалы")Тогда
			Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.МатериалВспомогательный Тогда
			Продолжить;
			КонецЕсли;	
		Иначе
			Если (ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор)или(Элемент.Канбан.Пустая()) Тогда
			ПолучитьТаблицуМПЗиАналогов(ТаблицаМПЗ,Элемент,МПЗ,ПолучитьБазовоеКоличество(ВыборкаНР.Норма,Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла);
			Продолжить;
			Иначе
				Если Элемент <> МПЗ Тогда
				Продолжить;
				КонецЕсли;						
			КонецЕсли;
		КонецЕсли;	
	ТЧ = ТаблицаМПЗ.Добавить();
	ТЧ.МПЗ = Элемент;
	ТЧ.Количество = ПолучитьБазовоеКоличество(ВыборкаНР.Норма,Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла;
	ТаблицаАналогов = ОбщегоНазначенияПовтИсп.ПолучитьАналогиНормРасходов(ВыборкаНР.Ссылка);
		Для каждого ТЧ_ТА Из ТаблицаАналогов Цикл
		ТЧ = ТаблицаМПЗ.Добавить();
		ТЧ.МПЗ = ТЧ_ТА.Элемент;
		ТЧ.Количество = ПолучитьБазовоеКоличество(ТЧ_ТА.Норма,ТЧ_ТА.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла; 
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры 

Функция ПроверитьМПЗИАналоги(ТаблицаМПЗ,ТаблицаВиртуальногоСклада,ЭтапСпецификации,МПЗ,КолУзла,ПричиныИЛО = Неопределено)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходовСрезПоследних.НормаРасходов КАК Ссылка,
	|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
	|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(
	|			&НаДату,
	|			Владелец = &Владелец
	|				И (ТИПЗНАЧЕНИЯ(Элемент) = ТИП(Справочник.Номенклатура)
	|					ИЛИ Элемент = &МПЗ)) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
Запрос.УстановитьПараметр("Владелец", ЭтапСпецификации);
Запрос.УстановитьПараметр("МПЗ", МПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
	Пока ВыборкаНР.Следующий() Цикл 
	Элемент = ВыборкаНР.Элемент;
		Если ТипЗнч(Элемент) = Тип("СправочникСсылка.Материалы")Тогда
			Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.МатериалВспомогательный Тогда
			Продолжить;
			КонецЕсли;	
		Иначе
			Если (ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор)или(Элемент.Канбан.Пустая()) Тогда
				Если Не ПроверитьМПЗИАналоги(ТаблицаМПЗ,ТаблицаВиртуальногоСклада,Элемент,МПЗ,ПолучитьБазовоеКоличество(ВыборкаНР.Норма,Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла,ПричиныИЛО) Тогда
				Возврат(Ложь);				
				КонецЕсли;
			Продолжить;
			Иначе
				Если Элемент <> МПЗ Тогда
				Продолжить;
				КонецЕсли;						
			КонецЕсли;
		КонецЕсли;	
	ТЧ = ТаблицаМПЗ.Добавить();
	ТЧ.МПЗ = Элемент;
	ТЧ.Приоритет = 1;
	ТЧ.Количество = ПолучитьБазовоеКоличество(ВыборкаНР.Норма,Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла;
	ТаблицаАналогов = ОбщегоНазначенияПовтИсп.ПолучитьАналогиНормРасходов(ВыборкаНР.Ссылка);
		Для каждого ТЧ_ТА Из ТаблицаАналогов Цикл
		ТЧ = ТаблицаМПЗ.Добавить();
		ТЧ.МПЗ = ТЧ_ТА.Ссылка.Элемент;
		ТЧ.Количество = ПолучитьБазовоеКоличество(ТЧ_ТА.Норма,ТЧ.МПЗ.ОсновнаяЕдиницаИзмерения)*КолУзла;
		Статус = ПолучитьСтатус(ТЧ.МПЗ);
			Если Статус = Перечисления.СтатусыМПЗ.ДоИсчерпанияЗапасов Тогда
			ТЧ.Приоритет = 0;
			ИначеЕсли Статус = Перечисления.СтатусыМПЗ.ПроблеммыЛогистики Тогда
			ТЧ.Приоритет = 0;			
			Иначе	
			ТЧ.Приоритет = ТЧ_ТА.Ссылка.Приоритет + 1;
			КонецЕсли; 
		КонецЦикла; 
	флХватает = Ложь;
		Для каждого ТЧ Из ТаблицаМПЗ Цикл
		Требуется = ТЧ.Количество;
		Выборка = ТаблицаВиртуальногоСклада.Найти(ТЧ.МПЗ,"МПЗ");
			Если Выборка <> Неопределено Тогда
				Если Выборка.Количество >= Требуется Тогда
				Выборка.Количество = Выборка.Количество - Требуется; 
				флХватает = Истина;
				Прервать;
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;	
			Если Не флХватает Тогда
				Если ПричиныИЛО <> Неопределено Тогда
					Если ПричиныИЛО.НайтиПоЗначению(Элемент) = Неопределено Тогда
					ПричиныИЛО.Добавить(Элемент);
					КонецЕсли;
				КонецЕсли;
			Возврат(Ложь);
			КонецЕсли;
	КонецЦикла;
Возврат(Истина);
КонецФункции

Функция ПолучитьЭтапЖизненногоЦикла(МПЗ) Экспорт
ТекРодитель = МПЗ.Родитель;
	Пока Не ТекРодитель.Пустая() Цикл		
		Если Не ТекРодитель.ЭтапЖизненногоЦикла.Пустая() Тогда
		Возврат(ТекРодитель.ЭтапЖизненногоЦикла);
		КонецЕсли; 
	ТекРодитель = ТекРодитель.Родитель;	
	КонецЦикла; 
Возврат(Справочники.ЭтапыЖизненногоЦикла.ПустаяСсылка());
КонецФункции

Функция ИмеетНестандартныеДетали(Спецификация,Результат) Экспорт
ВыборкаНР = ПолучитьНормыРасходовПоВладельцу_Н(Спецификация,ТекущаяДата());
	Пока ВыборкаНР.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаНР.Элемент.Канбан) Тогда
			Если ВыборкаНР.Элемент.Канбан.Служебный Тогда
            Результат = Истина;
			Результат = ИмеетНестандартныеДетали(ВыборкаНР.Элемент,Результат);
			КонецЕсли;
		Иначе
		Результат = ИмеетНестандартныеДетали(ВыборкаНР.Элемент,Результат);		
		КонецЕсли; 
	КонецЦикла;
Возврат(Результат);
КонецФункции

Функция ПолучитьФайлыДокументовДляПечати(Спецификация) Экспорт
СписокФайлов = Новый СписокЗначений;

	Для каждого ТЧ Из Спецификация Цикл
		Если ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Документация") Тогда
			Если (ТЧ.МПЗ.ВидДокумента = Перечисления.ВидыДокументов.КР)или
				 (ТЧ.МПЗ.ВидДокумента = Перечисления.ВидыДокументов.РЭП)или
				 (ТЧ.МПЗ.ВидДокумента = Перечисления.ВидыДокументов.Листовка)или
				 (ТЧ.МПЗ.ВидДокумента = Перечисления.ВидыДокументов.Инструкция) Тогда
				Если (Найти(ТЧ.МПЗ.Наименование,"_A4") > 0)или
					 (Найти(ТЧ.МПЗ.Наименование,"_А4") > 0) Тогда
				СписокФайлов.Добавить(ОбщийМодульВызовСервера.ПолучитьФайлДокумента(ТЧ.МПЗ));
				КонецЕсли;
			КонецЕсли;		
		КонецЕсли; 
	КонецЦикла; 
Возврат(СписокФайлов);
КонецФункции

#КонецОбласти

#Область ФункцииРаботыСБарКодамиИQRКодами

Функция СоздатьБарКод(ПЗ) Экспорт
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		Если ПЗ.Линейка.ВидЛинейки = Перечисления.ВидыЛинеек.Продукция Тогда
		Н = Справочники.НумераторБарКодов.НайтиПоРеквизиту("Подразделение",ПЗ.Линейка.Подразделение);
			Если Н.Пустая() Тогда
			Сообщить("Не создан нумератор бар-кодов для подразделения!");
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат(Ложь);
			КонецЕсли;
				Если КонецДня(Н.ДатаСброса) < КонецДня(ТекущаяДата()) Тогда
				Нумератор = Н.ПолучитьОбъект();
				Нумератор.СледующийНомер = 1;
				Нумератор.ДатаСброса = КонецГода(ТекущаяДата());
				Нумератор.Записать();					
				КонецЕсли;
		БарКод = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(ПЗ.Изделие.Товар.Код)+Сред(Год(ТекущаяДата()),4)+Формат(Месяц(ТекущаяДата()),"ЧЦ=2; ЧВН=")+ПЗ.Линейка.Подразделение.Код+Формат(Н.СледующийНомер,"ЧЦ=6; ЧВН=; ЧГ=");
		Нумератор = Н.ПолучитьОбъект();
		Нумератор.СледующийНомер = Нумератор.СледующийНомер+1;
		Нумератор.Записать();
		ПЗОбъект = ПЗ.ПолучитьОбъект();
		ПЗОбъект.БарКод = БарКод;
		ПЗОбъект.Записать(РежимЗаписиДокумента.Запись);
		//Пробуем создать MAC-адрес
		MAC = "";
		НумераторMAC = ПЗ.Изделие.Товар.ТоварнаяГруппа.НумераторMAC;
			Если Не НумераторMAC.Пустая() Тогда
			MAC = глНовыйMACАдрес(НумераторMAC,ПЗ.Изделие.Товар.ТоварнаяГруппа.КоличествоMACАдресов);
				Если MAC = Неопределено Тогда
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат(Ложь);
				КонецЕсли; 
			КонецЕсли; 
		//__________________________
		//Пробуем создать код Danfoss
		КодDanfoss = "";
		НумераторDanfoss = ПЗ.Изделие.Товар.НумераторDanfoss;
			Если Не НумераторDanfoss.Пустая() Тогда
			КодDanfoss = НумераторDanfoss.СледующийНомер;
			Нумератор = НумераторDanfoss.ПолучитьОбъект();
			Нумератор.СледующийНомер = Нумератор.СледующийНомер+1;
			Нумератор.Записать();
			КонецЕсли; 
		//__________________________
		БарКод = РегистрыСведений.БарКоды.СоздатьМенеджерЗаписи();
		БарКод.Период = ТекущаяДата();
		БарКод.ПЗ = ПЗ;
		БарКод.Изделие = ПЗ.Изделие;
		БарКод.Товар = ПЗ.Изделие.Товар;
		БарКод.БарКод = БарКод;
		БарКод.MAC = MAC;
		БарКод.КодDanfoss = Формат(КодDanfoss,"ЧЦ=8; ЧВН=; ЧГ=0");
		БарКод.Записать();
		НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(ПЗ);
		НаборЗаписей.Прочитать();
		    Для Каждого Запись Из НаборЗаписей Цикл 
		    Запись.БарКод = БарКод;  
		    КонецЦикла;
		НаборЗаписей.Записать();		
		КонецЕсли;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(Истина);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
КонецФункции

Функция ТребуетсяMACАдрес(ПЗ) Экспорт
Возврат(ПЗ.Изделие.Товар.ТребуетсяMACАдрес);
КонецФункции

Функция ТребуетсяIMEI(ПЗ) Экспорт
Возврат(ПЗ.Изделие.Товар.ТребуетсяIMEI);
КонецФункции

Функция ТребуетсяКодDanfoss(ПЗ) Экспорт
Возврат(ПЗ.Изделие.Товар.ТребуетсяКодDanfoss);
КонецФункции

Функция ТребуетсяIDКлюча(ПЗ) Экспорт
Возврат(ПЗ.Изделие.Товар.ТребуетсяIDКлюча);
КонецФункции

Функция ТребуетсяВводДМ(ПЗ) Экспорт
Возврат(ПЗ.Изделие.Товар.ТребуютсяДМ);
КонецФункции

Функция ПолучитьКодDanfoss(БарКод) Экспорт
КодDanfoss = "";
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БарКоды.КодDanfoss
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.БарКод = &БарКод";
Запрос.УстановитьПараметр("БарКод", БарКод);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	КодDanfoss = ВыборкаДетальныеЗаписи.КодDanfoss;
	КонецЦикла;
Возврат(КодDanfoss);
КонецФункции

Функция ПолучитьIDКлюча(БарКод) Экспорт
IDКлюча = "";
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БарКоды.IDКлюча
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.БарКод = &БарКод";
Запрос.УстановитьПараметр("БарКод", БарКод);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	IDКлюча = ВыборкаДетальныеЗаписи.IDКлюча;
	КонецЦикла;
Возврат(IDКлюча);
КонецФункции

Функция ПолучитьMACАдрес(БарКод) Экспорт
МАС = "";
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БарКоды.MAC
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.БарКод = &БарКод";
Запрос.УстановитьПараметр("БарКод", БарКод);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	МАС = ВыборкаДетальныеЗаписи.MAC;
	КонецЦикла;
Возврат(МАС);
КонецФункции

Функция ПолучитьIMEI(БарКод) Экспорт
IMEI = "";
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БарКоды.IMEI
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.БарКод = &БарКод";
Запрос.УстановитьПараметр("БарКод", БарКод);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	IMEI = ВыборкаДетальныеЗаписи.IMEI;
	КонецЦикла;
Возврат(IMEI);
КонецФункции

Функция ВесУзлаДрагметаловВнесен(ПЗ) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДрагоценныеМеталлы.ДМ3
	|ИЗ
	|	РегистрСведений.ДрагоценныеМеталлы КАК ДрагоценныеМеталлы
	|ГДЕ
	|	ДрагоценныеМеталлы.ПЗ = &ПЗ
	|	И ДрагоценныеМеталлы.ДМУзел > 0";
Запрос.УстановитьПараметр("ПЗ", ПЗ);
РезультатЗапроса = Запрос.Выполнить();
Возврат(?(РезультатЗапроса.Пустой(),Ложь,Истина));
КонецФункции

Функция ПолучитьСерийныйНомерEnLogic(БарКод) Экспорт
СерийныйНомерEnLogic = "";
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БарКоды.СерийныйНомерEnLogic
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.БарКод = &БарКод";
Запрос.УстановитьПараметр("БарКод", БарКод);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СерийныйНомерEnLogic = ВыборкаДетальныеЗаписи.СерийныйНомерEnLogic;
	КонецЦикла;
Возврат(СерийныйНомерEnLogic);
КонецФункции

Функция ПолучитьНапряжениеБатарейкиНаСтенде(ПЗ) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НапряжениеБатарейкиСрезПоследних.НапряжениеНаСтенде
	|ИЗ
	|	РегистрСведений.НапряжениеБатарейки.СрезПоследних КАК НапряжениеБатарейкиСрезПоследних
	|ГДЕ
	|	НапряжениеБатарейкиСрезПоследних.ПЗ = &ПЗ";
Запрос.УстановитьПараметр("ПЗ", ПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.НапряжениеНаСтенде);
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

Функция ПолучитьБарКодПоКодуDanfoss(КодDanfoss) Экспорт
БарКод = "";
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БарКоды.БарКод
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.КодDanfoss = &КодDanfoss";
Запрос.УстановитьПараметр("КодDanfoss", КодDanfoss);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	БарКод = ВыборкаДетальныеЗаписи.БарКод;
	КонецЦикла;
Возврат(БарКод);
КонецФункции

Функция РазложитьСтрокуВМассив(Строка, Разделитель) Экспорт
RegExp = Новый COMОбъект("VBScript.RegExp");    // создаем объект для работы с регулярными выражениями
//Параметры:
RegExp.MultiLine = Ложь;  // истина — текст многострочный, ложь — одна строка
RegExp.Global = Истина;   // истина — поиск по всей строке, ложь — до первого совпадения
RegExp.IgnoreCase = Ложь; // истина — игнорировать регистр строки при поиске
//Разбор строки вида 1,СЛОВО,(1+2); Маска для разделителя ',' [^\,]*"
RegExp.Pattern = "[^\" + Разделитель + "]+";
Matches = RegExp.Execute (Строка);
Массив = Новый Массив;
	
	Для Сч = 0 По Matches.Count - 1 Цикл
		Если Найти(Matches.Item(Сч).Value,"*stroke") Тогда
		Массив.Добавить(Сред(Matches.Item(Сч).Value,1,Найти(Matches.Item(Сч).Value,"*stroke")-1));
		Иначе	
		Массив.Добавить(Matches.Item(Сч).Value);
		КонецЕсли; 
	КонецЦикла;
RegExp = Неопределено;
Возврат Массив;
КонецФункции

Функция ПолучитьДатуВыпускаПоБарКоду(БарКод) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БарКоды.ПЗ КАК ПЗ
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.БарКод ПОДОБНО &БарКод";
Запрос.УстановитьПараметр("БарКод", БарКод);	
РезультатЗапроса = Запрос.Выполнить();	
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыпускПродукции.Дата КАК Дата
		|ИЗ
		|	Документ.ВыпускПродукции КАК ВыпускПродукции
		|ГДЕ
		|	ВыпускПродукции.НаСклад = ИСТИНА
		|	И ВыпускПродукции.ДокументОснование = &ПЗ";
	Запрос.УстановитьПараметр("ПЗ", ВыборкаДетальныеЗаписи.ПЗ);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат(ВыборкаДетальныеЗаписи.Дата);
		КонецЦикла;
	КонецЦикла;
Возврат(Дата(1,1,1));
КонецФункции

Функция ПолучитьДатуВыпускаПоКодуDanfoss(КодDanfoss) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	БарКоды.ПЗ КАК ПЗ
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.КодDanfoss ПОДОБНО &КодDanfoss";
Запрос.УстановитьПараметр("КодDanfoss", КодDanfoss);	
РезультатЗапроса = Запрос.Выполнить();	
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыпускПродукции.Дата КАК Дата
		|ИЗ
		|	Документ.ВыпускПродукции КАК ВыпускПродукции
		|ГДЕ
		|	ВыпускПродукции.НаСклад = ИСТИНА
		|	И ВыпускПродукции.ДокументОснование = &ПЗ";
	Запрос.УстановитьПараметр("ПЗ", ВыборкаДетальныеЗаписи.ПЗ);	
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат(ВыборкаДетальныеЗаписи.Дата);
		КонецЦикла;
	КонецЦикла;
Возврат(Дата(1,1,1));
КонецФункции

Функция ПолучитьТоварПоБарКоду(БарКод) Экспорт
	Если СтрДлина(СокрЛП(БарКод)) = 17 Тогда
	Код = Лев(БарКод,5);
	Иначе	
	Код = Лев(БарКод,6);
	КонецЕсли; 
Возврат(Справочники.Товары.НайтиПоКоду(Код));
КонецФункции

#КонецОбласти

#Область ФункцииРаботыСДокументами

Функция РазрешитьКопированиеДокумента(Документ) Экспорт
Возврат(?(Документ.Автор = ПараметрыСеанса.Пользователь,Истина,Ложь));
КонецФункции

Функция МТКОстановлена(ПЗ) Экспорт
Возврат(?(ПЗ.ДокументОснование.Статус = 2,Истина,Ложь));
КонецФункции

Функция ОстановитьМТК(ВыбМТК,Инициатор,ПричинаОстановки,МПЗ = Неопределено,ДатаОкончанияПредполагаемая = Неопределено,РабочееМесто = Неопределено,Комментарий = "") Экспорт
	Попытка
	МТК = ВыбМТК.ПолучитьОбъект();
	МТК.Статус = 2;
	ТЧ = МТК.Остановки.Добавить();
	ТЧ.Инициатор = Инициатор;
	ТЧ.Причина = ПричинаОстановки;
	ТЧ.Комментарий = Комментарий;
	ТЧ.МПЗ = МПЗ;
	ТЧ.ДатаНачала = ТекущаяДата();
	ТЧ.ДатаОкончанияПредполагаемая = ?(ДатаОкончанияПредполагаемая = Неопределено,ТекущаяДата()+86400,ДатаОкончанияПредполагаемая);	
		Если РабочееМесто <> Неопределено Тогда
		ТЧ.РабочееМесто = РабочееМесто;
		КонецЕсли; 
	МТК.Записать();
	Исключение
	Сообщить(ОписаниеОшибки());
	Возврат(Ложь);
	КонецПопытки; 
Возврат(Истина);
КонецФункции

Функция ОстановитьПЗ(ПЗ,ПричинаОстановки) Экспорт
	Попытка
	ПЗОбъект = ПЗ.ПолучитьОбъект();
	ПЗОбъект.Остановлено = Истина;
	ПЗОбъект.Комментарий = ПричинаОстановки;
	ПЗОбъект.Записать();	
	Исключение
	Сообщить(ОписаниеОшибки());
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина); 
КонецФункции

Процедура ПерепроведениеДокументов(Период) Экспорт
ТекДата = Дата(1,1,1);
Выпуски = Документы.ВыпускПродукции.Выбрать(Период.ДатаНачала,Период.ДатаОкончания);
	Пока Выпуски.Следующий() Цикл
	ПрерываниеПользователем = ХранилищеОбщихНастроек.Загрузить("ПерепроведениеДокументов","Прерывание",,ПараметрыСеанса.Пользователь.Наименование);
		Если ПрерываниеПользователем Тогда				
		ХранилищеОбщихНастроек.Сохранить("ПерепроведениеДокументов","Прерывание",Ложь,,ПараметрыСеанса.Пользователь.Наименование);
		Сообщение = Новый СообщениеПользователю();

		Сообщение.Текст = "Прервано пользователем";
		Сообщение.Сообщить();
		Возврат;
		КонецЕсли;
			Если Выпуски.НаСклад Тогда
				Если ТекДата <> НачалоДня(Выпуски.Дата) Тогда
		        ТекДата = НачалоДня(Выпуски.Дата);
				Сообщение = Новый СообщениеПользователю();

				Сообщение.Текст = "Перепроведение документов от "+Формат(ТекДата,"ДФ=dd.MM.yyyy");
				Сообщение.Сообщить();
				КонецЕсли; 
			Выпуск = Выпуски.ПолучитьОбъект();
				Попытка
				Выпуск.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
				Сообщение = Новый СообщениеПользователю();

				Сообщение.Текст = Выпуск.Номер + " - не проведен!";
				Сообщение.Сообщить();
				КонецПопытки;
			КонецЕсли; 
	КонецЦикла;
Сообщение.Текст = "Проведение завершено!";
Сообщение.Сообщить();
КонецПроцедуры

Функция СохранитьНомерВозвратнойТары(ПЗ,НомерВТ) Экспорт
	Если ЗначениеЗаполнено(НомерВТ) Тогда
		Попытка
		ПЗОбъект = ПЗ.ПолучитьОбъект();
		ПЗОбъект.ВозвратнаяТара = НомерВТ;
		ПЗОбъект.Записать(РежимЗаписиДокумента.Запись);
		Возврат(Истина);
		Исключение
		Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЕсли;
Возврат(Ложь); 
КонецФункции

Функция ОчиститьНомерВозвратнойТары(ПЗ) Экспорт
	Попытка
	ПЗОбъект = ПЗ.ПолучитьОбъект();
	ПЗОбъект.ВозвратнаяТара = "";
	ПЗОбъект.Записать(РежимЗаписиДокумента.Запись);
	Возврат Истина;
	Исключение
	Сообщить(ОписаниеОшибки());
	Возврат Ложь;
	КонецПопытки;
КонецФункции

Функция НазначитьСтатусМТК(МТК) Экспорт
	Если МТК.Статус = 2 Тогда
	Возврат(2);		
	КонецЕсли;	
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЛьготнаяОчередь.НормаРасходов
	|ИЗ
	|	РегистрСведений.ЛьготнаяОчередь КАК ЛьготнаяОчередь
	|ГДЕ
	|	ЛьготнаяОчередь.ПЗ.ДокументОснование = &ДокументОснование
	|	И ЛьготнаяОчередь.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("ДокументОснование", МТК);	
РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	Возврат(4);
	Иначе
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ПроизводственноеЗадание.Ссылка
		|ИЗ
		|	Документ.ПроизводственноеЗадание КАК ПроизводственноеЗадание
		|ГДЕ
		|	ПроизводственноеЗадание.ДокументОснование = &ДокументОснование	
		|		И ПроизводственноеЗадание.ДатаЗапуска <> ДАТАВРЕМЯ(1,1,1,0,0,0)";
	Запрос.УстановитьПараметр("ДокументОснование", МТК);	
	РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
		Возврат(0);
		Иначе
    	Возврат(1);
		КонецЕсли;		
	КонецЕсли;
КонецФункции

Функция ОтменаЗапускаМТК(МТК) Экспорт
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПодчиненности.Ссылка
		|ИЗ
		|	КритерийОтбора.ПодчиненныеДокументы(&ЗначениеКритерияОтбора) КАК СтруктураПодчиненности";
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", МТК);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
				Если Не ОтменаЗапускаПЗ(ВыборкаДетальныеЗаписи.Ссылка,Истина) Тогда
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат(Ложь);				
				КонецЕсли; 
			Иначе 
				Если ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.ПередачаВПроизводство") Тогда     
				ПП = ВыборкаДетальныеЗаписи.Ссылка;
					Если НачалоДня(ПП.Дата) <= Константы.ДатаЗапретаРедактирования.Получить() Тогда
						Для каждого ТЧ Из ПП.Спецификация Цикл
							Если ТЧ.ВидМПЗ = Перечисления.ВидыМПЗ.Материалы Тогда
							НаборЗаписей = РегистрыСведений.ОтменаЗапускаПЗ.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.МестоХранения.Установить(ПП.МестоХранения);
							НаборЗаписей.Отбор.МПЗ.Установить(ТЧ.МПЗ);
							НаборЗаписей.Прочитать();
								Если НаборЗаписей.Количество() > 0 Тогда
								НаборЗаписей[0].Количество = НаборЗаписей[0].Количество + ПолучитьБазовоеКоличествоБезОкругления(ТЧ.Количество,ТЧ.ЕдиницаИзмерения);
								НаборЗаписей.Записать(Истина);	
								Иначе	
								РОЗПЗ = РегистрыСведений.ОтменаЗапускаПЗ.СоздатьМенеджерЗаписи();								
	                            РОЗПЗ.МестоХранения = ПП.МестоХранения;
	                            РОЗПЗ.МПЗ = ТЧ.МПЗ;
	                            РОЗПЗ.Количество = ПолучитьБазовоеКоличествоБезОкругления(ТЧ.Количество,ТЧ.ЕдиницаИзмерения);
								РОЗПЗ.Записать();
								КонецЕсли;
							КонецЕсли;							
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			УдаляемыйДок = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			УдаляемыйДок.Удалить();
			КонецЕсли;
		КонецЦикла;	
	МТКОбъект = МТК.ПолучитьОбъект();
	МТКОбъект.Аналоги.Очистить();
	МТКОбъект.Статус = ОбщийМодульВызовСервера.НазначитьСтатусМТК(МТК);
	МТКОбъект.Записать(РежимЗаписиДокумента.Проведение);
	НаборЗаписей = РегистрыСведений.ВыполнениеЭтаповПроизводства.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.МТК.Установить(МТК);
	НаборЗаписей.Записать();
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(Истина);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
КонецФункции

Функция ОтменаЗапускаПЗ(ПЗ,ОтменаЗапускаМТК = Ложь,ОчиститьБарКод = Ложь) Экспорт
	Если ПЗ.Линейка.ВидЛинейки = Перечисления.ВидыЛинеек.Переупаковка Тогда
	ОчиститьБарКод = Истина;	
	КонецЕсли;
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		сзУдаляемыеЗаписи = Новый СписокЗначений;
		Запрос = Новый Запрос;

		Запрос.Текст = 
			"ВЫБРАТЬ
			|	СтруктураПодчиненности.Ссылка
			|ИЗ
			|	КритерийОтбора.ПодчиненныеДокументы(&ЗначениеКритерияОтбора) КАК СтруктураПодчиненности";
		Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ПЗ);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ТипЗнч(ВыборкаДетальныеЗаписи.Ссылка) = Тип("ДокументСсылка.ПередачаВПроизводство") Тогда     
				ПП = ВыборкаДетальныеЗаписи.Ссылка;
					Если НачалоДня(ПП.Дата) <= Константы.ДатаЗапретаРедактирования.Получить() Тогда
						Для каждого ТЧ Из ПП.Спецификация Цикл
							Если ТЧ.ВидМПЗ = Перечисления.ВидыМПЗ.Материалы Тогда
							НаборЗаписей = РегистрыСведений.ОтменаЗапускаПЗ.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.МестоХранения.Установить(ПП.МестоХранения);
							НаборЗаписей.Отбор.МПЗ.Установить(ТЧ.МПЗ);
							НаборЗаписей.Прочитать();
								Если НаборЗаписей.Количество() > 0 Тогда
								НаборЗаписей[0].Количество = НаборЗаписей[0].Количество + ПолучитьБазовоеКоличествоБезОкругления(ТЧ.Количество,ТЧ.ЕдиницаИзмерения);
								НаборЗаписей.Записать(Истина);	
								Иначе	
								РОЗПЗ = РегистрыСведений.ОтменаЗапускаПЗ.СоздатьМенеджерЗаписи();								
	                            РОЗПЗ.МестоХранения = ПП.МестоХранения;
	                            РОЗПЗ.МПЗ = ТЧ.МПЗ;
	                            РОЗПЗ.Количество = ПолучитьБазовоеКоличествоБезОкругления(ТЧ.Количество,ТЧ.ЕдиницаИзмерения);
								РОЗПЗ.Записать();
								КонецЕсли;
							КонецЕсли;							
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			УдаляемыйДок = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			УдаляемыйДок.Удалить();
			КонецЦикла;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	РемонтнаяКарта.Ссылка
			|ИЗ
			|	Документ.РемонтнаяКарта КАК РемонтнаяКарта
			|ГДЕ
			|	РемонтнаяКарта.ДокументОснование = &ДокументОснование";
		Запрос.УстановитьПараметр("ДокументОснование", ПЗ);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РемонтнаяКартаОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
			РемонтнаяКартаОбъект.Удалить();
			КонецЦикла;
				Если ОтменаЗапускаМТК Тогда
					Если Найти(ПЗ.Номер,"-001") = 0 Тогда
					ПЗОбъект = ПЗ.ПолучитьОбъект();
					ПЗОбъект.Удалить();
					ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
					Возврат(Истина);
					КонецЕсли;	
				КонецЕсли;
		НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(ПЗ);
		НаборЗаписей.Прочитать();
		Стр = 1;
			Для Каждого Запись Из НаборЗаписей Цикл
			    Если Стр = 1 Тогда
					Если ОтменаЗапускаМТК Тогда
					Запись.Количество = ПЗ.ДокументОснование.Количество;
					Иначе
					Запись.Количество = ПЗ.Количество;
					КонецЕсли;
				Запись.ДатаНачала = Дата(1,1,1);
				Запись.ДатаОкончания = Дата(1,1,1);
				Запись.Исполнитель = Справочники.Сотрудники.ПустаяСсылка();
				Запись.Ремонт = Ложь;
					Если ОчиститьБарКод Тогда
					Запись.БарКод = "";
					КонецЕсли;
				Иначе
			    сзУдаляемыеЗаписи.Добавить(Запись);
			    КонецЕсли;
			Стр = Стр + 1;
			КонецЦикла;
				Для каждого УЗ Из сзУдаляемыеЗаписи Цикл
			    НаборЗаписей.Удалить(УЗ.Значение);
				КонецЦикла;
		НаборЗаписей.Записать();
		НаборЗаписей = РегистрыСведений.СтендовыйПрогон.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(ПЗ);
		НаборЗаписей.Записать();
		НаборЗаписей = РегистрыСведений.ЛьготнаяОчередь.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(ПЗ);
		НаборЗаписей.Записать();
		НаборЗаписей = РегистрыСведений.НапряжениеБатарейки.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(ПЗ);
		НаборЗаписей.Записать();
		ПЗОбъект = ПЗ.ПолучитьОбъект();
			Если ОчиститьБарКод Тогда
			ПЗОбъект.БарКод = "";
			КонецЕсли;
		ПЗОбъект.ВозвратнаяТара = ""; 
		ПЗОбъект.ДатаЗапуска = Дата(1,1,1); 
		ПЗОбъект.ДатаГрупповойУпаковки = Дата(1,1,1); 
		ПЗОбъект.Аналоги.Очистить();
			Если ОтменаЗапускаМТК Тогда
			ПЗОбъект.ЛинияSMD = Справочники.ЛинииSMD.ПустаяСсылка();
			ПЗОбъект.Оборудование.Очистить();
			ПЗОбъект.Количество = ПЗ.ДокументОснование.Количество;
			КонецЕсли;
		ПЗОбъект.Записать();
			Если Не ОтменаЗапускаМТК Тогда
			МТК = ПЗ.ДокументОснование.ПолучитьОбъект();
			МТК.Статус = ОбщийМодульВызовСервера.НазначитьСтатусМТК(ПЗ.ДокументОснование);
			МТК.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
				Если ОчиститьБарКод Тогда      
				НаборЗаписей = РегистрыСведений.БарКоды.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПЗ.Установить(ПЗ);
				НаборЗаписей.Записать();
				КонецЕсли;
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Возврат(Истина);
		Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат(Ложь);
		КонецПопытки;
КонецФункции 

Функция УдалитьЦепочкуДокументов(Док) Экспорт
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтруктураПодчиненности.Ссылка
		|ИЗ
		|	КритерийОтбора.ПодчиненныеДокументы(&ЗначениеКритерияОтбора) КАК СтруктураПодчиненности";
	Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", Док);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		УдаляемыйДок = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		УдаляемыйДок.Удалить();
		КонецЦикла;
	ДокОбъект = Док.ПолучитьОбъект();
	ДокОбъект.Удалить();
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции 

Функция ПолучитьЗарплатуКанбан(Подразделение,НаДату) Экспорт
Запрос = Новый Запрос;

НачисленоЗП = 0;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	БригаднаяСделкаТабличнаяЧасть.Итого КАК Итого
	|ИЗ
	|	Документ.БригаднаяСделка.ТабличнаяЧасть КАК БригаднаяСделкаТабличнаяЧасть
	|ГДЕ
	|	БригаднаяСделкаТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И БригаднаяСделкаТабличнаяЧасть.Ссылка.Подразделение = &Подразделение
	|	И БригаднаяСделкаТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ
	|ИТОГИ
	|	СУММА(Итого)
	|ПО
	|	ОБЩИЕ";
Запрос.УстановитьПараметр("Подразделение", Подразделение);
Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(НаДату));
Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(НаДату));
РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	ВыборкаИтого = РезультатЗапроса.Выбрать();
	ВыборкаИтого.Следующий();
	НачисленоЗП = ВыборкаИтого.Итого;
	КонецЕсли; 
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИндивидуальнаяСделкаТабличнаяЧасть.Итого КАК Итого
	|ИЗ
	|	Документ.ИндивидуальнаяСделка.ТабличнаяЧасть КАК ИндивидуальнаяСделкаТабличнаяЧасть
	|ГДЕ
	|	ИндивидуальнаяСделкаТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ИндивидуальнаяСделкаТабличнаяЧасть.Ссылка.Подразделение = &Подразделение
	|	И ИндивидуальнаяСделкаТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ
	|ИТОГИ
	|	СУММА(Итого)
	|ПО
	|	ОБЩИЕ";
Запрос.УстановитьПараметр("Подразделение", Подразделение);
Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(НаДату));
Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(НаДату));
РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	ВыборкаИтого = РезультатЗапроса.Выбрать();
	ВыборкаИтого.Следующий();
	НачисленоЗП = НачисленоЗП + ВыборкаИтого.Итого;
	КонецЕсли;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьПоОкладамТабличнаяЧасть.Итого КАК Итого
	|ИЗ
	|	Документ.ВедомостьПоОкладам.ТабличнаяЧасть КАК ВедомостьПоОкладамТабличнаяЧасть
	|ГДЕ
	|	ВедомостьПоОкладамТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ВедомостьПоОкладамТабличнаяЧасть.Ссылка.Подразделение = &Подразделение
	|	И ВедомостьПоОкладамТабличнаяЧасть.Ссылка.НакладныеРасходы = ЛОЖЬ
	|	И ВедомостьПоОкладамТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ
	|ИТОГИ
	|	СУММА(Итого)
	|ПО
	|	ОБЩИЕ";
Запрос.УстановитьПараметр("Подразделение", Подразделение);
Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(НаДату));
Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(НаДату));
РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	ВыборкаИтого = РезультатЗапроса.Выбрать();
	ВыборкаИтого.Следующий();
	НачисленоЗП = НачисленоЗП + ВыборкаИтого.Итого;
	КонецЕсли;
Возврат(НачисленоЗП);
КонецФункции

Функция ПолучитьЗарплату(Подразделение,Линейка,НаДату) Экспорт
Запрос = Новый Запрос;

НачисленоЗП = 0;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	БригаднаяСделкаТабличнаяЧасть.Итого КАК Итого
	|ИЗ
	|	Документ.БригаднаяСделка.ТабличнаяЧасть КАК БригаднаяСделкаТабличнаяЧасть
	|ГДЕ
	|	БригаднаяСделкаТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И БригаднаяСделкаТабличнаяЧасть.Ссылка.Подразделение = &Подразделение
	|	И БригаднаяСделкаТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Если Не Линейка.Пустая() Тогда
	Запрос.Текст = Запрос.Текст + " И БригаднаяСделкаТабличнаяЧасть.Ссылка.Линейка = &Линейка";
	Запрос.УстановитьПараметр("Линейка", Линейка);
	КонецЕсли; 
Запрос.УстановитьПараметр("Подразделение", Подразделение);
Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(НаДату));
Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(НаДату));
Запрос.Текст = Запрос.Текст + " ИТОГИ СУММА(Итого) ПО ОБЩИЕ";
РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	ВыборкаИтого = РезультатЗапроса.Выбрать();
	ВыборкаИтого.Следующий();
	НачисленоЗП = ВыборкаИтого.Итого;
	КонецЕсли; 
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИндивидуальнаяСделкаТабличнаяЧасть.Итого КАК Итого
	|ИЗ
	|	Документ.ИндивидуальнаяСделка.ТабличнаяЧасть КАК ИндивидуальнаяСделкаТабличнаяЧасть
	|ГДЕ
	|	ИндивидуальнаяСделкаТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ИндивидуальнаяСделкаТабличнаяЧасть.Ссылка.Подразделение = &Подразделение
	|	И ИндивидуальнаяСделкаТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ";
	Если Не Линейка.Пустая() Тогда
	Запрос.Текст = Запрос.Текст + " И ИндивидуальнаяСделкаТабличнаяЧасть.Ссылка.Линейка = &Линейка";
	Запрос.УстановитьПараметр("Линейка", Линейка);
	КонецЕсли;
Запрос.УстановитьПараметр("Подразделение", Подразделение);
Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(НаДату));
Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(НаДату));
Запрос.Текст = Запрос.Текст + " ИТОГИ СУММА(Итого) ПО ОБЩИЕ";
РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	ВыборкаИтого = РезультатЗапроса.Выбрать();
	ВыборкаИтого.Следующий();
	НачисленоЗП = НачисленоЗП + ВыборкаИтого.Итого;
	КонецЕсли;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВедомостьПоОкладамТабличнаяЧасть.Итого КАК Итого
	|ИЗ
	|	Документ.ВедомостьПоОкладам.ТабличнаяЧасть КАК ВедомостьПоОкладамТабличнаяЧасть
	|ГДЕ
	|	ВедомостьПоОкладамТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ВедомостьПоОкладамТабличнаяЧасть.Ссылка.Подразделение = &Подразделение
	|	И ВедомостьПоОкладамТабличнаяЧасть.Ссылка.НакладныеРасходы = ЛОЖЬ
	|	И ВедомостьПоОкладамТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ
	|ИТОГИ
	|	СУММА(Итого)
	|ПО
	|	ОБЩИЕ";
Запрос.УстановитьПараметр("Подразделение", Подразделение);
Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(НаДату));
Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(НаДату));
РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	ВыборкаИтого = РезультатЗапроса.Выбрать();
	ВыборкаИтого.Следующий();
	НачисленоЗП = НачисленоЗП + ВыборкаИтого.Итого;
	КонецЕсли;
Возврат(НачисленоЗП);
КонецФункции

Функция ПолучитьНезапущенноеКоличество(МТК) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственноеЗадание.ДокументОснование КАК ДокументОснование,
	|	СУММА(ПроизводственноеЗадание.Количество) КАК Количество
	|ИЗ
	|	Документ.ПроизводственноеЗадание КАК ПроизводственноеЗадание
	|ГДЕ
	|	ПроизводственноеЗадание.ДокументОснование = &ДокументОснование
	|	И ПроизводственноеЗадание.ДатаЗапуска = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроизводственноеЗадание.ДокументОснование";
Запрос.УстановитьПараметр("ДокументОснование", МТК);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаМТК = РезультатЗапроса.Выбрать();
	Пока ВыборкаМТК.Следующий() Цикл
	Возврат(ВыборкаМТК.Количество);
	КонецЦикла; 
Возврат(0);	
КонецФункции

Функция ПолучитьКорректировкуЗНП(ЗНП,Продукция) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	СУММА(КорректировкаЗаказаНаПроизводствоТабличнаяЧасть.Количество) КАК Количество,
	|	КорректировкаЗаказаНаПроизводствоТабличнаяЧасть.Продукция КАК Продукция
	|ИЗ
	|	Документ.КорректировкаЗаказаНаПроизводство.ТабличнаяЧасть КАК КорректировкаЗаказаНаПроизводствоТабличнаяЧасть
	|ГДЕ
	|	КорректировкаЗаказаНаПроизводствоТабличнаяЧасть.Ссылка.ДокументОснование = &ДокументОснование
	|	И КорректировкаЗаказаНаПроизводствоТабличнаяЧасть.Продукция = &Продукция
	|	И КорректировкаЗаказаНаПроизводствоТабличнаяЧасть.Ссылка.Проведен = ИСТИНА
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректировкаЗаказаНаПроизводствоТабличнаяЧасть.Продукция";
Запрос.УстановитьПараметр("ДокументОснование",ЗНП);	
Запрос.УстановитьПараметр("Продукция",Продукция);	
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    Возврат(ВыборкаДетальныеЗаписи.Количество);
	КонецЦикла;
Возврат(0);
КонецФункции

Функция НайтиПередачуВПроизводство(ДокументОснование) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаВПроизводство.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ПередачаВПроизводство КАК ПередачаВПроизводство
	|ГДЕ
	|	ПередачаВПроизводство.ДокументОснование = &ДокументОснование
	|	И ПередачаВПроизводство.Проведен = ИСТИНА";
Запрос.УстановитьПараметр("ДокументОснование", ДокументОснование);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

Процедура ПроверитьЗаказНаПроизводство(ЗНП,Кол,ДатаВыполнения) Экспорт
КолЗаказВсего = ЗНП.Заказ.Итог("КоличествоВЗаказе");
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолгиОбороты.Документ КАК Документ,
	|	СУММА(ДолгиОбороты.КоличествоПриход) КАК КоличествоПриход
	|ИЗ
	|	РегистрНакопления.Долги.Обороты(, , , Документ = &Документ) КАК ДолгиОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	ДолгиОбороты.Документ";
Запрос.УстановитьПараметр("Документ", ЗНП);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
КолПриход = 0;  
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	КолПриход = ВыборкаДетальныеЗаписи.КоличествоПриход;
	КонецЦикла;
		Если (КолЗаказВсего - КолПриход) = 0 Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ                                                        
			|	ДолгиОстатки.Документ КАК Документ,
			|	СУММА(ДолгиОстатки.КоличествоОстаток) КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.Долги.Остатки(, Документ = &Документ) КАК ДолгиОстатки
			|
			|СГРУППИРОВАТЬ ПО
			|	ДолгиОстатки.Документ";
		Запрос.УстановитьПараметр("Документ", ЗНП);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		КолДолг = 0;  
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КолДолг = ВыборкаДетальныеЗаписи.КоличествоОстаток;
			КонецЦикла;
				Если (КолДолг - Кол) <= 0 Тогда	
				ЗНП_Объект = ЗНП.ПолучитьОбъект();
				ЗНП_Объект.Закрыт = Истина;
				ЗНП_Объект.ДатаВыполнения = ДатаВыполнения;
				ЗНП_Объект.Записать(РежимЗаписиДокумента.Запись);
				НаборЗаписей = РегистрыСведений.ДатыВыполненияПоПозициямЗНП.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.НомерЗНП.Установить(ЗНП.Номер);
				НаборЗаписей.Записать(Истина);
				КонецЕсли;
		КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ФункцииРаботыСРегистрами

Функция КурсДляВалюты(Валюта, ДатаКурса) Экспорт
КурсыВалют = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса,Новый Структура("Валюта",Валюта));
Кратность = КурсыВалют.Кратность;
Возврат (КурсыВалют.Курс/?(Кратность = 0, 1, Кратность));
КонецФункции
        
Функция ПолучитьНезавершённоеКоличество(НаДату,МТК) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланыВыпускаОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ПланыВыпуска.Остатки(&НаДату, МаршрутнаяКарта = &МаршрутнаяКарта) КАК ПланыВыпускаОстатки";
Запрос.УстановитьПараметр("МаршрутнаяКарта", МТК);
Запрос.УстановитьПараметр("НаДату", НаДату);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.КоличествоОстаток);
	КонецЦикла;
Возврат(0);	
КонецФункции

Функция ПолучитьКоличествоПустыхКанбанов(Линейка,МПЗ) Экспорт
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
	Подразделение = МПЗ.Канбан.Подразделение;
	Иначе	
	Подразделение = Константы.МестоХраненияОсновное.Получить().Подразделение;
	КонецЕсли;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОборотКанбанов.Период КАК Период
	|ИЗ
	|	РегистрСведений.ОборотКанбанов КАК ОборотКанбанов
	|ГДЕ
	|	ОборотКанбанов.МестоХранения = &МестоХранения
	|	И ОборотКанбанов.Подразделение = &Подразделение
	|	И ОборотКанбанов.МПЗ = &МПЗ
	|	И ОборотКанбанов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("МестоХранения", Линейка.МестоХраненияКанбанов); 
Запрос.УстановитьПараметр("Подразделение", Подразделение);
Запрос.УстановитьПараметр("МПЗ", МПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
Возврат(ВыборкаДетальныеЗаписи.Количество());
КонецФункции 

Функция ПолучитьКоличествоПустыхКанбановПоМестуХранения(МестоХранения,МПЗ) Экспорт
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
	Подразделение = МПЗ.Канбан.Подразделение;
	Иначе	
	Подразделение = Константы.МестоХраненияОсновное.Получить().Подразделение;
	КонецЕсли;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОборотКанбанов.Период КАК Период
	|ИЗ
	|	РегистрСведений.ОборотКанбанов КАК ОборотКанбанов
	|ГДЕ
	|	ОборотКанбанов.МестоХранения = &МестоХранения
	|	И ОборотКанбанов.Подразделение = &Подразделение
	|	И ОборотКанбанов.МПЗ = &МПЗ
	|	И ОборотКанбанов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("МестоХранения", МестоХранения); 
Запрос.УстановитьПараметр("Подразделение", Подразделение);
Запрос.УстановитьПараметр("МПЗ", МПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
Возврат(ВыборкаДетальныеЗаписи.Количество());
КонецФункции

Функция ПолучитьОстатокПоМестуХранения(МестоХранения,МПЗ,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли;

Фильтр   = Новый Структура;

Фильтр.Вставить("МестоХранения", МестоХранения);
Фильтр.Вставить("МПЗ",МПЗ);
ТабОстатков = РегистрыНакопления.МестаХранения.Остатки(НаДату,Фильтр);
	Если ТабОстатков.Количество() > 0 Тогда
	Возврат(ТабОстатков[0].Количество);
	Иначе
	Возврат(0);	
	КонецЕсли;
КонецФункции

Функция ПолучитьНезарезервированныйОстатокПоМестуХранения(МестоХранения,Продукция,НаДату) Экспорт
Фильтр   = Новый Структура;

Фильтр.Вставить("МестоХранения", МестоХранения);
Фильтр.Вставить("МПЗ",Продукция);
ТабОстатков = РегистрыНакопления.МестаХранения.Остатки(НаДату,Фильтр);
	Если ТабОстатков.Количество() = 0 Тогда
	Возврат(0);	
	КонецЕсли;
Фильтр   = Новый Структура;

Фильтр.Вставить("МестоХранения", МестоХранения);
Фильтр.Вставить("Продукция",Продукция);
ТабРезерв = РегистрыНакопления.РезервированиеГП.Остатки(НаДату,Фильтр);
КолРезерв = 0;
	Для к = 0 По ТабРезерв.Количество()-1 Цикл	
	КолРезерв = КолРезерв + ТабРезерв[к].Количество;
	КонецЦикла; 
Возврат(ТабОстатков[0].Количество - КолРезерв);
КонецФункции

Функция ПолучитьСводныйОстатокПоМестамХранения(СписокМестХранения,МПЗ,НаДату = Неопределено) Экспорт
Запрос = Новый Запрос;

	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Материалы") Тогда
	ВидМПЗ = Перечисления.ВидыМПЗ.Материалы;	
	Иначе	
	ВидМПЗ = Перечисления.ВидыМПЗ.Полуфабрикаты;	
	КонецЕсли;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияОстатки.МПЗ КАК МПЗ,
	|	СУММА(МестаХраненияОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.МестаХранения.Остатки(
	|			&НаДату,
	|			МестоХранения В ИЕРАРХИИ (&СписокМестХранения)
	|				И ВидМПЗ = &ВидМПЗ
	|				И МПЗ = &МПЗ) КАК МестаХраненияОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	МестаХраненияОстатки.МПЗ";
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
	Если НаДату = Неопределено Тогда
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
	Иначе	
	Запрос.УстановитьПараметр("НаДату", НаДату);	
	КонецЕсли;
Запрос.УстановитьПараметр("ВидМПЗ", ВидМПЗ); 
Запрос.УстановитьПараметр("МПЗ", МПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.КоличествоОстаток);
	КонецЦикла; 
Возврат(0);
КонецФункции

Функция ПолучитьКоличествоИзделияНаРабочемМесте(ПЗ,РабочееМесто) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданий.Количество
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий КАК ЭтапыПроизводственныхЗаданий
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданий.ПЗ = &ПЗ
	|	И ЭтапыПроизводственныхЗаданий.РабочееМесто = &РабочееМесто";
Запрос.УстановитьПараметр("ПЗ",ПЗ);
Запрос.УстановитьПараметр("РабочееМесто",РабочееМесто);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
	Возврат(ВыборкаДетальныеЗаписи.Количество); 
	КонецЦикла;
Возврат(0);
КонецФункции

Функция ПолучитьКоличествоВБракеПоПЗ(ПЗ,РабочееМесто = Неопределено) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БракПроизводстваОбороты.КоличествоПриход
	|ИЗ
	|	РегистрНакопления.БракПроизводства.Обороты(, , , ) КАК БракПроизводстваОбороты
	|ГДЕ
	|	БракПроизводстваОбороты.ПроизводственноеЗадание = &ПроизводственноеЗадание";
	Если РабочееМесто <> Неопределено Тогда
	Запрос.Текст = Запрос.Текст + " И БракПроизводстваОбороты.РабочееМесто = &РабочееМесто";
	Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);	
	КонецЕсли; 
Запрос.УстановитьПараметр("ПроизводственноеЗадание", ПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
КолБрак = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	КолБрак = КолБрак + ВыборкаДетальныеЗаписи.КоличествоПриход;
	КонецЦикла;
Возврат(КолБрак);
КонецФункции

Функция ПолучитьКоличествоВБраке(МТК) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БракПроизводстваОбороты.КоличествоПриход
	|ИЗ
	|	РегистрНакопления.БракПроизводства.Обороты(, , , ) КАК БракПроизводстваОбороты
	|ГДЕ
	|	БракПроизводстваОбороты.ПроизводственноеЗадание.ДокументОснование = &МТК";
Запрос.УстановитьПараметр("МТК", МТК);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
КолБрак = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	КолБрак = КолБрак + ВыборкаДетальныеЗаписи.КоличествоПриход;
	КонецЦикла;
Возврат(КолБрак);
КонецФункции

Функция ПолучитьПоследнююЦену(МПЗ,НаДатуВремя) Экспорт
Возврат (РегистрыСведений.Цены.ПолучитьПоследнее(НаДатуВремя,Новый Структура("МПЗ",МПЗ)).Цена);
КонецФункции

Функция ПолучитьПолнуюСебестоимость(МПЗ,НаДату = Неопределено) Экспорт
Запрос = Новый Запрос;

	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли; 
Запрос.Текст = 
	"ВЫБРАТЬ
	|	СебестоимостьСрезПоследних.СебестоимостьПолная КАК СебестоимостьПолная
	|ИЗ
	|	РегистрСведений.Себестоимость.СрезПоследних(&НаДату, Номенклатура = &Номенклатура) КАК СебестоимостьСрезПоследних";	
Запрос.УстановитьПараметр("НаДату", НаДату);
Запрос.УстановитьПараметр("Номенклатура", МПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.СебестоимостьПолная);
	КонецЦикла;
Возврат(0);
КонецФункции 

Функция ПолучитьВыпущенноеКоличествоПоРМ(ПЗ,РабочееМесто,Спецификация) Экспорт
//Запрос = Новый Запрос;

//Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ЭтапыПроизводственныхЗаданийКанбан.ПЗ КАК ПЗ,
//	|	ЭтапыПроизводственныхЗаданийКанбан.Количество КАК Количество
//	|ИЗ
//	|	РегистрСведений.ЭтапыПроизводственныхЗаданийКанбан КАК ЭтапыПроизводственныхЗаданийКанбан
//	|ГДЕ
//	|	ЭтапыПроизводственныхЗаданийКанбан.ПЗ = &ПЗ
//	|	И ЭтапыПроизводственныхЗаданийКанбан.РабочееМесто = &РабочееМесто
//	|ИТОГИ
//	|	СУММА(Количество)
//	|ПО
//	|	ПЗ";
//Запрос.УстановитьПараметр("ПЗ", ПЗ);
//Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
//РезультатЗапроса = Запрос.Выполнить();
//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//	Возврат(ВыборкаДетальныеЗаписи.Количество);
//	КонецЦикла;
Возврат(0);
КонецФункции

Функция ПолучитьПолнуюСуммуЗарплаты(Подразделение,Линейка,НаДату) Экспорт
ПЗП = РегистрыСведений.ПолнаяЗарплатаПодразделений.Получить(НачалоМесяца(НаДату),Новый Структура("Подразделение,Линейка",Подразделение,Линейка));
Возврат (ПЗП.Сумма);
КонецФункции

Функция ПодчиненнаяЛьготнаяОчередь(ПФ,ПричиныИЛО = Неопределено)
Запрос = Новый Запрос;
ТаблицаМПЗ = Новый ТаблицаЗначений;

ТаблицаМПЗ.Колонки.Добавить("МПЗ");
ТаблицаМПЗ.Колонки.Добавить("Приоритет");
ТаблицаМПЗ.Колонки.Добавить("Количество");

Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛьготнаяОчередь.Линейка,
	|	ЛьготнаяОчередь.НормаРасходов.Элемент КАК МПЗ,
	|	ЛьготнаяОчередь.ПЗ
	|ИЗ
	|	РегистрСведений.ЛьготнаяОчередь КАК ЛьготнаяОчередь
	|ГДЕ
	|	ЛьготнаяОчередь.Изделие = &Изделие
	|	И ЛьготнаяОчередь.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)"; 
Запрос.УстановитьПараметр("Изделие", ПФ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТаблицаВиртуальногоСклада = ПолучитьОстаткиПоМестамХраненияЛинейки(ВыборкаДетальныеЗаписи.ПЗ.Линейка);
	ТаблицаВиртуальногоСклада.Индексы.Добавить("МПЗ");
	ТаблицаМПЗ.Очистить(); 
		Если Не ПроверитьМПЗИАналоги(ТаблицаМПЗ,ТаблицаВиртуальногоСклада,ПФ,ВыборкаДетальныеЗаписи.МПЗ,ПолучитьНезавершённоеКоличество(ТекущаяДата(),ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование),ПричиныИЛО) Тогда
			Если ТипЗнч(ВыборкаДетальныеЗаписи.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если ПодчиненнаяЛьготнаяОчередь(ВыборкаДетальныеЗаписи.МПЗ,ПричиныИЛО) Тогда
				Возврат(Истина);
				КонецЕсли;					
			Иначе	
			Возврат(Истина);
			КонецЕсли;				
		КонецЕсли; 
	КонецЦикла;
Возврат(Ложь);
КонецФункции

Функция ИстиннаяЛьготнаяОчередь(ПЗ,ПричиныИЛО = Неопределено) Экспорт    
Запрос = Новый Запрос;
ТаблицаМПЗ = Новый ТаблицаЗначений;

ТаблицаМПЗ.Колонки.Добавить("МПЗ");
ТаблицаМПЗ.Колонки.Добавить("Приоритет");
ТаблицаМПЗ.Колонки.Добавить("Количество");

ТаблицаВиртуальногоСклада = ПолучитьОстаткиПоМестамХраненияЛинейки(ПЗ.Линейка);
ТаблицаВиртуальногоСклада.Индексы.Добавить("МПЗ");

Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛьготнаяОчередь.НормаРасходов.Элемент КАК МПЗ
	|ИЗ
	|	РегистрСведений.ЛьготнаяОчередь КАК ЛьготнаяОчередь
	|ГДЕ
	|	ЛьготнаяОчередь.Изделие = &Изделие
	|	И ЛьготнаяОчередь.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)"; 
Запрос.УстановитьПараметр("Изделие", ПЗ.Изделие);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТаблицаМПЗ.Очистить();
		Если Не ПроверитьМПЗИАналоги(ТаблицаМПЗ,ТаблицаВиртуальногоСклада,ПЗ.Изделие,ВыборкаДетальныеЗаписи.МПЗ,ПЗ.Количество,ПричиныИЛО) Тогда
			Если ТипЗнч(ВыборкаДетальныеЗаписи.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если ПодчиненнаяЛьготнаяОчередь(ВыборкаДетальныеЗаписи.МПЗ,ПричиныИЛО) Тогда
				Возврат(Истина);
				КонецЕсли;					
			Иначе	
			Возврат(Истина);
			КонецЕсли;				
		КонецЕсли; 
	КонецЦикла;
Возврат(Ложь);
КонецФункции

Функция ИстиннаяЛьготнаяОчередьИзделие(Линейка,Изделие,Количество,ПричиныИЛО = Неопределено) Экспорт    
Запрос = Новый Запрос;
ТаблицаМПЗ = Новый ТаблицаЗначений;

ТаблицаМПЗ.Колонки.Добавить("МПЗ");
ТаблицаМПЗ.Колонки.Добавить("Приоритет");
ТаблицаМПЗ.Колонки.Добавить("Количество");

ТаблицаВиртуальногоСклада = ПолучитьОстаткиПоМестамХраненияЛинейки(Линейка);
ТаблицаВиртуальногоСклада.Индексы.Добавить("МПЗ");

Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЛьготнаяОчередь.НормаРасходов.Элемент КАК МПЗ
	|ИЗ
	|	РегистрСведений.ЛьготнаяОчередь КАК ЛьготнаяОчередь
	|ГДЕ
	|	ЛьготнаяОчередь.Изделие = &Изделие
	|	И ЛьготнаяОчередь.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)"; 
Запрос.УстановитьПараметр("Изделие", Изделие);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТаблицаМПЗ.Очистить();
		Если Не ПроверитьМПЗИАналоги(ТаблицаМПЗ,ТаблицаВиртуальногоСклада,Изделие,ВыборкаДетальныеЗаписи.МПЗ,Количество,ПричиныИЛО) Тогда
			Если ТипЗнч(ВыборкаДетальныеЗаписи.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если ПодчиненнаяЛьготнаяОчередь(ВыборкаДетальныеЗаписи.МПЗ,ПричиныИЛО) Тогда
				Возврат(Истина);
				КонецЕсли;					
			Иначе	
			Возврат(Истина);
			КонецЕсли;				
		КонецЕсли; 
	КонецЦикла;
Возврат(Ложь);
КонецФункции

Процедура ПолучитьОстаткиСпискаМПЗПоМестамХранения(Линейка,ТаблицаМПЗ) Экспорт
	Если ТаблицаМПЗ.Количество() > 0 Тогда
	Запрос = Новый Запрос;
	СписокМПЗ = Новый СписокЗначений;
	СписокМестХранения = Новый СписокЗначений;

	СписокМестХранения.Добавить(Линейка.МестоХраненияКанбанов);
	СписокМестХранения.Добавить(Линейка.Подразделение.МестоХраненияПоУмолчанию);
		Если Не Линейка.Подразделение.МестоХраненияДополнительный.Пустая() Тогда
		СписокМестХранения.Добавить(Линейка.Подразделение.МестоХраненияДополнительный);
		КонецЕсли; 	                            
			Если Найти(Линейка.Подразделение.Наименование,"Богородицк линия SMD") > 0 Тогда
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	Линейки.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.Линейки КАК Линейки
				|ГДЕ
				|	Линейки.Подразделение = &Подразделение
				|	И Линейки.ПометкаУдаления = ЛОЖЬ";
			Запрос.УстановитьПараметр("Подразделение", Линейка.Подразделение);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				СписокМестХранения.Добавить(ВыборкаДетальныеЗаписи.Ссылка.МестоХраненияКанбанов);
				КонецЦикла;
			КонецЕсли;
				Для каждого ТЧ Из ТаблицаМПЗ Цикл
				СписокМПЗ.Добавить(ТЧ.МПЗ);
				КонецЦикла; 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МестаХраненияОстатки.МПЗ КАК МПЗ,
		|	МестаХраненияОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.МестаХранения.Остатки(
		|			,
		|			МестоХранения В (&СписокМестХранения)
		|				И МПЗ В (&СписокМПЗ)) КАК МестаХраненияОстатки
		|ИТОГИ
		|	СУММА(КоличествоОстаток)
		|ПО
		|	МПЗ";
	Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
	Запрос.УстановитьПараметр("СписокМПЗ", СписокМПЗ);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаМПЗ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМПЗ.Следующий() Цикл
		ТаблицаМПЗ.Найти(ВыборкаМПЗ.МПЗ,"МПЗ").КоличествоСклад = ВыборкаМПЗ.КоличествоОстаток;	
		КонецЦикла;
	КонецЕсли; 
КонецПроцедуры 

Функция ПолучитьОстаткиПоМестамХраненияЛинейки(Линейка) Экспорт
Запрос = Новый Запрос;
СписокМестХранения = Новый СписокЗначений;

СписокМестХранения.Добавить(Линейка.МестоХраненияКанбанов);
СписокМестХранения.Добавить(Линейка.Подразделение.МестоХраненияПоУмолчанию);
	Если Не Линейка.Подразделение.МестоХраненияДополнительный.Пустая() Тогда
	СписокМестХранения.Добавить(Линейка.Подразделение.МестоХраненияДополнительный);
	КонецЕсли; 	                            
		Если Найти(Линейка.Подразделение.Наименование,"Богородицк линия SMD") > 0 Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Линейки.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.Линейки КАК Линейки
			|ГДЕ
			|	Линейки.Подразделение = &Подразделение
			|	И Линейки.ПометкаУдаления = ЛОЖЬ";
		Запрос.УстановитьПараметр("Подразделение", Линейка.Подразделение);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокМестХранения.Добавить(ВыборкаДетальныеЗаписи.Ссылка.МестоХраненияКанбанов);
			КонецЦикла;
		КонецЕсли; 
Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияОстатки.МПЗ КАК МПЗ,
	|	СУММА(МестаХраненияОстатки.КоличествоОстаток) КАК Количество
	|ИЗ
	|	РегистрНакопления.МестаХранения.Остатки(, МестоХранения В (&СписокМестХранения)) КАК МестаХраненияОстатки
	|
	|СГРУППИРОВАТЬ ПО
	|	МестаХраненияОстатки.МПЗ";
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
Возврат(Запрос.Выполнить().Выгрузить());
КонецФункции

Функция ПолучитьКоличествоНеремонтопригодных(ПЗ) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РемонтнаяКарта.КоличествоНеремонтопригодных
	|ИЗ
	|	Документ.РемонтнаяКарта КАК РемонтнаяКарта
	|ГДЕ
	|	РемонтнаяКарта.ДокументОснование = &ДокументОснование
	|	И РемонтнаяКарта.Проведен = ИСТИНА";
Запрос.УстановитьПараметр("ДокументОснование", ПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
Количество = 0;
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Количество = Количество + ВыборкаДетальныеЗаписи.КоличествоНеремонтопригодных;
	КонецЦикла;
Возврат(Количество);
КонецФункции

Функция СоздатьТаблицуОстатковВиртуальногоСклада(МестоХранения,НаДату) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияОстатки.МПЗ,
	|	МестаХраненияОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.МестаХранения.Остатки(&НаДату, МестоХранения = &МестоХранения) КАК МестаХраненияОстатки";
Запрос.УстановитьПараметр("МестоХранения", МестоХранения);
Запрос.УстановитьПараметр("НаДату", НаДату);
РезультатЗапроса = Запрос.Выполнить();
ТаблицаСкладаВиртуальная = РезультатЗапроса.Выгрузить();
ТаблицаСкладаВиртуальная.Индексы.Добавить("МПЗ");
Возврат(ТаблицаСкладаВиртуальная);
КонецФункции 

Функция СоздатьТаблицуОстатковВиртуальныхСкладов(СписокМестХранения,НаДату) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияОстатки.МПЗ,
	|	МестаХраненияОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.МестаХранения.Остатки(&НаДату, МестоХранения В(&СписокМестХранения)) КАК МестаХраненияОстатки";
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
Запрос.УстановитьПараметр("НаДату", НаДату);
РезультатЗапроса = Запрос.Выполнить();
ТаблицаСкладаВиртуальная = РезультатЗапроса.Выгрузить();
ТаблицаСкладаВиртуальная.Индексы.Добавить("МПЗ");
Возврат(ТаблицаСкладаВиртуальная);
КонецФункции

Функция ПолучитьНормыРасходовПоВладельцу_Все(Владелец,НаДатуВремя) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ                                       
	|	НормыРасходовСрезПоследних.Владелец КАК Владелец,
	|	НормыРасходовСрезПоследних.НормаРасходов КАК Ссылка,
	|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
	|	НормыРасходовСрезПоследних.НормаРасходов.Позиция КАК Позиция,
	|	НормыРасходовСрезПоследних.НормаРасходов.Примечание КАК Примечание,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(&НаДату, Владелец = &Владелец) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("НаДату", НаДатуВремя);
Запрос.УстановитьПараметр("Владелец", Владелец);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
Возврат(ВыборкаНР);	
КонецФункции

Функция ПолучитьНормыРасходовПоВладельцу_Н_М(Владелец,НаДатуВремя) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ                                       
	|	НормыРасходовСрезПоследних.НормаРасходов КАК Ссылка,
	|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
	|	НормыРасходовСрезПоследних.НормаРасходов.Позиция КАК Позиция,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(
	|			&НаДату,
	|			Владелец = &Владелец
	|				И (Элемент ССЫЛКА Справочник.Номенклатура
	|					ИЛИ Элемент ССЫЛКА Справочник.Материалы)) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("НаДату", НаДатуВремя);
Запрос.УстановитьПараметр("Владелец", Владелец);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
Возврат(ВыборкаНР);	
КонецФункции
         
Функция ПолучитьНормыРасходовПоВладельцу_Н_Д(Владелец,НаДатуВремя) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ                                       
	|	НормыРасходовСрезПоследних.НормаРасходов КАК Ссылка,
	|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(
	|			&НаДату,
	|			Владелец = &Владелец
	|				И (Элемент ССЫЛКА Справочник.Номенклатура
	|					ИЛИ Элемент ССЫЛКА Справочник.Документация)) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("НаДату", НаДатуВремя);
Запрос.УстановитьПараметр("Владелец", Владелец);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
Возврат(ВыборкаНР);	
КонецФункции

Функция ПолучитьНормыРасходовПоВладельцу_Н(Владелец,НаДатуВремя) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходовСрезПоследних.НормаРасходов КАК Ссылка,
	|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
	|	НормыРасходовСрезПоследних.НормаРасходов.Позиция КАК Позиция,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(
	|			&НаДату,
	|			Владелец = &Владелец
	|				И Элемент ССЫЛКА Справочник.Номенклатура) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("НаДату", НаДатуВремя);
Запрос.УстановитьПараметр("Владелец", Владелец);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
Возврат(ВыборкаНР);	
КонецФункции
     
Функция ПолучитьНормыРасходовПоВладельцу_М(Владелец,НаДатуВремя) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходовСрезПоследних.НормаРасходов КАК Ссылка,
	|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
	|	НормыРасходовСрезПоследних.НормаРасходов.Позиция КАК Позиция,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(
	|			&НаДату,
	|			Владелец = &Владелец
	|				И Элемент ССЫЛКА Справочник.Материалы) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("НаДату", НаДатуВремя);
Запрос.УстановитьПараметр("Владелец", Владелец);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
Возврат(ВыборкаНР);	
КонецФункции

Функция ПолучитьНормыРасходовПоВладельцу_ТО(Владелец,НаДатуВремя) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(
	|			&НаДату,
	|			Владелец = &Владелец
	|				И Элемент ССЫЛКА Справочник.ТехОперации) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("НаДату", НаДатуВремя);
Запрос.УстановитьПараметр("Владелец", Владелец);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
Возврат(ВыборкаНР);	
КонецФункции
      
Функция ПолучитьНормыРасходовПоВладельцу_Н_ТО(Владелец,НаДатуВремя) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(
	|			&НаДату,
	|			Владелец = &Владелец
	|				И (Элемент ССЫЛКА Справочник.Номенклатура
	|					ИЛИ Элемент ССЫЛКА Справочник.ТехОперации)) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("НаДату", НаДатуВремя);
Запрос.УстановитьПараметр("Владелец", Владелец);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
Возврат(ВыборкаНР);	
КонецФункции 

Функция ПолучитьНормыРасходовПоВладельцу_Н_ТОсн(Владелец,НаДатуВремя) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ                                      
	|	НормыРасходовСрезПоследних.НормаРасходов КАК Ссылка,
	|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(
	|			&НаДату,
	|			Владелец = &Владелец
	|				И (Элемент ССЫЛКА Справочник.Номенклатура
	|					ИЛИ Элемент ССЫЛКА Справочник.ТехОснастка)) КАК НормыРасходовСрезПоследних
	|ГДЕ
	|	НормыРасходовСрезПоследних.Норма > 0
	|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("НаДату", НаДатуВремя);
Запрос.УстановитьПараметр("Владелец", Владелец);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
Возврат(ВыборкаНР);	
КонецФункции

Функция ПолучитьЗапросНормРасходовПоВладельцу_Н_М(НаДатуВремя,СписокГруппМПЗ,НеПринадлежатВыбраннымГруппам = Ложь) Экспорт
Запрос = Новый Запрос;

	Если СписокГруппМПЗ.Количество() = 0 Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НормыРасходовСрезПоследних.НормаРасходов КАК Ссылка,
		|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
		|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
		|	НормыРасходовСрезПоследних.Элемент.ОсновнаяЕдиницаИзмерения КАК ЭлементОЕИ,
		|	НормыРасходовСрезПоследних.Норма КАК Норма
		|ИЗ
		|	РегистрСведений.НормыРасходов.СрезПоследних(
		|			&НаДату,
		|			Владелец = &Владелец
		|				И (Элемент ССЫЛКА Справочник.Номенклатура
		|					ИЛИ Элемент ССЫЛКА Справочник.Материалы)) КАК НормыРасходовСрезПоследних
		|ГДЕ
		|	НормыРасходовСрезПоследних.Норма > 0
		|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";
	Иначе
		Если НеПринадлежатВыбраннымГруппам Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НормыРасходовСрезПоследних.НормаРасходов КАК Ссылка,
			|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
			|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
			|	НормыРасходовСрезПоследних.Элемент.ОсновнаяЕдиницаИзмерения КАК ЭлементОЕИ,
			|	НормыРасходовСрезПоследних.Норма КАК Норма
			|ИЗ
			|	РегистрСведений.НормыРасходов.СрезПоследних(
			|			&НаДату,
			|			Владелец = &Владелец
			|				И (Элемент ССЫЛКА Справочник.Номенклатура
			|					ИЛИ Элемент ССЫЛКА Справочник.Материалы
			|						И НЕ Элемент В ИЕРАРХИИ (&СписокМПЗ))) КАК НормыРасходовСрезПоследних
			|ГДЕ
			|	НормыРасходовСрезПоследних.Норма > 0
			|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";	
		Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НормыРасходовСрезПоследних.НормаРасходов КАК Ссылка,
			|	НормыРасходовСрезПоследних.Элемент КАК Элемент,
			|	НормыРасходовСрезПоследних.НормаРасходов.ВидЭлемента КАК ВидЭлемента,
			|	НормыРасходовСрезПоследних.Элемент.ОсновнаяЕдиницаИзмерения КАК ЭлементОЕИ,
			|	НормыРасходовСрезПоследних.Норма КАК Норма
			|ИЗ
			|	РегистрСведений.НормыРасходов.СрезПоследних(
			|			&НаДату,
			|			Владелец = &Владелец
			|				И (Элемент ССЫЛКА Справочник.Номенклатура
			|					ИЛИ Элемент В ИЕРАРХИИ (&СписокМПЗ))) КАК НормыРасходовСрезПоследних
			|ГДЕ
			|	НормыРасходовСрезПоследних.Норма > 0
			|	И НормыРасходовСрезПоследних.НормаРасходов.ПометкаУдаления = ЛОЖЬ";	
		КонецЕсли;                                                                 
	Запрос.УстановитьПараметр("СписокМПЗ", СписокГруппМПЗ);
	КонецЕсли;
Запрос.УстановитьПараметр("НаДату", НаДатуВремя);
Возврат(Запрос);	
КонецФункции

#КонецОбласти 

#Область ФункцииРаботыСПочтовымиРассылками

Функция ПолучитьНастройкиПочты() Экспорт
Возврат(Новый Структура("АдресСервераSMTP,ПортSMTP,ПарольПочтовогоСервера",Константы.АдресСервераSMTP.Получить(),Константы.ПортSMTP.Получить(),Константы.ПарольПочтовогоСервера.Получить()));
КонецФункции
             
Функция ПолучитьПараметрыПочтовойРассылки(НаименованиеФормы,Код) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПочтовыеРассылки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ПочтовыеРассылки КАК ПочтовыеРассылки
	|ГДЕ
	|	ПочтовыеРассылки.Родитель.Наименование = &Наименование
	|	И ПочтовыеРассылки.Ссылка.Код = &Код";
Запрос.УстановитьПараметр("Код", Код);
Запрос.УстановитьПараметр("Наименование", НаименованиеФормы);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл                                 
	СписокEmail = Новый СписокЗначений;

		Для каждого ТЧ Из ВыборкаДетальныеЗаписи.Ссылка.Сотрудники Цикл
			Если ЗначениеЗаполнено(ТЧ.Сотрудник.Email) Тогда
			СписокEmail.Добавить(СокрЛП(ТЧ.Сотрудник.Email));
			КонецЕсли;	
		КонецЦикла;
	Возврат(Новый Структура("Заголовок,СписокEmail",СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.ЗаголовокПисьма),СписокEmail));
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

Функция ОтправитьПочтовуюРассылку(ТекущийОбъект,Код,Текст) Экспорт  
Почта = Новый ИнтернетПочта;                
ИПП = Новый ИнтернетПочтовыйПрофиль;
Сообщение = Новый ИнтернетПочтовоеСообщение;

	Попытка
	НастройкиПочты = ПолучитьНастройкиПочты();
	ИПП.АдресСервераSMTP = НастройкиПочты.АдресСервераSMTP; 
	ИПП.ПортSMTP = НастройкиПочты.ПортSMTP;
	ИПП.ВремяОжидания = 60; 
	ИПП.Пароль = НастройкиПочты.ПарольПочтовогоСервера; 
	ИПП.Пользователь = "Автоматическая рассылка из ПБ";
	Сообщение.Отправитель = СокрЛП(ПараметрыСеанса.Пользователь.Email);
	Сообщение.Получатели.Добавить(СокрЛП(ПараметрыСеанса.Пользователь.Email)); 
	ПараметрыРассылки = ОбщийМодульВызовСервера.ПолучитьПараметрыПочтовойРассылки(ТекущийОбъект.Метаданные().Имя,Код);
		Если ПараметрыРассылки <> Неопределено Тогда
			Для каждого АдресEmail Из ПараметрыРассылки.СписокEmail Цикл
			Сообщение.Получатели.Добавить(АдресEmail.Значение);		
			КонецЦикла;	
		Сообщение.Тема = ПараметрыРассылки.Заголовок;
		Сообщение.Тексты.Добавить(Текст);	
		Почта.Подключиться(ИПП);
		Почта.Послать(Сообщение); 
		Почта.Отключиться();
		Иначе
		Возврат(Строка(Код)+" - параметры рассылки не найдены в справочнике Почтовые рассылки!");
		КонецЕсли;	
	Исключение
	Возврат(ОписаниеОшибки());	
	КонецПопытки;
КонецФункции

#КонецОбласти

#Область ФункцииПрочие

Функция ПолучитьПутьКБазеПроизводства() Экспорт
Возврат (СокрЛП(Константы.ПутьКБазе1СПроизводство.Получить()));
КонецФункции

Функция ФИО_Инициалы(Сотрудник) Экспорт
	Если Не Сотрудник.Пустая() Тогда
	ФИО = СтрРазделить(Сотрудник.Наименование," ",Ложь);
	Возврат(ФИО[0]+" "+Лев(ФИО[1],1)+". "+Лев(ФИО[2],1))+".";
	Иначе
	Возврат("");
	КонецЕсли; 
КонецФункции

Функция ЗаполнитьПользовательскиеНастройкиОтчетаСКД(ИмяОтчета,ДатаНач,ДатаКон,ПараметрыОтбора,ИмяВарианта) Экспорт
ОтчетОбъект = Отчеты[ИмяОтчета].Создать();
КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
Вариант = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ИмяВарианта);
Настройки = Вариант.Настройки;		
	Если ДатаНач <> Неопределено Тогда
	ОтборПериод = Настройки.ПараметрыДанных.Элементы.Найти("СтандартныйПериод");
		Если ОтборПериод <> Неопределено Тогда
		ОтборПериод.Значение.ДатаНачала = ДатаНач;
		ОтборПериод.Значение.ДатаОкончания = ДатаКон;
		ОтборПериод.Использование = Истина;		
		Иначе
		ОтборПериод = Настройки.ПараметрыДанных.Элементы.Найти("НаДату");
			Если ОтборПериод <> Неопределено Тогда
			ОтборПериод.Значение = ДатаКон;
			ОтборПериод.Использование = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
		Если ПараметрыОтбора <> Неопределено Тогда
			Для к = 0 По Настройки.Отбор.Элементы.Количество() - 1 Цикл
			ЭлементОтбора = Настройки.Отбор.Элементы[к];
				Если Найти(ЭлементОтбора.ЛевоеЗначение,".") = 0 Тогда
				Значение = Неопределено;
			    ПараметрыОтбора.Свойство(ЭлементОтбора.ЛевоеЗначение,Значение);
					Если Значение <> Неопределено Тогда
						Если ТипЗнч(Значение) = Тип("СписокЗначений") Тогда
						ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
						ИначеЕсли Значение = "#" Тогда
						ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено; 
						Иначе
						    Попытка
								Если Значение.ЭтоГруппа Тогда
								ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии;
								Иначе	
								ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;					
								КонецЕсли;
							Исключение
							ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
							КонецПопытки; 
						КонецЕсли; 
					ЭлементОтбора.ПравоеЗначение = Значение;
					ЭлементОтбора.Использование = Истина;			
					КонецЕсли; 
				КонецЕсли; 		
			КонецЦикла;
		КонецЕсли;                         			
КомпоновщикНастроек.ЗагрузитьНастройки(Настройки); 
Возврат КомпоновщикНастроек.ПользовательскиеНастройки;
КонецФункции

Функция ЗаполнитьНастройкиОтчетаСКД(ИмяОтчета,ДатаНач,ДатаКон,ПараметрыОтбора,ВидыСравнений,ИмяВарианта) Экспорт
ОтчетОбъект = Отчеты[ИмяОтчета].Создать();
КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;
Вариант = ОтчетОбъект.СхемаКомпоновкиДанных.ВариантыНастроек.Найти(ИмяВарианта);
Настройки = Вариант.Настройки;		
	Если ДатаНач <> Неопределено Тогда
	ОтборПериод = Настройки.ПараметрыДанных.Элементы.Найти("СтандартныйПериод");
	ОтборПериод.Значение.ДатаНачала = ДатаНач;
	ОтборПериод.Значение.ДатаОкончания = ДатаКон;
	ОтборПериод.Использование = Истина;
	КонецЕсли;
		Для к = 0 По Настройки.Отбор.Элементы.Количество() - 1 Цикл
		ЭлементОтбора = Настройки.Отбор.Элементы[к];
			Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				Для л = 0 По ЭлементОтбора.Элементы.Количество() - 1 Цикл
				ЭлементОтбораГруппы = ЭлементОтбора.Элементы[л];
				Значение = Неопределено;
			    ПараметрыОтбора.Свойство(ЭлементОтбораГруппы.ЛевоеЗначение,Значение);
					Если Значение <> Неопределено Тогда
					ВидыСравнений.Свойство(ЭлементОтбораГруппы.ЛевоеЗначение,ЭлементОтбораГруппы.ВидСравнения); 
					ЭлементОтбораГруппы.ПравоеЗначение = Значение;
					ЭлементОтбораГруппы.Использование = Истина;			
					КонецЕсли;				
				КонецЦикла;
			Иначе
			Значение = Неопределено;
		    ПараметрыОтбора.Свойство(ЭлементОтбора.ЛевоеЗначение,Значение);
				Если Значение <> Неопределено Тогда
				ВидыСравнений.Свойство(ЭлементОтбора.ЛевоеЗначение,ЭлементОтбора.ВидСравнения); 
				ЭлементОтбора.ПравоеЗначение = Значение;
				ЭлементОтбора.Использование = Истина;			
				КонецЕсли;		
			КонецЕсли;  		
		КонецЦикла;                         			
КомпоновщикНастроек.ЗагрузитьНастройки(Настройки); 
Возврат КомпоновщикНастроек.ПользовательскиеНастройки;
КонецФункции

Функция ПолучитьВремяМеждуДатами(ДатаНачала,ДатаОкончания,Размерность = 1,ВычестьНерабочееВремя = Ложь,КоличествоНерабочихЧасов = 0,БезВыходных = Ложь) Экспорт
ДатаНач = ДатаНачала;
ДатаКон = ДатаОкончания;
	Если Не ЗначениеЗаполнено(ДатаНач) Тогда
	Возврат(0);
	ИначеЕсли Не ЗначениеЗаполнено(ДатаКон) Тогда
	ДатаКон = ТекущаяДата();
	КонецЕсли;
		Если Размерность = 0 Тогда //в днях
		Коэфф = 86400; 
		ИначеЕсли Размерность = 1 Тогда //в часах
	    Коэфф = 3600;
		Иначе //в минутах
		Коэфф = 60;
		КонецЕсли;  
КолДнейВсего = Окр((КонецДня(ДатаКон) - НачалоДня(ДатаНач))/86400,0,1);
КолДнейРаб = (КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(Константы.ОсновнойПроизводственныйКалендарь.Получить(),ДатаНач,ДатаКон));
КолСекундПраздн = ?(БезВыходных,(КолДнейВсего - КолДнейРаб)*86400,0);
КолСекундНераб = ?(ВычестьНерабочееВремя,(КолДнейРаб-1)*КоличествоНерабочихЧасов*3600,0);
Возврат(Окр(((ДатаКон - ДатаНач) - КолСекундПраздн - КолСекундНераб)/Коэфф,2,1));
КонецФункции

Функция МожноОформитьПустойКанбан(МПЗ) Экспорт
ОформлятьПустыеКанбаны = 0;
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если Не МПЗ.Канбан.Пустая() Тогда	
		ОформлятьПустыеКанбаны = МПЗ.Канбан.Подразделение.ОформлятьПустыеКанбаны;
		КонецЕсли; 
	Иначе	
	ОформлятьПустыеКанбаны = Константы.МестоХраненияОсновное.Получить().Подразделение.ОформлятьПустыеКанбаны;
	КонецЕсли;
		Если ОформлятьПустыеКанбаны = 0 Тогда	
		Сообщить("Запрещено оформлять пустые канбаны этого подразделения!");
		Возврат(Ложь); 
		ИначеЕсли ОформлятьПустыеКанбаны = 1 Тогда
		Возврат(Истина);
		Иначе
		Сообщить("Пустые канбаны этого подразделения оформляются автоматически при создании МТК!");
		Возврат(Ложь); 		
		КонецЕсли; 
КонецФункции

Функция МожноПеремещатьВБрак(МПЗ) Экспорт
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если МПЗ.Канбан.Пустая() Тогда
		Возврат(Ложь);	
		Иначе
		Возврат(Не МПЗ.Канбан.ЗапрещеноПеремещениеВБрак);
		КонецЕсли; 
	ИначеЕсли ТипЗнч(МПЗ) = Тип("СправочникСсылка.Материалы") Тогда 	
	Возврат(Истина);
	Иначе
	Возврат(Ложь);
	КонецЕсли; 
КонецФункции

Функция ПолучитьСотрудникаПоДолжности(Должность) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Сотрудники.Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ПометкаУдаления = ЛОЖЬ
	|	И Сотрудники.Должность.Наименование = &Наименование";
Запрос.УстановитьПараметр("Наименование", Должность);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
Возврат(Справочники.Сотрудники.ПустаяСсылка());
КонецФункции

Функция ПолучитьСписокМестХраненияДляМониторинга(Подразделение) Экспорт
СЗ = Новый СписокЗначений;
Запрос = Новый Запрос;

	Для каждого ТЧ Из Подразделение.СписокМестХраненияДляМониторинга Цикл	
		Если ТЧ.МестоХранения.ЭтоГруппа Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МестаХранения.Ссылка
			|ИЗ
			|	Справочник.МестаХранения КАК МестаХранения
			|ГДЕ
			|	МестаХранения.Ссылка В ИЕРАРХИИ(&ГруппаМестХранения)";
		Запрос.УстановитьПараметр("ГруппаМестХранения", ТЧ.МестоХранения);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СЗ.Добавить(ТЧ.МестоХранения);
			КонецЦикла;		
		Иначе	
		СЗ.Добавить(ТЧ.МестоХранения);
		КонецЕсли; 
	КонецЦикла; 
Возврат(СЗ);
КонецФункции

Функция ПолучитьАртикулПоКодуТовара(Код) Экспорт
	Если СтрДлина(Формат(Код,"ЧГ=0")) < 6 Тогда
	Возврат(Формат(Код,"ЧЦ=5; ЧВН=; ЧГ=0"));
	Иначе	
	Возврат(Формат(Код,"ЧЦ=6; ЧВН=; ЧГ=0"));
	КонецЕсли;
КонецФункции

Функция ПринадлежитСпискуГруппМПЗ(МПЗ,СписокГруппМПЗ) Экспорт
	Для каждого ЭлементСписка Из СписокГруппМПЗ Цикл
		Если ЭлементСписка.Значение.ЭтоГруппа Тогда
			Если МПЗ.ПринадлежитЭлементу(ЭлементСписка.Значение) Тогда
			Возврат(Истина);
			КонецЕсли;		
		Иначе	
			Если МПЗ = ЭлементСписка.Значение Тогда
			Возврат(Истина);
			КонецЕсли;		
		КонецЕсли; 
	КонецЦикла;
Возврат(Ложь);
КонецФункции 

Функция НайтиСоздатьНоменклатуру(БухБаза, Элемент, бсдГруппаПоУмолчанию) Экспорт
бсдГруппа = бсдГруппаПоУмолчанию;
	Если Элемент.Уровень()>1 Тогда
	г = БухБаза.Справочники.Номенклатура.НайтиПоНаименованию(Элемент.Родитель.Наименование,-1);
		Если БухБаза.ЗначениеЗаполнено(г) Тогда
		бсдГруппа = г;	
		КонецЕсли;
	КонецЕсли;
Код = СтрЗаменить(Строка(Элемент.ID),Символы.НПП,"");	
Ном = БухБаза.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", СокрЛП(Код));
	Если Не БухБаза.ЗначениеЗаполнено(Ном) Тогда		
	НомОбъект = БухБаза.Справочники.Номенклатура.СоздатьЭлемент();
 	НомОбъект.Артикул 				= Код;
 	НомОбъект.Родитель 				= бсдГруппа;					
	НомОбъект.ПометкаУдаления 		= Элемент.ПометкаУдаления;
  	НомОбъект.НаименованиеПолное 	= Элемент.ПолнНаименование;
 	НомОбъект.Наименование 			= Элемент.Наименование;	
 	ЕдИзм = БухБаза.Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Элемент.ЕдиницаИзмерения.Наименование);
	 	Если Не БухБаза.ЗначениеЗаполнено(ЕдИзм) Тогда
 		ЕдИзмОбъект = БухБаза.Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент(); 		
 	    ЕдИзмОбъект.Наименование 		= Элемент.ЕдиницаИзмерения.Наименование;
 	    ЕдИзмОбъект.НаименованиеПолное 	= Элемент.ЕдиницаИзмерения.ПолнНаименование;
 	    ЕдИзмОбъект.Код 				= Элемент.ЕдиницаИзмерения.Код;
 		ЕдИзмОбъект.Записать();
 		ЕдИзм = ЕдИзмОбъект.Ссылка;
	 	КонецЕсли;	 	
 	НомОбъект.ЕдиницаИзмерения = ЕдИзм;	
 	НомОбъект.ВидСтавкиНДС =  БухБаза.Перечисления.ВидыСтавокНДС.Общая;
 	НомОбъект.Записать(); 
 	Сообщить("Выгружен МПЗ "+ НомОбъект.Наименование + " ("+Код+")");	
 	Возврат НомОбъект.Ссылка;
 	Иначе
	Возврат Ном;
 	КонецЕсли;	
КонецФункции

Функция ПолучитьМестоХраненияПоКоду(Код) Экспорт
Возврат(Справочники.МестаХранения.НайтиПоКоду(Код));	
КонецФункции

Функция ПолучитьЗначениеРеквизита(Ссылка, ИмяРеквизита) Экспорт
Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции

Функция ПолучитьЗначениеИзСтрокиВнутр(Код) Экспорт
Возврат(ЗначениеИзСтрокиВнутр(Код));	
КонецФункции

Функция ЭтоКанбанБезРезервирования(МПЗ) Экспорт	
	Если Не МПЗ.Канбан.Пустая() Тогда
	 	Если Не МПЗ.Канбан.РезервироватьВПроизводстве Тогда
		Возврат(Истина);
		КонецЕсли;
	КонецЕсли; 
Возврат(Ложь);
КонецФункции 
  
Функция ПолучитьТаблицуПриборовОжидаемогоРасхода(СписокПодразделений,ВключатьРезервКомплект = Ложь,ПоЛинейкам = Ложь) Экспорт
Запрос = Новый Запрос;
ТаблицаПродукции = Новый ТаблицаЗначений;
                                             
ТаблицаПродукции.Колонки.Добавить("Линейка");
ТаблицаПродукции.Колонки.Добавить("Продукция");
ТаблицаПродукции.Колонки.Добавить("Количество");
               
	Если ВключатьРезервКомплект Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПерспективныеПланы.МПЗ,
		|	ПерспективныеПланы.РезКм
		|ИЗ
		|	РегистрСведений.ПерспективныеПланы КАК ПерспективныеПланы
		|ГДЕ
		|	ПерспективныеПланы.Период = &НаДату
		|	И ПерспективныеПланы.РезКм > 0";
	Запрос.УстановитьПараметр("НаДату", НачалоМесяца(ТекущаяДата())); 
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТЧ = ТаблицаПродукции.Добавить();
	    ТЧ.Линейка = ВыборкаДетальныеЗаписи.МПЗ.Линейка;
	    ТЧ.Продукция = ВыборкаДетальныеЗаписи.МПЗ;
	    ТЧ.Количество = ВыборкаДетальныеЗаписи.РезКм;
		КонецЦикла;
	КонецЕсли;

Запрос.Текст = 
	"ВЫБРАТЬ                                                     
	|	ПроизводственноеЗадание.Линейка КАК Линейка,
	|	ПроизводственноеЗадание.Изделие КАК Изделие,
	|	СУММА(ПроизводственноеЗадание.Количество) КАК Количество
	|ИЗ
	|	Документ.ПроизводственноеЗадание КАК ПроизводственноеЗадание
	|ГДЕ
	|	ПроизводственноеЗадание.ДатаЗапуска = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ПроизводственноеЗадание.Подразделение В(&СписокПодразделений)
	|
	|СГРУППИРОВАТЬ ПО
	|	ПроизводственноеЗадание.Линейка,
	|	ПроизводственноеЗадание.Изделие";
Запрос.УстановитьПараметр("СписокПодразделений", СписокПодразделений);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = ТаблицаПродукции.Добавить();
    ТЧ.Линейка = ВыборкаДетальныеЗаписи.Линейка;
    ТЧ.Продукция = ВыборкаДетальныеЗаписи.Изделие;
    ТЧ.Количество = ВыборкаДетальныеЗаписи.Количество;
	КонецЦикла;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	КрупныеЗаказы.Продукция КАК Продукция,
	|	СУММА(КрупныеЗаказы.Количество) КАК Количество
	|ИЗ
	|	РегистрСведений.КрупныеЗаказы КАК КрупныеЗаказы
	|ГДЕ
	|	КрупныеЗаказы.Обработан = ЛОЖЬ
	|	И КрупныеЗаказы.ДатаРезерва <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И КрупныеЗаказы.Продукция <> &Продукция
	|
	|СГРУППИРОВАТЬ ПО
	|	КрупныеЗаказы.Продукция";
Запрос.УстановитьПараметр("Продукция", Неопределено);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = ТаблицаПродукции.Добавить();
    ТЧ.Продукция = ВыборкаДетальныеЗаписи.Продукция.Линейка;
    ТЧ.Продукция = ВыборкаДетальныеЗаписи.Продукция;
    ТЧ.Количество = ВыборкаДетальныеЗаписи.Количество;
	КонецЦикла;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыНаПроизводствоОстатки.Документ КАК Документ,
	|	ЗаказыНаПроизводствоОстатки.Продукция КАК Продукция,
	|	ЗаказыНаПроизводствоОстатки.КоличествоОстаток КАК КоличествоОстаток,
	|	ЗаказНаПроизводствоЗаказ.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Заказ КАК ЗаказНаПроизводствоЗаказ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ЗаказыНаПроизводство.Остатки КАК ЗаказыНаПроизводствоОстатки
	|		ПО ЗаказНаПроизводствоЗаказ.Ссылка = ЗаказыНаПроизводствоОстатки.Документ
	|			И ЗаказНаПроизводствоЗаказ.Продукция = ЗаказыНаПроизводствоОстатки.Продукция
	|ГДЕ
	|	ЗаказыНаПроизводствоОстатки.Документ.Закрыт = ЛОЖЬ
	|	И ЗаказНаПроизводствоЗаказ.РучнойЗапуск = 0
	|	И ЗаказНаПроизводствоЗаказ.КрупныйЗаказ = ИСТИНА";	
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	КоличествоНеСоздано = ВыборкаДетальныеЗаписи.Количество - ПолучитьКоличествоСозданых(ВыборкаДетальныеЗаписи.Документ,ВыборкаДетальныеЗаписи.Продукция);
		Если КоличествоНеСоздано > 0 Тогда
		ТЧ = ТаблицаПродукции.Добавить();
		ТЧ.Линейка = ВыборкаДетальныеЗаписи.Продукция.Линейка;
	    ТЧ.Продукция = ВыборкаДетальныеЗаписи.Продукция;
	    ТЧ.Количество = КоличествоНеСоздано;
		КонецЕсли;	  
	КонецЦикла;
 
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПроизводствоЗаказ.Продукция КАК Продукция,
	|	ЗаказНаПроизводствоЗаказ.Количество КАК Количество
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Заказ КАК ЗаказНаПроизводствоЗаказ
	|ГДЕ                                         
	|	ЗаказНаПроизводствоЗаказ.Ссылка.Закрыт = ЛОЖЬ
	|	И ЗаказНаПроизводствоЗаказ.Продукция <> НЕОПРЕДЕЛЕНО
	|	И ЗаказНаПроизводствоЗаказ.РучнойЗапуск = 1
	|	И ЗаказНаПроизводствоЗаказ.Количество > 0";	
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = ТаблицаПродукции.Добавить();
    ТЧ.Линейка = ВыборкаДетальныеЗаписи.Продукция.Линейка;
    ТЧ.Продукция = ВыборкаДетальныеЗаписи.Продукция;
    ТЧ.Количество = ВыборкаДетальныеЗаписи.Количество;
	КонецЦикла; 
		Если ПоЛинейкам Тогда
		ТаблицаПродукции.Свернуть("Линейка,Продукция","Количество");
		Иначе	
		ТаблицаПродукции.Свернуть("Продукция","Количество");
		КонецЕсли;
Возврат(ТаблицаПродукции);
КонецФункции
                                   
#КонецОбласти
