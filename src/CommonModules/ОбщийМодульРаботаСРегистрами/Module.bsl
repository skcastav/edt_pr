
Функция ПолучитьОстатокНаСкладе(Линейка,МПЗ) Экспорт
Фильтр   = Новый Структура;

Фильтр.Вставить("МестоХранения", Линейка.МестоХраненияКанбанов);
Фильтр.Вставить("МПЗ",МПЗ);
ТабОстатков = РегистрыНакопления.МестаХранения.Остатки(ТекущаяДата(),Фильтр);
	Если ТабОстатков.Количество() > 0 Тогда
	Возврат(ТабОстатков[0].Количество);
	Иначе
	Возврат(0);	
	КонецЕсли;
КонецФункции

Функция ПолучитьОстатокПоМестуХранения(МестоХранения,МПЗ,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли; 
Фильтр   = Новый Структура;

Фильтр.Вставить("МестоХранения", МестоХранения);
Фильтр.Вставить("МПЗ",МПЗ);
ТабОстатков = РегистрыНакопления.МестаХранения.Остатки(НаДату,Фильтр);
	Если ТабОстатков.Количество() > 0 Тогда
	Возврат(ТабОстатков[0].Количество);
	Иначе
	Возврат(0);	
	КонецЕсли;
КонецФункции 

Функция ПолучитьОстатокПП(ДокументОснование,ВидМПЗ,МПЗ,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли; 
Фильтр   = Новый Структура;

Фильтр.Вставить("Документ", ДокументОснование);
Фильтр.Вставить("ВидМПЗ",ВидМПЗ);
Фильтр.Вставить("МПЗ",МПЗ);	
ТабОстатков = РегистрыНакопления.ПередачиВПроизводство.Остатки(НаДату,Фильтр);
	Если ТабОстатков.Количество() > 0 Тогда
	Возврат(ТабОстатков[0].Количество);
	Иначе
	Возврат(0);	
	КонецЕсли;
КонецФункции

Функция ПолучитьСводныйОстаток(МПЗ,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияОстатки.МПЗ КАК МПЗ,
	|	МестаХраненияОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.МестаХранения.Остатки(&НаДату, МПЗ = &МПЗ) КАК МестаХраненияОстатки
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	МПЗ";
Запрос.УстановитьПараметр("МПЗ", МПЗ);
Запрос.УстановитьПараметр("НаДату", НаДату);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.КоличествоОстаток);
	КонецЦикла;
Возврат(0);
КонецФункции

Функция ПолучитьОстатокПоЗаказуНаПроизводство(ДокументОснование,Продукция,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли; 
Фильтр   = Новый Структура;

Фильтр.Вставить("Продукция",Продукция);
Фильтр.Вставить("Документ", ДокументОснование);
ТабОстатков = РегистрыНакопления.ЗаказыНаПроизводство.Остатки(НаДату,Фильтр);
	Если ТабОстатков.Количество() > 0 Тогда
	Возврат(ТабОстатков[0].Количество);
	Иначе
	Возврат(0);	
	КонецЕсли;
КонецФункции

Функция ПолучитьОстатокПоДолгам(ДокументОснование,Продукция,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли; 
Фильтр   = Новый Структура;

Фильтр.Вставить("Продукция",Продукция);
Фильтр.Вставить("Документ", ДокументОснование);
ТабОстатков = РегистрыНакопления.Долги.Остатки(НаДату,Фильтр);
	Если ТабОстатков.Количество() > 0 Тогда
	Возврат(ТабОстатков[0].Количество);
	Иначе
	Возврат(0);	
	КонецЕсли;
КонецФункции

Функция ПолучитьСводныйОстатокПоДолгам(Продукция,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли; 
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолгиОстатки.Продукция КАК Продукция,
	|	ДолгиОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.Долги.Остатки(&НаДату, Продукция = &Продукция) КАК ДолгиОстатки
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	Продукция";
Запрос.УстановитьПараметр("Продукция", Продукция);
Запрос.УстановитьПараметр("НаДату", НаДату); 
РезультатЗапроса = Запрос.Выполнить();
ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПродукция.Следующий() Цикл
	Возврат(ВыборкаПродукция.КоличествоОстаток);
	КонецЦикла; 
Возврат(0);
КонецФункции

Функция ПолучитьОстатокПоРегиструБрака(ДокументОснование,МестоХранения,МПЗ,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли; 
Фильтр   = Новый Структура;

Фильтр.Вставить("МестоХранения",МестоХранения);
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ВыпускПродукцииКанбан") Тогда
	ПЗ = ДокументОснование.ДокументОснование;
	Иначе
	ПЗ = Документы.ПроизводственноеЗадание.ПустаяСсылка();
	КонецЕсли;
	//Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
	//ПЗ = ДокументОснование.ДокументОснование;
	//Иначе							
	//ПЗ = ДокументОснование.ДокументОснование.ДокументОснование;
	//КонецЕсли;
Фильтр.Вставить("ПроизводственноеЗадание",ПЗ);
Фильтр.Вставить("Линейка",ДокументОснование.РабочееМесто.Линейка);
Фильтр.Вставить("РабочееМесто", ДокументОснование.РабочееМесто);
Фильтр.Вставить("Изделие", МПЗ);
Фильтр.Вставить("ВидБрака", ДокументОснование.ВидБрака);
Фильтр.Вставить("ЭтапЖизненногоЦикла", ДокументОснование.ЭтапЖизненногоЦикла);
Фильтр.Вставить("Документ", ДокументОснование);
ТабОстатков = РегистрыНакопления.БракПроизводства.Остатки(НаДату,Фильтр);
	Если ТабОстатков.Количество() > 0 Тогда
	Возврат(ТабОстатков[0].Количество);
	Иначе
	Возврат(0);	
	КонецЕсли;
КонецФункции

Функция ПолучитьОстатокВРезерве(МестоХранения,Продукция,ЗаказНаПроизводство,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли;
Фильтр   = Новый Структура;

Фильтр.Вставить("МестоХранения",МестоХранения);
Фильтр.Вставить("Продукция", Продукция);
Фильтр.Вставить("Документ", ЗаказНаПроизводство);
ТабОстатков = РегистрыНакопления.РезервированиеГП.Остатки(НаДату,Фильтр);
	Если ТабОстатков.Количество() > 0 Тогда
	Возврат(ТабОстатков[0].Количество);
	Иначе
	Возврат(0);	
	КонецЕсли;
КонецФункции

Функция ПолучитьСводныйОстатокВРезерве(Продукция,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли;
КоличествоРезерв = 0;
Фильтр   = Новый Структура;

Фильтр.Вставить("Продукция", Продукция);
ТабОстатков = РегистрыНакопления.РезервированиеГП.Остатки(НаДату,Фильтр);
	Для к = 0 По ТабОстатков.Количество()-1 Цикл	
	КоличествоРезерв = КоличествоРезерв + ТабОстатков[к].Количество;
	КонецЦикла;
Возврат(КоличествоРезерв);
КонецФункции

Функция ПолучитьОстатокПоГТД(ГТД,МПЗ,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли; 
Фильтр   = Новый Структура;

Фильтр.Вставить("Товар", МПЗ);
Фильтр.Вставить("НомерГТД",ГТД);
ТабОстатков = РегистрыНакопления.ГТД.Остатки(НаДату,Фильтр);
	Если ТабОстатков.Количество() > 0 Тогда
	Возврат(ТабОстатков[0].Количество);
	Иначе
	Возврат(0);	
	КонецЕсли;
КонецФункции

Функция ПолучитьОстатокПоДоговоруСПоставщиком(Контрагент,Договор,СпецификацияКДоговору,МПЗ,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли; 
Фильтр   = Новый Структура;

Фильтр.Вставить("Контрагент", Контрагент);
Фильтр.Вставить("Договор", Договор);
Фильтр.Вставить("МПЗ",МПЗ);
Фильтр.Вставить("СпецификацияКДоговору", СпецификацияКДоговору);
ТабОстатков = РегистрыНакопления.ДоговорыСПоставщиками.Остатки(НаДату,Фильтр);
	Если ТабОстатков.Количество() > 0 Тогда
	Возврат(ТабОстатков[0].Количество);
	Иначе
	Возврат(0);	
	КонецЕсли;
КонецФункции

Функция ПолучитьОстатокВПроизводстве(Линейка,МПЗ) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачиВПроизводствоОстатки.МПЗ КАК МПЗ,
	|	ПередачиВПроизводствоОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ПередачиВПроизводство.Остатки(&НаДату, ) КАК ПередачиВПроизводствоОстатки
	|ГДЕ
	|	ПередачиВПроизводствоОстатки.Документ.Линейка = &Линейка
	|	И ПередачиВПроизводствоОстатки.МПЗ = &МПЗ
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	МПЗ";
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
Запрос.УстановитьПараметр("Линейка", Линейка);
Запрос.УстановитьПараметр("МПЗ", МПЗ);
Результат = Запрос.Выполнить();
ВыборкаМПЗ = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);	
	Пока ВыборкаМПЗ.Следующий() Цикл
	Возврат(ВыборкаМПЗ.КоличествоОстаток);	
	КонецЦикла; 
Возврат(0);
КонецФункции

Функция ПолучитьЯчейкуКомплектации(Линейка,МПЗ) Экспорт
Возврат(РегистрыСведений.ЯчейкиКомплектации.ПолучитьПоследнее(ТекущаяДата(),Новый Структура("МПЗ,МестоХранения",МПЗ,Линейка.МестоХраненияКанбанов)));
КонецФункции

Функция ПолучитьЯчейкуКомплектацииПоМестуХранения(МестоХранения,МПЗ,НаДату = Неопределено) Экспорт
	Если НаДату = Неопределено Тогда
	НаДату = ТекущаяДата();
	КонецЕсли;
Возврат(РегистрыСведений.ЯчейкиКомплектации.ПолучитьПоследнее(НаДату,Новый Структура("МПЗ,МестоХранения",МПЗ,МестоХранения)));
КонецФункции

Функция ПолучитьЯчейкуХранения(МПЗ,МестоХранения = Неопределено) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЯчейкиХранения.Стеллаж КАК Стеллаж,
	|	ЯчейкиХранения.Стойка КАК Стойка,
	|	ЯчейкиХранения.Полка КАК Полка,
	|	ЯчейкиХранения.Ячейка КАК Ячейка,
	|	ЯчейкиХранения.УникальныйНомер КАК УникальныйНомер
	|ИЗ
	|	РегистрСведений.ЯчейкиХранения КАК ЯчейкиХранения
	|ГДЕ
	|	ЯчейкиХранения.МПЗ = &МПЗ";	
Запрос.УстановитьПараметр("МПЗ", МПЗ);
	Если МестоХранения <> Неопределено Тогда
	Запрос.Текст = Запрос.Текст + " И ЯчейкиХранения.МестоХранения = &МестоХранения";
	Запрос.УстановитьПараметр("МестоХранения", МестоХранения);	
	КонецЕсли; 
РезультатЗапроса = Запрос.Выполнить();	
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи);
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

Процедура СоздатьЭтапПроизводственногоЗадания(ПЗ,РабочееМесто,Исполнитель,ДатаНачала) Экспорт
ДатаПериод = ТекущаяДата(); 

Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданий.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий КАК ЭтапыПроизводственныхЗаданий
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданий.ПЗ = &ПЗ
	|	И ЭтапыПроизводственныхЗаданий.РабочееМесто = &РабочееМесто";
Запрос.УстановитьПараметр("ПЗ", ПЗ);
Запрос.УстановитьПараметр("РабочееМесто", РабочееМесто);
РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.Период КАК Период
		|ИЗ
		|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
		|ГДЕ
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ = &ПЗ";
	Запрос.УстановитьПараметр("ПЗ", ПЗ);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			Если Выборка.Период = ДатаПериод Тогда
			ДатаПериод = ДатаПериод+1;		
			КонецЕсли; 
		КонецЦикла; 
	ЭПЗ = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьМенеджерЗаписи();
	ЭПЗ.Период = ДатаПериод;
	ЭПЗ.ПЗ = ПЗ; 
	ЭПЗ.Линейка = ПЗ.Линейка;
	ЭПЗ.Изделие = ПЗ.Изделие;
	ЭПЗ.Количество = ПЗ.Количество;
	ЭПЗ.РабочееМесто = РабочееМесто;
	ЭПЗ.БарКод = ПЗ.БарКод;
		Если Исполнитель <> Неопределено Тогда
		ЭПЗ.Исполнитель = Исполнитель;
		КонецЕсли;
			Если ДатаНачала <> Неопределено Тогда
			ЭПЗ.ДатаНачала = ДатаНачала;
			КонецЕсли;  
	ЭПЗ.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура СоздатьЭтапПроизводственногоЗаданияКанбан(ПЗ,Параметры) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданий.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий КАК ЭтапыПроизводственныхЗаданий
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданий.ПЗ = &ПЗ
	|	И ЭтапыПроизводственныхЗаданий.РабочееМесто = &РабочееМесто";
Запрос.УстановитьПараметр("ПЗ", ПЗ);
Запрос.УстановитьПараметр("РабочееМесто", Параметры.РабочееМесто);
РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	ЭПЗ = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьМенеджерЗаписи();
	ЭПЗ.Период = ТекущаяДата();
	ЭПЗ.ПЗ = ПЗ; 
	ЭПЗ.Линейка = ПЗ.Линейка;
	ЭПЗ.Изделие = ПЗ.Изделие;
	ЭПЗ.РабочееМесто = Параметры.РабочееМесто;
		Если Параметры.Свойство("Спецификация") Тогда
		ЭПЗ.Спецификация = Параметры.Спецификация;
		КонецЕсли;
			Если Параметры.Свойство("Количество") Тогда
			ЭПЗ.Количество = Параметры.Количество;
			Иначе
			ЭПЗ.Количество = ПЗ.Количество;
			КонецЕсли;
				Если Параметры.Свойство("Исполнитель") Тогда
				ЭПЗ.Исполнитель = Параметры.Исполнитель;
				КонецЕсли;
					Если Параметры.Свойство("ДатаНачала") Тогда
					ЭПЗ.ДатаНачала = Параметры.ДатаНачала;
					КонецЕсли;  
	ЭПЗ.Записать();
	КонецЕсли;
КонецПроцедуры

Процедура ЗафиксироватьИсполнениеЭтапаПроизводственногоЗадания(ПЗ,РабочееМесто,Спецификация,Количество,Исполнитель,Оборудование = Неопределено,ДатаОкончания = Неопределено) Экспорт
ЭПЗ = РегистрыСведений.ВыполнениеЭтаповПроизводства.СоздатьМенеджерЗаписи();
ЭПЗ.Период = ?(ДатаОкончания = Неопределено,ТекущаяДата(),ДатаОкончания);
ЭПЗ.МТК = ПЗ.ДокументОснование; 
ЭПЗ.РабочееМесто = РабочееМесто;
ЭПЗ.Спецификация = Спецификация;
ЭПЗ.Количество = Количество;
ЭПЗ.Исполнитель = Исполнитель; 
	Если Оборудование <> Неопределено Тогда
	ЭПЗ.Оборудование = Оборудование;
	КонецЕсли; 
ЭПЗ.Записать();
КонецПроцедуры

Процедура ИзменитьЭтапПроизводственногоЗадания(ПЗ,Параметры) Экспорт
НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.ПЗ.Установить(ПЗ);
НаборЗаписей.Прочитать();
    Для Каждого Запись Из НаборЗаписей Цикл 
    	Если Запись.РабочееМесто = Параметры.РабочееМесто Тогда
			Если Параметры.Свойство("Спецификация") Тогда
			Запись.Спецификация = Параметры.Спецификация;
			КонецЕсли;
				Если Параметры.Свойство("Количество") Тогда
				Запись.Количество = Параметры.Количество;
				КонецЕсли;
					Если Параметры.Свойство("Исполнитель") Тогда
					Запись.Исполнитель = Параметры.Исполнитель;
					КонецЕсли;
						Если Параметры.Свойство("ДатаНачала") Тогда
						Запись.ДатаНачала = Параметры.ДатаНачала;
						КонецЕсли;
							Если Параметры.Свойство("ДатаОкончания") Тогда
							Запись.ДатаОкончания = Параметры.ДатаОкончания;
							КонецЕсли;
								Если Параметры.Свойство("Ремонт") Тогда
								Запись.Ремонт = Параметры.Ремонт;
								КонецЕсли;
		Прервать;
		КонецЕсли;  
    КонецЦикла;
НаборЗаписей.Записать();
КонецПроцедуры

Функция ПолучитьКоличествоИзделияНаЭтапеПроизводственногоЗадания(ПЗ,РабочееМесто) Экспорт
НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.ПЗ.Установить(ПЗ);
НаборЗаписей.Прочитать();
    Для Каждого Запись Из НаборЗаписей Цикл 
    	Если Запись.РабочееМесто = РабочееМесто Тогда
		Возврат(Запись.Количество);
		КонецЕсли;  
    КонецЦикла;
Возврат(0);
КонецФункции

Функция ОбработкаЛьготнойОчереди(ПЗ,СписокЛО) Экспорт
Запрос = Новый Запрос;

ДатаОбработки = ТекущаяДата();
	Попытка				
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;	
		Если СписокЛО.Количество() > 0 Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЛьготнаяОчередьСрезПоследних.Период КАК Период,
			|	ЛьготнаяОчередьСрезПоследних.ПЗ КАК ПЗ,
			|	ЛьготнаяОчередьСрезПоследних.Линейка КАК Линейка,
			|	ЛьготнаяОчередьСрезПоследних.Изделие КАК Изделие,
			|	ЛьготнаяОчередьСрезПоследних.НормаРасходов КАК НормаРасходов
			|ИЗ
			|	РегистрСведений.ЛьготнаяОчередь.СрезПоследних(&НаДату, ПЗ = &ПЗ) КАК ЛьготнаяОчередьСрезПоследних
			|ГДЕ
			|	ЛьготнаяОчередьСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		Запрос.УстановитьПараметр("НаДату", ДатаОбработки);
		Запрос.УстановитьПараметр("ПЗ", ПЗ);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Выборка = СписокЛО.НайтиПоЗначению(ВыборкаДетальныеЗаписи.НормаРасходов);
				Если Выборка = Неопределено Тогда
	 			РЛО = РегистрыСведений.ЛьготнаяОчередь.СоздатьМенеджерЗаписи();
				РЛО.Период = ВыборкаДетальныеЗаписи.Период;
				РЛО.ПЗ = ВыборкаДетальныеЗаписи.ПЗ;
				РЛО.Линейка = ВыборкаДетальныеЗаписи.Линейка;
				РЛО.Изделие = ВыборкаДетальныеЗаписи.Изделие;
				РЛО.НормаРасходов = ВыборкаДетальныеЗаписи.НормаРасходов;
				РЛО.ДатаОкончания = ДатаОбработки;
				РЛО.Записать(Истина); 
				Иначе
				Выборка.Пометка = Истина;
				КонецЕсли;
			КонецЦикла;	
				Для каждого НР Из СписокЛО Цикл
					Если Не НР.Пометка Тогда
					РегистрЛО = РегистрыСведений.ЛьготнаяОчередь.СоздатьМенеджерЗаписи();
					РегистрЛО.Период = ТекущаяДата();
					РегистрЛО.ПЗ = ПЗ;
					РегистрЛО.Линейка = ПЗ.Линейка;
					РегистрЛО.Изделие = ПЗ.Изделие;
					РегистрЛО.НормаРасходов = НР.Значение;
					РегистрЛО.Записать(Истина);
					КонецЕсли; 
				КонецЦикла;	
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЛьготнаяОчередьСрезПоследних.Период КАК Период,
			|	ЛьготнаяОчередьСрезПоследних.ПЗ КАК ПЗ,
			|	ЛьготнаяОчередьСрезПоследних.Линейка КАК Линейка,
			|	ЛьготнаяОчередьСрезПоследних.Изделие КАК Изделие,
			|	ЛьготнаяОчередьСрезПоследних.НормаРасходов КАК НормаРасходов,
			|	ЛьготнаяОчередьСрезПоследних.НормаРасходов.Элемент КАК МПЗ
			|ИЗ
			|	РегистрСведений.ЛьготнаяОчередь.СрезПоследних(&НаДату, ) КАК ЛьготнаяОчередьСрезПоследних
			|ГДЕ
			|	ЛьготнаяОчередьСрезПоследних.Линейка = &Линейка
			|	И ЛьготнаяОчередьСрезПоследних.Изделие = &Изделие
			|	И ЛьготнаяОчередьСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|	И НЕ ЛьготнаяОчередьСрезПоследних.НормаРасходов В(&СписокЛО)";
		Запрос.УстановитьПараметр("НаДату", ДатаОбработки);
		Запрос.УстановитьПараметр("Линейка", ПЗ.Линейка);
		Запрос.УстановитьПараметр("Изделие", ПЗ.Изделие);
		Запрос.УстановитьПараметр("СписокЛО", СписокЛО);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РЛО = РегистрыСведений.ЛьготнаяОчередь.СоздатьМенеджерЗаписи();
			РЛО.Период = ВыборкаДетальныеЗаписи.Период;
			РЛО.ПЗ = ВыборкаДетальныеЗаписи.ПЗ;
			РЛО.Линейка = ВыборкаДетальныеЗаписи.Линейка;
			РЛО.Изделие = ВыборкаДетальныеЗаписи.Изделие;
			РЛО.НормаРасходов = ВыборкаДетальныеЗаписи.НормаРасходов;
			РЛО.ДатаОкончания = ДатаОбработки;
			РЛО.Записать(Истина);		    
			КонецЦикла;
		Иначе
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ЛьготнаяОчередьСрезПоследних.Период КАК Период,
			|	ЛьготнаяОчередьСрезПоследних.ПЗ КАК ПЗ,
			|	ЛьготнаяОчередьСрезПоследних.Линейка КАК Линейка,
			|	ЛьготнаяОчередьСрезПоследних.Изделие КАК Изделие,
			|	ЛьготнаяОчередьСрезПоследних.НормаРасходов КАК НормаРасходов,
			|	ЛьготнаяОчередьСрезПоследних.НормаРасходов.Элемент КАК МПЗ
			|ИЗ
			|	РегистрСведений.ЛьготнаяОчередь.СрезПоследних(&НаДату, ) КАК ЛьготнаяОчередьСрезПоследних
			|ГДЕ
			|	ЛьготнаяОчередьСрезПоследних.Линейка = &Линейка
			|	И ЛьготнаяОчередьСрезПоследних.Изделие = &Изделие
			|	И ЛьготнаяОчередьСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		Запрос.УстановитьПараметр("НаДату", ДатаОбработки);
		Запрос.УстановитьПараметр("Линейка", ПЗ.Линейка);
		Запрос.УстановитьПараметр("Изделие", ПЗ.Изделие);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			РЛО = РегистрыСведений.ЛьготнаяОчередь.СоздатьМенеджерЗаписи();
			РЛО.Период = ВыборкаДетальныеЗаписи.Период;
			РЛО.ПЗ = ВыборкаДетальныеЗаписи.ПЗ;
			РЛО.Линейка = ВыборкаДетальныеЗаписи.Линейка;
			РЛО.Изделие = ВыборкаДетальныеЗаписи.Изделие;
			РЛО.НормаРасходов = ВыборкаДетальныеЗаписи.НормаРасходов;
			РЛО.ДатаОкончания = ДатаОбработки;
			РЛО.Записать(Истина);		    
			КонецЦикла;
		КонецЕсли;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Сообщить(ОписаниеОшибки());
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции

Функция СнятиеСЛьготнойОчереди(СписокМПЗ,МестоХранения,НаДату) Экспорт
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЛьготнаяОчередьСрезПоследних.Период,
		|	ЛьготнаяОчередьСрезПоследних.ПЗ,
		|	ЛьготнаяОчередьСрезПоследних.Линейка,
		|	ЛьготнаяОчередьСрезПоследних.Изделие,
		|	ЛьготнаяОчередьСрезПоследних.НормаРасходов,
		|	ЛьготнаяОчередьСрезПоследних.НормаРасходов.Элемент КАК МПЗ
		|ИЗ
		|	РегистрСведений.ЛьготнаяОчередь.СрезПоследних(&НаДату, ) КАК ЛьготнаяОчередьСрезПоследних
		|ГДЕ
		|	ЛьготнаяОчередьСрезПоследних.Линейка.МестоХраненияКанбанов = &МестоХранения
		|	И ЛьготнаяОчередьСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	Запрос.УстановитьПараметр("МестоХранения", МестоХранения);
	Запрос.УстановитьПараметр("НаДату", НаДату);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если СписокМПЗ.НайтиПоЗначению(ВыборкаДетальныеЗаписи.МПЗ) <> Неопределено Тогда
			РегистрЛО = РегистрыСведений.ЛьготнаяОчередь.СоздатьМенеджерЗаписи();
			РегистрЛО.Период = ВыборкаДетальныеЗаписи.Период;
			РегистрЛО.ПЗ = ВыборкаДетальныеЗаписи.ПЗ;
			РегистрЛО.Линейка = ВыборкаДетальныеЗаписи.Линейка;
			РегистрЛО.Изделие = ВыборкаДетальныеЗаписи.Изделие;
			РегистрЛО.НормаРасходов = ВыборкаДетальныеЗаписи.НормаРасходов;
			РегистрЛО.ДатаОкончания = НаДату;
			РегистрЛО.Записать(Истина);
			Иначе
			ТаблицаАналогов = ОбщегоНазначенияПовтИсп.ПолучитьАналогиНормРасходов(ВыборкаДетальныеЗаписи.НормаРасходов);
				Для каждого ТЧ_ТА Из ТаблицаАналогов Цикл
					Если СписокМПЗ.НайтиПоЗначению(ТЧ_ТА.Ссылка.Элемент) <> Неопределено Тогда
					РегистрЛО = РегистрыСведений.ЛьготнаяОчередь.СоздатьМенеджерЗаписи();
					РегистрЛО.Период = ВыборкаДетальныеЗаписи.Период;
					РегистрЛО.ПЗ = ВыборкаДетальныеЗаписи.ПЗ;
					РегистрЛО.Линейка = ВыборкаДетальныеЗаписи.Линейка;
					РегистрЛО.Изделие = ВыборкаДетальныеЗаписи.Изделие;
					РегистрЛО.НормаРасходов = ВыборкаДетальныеЗаписи.НормаРасходов;
					РегистрЛО.ДатаОкончания = НаДату;
					РегистрЛО.Записать(Истина);
					Прервать;						
					КонецЕсли; 
				КонецЦикла; 
			КонецЕсли;
		КонецЦикла;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции

Функция ОстановитьЛинейку(Линейка,МПЗ) Экспорт
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	ПростойЛинейки = РегистрыСведений.ПростойЛинейки.СоздатьМенеджерЗаписи();
	ПростойЛинейки.Период = ТекущаяДата();
	ПростойЛинейки.Линейка = Линейка;
	ПростойЛинейки.Остановка = Истина;
	ПростойЛинейки.Причина = МПЗ;
	ПростойЛинейки.Примечание = "На складе отсутствует канбан без резервирования!";
	ПростойЛинейки.Записать(Истина);		
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);	
	КонецПопытки;
Возврат(Истина);
КонецФункции

Функция СнятьОстановкуЛинейки(Линейка) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПростойЛинейки.Период,
	|	ПростойЛинейки.Причина,
	|	ПростойЛинейки.Примечание
	|ИЗ
	|	РегистрСведений.ПростойЛинейки КАК ПростойЛинейки
	|ГДЕ
	|	ПростойЛинейки.Линейка = &Линейка
	|	И ПростойЛинейки.Остановка = ИСТИНА";
Запрос.УстановитьПараметр("Линейка",Линейка);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		ПростойЛинейки = РегистрыСведений.ПростойЛинейки.СоздатьМенеджерЗаписи();
		ПростойЛинейки.Период = ВыборкаДетальныеЗаписи.Период;
		ПростойЛинейки.Линейка = Линейка;
		ПростойЛинейки.Остановка = Ложь;
		ПростойЛинейки.Причина = ВыборкаДетальныеЗаписи.Причина;
		ПростойЛинейки.Примечание = ВыборкаДетальныеЗаписи.Примечание;
		ПростойЛинейки.Окончание = ТекущаяДата();
		ПростойЛинейки.Записать(Истина);		
		Исключение
		Сообщить(ОписаниеОшибки());
		Возврат(Ложь);	
		КонецПопытки;
	КонецЦикла;
Возврат(Истина);
КонецФункции

Функция ОформитьПустойКанбан(МестоХраненияОтправитель,МестоХранения,МПЗ,НомерЯчейки,Сотрудник) Экспорт
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
	Подразделение = МПЗ.Канбан.Подразделение;
	Иначе	
	Подразделение = Константы.МестоХраненияОсновное.Получить().Подразделение;
	КонецЕсли;
ЯчейкиКомплектации = ОбщийМодульРаботаСРегистрами.ПолучитьЯчейкуКомплектацииПоМестуХранения(МестоХранения,МПЗ);
	Если ЯчейкиКомплектации.КоличествоЯчеек = 0 Тогда
	Сообщить("Для "+СокрЛП(МПЗ.Наименование)+" - не оформлены ячейки комплектации по месту хранения "+СокрЛП(МестоХранения.Наименование)+"!");
	Возврат(Ложь);
	КонецЕсли;  
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		Запрос = Новый Запрос;

		Запрос.Текст = 
			"ВЫБРАТЬ
			|	ОборотКанбанов.Период КАК Период
			|ИЗ
			|	РегистрСведений.ОборотКанбанов КАК ОборотКанбанов
			|ГДЕ
			|	ОборотКанбанов.МестоХраненияОтправитель = &МестоХраненияОтправитель
			|	И ОборотКанбанов.МестоХранения = &МестоХранения
			|	И ОборотКанбанов.Подразделение = &Подразделение
			|	И ОборотКанбанов.МПЗ = &МПЗ                                 
			|	И ОборотКанбанов.НомерЯчейки = &НомерЯчейки
			|	И ОборотКанбанов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		Запрос.УстановитьПараметр("МестоХраненияОтправитель", МестоХраненияОтправитель);
		Запрос.УстановитьПараметр("МестоХранения", МестоХранения); 
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("МПЗ", МПЗ);
		Запрос.УстановитьПараметр("НомерЯчейки", НомерЯчейки);
		РезультатЗапроса = Запрос.Выполнить();
			Если РезультатЗапроса.Пустой() Тогда
			ОборотКанбанов = РегистрыСведений.ОборотКанбанов.СоздатьМенеджерЗаписи();
			ОборотКанбанов.Период = ТекущаяДата();
			ОборотКанбанов.МестоХраненияОтправитель = МестоХраненияОтправитель;
			ОборотКанбанов.МестоХранения = МестоХранения;
			ОборотКанбанов.Подразделение = Подразделение;
			ОборотКанбанов.МПЗ = МПЗ;
			ОборотКанбанов.НомерЯчейки = НомерЯчейки;
			ОборотКанбанов.Оформил = Сотрудник;
			ОборотКанбанов.Записать();
			Иначе
			Сообщить("МПЗ "+СокрЛП(МПЗ.Наименование)+" - пустой канбан уже оформлен на складе "+МестоХранения.Наименование);
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат(Ложь);		
			КонецЕсли; 		
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат(Ложь);	
		КонецПопытки;
Возврат(Истина);
КонецФункции

Функция ОформитьПринятиеКанбана(МестоХраненияОтправитель,МестоХранения,МПЗ,НомерЯчейки,Сотрудник,ВыдаватьОшибку = Ложь) Экспорт
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
	Подразделение = МПЗ.Канбан.Подразделение;
	Иначе	
	Подразделение = Константы.МестоХраненияОсновное.Получить().Подразделение;
	КонецЕсли; 
		Попытка
		Запрос = Новый Запрос;

		Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ОборотКанбанов.Период КАК Период,
			|	ОборотКанбанов.Оформил КАК Оформил,
			|	ОборотКанбанов.Аналог КАК Аналог,
			|	ОборотКанбанов.ДатаЗамены КАК ДатаЗамены
			|ИЗ
			|	РегистрСведений.ОборотКанбанов КАК ОборотКанбанов
			|ГДЕ 
			|	ОборотКанбанов.МестоХраненияОтправитель = &МестоХраненияОтправитель
			|	И ОборотКанбанов.МестоХранения = &МестоХранения
			|	И ОборотКанбанов.Подразделение = &Подразделение
			|	И ОборотКанбанов.МПЗ = &МПЗ
			|	И ОборотКанбанов.НомерЯчейки = &НомерЯчейки
			|	И ОборотКанбанов.ДатаПринятия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		Запрос.УстановитьПараметр("МестоХраненияОтправитель", МестоХраненияОтправитель);
		Запрос.УстановитьПараметр("МестоХранения", МестоХранения);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("МПЗ", МПЗ);
		Запрос.УстановитьПараметр("НомерЯчейки", НомерЯчейки);
		РезультатЗапроса = Запрос.Выполнить();               
			Если Не РезультатЗапроса.Пустой() Тогда
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ОборотКанбанов = РегистрыСведений.ОборотКанбанов.СоздатьМенеджерЗаписи();
				ОборотКанбанов.Период = ВыборкаДетальныеЗаписи.Период;
				ОборотКанбанов.Подразделение = Подразделение;
				ОборотКанбанов.МестоХраненияОтправитель = МестоХраненияОтправитель;
				ОборотКанбанов.МестоХранения = МестоХранения;
				ОборотКанбанов.МПЗ = МПЗ;
				ОборотКанбанов.НомерЯчейки = НомерЯчейки;
				ОборотКанбанов.Оформил = ВыборкаДетальныеЗаписи.Оформил;
				ОборотКанбанов.Аналог = ВыборкаДетальныеЗаписи.Аналог;
				ОборотКанбанов.ДатаЗамены = ВыборкаДетальныеЗаписи.ДатаЗамены;
				ОборотКанбанов.ДатаПринятия = ТекущаяДата();
				ОборотКанбанов.Принял = Сотрудник;
				ОборотКанбанов.Записать(Истина);
				КонецЦикла;
			Иначе	
				Если ВыдаватьОшибку Тогда
				Возврат(Ложь);
				КонецЕсли;
			КонецЕсли;
		Исключение
		Сообщить(ОписаниеОшибки());
		Возврат(Ложь);	
		КонецПопытки;
Возврат(Истина);
КонецФункции

Функция ОформитьПередачуКанбанаПоМестуХранения(МестоХраненияОтправитель,МестоХранения,МПЗ,НомерЯчейки,Сотрудник,Количество,ДатаПередачи) Экспорт
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
	Подразделение = МПЗ.Канбан.Подразделение;
	Иначе	
	Подразделение = Константы.МестоХраненияОсновное.Получить().Подразделение;
	КонецЕсли; 
СписокЛинеек = Новый СписокЗначений;
Запрос = Новый Запрос;
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;

	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОборотКанбанов.Период КАК Период,
		|	ОборотКанбанов.ДатаПринятия КАК ДатаПринятия,
		|	ОборотКанбанов.Оформил КАК Оформил,
		|	ОборотКанбанов.Принял КАК Принял,
		|	ОборотКанбанов.Аналог КАК Аналог,
		|	ОборотКанбанов.ДатаЗамены КАК ДатаЗамены
		|ИЗ
		|	РегистрСведений.ОборотКанбанов КАК ОборотКанбанов
		|ГДЕ
		|	ОборотКанбанов.МестоХраненияОтправитель = &МестоХраненияОтправитель
		|	И ОборотКанбанов.МестоХранения = &МестоХранения
		|	И ОборотКанбанов.Подразделение = &Подразделение
		|	И ОборотКанбанов.МПЗ = &МПЗ
		|	И ОборотКанбанов.НомерЯчейки = &НомерЯчейки
		|	И ОборотКанбанов.ДатаПринятия <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ОборотКанбанов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)"; 
	Запрос.УстановитьПараметр("МестоХраненияОтправитель", МестоХраненияОтправитель);
	Запрос.УстановитьПараметр("МестоХранения", МестоХранения);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("МПЗ", МПЗ);
	Запрос.УстановитьПараметр("НомерЯчейки", НомерЯчейки);
	РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОборотКанбанов = РегистрыСведений.ОборотКанбанов.СоздатьМенеджерЗаписи();
			ОборотКанбанов.Период = ВыборкаДетальныеЗаписи.Период;
			ОборотКанбанов.Подразделение = Подразделение;
			ОборотКанбанов.МестоХраненияОтправитель = МестоХраненияОтправитель;
			ОборотКанбанов.МестоХранения = МестоХранения;
			ОборотКанбанов.МПЗ = МПЗ;
			ОборотКанбанов.НомерЯчейки = НомерЯчейки;   
			ОборотКанбанов.Оформил = ВыборкаДетальныеЗаписи.Оформил;
			ОборотКанбанов.ДатаПринятия = ВыборкаДетальныеЗаписи.ДатаПринятия;
			ОборотКанбанов.Принял = ВыборкаДетальныеЗаписи.Принял;
			ОборотКанбанов.Аналог = ВыборкаДетальныеЗаписи.Аналог;
			ОборотКанбанов.ДатаЗамены = ВыборкаДетальныеЗаписи.ДатаЗамены;
			ОборотКанбанов.ДатаПередачи = ДатаПередачи;                   
			ОборотКанбанов.Передал = Сотрудник;
			ОборотКанбанов.Количество = Количество;
			ОборотКанбанов.Записать(Истина);
			КонецЦикла;
		Иначе
		Сообщить("МПЗ "+СокрЛП(МПЗ.Наименование)+" - нет принятого пустого канбана!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат(Ложь); 
		КонецЕсли;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);	
	КонецПопытки;
Возврат(Истина);
КонецФункции

Функция ОформитьПоступлениеКанбана(МестоХраненияОтправитель,Линейка,МПЗ,НомерЯчейки) Экспорт
МестоХранения = Линейка.МестоХраненияКанбанов;
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
	Подразделение = МПЗ.Канбан.Подразделение;
	Иначе	
	Подразделение = Константы.МестоХраненияОсновное.Получить().Подразделение;
	КонецЕсли; 
СписокЛинеек = Новый СписокЗначений;
Запрос = Новый Запрос;
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;

	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОборотКанбанов.Период КАК Период,
		|	ОборотКанбанов.ДатаПринятия КАК ДатаПринятия,
		|	ОборотКанбанов.ДатаПередачи КАК ДатаПередачи,
		|	ОборотКанбанов.Оформил КАК Оформил,
		|	ОборотКанбанов.Принял КАК Принял,
		|	ОборотКанбанов.Аналог КАК Аналог,
		|	ОборотКанбанов.ДатаЗамены КАК ДатаЗамены
		|ИЗ
		|	РегистрСведений.ОборотКанбанов КАК ОборотКанбанов
		|ГДЕ
		|	ОборотКанбанов.МестоХраненияОтправитель = &МестоХраненияОтправитель
		|	И ОборотКанбанов.МестоХранения = &МестоХранения
		|	И ОборотКанбанов.Подразделение = &Подразделение
		|	И ОборотКанбанов.МПЗ = &МПЗ
		|	И ОборотКанбанов.НомерЯчейки = &НомерЯчейки
		|	И ОборотКанбанов.ДатаПринятия <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ОборотКанбанов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	Запрос.УстановитьПараметр("МестоХраненияОтправитель", МестоХраненияОтправитель);
	Запрос.УстановитьПараметр("МестоХранения", МестоХранения);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("МПЗ", МПЗ);
	Запрос.УстановитьПараметр("НомерЯчейки", НомерЯчейки);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОборотКанбанов = РегистрыСведений.ОборотКанбанов.СоздатьМенеджерЗаписи();
			ОборотКанбанов.Период = ВыборкаДетальныеЗаписи.Период;
			ОборотКанбанов.Подразделение = Подразделение;
			ОборотКанбанов.МестоХраненияОтправитель = МестоХраненияОтправитель;
			ОборотКанбанов.МестоХранения = МестоХранения;
			ОборотКанбанов.МПЗ = МПЗ;
			ОборотКанбанов.НомерЯчейки = НомерЯчейки;
			ОборотКанбанов.Оформил = ВыборкаДетальныеЗаписи.Оформил;
			ОборотКанбанов.ДатаПринятия = ВыборкаДетальныеЗаписи.ДатаПринятия;
			ОборотКанбанов.Принял = ВыборкаДетальныеЗаписи.Принял;        
			ОборотКанбанов.ДатаПередачи = ВыборкаДетальныеЗаписи.ДатаПередачи;
			ОборотКанбанов.Аналог = ВыборкаДетальныеЗаписи.Аналог;
			ОборотКанбанов.ДатаЗамены = ВыборкаДетальныеЗаписи.ДатаЗамены;
			ОборотКанбанов.ДатаОкончания = ТекущаяДата();
			ОборотКанбанов.Записать(Истина);
			КонецЦикла;
		Иначе
		Сообщить("МПЗ "+СокрЛП(МПЗ.Наименование)+" - нет принятого пустого канбана!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат(Ложь);				 
		КонецЕсли;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);	
	КонецПопытки;
Возврат(Истина);
КонецФункции

Функция ОформитьПоступлениеКанбанаПоМестуХранения(МестоХраненияОтправитель,МестоХранения,МПЗ,НомерЯчейки,Сотрудник,ДатаПоступления) Экспорт
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
	Подразделение = МПЗ.Канбан.Подразделение;
	Иначе	
	Подразделение = Константы.МестоХраненияОсновное.Получить().Подразделение;
	КонецЕсли; 
СписокЛинеек = Новый СписокЗначений;
Запрос = Новый Запрос;

	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ОборотКанбанов.Период КАК Период,
		|	ОборотКанбанов.ДатаПринятия КАК ДатаПринятия,
		|	ОборотКанбанов.ДатаПередачи КАК ДатаПередачи,
		|	ОборотКанбанов.Оформил КАК Оформил,
		|	ОборотКанбанов.Принял КАК Принял,
		|	ОборотКанбанов.Аналог КАК Аналог,
		|	ОборотКанбанов.ДатаЗамены КАК ДатаЗамены,
		|	ОборотКанбанов.Передал КАК Передал,
		|	ОборотКанбанов.Количество КАК Количество
		|ИЗ
		|	РегистрСведений.ОборотКанбанов КАК ОборотКанбанов
		|ГДЕ
		|	ОборотКанбанов.МестоХраненияОтправитель = &МестоХраненияОтправитель
		|	И ОборотКанбанов.МестоХранения = &МестоХранения
		|	И ОборотКанбанов.Подразделение = &Подразделение
		|	И ОборотКанбанов.МПЗ = &МПЗ
		|	И ОборотКанбанов.НомерЯчейки = &НомерЯчейки
		|	И ОборотКанбанов.ДатаПринятия <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ОборотКанбанов.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	Запрос.УстановитьПараметр("МестоХраненияОтправитель", МестоХраненияОтправитель);
	Запрос.УстановитьПараметр("МестоХранения", МестоХранения);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Запрос.УстановитьПараметр("МПЗ", МПЗ);
	Запрос.УстановитьПараметр("НомерЯчейки", НомерЯчейки);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ОборотКанбанов = РегистрыСведений.ОборотКанбанов.СоздатьМенеджерЗаписи();
			ОборотКанбанов.Период = ВыборкаДетальныеЗаписи.Период;
			ОборотКанбанов.Подразделение = Подразделение;
			ОборотКанбанов.МестоХраненияОтправитель = МестоХраненияОтправитель;
			ОборотКанбанов.МестоХранения = МестоХранения;
			ОборотКанбанов.МПЗ = МПЗ;
			ОборотКанбанов.НомерЯчейки = НомерЯчейки;
			ОборотКанбанов.Оформил = ВыборкаДетальныеЗаписи.Оформил;
			ОборотКанбанов.ДатаПринятия = ВыборкаДетальныеЗаписи.ДатаПринятия;
			ОборотКанбанов.Принял = ВыборкаДетальныеЗаписи.Принял;        
			ОборотКанбанов.ДатаПередачи = ВыборкаДетальныеЗаписи.ДатаПередачи;
			ОборотКанбанов.Передал = ВыборкаДетальныеЗаписи.Передал;
			ОборотКанбанов.Аналог = ВыборкаДетальныеЗаписи.Аналог;
			ОборотКанбанов.ДатаЗамены = ВыборкаДетальныеЗаписи.ДатаЗамены;
			ОборотКанбанов.Количество = ВыборкаДетальныеЗаписи.Количество;			
			ОборотКанбанов.ДатаОкончания = ДатаПоступления;
			ОборотКанбанов.Завершил = Сотрудник;
			ОборотКанбанов.Записать(Истина);
			КонецЦикла;
		Иначе
		Сообщить("МПЗ "+СокрЛП(МПЗ.Наименование)+" - нет принятого пустого канбана!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат(Ложь);				 
		КонецЕсли;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);	
	КонецПопытки;
Возврат(Истина);
КонецФункции

Процедура СборИнформацииПоАРМ(ВидОперации,РабочееМесто,Изделие,КоличествоПЗ,ВремяВыполнения) Экспорт
	Если Константы.РазрешитьСборИнформации.Получить() Тогда
		Попытка
		СИ = РегистрыСведений.СборИнформацииПоАРМ.СоздатьМенеджерЗаписи();
		СИ.Период = ТекущаяДата();
		СИ.ВидОперации = ВидОперации;
		СИ.Линейка = РабочееМесто.Линейка;
		СИ.РабочееМесто = РабочееМесто;
		СИ.Изделие = Изделие;
		СИ.КоличествоПЗ = КоличествоПЗ;
		СИ.ВремяВыполнения = ВремяВыполнения;
		СИ.Записать();
		Исключение
		
		КонецПопытки;
	КонецЕсли; 
КонецПроцедуры
 
Функция ПолучитьЦенуДП(Договор,Курс,МПЗ,НаДату) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорныеПозицииСрезПоследних.Цена,
	|	ДоговорныеПозицииСрезПоследних.Валюта
	|ИЗ
	|	РегистрСведений.ДоговорныеПозиции.СрезПоследних(&НаДату, ) КАК ДоговорныеПозицииСрезПоследних
	|ГДЕ
	|	ДоговорныеПозицииСрезПоследних.ДоговорнаяПозиция.Владелец = &Владелец
	|	И ДоговорныеПозицииСрезПоследних.ДоговорнаяПозиция.МПЗ = &МПЗ";
Запрос.УстановитьПараметр("Владелец", Договор);
Запрос.УстановитьПараметр("МПЗ", МПЗ);
Запрос.УстановитьПараметр("НаДату", НаДату);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Цена = ВыборкаДетальныеЗаписи.Цена;
		Если Договор.Валюта <> ВыборкаДетальныеЗаписи.Валюта Тогда
		КурсВалютыМПЗ = ОбщийМодульВызовСервера.КурсДляВалюты(ВыборкаДетальныеЗаписи.Валюта,НаДату);		
		ЦенаВРублях = Цена*КурсВалютыМПЗ;
		Цена = ЦенаВРублях/Курс;
		КонецЕсли; 
			Если Не Договор.БезНДС Тогда
			СтавкаНДС = Константы.ОсновнаяСтавкаНДС.Получить();	
			Цена = Цена/(100+СтавкаНДС.Ставка)*100;
			КонецЕсли; 
	Возврат(Цена);
	КонецЦикла;
Возврат(0);
КонецФункции

Функция ПолучитьПоследнююЦенуДП(МПЗ,НаДату) Экспорт
Запрос = Новый Запрос;

//Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	ДоговорСПоставщикомТабличнаяЧасть.Цена КАК Цена
//	|ИЗ
//	|	Документ.ДоговорСПоставщиком.ТабличнаяЧасть КАК ДоговорСПоставщикомТабличнаяЧасть
//	|ГДЕ
//	|	ДоговорСПоставщикомТабличнаяЧасть.МПЗ = &МПЗ";
//Запрос.УстановитьПараметр("МПЗ", МПЗ);
//РезультатЗапроса = Запрос.Выполнить();
//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
//	Возврат(ВыборкаДетальныеЗаписи.Цена);
//	КонецЦикла;
//Возврат(0);

Цена = 0;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДоговорныеПозицииСрезПоследних.Цена КАК Цена,
	|	ДоговорныеПозицииСрезПоследних.Валюта КАК Валюта
	|ИЗ
	|	РегистрСведений.ДоговорныеПозиции.СрезПоследних(&НаДату, ) КАК ДоговорныеПозицииСрезПоследних
	|ГДЕ
	|	ДоговорныеПозицииСрезПоследних.ДоговорнаяПозиция.МПЗ = &МПЗ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДоговорныеПозицииСрезПоследних.Период";
Запрос.УстановитьПараметр("МПЗ", МПЗ);
Запрос.УстановитьПараметр("НаДату", НаДату);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Цена = ВыборкаДетальныеЗаписи.Цена*ОбщийМодульВызовСервера.КурсДляВалюты(ВыборкаДетальныеЗаписи.Валюта,НаДату);
	КонецЦикла;
Возврат(Цена);
КонецФункции

Функция ВнесёнВДоговорныеПозиции(Договор,МПЗ,НаДату) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Цена КАК Цена
	|ИЗ
	|	Документ.СпецификацияКДоговоруСПоставщиком.ТабличнаяЧасть КАК СпецификацияКДоговоруСПоставщикомТабличнаяЧасть
	|ГДЕ
	|	СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Ссылка.Договор = &Договор
	|	И СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Ссылка.Проведен = ИСТИНА
	|	И СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Ссылка.Дата <= &НаДату
	|	И СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Ссылка.ДействуетДо >= &НаДату
	|	И СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.МПЗ = &МПЗ";
Запрос.УстановитьПараметр("Договор", Договор);
Запрос.УстановитьПараметр("НаДату", НаДату);
Запрос.УстановитьПараметр("МПЗ", МПЗ);
РезультатЗапроса = Запрос.Выполнить();
Возврат(Не РезультатЗапроса.Пустой());

//Запрос.Текст = 
//	"ВЫБРАТЬ ПЕРВЫЕ 1
//	|	ДоговорныеПозиции.Ссылка
//	|ИЗ
//	|	Справочник.ДоговорныеПозиции КАК ДоговорныеПозиции
//	|ГДЕ
//	|	ДоговорныеПозиции.Владелец = &Владелец
//	|	И ДоговорныеПозиции.МПЗ = &МПЗ";
//Запрос.УстановитьПараметр("Владелец", Договор);
//Запрос.УстановитьПараметр("МПЗ", МПЗ);
//РезультатЗапроса = Запрос.Выполнить();
//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
//	Возврат(Истина);
//	Иначе
//	Возврат(Ложь);
//	КонецЕсли; 			
КонецФункции

Функция ПолучитьЦенуПоДоговору(Договор,МПЗ,НаДату) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныПлановыеСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныПлановые.СрезПоследних(
	|			&НаДату,
	|			Договор = &Договор
	|				И МПЗ = &МПЗ) КАК ЦеныПлановыеСрезПоследних";
Запрос.УстановитьПараметр("НаДату", НаДату);
Запрос.УстановитьПараметр("Договор", Договор);
Запрос.УстановитьПараметр("МПЗ", МПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
	Цена = ВыборкаДетальныеЗаписи.Цена;
		Если Не Договор.БезНДС Тогда
		СтавкаНДС = Константы.ОсновнаяСтавкаНДС.Получить();	
		Цена = Цена/(100+СтавкаНДС.Ставка)*100;
		КонецЕсли; 
		Возврат(Цена);
	КонецЦикла;
Возврат(0);
КонецФункции

Функция ПолучитьЦенуПоСпецификацииКДоговору(Контрагент,Договор,МПЗ,НаДату) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Ссылка КАК Ссылка,
	|	СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Цена КАК Цена
	|ИЗ
	|	Документ.СпецификацияКДоговоруСПоставщиком.ТабличнаяЧасть КАК СпецификацияКДоговоруСПоставщикомТабличнаяЧасть
	|ГДЕ
	|	СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Ссылка.Договор = &Договор
	|	И СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Ссылка.Проведен = ИСТИНА
	|	И НАЧАЛОПЕРИОДА(СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Ссылка.Дата, ДЕНЬ) <= &ДатаЗаказа
	|	И СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Ссылка.ДействуетДо >= &ДатаЗаказа
	|	И СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.МПЗ = &МПЗ
	|	И СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Количество > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	СпецификацияКДоговоруСПоставщикомТабличнаяЧасть.Ссылка.Дата";
Запрос.УстановитьПараметр("Договор", Договор);
Запрос.УстановитьПараметр("ДатаЗаказа", НачалоДня(НаДату));
Запрос.УстановитьПараметр("МПЗ", МПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	КоличествоОстаток = ОбщийМодульРаботаСРегистрами.ПолучитьОстатокПоДоговоруСПоставщиком(Контрагент,Договор,ВыборкаДетальныеЗаписи.Ссылка,МПЗ,НаДату);
		Если КоличествоОстаток > 0 Тогда
		Цена = ВыборкаДетальныеЗаписи.Цена;
			Если Не Договор.БезНДС Тогда
			СтавкаНДС = Константы.ОсновнаяСтавкаНДС.Получить();	
			Цена = Цена/(100+СтавкаНДС.Ставка)*100;
			КонецЕсли; 
			Возврат(Цена);
		КонецЕсли;
	КонецЦикла;
Возврат(0);
КонецФункции

Процедура СоздатьНомерОчереди(Документ,НомерОчереди) Экспорт
НОЛ = РегистрыСведений.НомераОчередиЛинеек.СоздатьМенеджерЗаписи();
НОЛ.Документ = Документ;
НОЛ.НомерОчереди = НомерОчереди;
НОЛ.Записать();
КонецПроцедуры

Процедура ИзменитьНомерОчереди(Документ,НомерОчереди) Экспорт
НаборЗаписей = РегистрыСведений.НомераОчередиЛинеек.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Документ.Установить(Документ);
НаборЗаписей.Прочитать();
    Для Каждого Запись Из НаборЗаписей Цикл
	Запись.НомерОчереди = НомерОчереди;
	КонецЦикла;
НаборЗаписей.Записать(Истина);
КонецПроцедуры

Функция ПолучитьПФРедизайна(Номенклатура,ЭлементЗамены,Проект = Неопределено) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ                                               
	|	Редизайн.Проект КАК Проект,
	|	Редизайн.ЭлементНовый КАК ЭлементНовый,
	|	Редизайн.Проект.ДатаПерехода КАК ПроектДатаПерехода
	|ИЗ
	|	РегистрСведений.Редизайн КАК Редизайн
	|ГДЕ
	|	Редизайн.ЭлементЗамены = &ЭлементЗамены
	|	И Редизайн.Проект.ДатаПерехода <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	Если Проект <> Неопределено Тогда
	Запрос.Текст = Запрос.Текст + " И Редизайн.Проект = &Проект";
    Запрос.УстановитьПараметр("Проект", Проект);
	КонецЕсли;
Запрос.УстановитьПараметр("ЭлементЗамены", ЭлементЗамены);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Для каждого ТЧ Из ВыборкаДетальныеЗаписи.Проект.ИсключенияРедизайна Цикл
			Если ТЧ.Товар.ЭтоГруппа Тогда
				Если Номенклатура.Товар.ПринадлежитЭлементу(ТЧ.Товар) Тогда
				Возврат(Неопределено);
				КонецЕсли;	
			Иначе	
				Если ТЧ.Товар = Номенклатура.Товар Тогда
				Возврат(Неопределено);
				Прервать;
				КонецЕсли;
			КонецЕсли;		
		КонецЦикла;
	Возврат(Новый Структура("ЭлементНовый,ДатаС",ВыборкаДетальныеЗаписи.ЭлементНовый,ВыборкаДетальныеЗаписи.ПроектДатаПерехода));
	КонецЦикла;
Возврат(Неопределено);
КонецФункции
 