
Функция ПереместитьВНачалоОчереди(ВыбМТК)
НомерОчереди = 0;
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	МаршрутнаяКарта.Ссылка КАК Ссылка,
		|	НомераОчередиЛинеек.НомерОчереди КАК НомерОчереди
		|ИЗ
		|	РегистрСведений.НомераОчередиЛинеек КАК НомераОчередиЛинеек
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.МаршрутнаяКарта КАК МаршрутнаяКарта
		|		ПО НомераОчередиЛинеек.Документ = МаршрутнаяКарта.Ссылка
		|ГДЕ
		|	МаршрутнаяКарта.Статус <> 3
		|	И МаршрутнаяКарта.Линейка = &Линейка
		|	И МаршрутнаяКарта.Ссылка <> &Ссылка";
	Запрос.УстановитьПараметр("Линейка",ВыбМТК.Линейка);
	Запрос.УстановитьПараметр("Ссылка",ВыбМТК);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если НомерОчереди = 0 Тогда
			НомерОчереди = ВыборкаДетальныеЗаписи.НомерОчереди;
			МТК = ВыбМТК.ПолучитьОбъект();
			МТК.НомерОчереди = НомерОчереди;
			МТК.Записать();
			//ОбщийМодульРаботаСРегистрами.ИзменитьНомерОчереди(ВыбМТК,НомерОчереди);
			Отбор = Новый Структура("ДокументОснование",МТК.Ссылка);
			ВыборкаПЗ = Документы.ПроизводственноеЗадание.Выбрать(,,Отбор);	
				Пока ВыборкаПЗ.Следующий() Цикл
				ПЗ = ВыборкаПЗ.Ссылка.ПолучитьОбъект();
				ПЗ.НомерОчереди = НомерОчереди;
				ПЗ.Записать(РежимЗаписиДокумента.Запись);
				//ОбщийМодульРаботаСРегистрами.ИзменитьНомерОчереди(ВыборкаПЗ.Ссылка,НомерОчереди);			
				КонецЦикла;
			НомерОчереди = НомерОчереди + 1;
			КонецЕсли; 
		МТК = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		МТК.НомерОчереди = НомерОчереди;
		МТК.Записать();
		//ОбщийМодульРаботаСРегистрами.ИзменитьНомерОчереди(ВыборкаДетальныеЗаписи.Ссылка,НомерОчереди);
		Отбор = Новый Структура("ДокументОснование",МТК.Ссылка);
		ВыборкаПЗ = Документы.ПроизводственноеЗадание.Выбрать(,,Отбор);	
			Пока ВыборкаПЗ.Следующий() Цикл
			ПЗ = ВыборкаПЗ.Ссылка.ПолучитьОбъект();
			ПЗ.НомерОчереди = НомерОчереди;
			ПЗ.Записать(РежимЗаписиДокумента.Запись);
			//ОбщийМодульРаботаСРегистрами.ИзменитьНомерОчереди(ВыборкаПЗ.Ссылка,НомерОчереди);			
			КонецЦикла;	
		НомерОчереди = НомерОчереди + 1;	
		КонецЦикла;	
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(Истина);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;	
КонецФункции

Процедура ПолучитьСписокЭтаповИзготовления(СписокЭтаповИзготовления,ЭтапСпецификации,флНабор)
Основа = Справочники.НормыРасходов.ПустаяСсылка();
	Если Не флНабор Тогда	
	СписокЭтаповИзготовления.Вставить(0,ЭтапСпецификации);
	КонецЕсли; 
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н(ЭтапСпецификации,ТекущаяДата());
	Пока ВыборкаНР.Следующий() Цикл
		Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда
		ПолучитьСписокЭтаповИзготовления(СписокЭтаповИзготовления,ВыборкаНР.Элемент,Истина);	
		ИначеЕсли ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа Тогда
		Основа = ВыборкаНР.Элемент;
		НормаОсновы = ВыборкаНР.Норма;
		Иначе
			Если ВыборкаНР.Элемент.Канбан.Пустая() Тогда
           	ПолучитьСписокЭтаповИзготовления(СписокЭтаповИзготовления,ВыборкаНР.Элемент,Ложь);					
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;	
		Если Не Основа.Пустая() Тогда
			Если Основа.Канбан.Пустая() Тогда
			ПолучитьСписокЭтаповИзготовления(СписокЭтаповИзготовления,Основа,Ложь);			
			КонецЕсли; 
		КонецЕсли;
КонецПроцедуры

Функция ПолучитьПервоеРабочееМесто(ВыбМТК) Экспорт
Запрос = Новый Запрос;
СписокЭтаповИзготовления = Новый СписокЗначений;
СписокАРМ = Новый СписокЗначений;

ПолучитьСписокЭтаповИзготовления(СписокЭтаповИзготовления,ВыбМТК.Номенклатура,Ложь);
	Для каждого Стр Из СписокЭтаповИзготовления Цикл
	ГруппаНоменклатуры = ПолучитьГруппуЭтапаПроизводства(Стр.Значение.Родитель);
		Если ГруппаНоменклатуры.Пустая() Тогда
		Сообщить(СокрЛП(Стр.Значение.Наименование)+" - этап спецификации принадлежит группе номенклатуры без префикса этапа! Обратитесь в службу 1С для назначения префикса!");
		Возврат(Справочники.РабочиеМестаЛинеек.ПустаяСсылка()); 		
		КонецЕсли; 
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаЛинеек.Ссылка
		|ИЗ
		|	Справочник.РабочиеМестаЛинеек КАК РабочиеМестаЛинеек
		|ГДЕ
		|	РабочиеМестаЛинеек.Линейка = &Линейка
		|	И РабочиеМестаЛинеек.ТабличнаяЧасть.ГруппаНоменклатуры = &ГруппаНоменклатуры";	
	Запрос.УстановитьПараметр("Линейка", ВыбМТК.Линейка);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ГруппаНоменклатуры);
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Выборка = СписокАРМ.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка);
				Если Выборка = Неопределено  Тогда
				СписокАРМ.Добавить(ВыборкаДетальныеЗаписи.Ссылка,Формат(ВыборкаДетальныеЗаписи.Ссылка.Код,"ЧЦ=2; ЧВН="));			
				КонецЕсли;		
			КонецЦикла;
		Иначе
		Сообщить(СокрЛП(Стр.Значение.Наименование)+" - не найдено рабочее место для производства этапа!");
		Возврат(Справочники.РабочиеМестаЛинеек.ПустаяСсылка()); 
		КонецЕсли; 	
	КонецЦикла;
СписокАРМ.СортироватьПоПредставлению();
Возврат(СписокАРМ[0].Значение);
КонецФункции

Функция ПроверитьЭтапыСпецификации(Линейка,Спецификация) Экспорт
Запрос = Новый Запрос;
СписокЭтаповИзготовления = Новый СписокЗначений;

ПолучитьСписокЭтаповИзготовления(СписокЭтаповИзготовления,Спецификация,Ложь);
	Для каждого Стр Из СписокЭтаповИзготовления Цикл
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаЛинеек.Ссылка
		|ИЗ
		|	Справочник.РабочиеМестаЛинеек КАК РабочиеМестаЛинеек
		|ГДЕ
		|	РабочиеМестаЛинеек.Линейка = &Линейка
		|	И РабочиеМестаЛинеек.ТабличнаяЧасть.ГруппаНоменклатуры = &ГруппаНоменклатуры";	
	Запрос.УстановитьПараметр("Линейка", Линейка);
	Запрос.УстановитьПараметр("ГруппаНоменклатуры", ПолучитьГруппуЭтапаПроизводства(Стр.Значение.Родитель));
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() = 0 Тогда
		Возврат(Стр.Значение); 
		КонецЕсли; 	
	КонецЦикла;
Возврат(Справочники.Номенклатура.ПустаяСсылка());
КонецФункции

Функция СоздатьМТК(Линейка,ВыбСпец,ВыбКол,СтандартныйКомментарий,Проект,Ремонт = Ложь,СоздатьБарКоды = Истина, БарКод = "", Счёт = "", ДатаОтгрузки = Неопределено, ДокументОснование = Неопределено, ОсобаяОтметка = "", МестоХраненияПотребитель = Неопределено, НомерОчереди = Неопределено, ВозвратнаяТара = "", Комментарий = "") Экспорт
	Если ВыбКол = 0 Тогда
	Сообщить("Изделие "+СокрЛП(ВыбСпец.Наименование)+" - количество = 0, МТК и ПЗ не созданы!");
	Возврат(Документы.МаршрутнаяКарта.ПустаяСсылка());	
	КонецЕсли;
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1; 
		Если СоздатьБарКоды Тогда
			Если ВыбСпец.Товар.Пустая() Тогда
			Сообщить(СокрЛП(ВыбСпец.Наименование)+" - не присвоен товар!");
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат(Документы.МаршрутнаяКарта.ПустаяСсылка());
			КонецЕсли; 						
		КонецЕсли;  
	МТК = Документы.МаршрутнаяКарта.СоздатьДокумент();
		Если ДокументОснование <> Неопределено Тогда
		МТК.ДокументОснование = ДокументОснование;
		КонецЕсли; 
	МТК.Дата = ТекущаяДата()+1;
	МТК.Автор = ПараметрыСеанса.Пользователь;
	МТК.СтандартныйКомментарий = СтандартныйКомментарий;
	МТК.Счёт = Счёт;
		Если ДатаОтгрузки <> Неопределено Тогда
		МТК.ДатаОтгрузки = ДатаОтгрузки;
		Иначе
			Если Найти(СтандартныйКомментарий.Наименование,"Изделия на пополнение склада ГП") > 0 Тогда
			МТК.ДатаОтгрузки = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Константы.ОсновнойПроизводственныйКалендарь.Получить(),ТекущаяДата(),ВыбСпец.Товар.СрокПоставки);
			КонецЕсли;
		КонецЕсли; 
	МТК.Проект = Проект;
	МТК.Линейка = Линейка;
		Если МестоХраненияПотребитель <> Неопределено Тогда
		МТК.МестоХраненияПотребитель = МестоХраненияПотребитель;	
		КонецЕсли; 
	МТК.Подразделение = Линейка.Подразделение;
	МТК.УстановитьНовыйНомер(ПрисвоитьПрефикс(Линейка.Подразделение));			
		Если Ремонт Тогда
		МТК.Ремонт = Истина;
		Иначе
			Если НомерОчереди = Неопределено Тогда
				Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
					Если ДокументОснование.СервисЦентр Тогда
					МТК.НомерОчереди = 1;
					Иначе
					МТК.НомерОчереди = 2;
					КонецЕсли;
				Иначе
				МТК.НомерОчереди = 2;
				КонецЕсли; 
			Иначе
            МТК.НомерОчереди = НомерОчереди;
			КонецЕсли;
		КонецЕсли; 
	МТК.Номенклатура = ВыбСпец;
	МТК.Количество = ВыбКол; 
		Если ЗначениеЗаполнено(Комментарий) Тогда
		МТК.Комментарий = Комментарий;
		КонецЕсли; 
	МТК.Записать(РежимЗаписиДокумента.Проведение);
	ПервоеРабочееМесто = ПолучитьПервоеРабочееМесто(МТК);
		Если ПервоеРабочееМесто.Пустая() Тогда	
		Сообщить("Изделие "+СокрЛП(ВыбСпец.Наименование)+" - ПЗ не созданы! Создание МТК отменено!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат(Документы.МаршрутнаяКарта.ПустаяСсылка());		
		КонецЕсли;			
			Если Не СоздатьПЗ(МТК.Ссылка,ПервоеРабочееМесто,СоздатьБарКоды,БарКод) Тогда
			Сообщить("Изделие "+СокрЛП(ВыбСпец.Наименование)+" - ПЗ не созданы! Создание МТК отменено!");
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат(Документы.МаршрутнаяКарта.ПустаяСсылка());
			КонецЕсли;  
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(МТК.Ссылка);
	Исключение
	Сообщить("Изделие "+СокрЛП(ВыбСпец.Наименование));
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Документы.МаршрутнаяКарта.ПустаяСсылка());
	КонецПопытки;
КонецФункции

Функция СоздатьМТККанбан(Линейка,МестоХраненияПотребитель,НомерЯчейки,Спецификация,Количество,РазрешитьОформлятьПустыеКанбаны = Ложь,ДокументОснование = Неопределено,Счёт = "",НомерОчереди = -1,ВозвратнаяТара = "",Ремонт = Ложь,СтандартныйКомментарий = Неопределено) Экспорт
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		Если НомерОчереди = -1 Тогда
			Если ДокументОснование <> Неопределено Тогда
				Если ТипЗнч(ДокументОснование.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
					Если ДокументОснование.ДокументОснование.СервисЦентр Тогда
					НомерОчереди = 0;	
					Иначе
					НомерОчереди = 1;
					КонецЕсли; 
				Иначе
				НомерОчереди = 1;
				КонецЕсли;
			Иначе
				Если Линейка.Подразделение.Код = "10" Тогда //SMD
				НомерОчереди = 0;
				Иначе
				НомерОчереди = 1;
				КонецЕсли; 
			КонецЕсли;		
		КонецЕсли;    
	МТК = Документы.МаршрутнаяКарта.СоздатьДокумент();
		Если ДокументОснование <> Неопределено Тогда
		МТК.ДокументОснование = ДокументОснование;
		КонецЕсли; 
	МТК.Дата = ТекущаяДата();
	МТК.Автор = ПараметрыСеанса.Пользователь;
	МТК.Линейка = Линейка;
	МТК.Счёт = Счёт;
	МТК.МестоХраненияПотребитель = МестоХраненияПотребитель;
	МТК.НомерЯчейки = НомерЯчейки;
	МТК.Подразделение = Линейка.Подразделение;
	МТК.УстановитьНовыйНомер(ПрисвоитьПрефикс(Линейка.Подразделение));
	МТК.НомерОчереди = НомерОчереди;
	МТК.Номенклатура = Спецификация;
	МТК.Количество = Количество;
	МТК.Ремонт = Ремонт;
		Если СтандартныйКомментарий <> Неопределено Тогда
		МТК.СтандартныйКомментарий = СтандартныйКомментарий;
		КонецЕсли; 
	МТК.Записать(РежимЗаписиДокумента.Проведение);
	ПервоеРабочееМесто = ПолучитьПервоеРабочееМесто(МТК);
		Если ПервоеРабочееМесто.Пустая() Тогда	
		Сообщить("ПЗ не созданы! Создание МТК отменено!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат(Документы.МаршрутнаяКарта.ПустаяСсылка());		
		КонецЕсли;			
			Если Не СоздатьПЗ(МТК.Ссылка,ПервоеРабочееМесто,Ложь,"",ВозвратнаяТара) Тогда
			Сообщить("ПЗ не созданы! Создание МТК отменено!");
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат(Документы.МаршрутнаяКарта.ПустаяСсылка());
			КонецЕсли;
				Если РазрешитьОформлятьПустыеКанбаны Тогда
					Если Линейка.Подразделение.ОформлятьПустыеКанбаны = 2 Тогда
						Если Не ОбщийМодульРаботаСРегистрами.ОформитьПустойКанбан(Линейка.МестоХраненияГП,МестоХраненияПотребитель,Спецификация,НомерЯчейки,МТК.Автор) Тогда
						ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
						Возврат(Документы.МаршрутнаяКарта.ПустаяСсылка());
						КонецЕсли;			
					КонецЕсли; 
				КонецЕсли;   
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(МТК.Ссылка);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Документы.МаршрутнаяКарта.ПустаяСсылка());
	КонецПопытки;
КонецФункции

Функция СоздатьПЗ(ВыбМТК,РабочееМесто,СоздатьБарКоды = Истина,БарКод,ВозвратнаяТара = "") Экспорт
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		Если ВыбМТК.Линейка.ВидЛинейки <> Перечисления.ВидыЛинеек.Канбан Тогда
			Если ВыбМТК.Линейка.СоздаватьОдноПЗПоМТК Тогда
			КолПЗ = 1;
			КолПродукции = ВыбМТК.Количество;
			Иначе	
			КолПЗ = ВыбМТК.Количество;
			КолПродукции = 1;
			КонецЕсли; 
				Для к = 1 По КолПЗ Цикл
				ПЗ = Документы.ПроизводственноеЗадание.НайтиПоНомеру(СокрЛП(ВыбМТК.Номер)+"-"+Формат(к,"ЧЦ=3; ЧВН="),ТекущаяДата());
					Если Не ПЗ.Пустая() Тогда
					Продолжить;
					КонецЕсли;
				ПЗ = Документы.ПроизводственноеЗадание.СоздатьДокумент();
				ПЗ.Автор = ПараметрыСеанса.Пользователь;
				ПЗ.ДокументОснование = ВыбМТК;
				ПЗ.Линейка = ВыбМТК.Линейка;
				ПЗ.Подразделение = ВыбМТК.Подразделение;
				ПЗ.НомерОчереди = ВыбМТК.НомерОчереди;
				ПЗ.ВозвратнаяТара = ВозвратнаяТара;
				ПЗ.Изделие = ВыбМТК.Номенклатура;
				ПЗ.Количество = КолПродукции;
				ПЗ.Номер = СокрЛП(ВыбМТК.Номер)+"-"+Формат(к,"ЧЦ=3; ЧВН=");
				ПЗ.Дата = ТекущаяДата()+1;
					Если (ВыбМТК.Линейка.ВидЛинейки <> Перечисления.ВидыЛинеек.Переупаковка) и (СоздатьБарКоды) Тогда
					Н = Справочники.НумераторБарКодов.НайтиПоРеквизиту("Подразделение",ВыбМТК.Подразделение);
						Если Н.Пустая() Тогда
						Сообщить("Не создан нумератор бар-кодов для подразделения!");
						ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
						Возврат(Ложь);
						КонецЕсли;
							Если КонецДня(Н.ДатаСброса) < КонецДня(ТекущаяДата()) Тогда
							Нумератор = Н.ПолучитьОбъект();
							Нумератор.СледующийНомер = 1;
							Нумератор.ДатаСброса = КонецГода(ТекущаяДата());
							Нумератор.Записать();					
							КонецЕсли; 
					ПЗ.БарКод = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(ВыбМТК.Номенклатура.Товар.Код)+Сред(Год(ТекущаяДата()),4)+Формат(Месяц(ТекущаяДата()),"ЧЦ=2; ЧВН=")+ВыбМТК.Подразделение.Код+Формат(Н.СледующийНомер,"ЧЦ=6; ЧВН=; ЧГ=");
					ПЗ.Записать(РежимЗаписиДокумента.Запись);
					MAC = "";
					КодDanfoss = "";
					//Пробуем создать MAC-адрес
					НумераторMAC = ВыбМТК.Номенклатура.Товар.ТоварнаяГруппа.НумераторMAC;
						Если Не НумераторMAC.Пустая() Тогда
						MAC = глНовыйMACАдрес(НумераторMAC,ВыбМТК.Номенклатура.Товар.ТоварнаяГруппа.КоличествоMACАдресов);
							Если MAC = Неопределено Тогда
							ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
							Возврат(Ложь);
							КонецЕсли; 
						КонецЕсли; 
					//Пробуем создать код Danfoss
					НумераторDanfoss = ВыбМТК.Номенклатура.Товар.НумераторDanfoss;
						Если Не НумераторDanfoss.Пустая() Тогда
						КодDanfoss = НумераторDanfoss.СледующийНомер;
						Нумератор = НумераторDanfoss.ПолучитьОбъект();
						Нумератор.СледующийНомер = Нумератор.СледующийНомер+1;
						Нумератор.Записать();
						КонецЕсли; 
					БарКод = РегистрыСведений.БарКоды.СоздатьМенеджерЗаписи();
					БарКод.Период = ТекущаяДата();
					БарКод.ПЗ = ПЗ.Ссылка;
					БарКод.Изделие = ПЗ.Изделие;
					БарКод.Товар = ПЗ.Изделие.Товар;
					БарКод.БарКод = ПЗ.БарКод;
					БарКод.MAC = MAC;
					БарКод.КодDanfoss = Формат(КодDanfoss,"ЧЦ=8; ЧВН=; ЧГ=0");
					БарКод.Записать();
					Нумератор = Н.ПолучитьОбъект();
					Нумератор.СледующийНомер = Нумератор.СледующийНомер+1;
					Нумератор.Записать();
					ИначеЕсли ЗначениеЗаполнено(БарКод) Тогда
					ПЗ.БарКод = БарКод;		
					КонецЕсли;
						Если Не ПЗ.Изделие.Товар.Пустая() Тогда
						ПЗ.СторонняяПоверка = ПЗ.Изделие.Товар.СторонняяПоверка;
						КонецЕсли;  
				ПЗ.Записать(РежимЗаписиДокумента.Запись);
				//ОбщийМодульРаботаСРегистрами.СоздатьНомерОчереди(ПЗ.Ссылка,ВыбМТК.НомерОчереди);
				ОбщийМодульРаботаСРегистрами.СоздатьЭтапПроизводственногоЗадания(ПЗ.Ссылка,РабочееМесто,Неопределено,Неопределено);
				КонецЦикла;
		Иначе
		ПЗ = Документы.ПроизводственноеЗадание.НайтиПоНомеру(СокрЛП(ВыбМТК.Номер)+"-001",ТекущаяДата());
			Если ПЗ.Пустая() Тогда
			ПЗ = Документы.ПроизводственноеЗадание.СоздатьДокумент();
			ПЗ.Автор = ПараметрыСеанса.Пользователь;
			ПЗ.ДокументОснование = ВыбМТК;
			ПЗ.Линейка = ВыбМТК.Линейка;
			ПЗ.Подразделение = ВыбМТК.Подразделение;
			ПЗ.НомерОчереди = ВыбМТК.НомерОчереди;
			ПЗ.ВозвратнаяТара = ВозвратнаяТара;
			ПЗ.Изделие = ВыбМТК.Номенклатура;
			ПЗ.Количество = ВыбМТК.Количество;
			ПЗ.Номер = СокрЛП(ВыбМТК.Номер)+"-001";
			ПЗ.Дата = ТекущаяДата();		
			ПЗ.Записать(РежимЗаписиДокумента.Запись);
			//ОбщийМодульРаботаСРегистрами.СоздатьНомерОчереди(ПЗ.Ссылка,ВыбМТК.НомерОчереди);
			ОбщийМодульРаботаСРегистрами.СоздатьЭтапПроизводственногоЗадания(ПЗ.Ссылка,РабочееМесто,Неопределено,Неопределено);
			КонецЕсли;	
		КонецЕсли; 
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(Истина); 
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
КонецФункции 

Функция СоздатьДополнительноеПЗ(ПЗИсходное,РабочееМесто,Количество,ПричинаОстановки) Экспорт
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводственноеЗадание.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПроизводственноеЗадание КАК ПроизводственноеЗадание
		|ГДЕ
		|	ПроизводственноеЗадание.ДокументОснование = &ДокументОснование";
	Запрос.УстановитьПараметр("ДокументОснование", ПЗИсходное.ДокументОснование);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ПЗ = Документы.ПроизводственноеЗадание.СоздатьДокумент(); //Создаём новое ПЗ
	ПЗ.Автор = ПараметрыСеанса.Пользователь;
	ПЗ.Номер = СокрЛП(ПЗИсходное.ДокументОснование.Номер)+"-"+Формат(ВыборкаДетальныеЗаписи.Количество()+1,"ЧЦ=3; ЧВН=");
	ПЗ.Дата = ПЗИсходное.Дата;
	ПЗ.ДатаЗапуска = ПЗИсходное.ДатаЗапуска;
	ПЗ.ДокументОснование = ПЗИсходное.ДокументОснование;
	ПЗ.Подразделение = ПЗИсходное.Подразделение;
	ПЗ.Линейка = ПЗИсходное.Линейка;
	ПЗ.НомерОчереди = 1;//ПЗИсходное.НомерОчереди;
	ПЗ.Изделие = ПЗИсходное.Изделие;
	ПЗ.Количество = Количество;
	ПЗ.ЛинияSMD = ПЗИсходное.ЛинияSMD;		
	ПЗ.Остановлено = Истина;
	ПЗ.Комментарий = ПричинаОстановки;
	ПЗ.Записать(РежимЗаписиДокумента.Запись);
	//ОбщийМодульРаботаСРегистрами.СоздатьНомерОчереди(ПЗ.Ссылка,1);
	ОбщийМодульРаботаСРегистрами.СоздатьЭтапПроизводственногоЗадания(ПЗ.Ссылка,РабочееМесто,Неопределено,Неопределено);
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли; 
	Возврат(ПЗ.Ссылка);	
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Неопределено);
	КонецПопытки;
КонецФункции
            
Процедура ДобавитьАналогиНабора(ПП,Номенклатура,Набор,Количество)
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_М(Набор,ТекущаяДата());
	Пока ВыборкаНР.Следующий() Цикл       
	Требуется = ВыборкаНР.Норма*Количество;
	ТЧПП = ПП.Спецификация.Добавить();
	ТЧПП.ВидМПЗ = Перечисления.ВидыМПЗ.Материалы;
	ТЧПП.МПЗ = ВыборкаНР.Элемент;
	ТЧПП.Количество = Требуется;
	ТЧПП.ЕдиницаИзмерения = ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения;
    ТЧПП.ЭтапСпецификации = Номенклатура;
	КонецЦикла; 
КонецПроцедуры

Функция СоздатьПередачуВПроизводство(ПЗ,ТаблицаПередачиВПроизводство,ДатаПП = Неопределено) Экспорт
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	ПЗОбъект = ПЗ.ПолучитьОбъект(); 
		Если ПЗ.Линейка.ВидЛинейки = Перечисления.ВидыЛинеек.Канбан Тогда
		флКанбан = Истина;
		ДокументОснование = ПЗ.ДокументОснование;
		МТК = ДокументОснование.ПолучитьОбъект();
		Иначе	
		флКанбан = Ложь;
		ДокументОснование = ПЗ;
		МТК = ПЗ.ДокументОснование.ПолучитьОбъект(); 
		КонецЕсли;
	ПП = Документы.ПередачаВПроизводство.НайтиПоНомеру(ДокументОснование.Номер,ТекущаяДата());
		Если Не ПП.Пустая() Тогда
		УдаляемаяПП = ПП.ПолучитьОбъект();
		УдаляемаяПП.Удалить();
		КонецЕсли;	
 	ПП = Документы.ПередачаВПроизводство.СоздатьДокумент();
	ПП.Автор = ПараметрыСеанса.Пользователь;
	ПП.Номер = ДокументОснование.Номер;
	ПП.Дата = ?(ДатаПП = Неопределено,ТекущаяДата(),ДатаПП);
	ПП.ДокументОснование = ДокументОснование;
	ПП.Подразделение = ДокументОснование.Подразделение;
	ПП.МестоХранения = ДокументОснование.Линейка.МестоХраненияКанбанов;
	ПП.Изделие = МТК.Номенклатура;
	ПП.Количество = ДокументОснование.Количество;
		Для каждого ТЧ Из ТаблицаПередачиВПроизводство Цикл
			Если Не ТЧ.ОсновнаяНормаРасходов.Пустая() Тогда	
				Если ТЧ.НормаРасходов.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда
				ДобавитьАналогиНабора(ПП,ТЧ.Номенклатура,ТЧ.МПЗ,ТЧ.Количество);					
				Иначе
				ТЧПП = ПП.Спецификация.Добавить();
				ТЧПП.ВидМПЗ = ТЧ.ВидМПЗ;
				ТЧПП.МПЗ = ТЧ.МПЗ;
				ТЧПП.Количество = ТЧ.Количество;
				ТЧПП.ЕдиницаИзмерения = ТЧ.ЕдиницаИзмерения;
		        ТЧПП.ЭтапСпецификации = ТЧ.Номенклатура;
				КонецЕсли;
					Если флКанбан Тогда
					ТЧАналог = МТК.Аналоги.Добавить();		
					Иначе	
					ТЧАналог = ПЗОбъект.Аналоги.Добавить();		
					КонецЕсли;                             
			ТЧАналог.Спецификация = ТЧ.Номенклатура;
			ТЧАналог.НормаРасходов = ТЧ.ОсновнаяНормаРасходов;
			ТЧАналог.АналогНормыРасходов = ТЧ.НормаРасходов;
			Иначе
			ТЧПП = ПП.Спецификация.Добавить();
			ТЧПП.ВидМПЗ = ТЧ.ВидМПЗ;
			ТЧПП.МПЗ = ТЧ.МПЗ;
			ТЧПП.Количество = ТЧ.Количество;
			ТЧПП.ЕдиницаИзмерения = ТЧ.ЕдиницаИзмерения;
	        ТЧПП.ЭтапСпецификации = ТЧ.Номенклатура;
			КонецЕсли;
		КонецЦикла; 
	ПП.Спецификация.Свернуть("ЭтапСпецификации,ВидМПЗ,МПЗ,ЕдиницаИзмерения","Количество");
	ПП.Спецификация.Сортировать("ВидМПЗ,МПЗ");
	ПП.Записать(РежимЗаписиДокумента.Проведение);
	ПЗОбъект.ДатаЗапуска = ПП.Дата;
	ПЗОбъект.Записать(); 
	МТК.Статус = 1;
	МТК.Записать(РежимЗаписиДокумента.Проведение);
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(Истина);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
КонецФункции

Функция СоздатьВыпускПродукции(ПЗ,РабочееМесто,ТаблицаСпецификации,Этапы,ДатаВыпуска,МестоХранения = Неопределено) Экспорт
	Попытка
	ПП = ОбщийМодульВызовСервера.НайтиПередачуВПроизводство(ПЗ);
		Если ПП = Неопределено Тогда
		Сообщить("Документ передачи в производство по ПЗ "+ПЗ.Номер+" не найден!");;
		Возврат(Ложь);
		КонецЕсли;
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Выпуск = Документы.ВыпускПродукции.СоздатьДокумент();
	Выпуск.Автор = ПараметрыСеанса.Пользователь;
	Выпуск.ДокументОснование = ПЗ;
	Выпуск.Подразделение = ПЗ.Подразделение;
	Выпуск.Номер = ПЗ.Номер+"-"+ОбщийМодульВызовСервера.ПолучитьПрефиксРабочегоМеста(РабочееМесто);
	Выпуск.Дата = ДатаВыпуска;
		Если ПП.Спецификация[0].ЭтапСпецификации.Пустая() Тогда                               
			Для каждого ТЧ Из ТаблицаСпецификации Цикл
				Если ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Материалы") Тогда
					Если ТЧ.ВидМПЗ = Перечисления.ВидыЭлементовНормРасходов.МатериалВспомогательный Тогда
					Продолжить;				
					КонецЕсли;
				ТЧВыпуск = Выпуск.Списание.Добавить();
				ТЧВыпуск.Номенклатура = ТЧ.ЭтапСпецификации;
				ТЧВыпуск.ВидМПЗ = Перечисления.ВидыМПЗ.Материалы;
				ТЧВыпуск.МПЗ = ТЧ.МПЗ;
				ТЧВыпуск.Количество = ТЧ.Количество*ПЗ.Количество;
				ТЧВыпуск.ЕдиницаИзмерения = ТЧ.ЕдиницаИзмерения;
				ИначеЕсли ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если ТЧ.МПЗ.Виртуальный Тогда
					Продолжить;
					КонецЕсли; 
				ТЧВыпуск = Выпуск.Списание.Добавить();
				ТЧВыпуск.Номенклатура = ТЧ.ЭтапСпецификации;
				ТЧВыпуск.ВидМПЗ = Перечисления.ВидыМПЗ.Полуфабрикаты;
				ТЧВыпуск.МПЗ = ТЧ.МПЗ;
				ТЧВыпуск.Количество = ТЧ.Количество*ПЗ.Количество;
				ТЧВыпуск.ЕдиницаИзмерения = ТЧ.ЕдиницаИзмерения;			
				КонецЕсли;                                       
			КонецЦикла;
				Для каждого ТЧ Из Этапы Цикл
				ЭтапАРМ = РабочееМесто.ТабличнаяЧасть.Найти(ТЧ.ГруппаНоменклатуры,"ГруппаНоменклатуры");
					Если ЭтапАРМ = Неопределено Тогда
					Продолжить;
					ИначеЕсли ЭтапАРМ.Комплектация Тогда
				    Продолжить;
					КонецЕсли;
						Если ТЧ.ЭтапСпецификации.Виртуальный Тогда
						Продолжить;
						КонецЕсли;
			    ТЧВыпуск = Выпуск.Поступление.Добавить();
				ТЧВыпуск.Номенклатура = ТЧ.ЭтапСпецификации;
			    ТЧВыпуск.Количество = ТЧ.Количество*ПЗ.Количество; 
				КонецЦикла;
		Иначе
			Для каждого ТЧ Из ТаблицаСпецификации Цикл
				Если ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
					Если ТЧ.МПЗ.Виртуальный Тогда
					Продолжить;
					КонецЕсли;
						Если ТЧ.МПЗ.Канбан.Пустая() Тогда
						ТЧВыпуск = Выпуск.Списание.Добавить();
						ТЧВыпуск.Номенклатура = ТЧ.ЭтапСпецификации;
						ТЧВыпуск.ВидМПЗ = Перечисления.ВидыМПЗ.Полуфабрикаты;
						ТЧВыпуск.МПЗ = ТЧ.МПЗ;
						ТЧВыпуск.Количество = ТЧ.Количество*ПЗ.Количество;
						ТЧВыпуск.ЕдиницаИзмерения = ТЧ.ЕдиницаИзмерения;
						КонецЕсли;			
				КонецЕсли;                                       
			КонецЦикла;
				Для каждого ТЧ Из Этапы Цикл
				ЭтапАРМ = РабочееМесто.ТабличнаяЧасть.Найти(ТЧ.ГруппаНоменклатуры,"ГруппаНоменклатуры");
					Если ЭтапАРМ = Неопределено Тогда
					Продолжить;
					ИначеЕсли ЭтапАРМ.Комплектация Тогда
				    Продолжить;
					КонецЕсли;
						Если ТЧ.ЭтапСпецификации.Виртуальный Тогда
						Продолжить;
						КонецЕсли;
			    ТЧВыпуск = Выпуск.Поступление.Добавить();
				ТЧВыпуск.Номенклатура = ТЧ.ЭтапСпецификации;
			    ТЧВыпуск.Количество = ТЧ.Количество*ПЗ.Количество; 
				Выборка = ПП.Спецификация.НайтиСтроки(Новый Структура("ЭтапСпецификации",ТЧ.ЭтапСпецификации));
					Для к = 0 По Выборка.ВГраница() Цикл 
					ТЧВыпуск = Выпуск.Списание.Добавить();
					ТЧВыпуск.Номенклатура = ТЧ.ЭтапСпецификации;
					ТЧВыпуск.ВидМПЗ = Выборка[к].ВидМПЗ;
					ТЧВыпуск.МПЗ = Выборка[к].МПЗ;
					ТЧВыпуск.Количество = Выборка[к].Количество;
					ТЧВыпуск.ЕдиницаИзмерения = Выборка[к].ЕдиницаИзмерения;
					КонецЦикла;	
				КонецЦикла;
		КонецЕсли; 
	Выпуск.Списание.Свернуть("Номенклатура,ВидМПЗ,МПЗ,ЕдиницаИзмерения","Количество");
		Если МестоХранения = Неопределено Тогда
			Если Выпуск.Поступление.Найти(ПЗ.Изделие,"Номенклатура") <> Неопределено Тогда
				Если ЗначениеЗаполнено(ПЗ.ДокументОснование.МестоХраненияПотребитель) Тогда
				Выпуск.МестоХранения = ПЗ.ДокументОснование.МестоХраненияПотребитель; 
				ИначеЕсли ПЗ.ДокументОснование.Ремонт Тогда
					Если Найти(ПЗ.ДокументОснование.СтандартныйКомментарий.Наименование,"Полуфабрикаты для СЦ") > 0 Тогда
					Выпуск.МестоХранения = Константы.МестоХраненияДляСервисЦентров.Получить();
					Иначе
					Выпуск.МестоХранения = ПЗ.Линейка.МестоХраненияКанбанов;						
					КонецЕсли;		
				Иначе
				Выпуск.МестоХранения = ПЗ.Линейка.МестоХраненияГП;
				КонецЕсли;
			Выпуск.НаСклад = Истина;				
			КонецЕсли;
		Иначе
		Выпуск.МестоХранения = МестоХранения;
		Выпуск.НаСклад = Истина;
		КонецЕсли;	
			Если Выпуск.Поступление.Количество() > 0 Тогда //если этап спецификации не виртуальный
			Выпуск.Записать(РежимЗаписиДокумента.Проведение);
			КонецЕсли;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(Истина); 
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
КонецФункции

Функция СоздатьВыпускПродукцииКанбан(ПЗ,ДатаВыпуска,Количество = Неопределено,ВБрак = Ложь) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыпускПродукцииКанбан.Ссылка
	|ИЗ
	|	Документ.ВыпускПродукцииКанбан КАК ВыпускПродукцииКанбан
	|ГДЕ
	|	ВыпускПродукцииКанбан.ДокументОснование.ДокументОснование = &МТК";
Запрос.УстановитьПараметр("МТК", ПЗ.ДокументОснование);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
КолДокВыпуск = ВыборкаДетальныеЗаписи.Количество();
ПП = ОбщийМодульВызовСервера.НайтиПередачуВПроизводство(ПЗ.ДокументОснование);
	Если ПП = Неопределено Тогда
	Сообщить("Документ передачи в производство по МТК "+ПЗ.ДокументОснование.Номер+" не найден!");
	Возврат(Ложь);			
	КонецЕсли;
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;	
		Выпуск = Документы.ВыпускПродукцииКанбан.СоздатьДокумент();
		Выпуск.Автор = ПараметрыСеанса.Пользователь;
		Выпуск.ДокументОснование = ПЗ;
		Выпуск.Подразделение = ПЗ.Подразделение;
		Выпуск.Номер = СокрЛП(ПЗ.ДокументОснование.Номер)+"-"+Формат(КолДокВыпуск+1,"ЧЦ=3; ЧВН=");
		Выпуск.Дата = ДатаВыпуска;
			Если ВБрак Тогда
            Выпуск.МестоХранения = ПЗ.Линейка.Подразделение.МестоХраненияБрака;
			ИначеЕсли ПЗ.ДокументОснование.Ремонт Тогда
				Если Найти(ПЗ.ДокументОснование.СтандартныйКомментарий.Наименование,"Полуфабрикаты для СЦ") > 0 Тогда
				Выпуск.МестоХранения = Константы.МестоХраненияДляСервисЦентров.Получить();
				Иначе
					Если ПЗ.Линейка.МестоХраненияГП.Пустая() Тогда	
					Выпуск.МестоХранения = ПЗ.ДокументОснование.МестоХраненияПотребитель;
					Иначе
					Выпуск.МестоХранения = ПЗ.Линейка.МестоХраненияГП;
					КонецЕсли;
				КонецЕсли; 
			ИначеЕсли ПЗ.Линейка.МестоХраненияГП.Пустая() Тогда	
			Выпуск.МестоХранения = ПЗ.ДокументОснование.МестоХраненияПотребитель;
			Иначе
			Выпуск.МестоХранения = ПЗ.Линейка.МестоХраненияГП;
			КонецЕсли; 
		Выпуск.Изделие = ПЗ.Изделие;
		Выпуск.Количество = ?(Количество = Неопределено,ПЗ.Количество,Количество); 
			Для каждого ТЧ Из ПП.Спецификация Цикл
			ТЧВыпуск = Выпуск.Списание.Добавить();
				Если ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Материалы") Тогда
				ТЧВыпуск.ВидМПЗ = Перечисления.ВидыМПЗ.Материалы;
				ИначеЕсли ТипЗнч(ТЧ.МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
				ТЧВыпуск.ВидМПЗ = Перечисления.ВидыМПЗ.Полуфабрикаты;			
				КонецЕсли; 
			ТЧВыпуск.МПЗ = ТЧ.МПЗ;
			ТЧВыпуск.Количество = ТЧ.Количество/ПП.Количество*?(Количество = Неопределено,ПЗ.Количество,Количество);
			ТЧВыпуск.ЕдиницаИзмерения = ТЧ.ЕдиницаИзмерения;                                     
			КонецЦикла; 
		Выпуск.Списание.Свернуть("ВидМПЗ,МПЗ,ЕдиницаИзмерения","Количество");
		Выпуск.Списание.Сортировать("ВидМПЗ,МПЗ");
		Выпуск.Записать(РежимЗаписиДокумента.Проведение);
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат(Ложь);
		КонецПопытки;
Возврат(Истина);
КонецФункции

Функция СоздатьПередачуНаЛинейку(МТК,ДатаДок) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачиНаЛинейкиОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ПередачиНаЛинейки.Остатки(&НаДату, ) КАК ПередачиНаЛинейкиОстатки
	|ГДЕ
	|	ПередачиНаЛинейкиОстатки.МестоХранения = &МестоХраненияКанбанов
	|	И ПередачиНаЛинейкиОстатки.НомерЯчейки = &НомерЯчейки
	|	И ПередачиНаЛинейкиОстатки.МПЗ = &МПЗ";
Запрос.УстановитьПараметр("МестоХраненияКанбанов", МТК.МестоХраненияПотребитель);
Запрос.УстановитьПараметр("МПЗ", МТК.Номенклатура);
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
Запрос.УстановитьПараметр("НомерЯчейки", МТК.НомерЯчейки);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
	КолОстаток = 0;
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КолОстаток = КолОстаток + ВыборкаДетальныеЗаписи.КоличествоОстаток;
		КонецЦикла;
			Если КолОстаток >= 0 Тогда
			Сообщить("Данная ячейка уже передана и ещё не оприходована на линейке!");
			Возврат(Ложь);
			КонецЕсли;
	КонецЕсли;
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		Передача = Документы.ПередачаНаЛинейку.СоздатьДокумент();
		Передача.Дата = ДатаДок;
		Передача.ДокументОснование = МТК;
		Передача.Автор = ПараметрыСеанса.Пользователь;
		Передача.Подразделение = МТК.Подразделение;
		Передача.УстановитьНовыйНомер(ПрисвоитьПрефикс(МТК.Подразделение));
		Передача.НомерЯчейки = МТК.НомерЯчейки;
		Передача.МестоХранения = МТК.Линейка.МестоХраненияГП;
		Передача.МестоХраненияКанбанов = МТК.МестоХраненияПотребитель;
		Передача.МПЗ = МТК.Номенклатура;
		Передача.Количество = МТК.Количество - ОбщийМодульВызовСервера.ПолучитьКоличествоВБраке(МТК);
	    Передача.Записать(РежимЗаписиДокумента.Проведение);
			Если Не МТК.Номенклатура.Канбан.Пустая() Тогда
				Если МТК.Номенклатура.Канбан.Подразделение.ОформлятьПустыеКанбаны > 0 Тогда
					Если Не ОбщийМодульРаботаСРегистрами.ОформитьПередачуКанбанаПоМестуХранения(МТК.Линейка.МестоХраненияГП,МТК.МестоХраненияПотребитель,МТК.Номенклатура,МТК.НомерЯчейки,Передача.Автор,Передача.Количество,ДатаДок) Тогда
					ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
					Возврат(Ложь);				
					КонецЕсли; 
				КонецЕсли; 	
			КонецЕсли;
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат(Ложь);
		КонецПопытки;
Возврат(Истина);
КонецФункции

Функция ПолучитьНомерРемонтнойКарты(ПЗ) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РемонтнаяКарта.Ссылка
	|ИЗ
	|	Документ.РемонтнаяКарта КАК РемонтнаяКарта
	|ГДЕ
	|	РемонтнаяКарта.ДокументОснование = &ДокументОснование";
Запрос.УстановитьПараметр("ДокументОснование", ПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
Возврат(ВыборкаДетальныеЗаписи.Количество()+1); 
КонецФункции

Функция СоздатьРемонтнуюКарту(ПЗ,РабочееМесто,ИзделиеРемонта,Исполнитель,ВидРемонта,ПричиныРемонта,Количество = "",ВозвратнаяТара = Неопределено,БарКод = Неопределено) Экспорт
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;	
	ДатаОкончания = ТекущаяДата();
		Если ВидРемонта <> Перечисления.ВидыРемонта.Сторонний Тогда	
		НаборЗаписей = РегистрыСведений.СтендовыйПрогон.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(ПЗ);
		НаборЗаписей.Отбор.Изделие.Установить(ПЗ.Изделие);
		НаборЗаписей.Прочитать();
		    Для Каждого Запись Из НаборЗаписей Цикл
				Если Не ЗначениеЗаполнено(Запись.ДатаСнятия) Тогда
				Запись.ИсполнительСнятие = Исполнитель;
				Запись.ДатаСнятия = ДатаОкончания;
				Прервать; 
				КонецЕсли;  
		    КонецЦикла;
		НаборЗаписей.Записать();
		КонецЕсли;
	ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(ПЗ,Новый Структура("РабочееМесто,Ремонт",РабочееМесто,Истина));
	РемонтнаяКарта = Документы.РемонтнаяКарта.СоздатьДокумент();
	РемонтнаяКарта.Дата = ТекущаяДата();
		Если ВидРемонта <> Перечисления.ВидыРемонта.Сторонний Тогда
		РемонтнаяКарта.Номер = ПЗ.Номер+"-"+ПолучитьНомерРемонтнойКарты(ПЗ);
		РемонтнаяКарта.ДокументОснование = ПЗ;
		РемонтнаяКарта.ВозвратнаяТара = ?(ВозвратнаяТара = Неопределено,ПЗ.ВозвратнаяТара,ВозвратнаяТара); 
		РемонтнаяКарта.БарКод = ПЗ.БарКод;
		Иначе
		РемонтнаяКарта.УстановитьНовыйНомер(ПрисвоитьПрефикс(ПЗ.Подразделение));
		РемонтнаяКарта.ДатаНачала = ТекущаяДата();
		РемонтнаяКарта.БарКод = БарКод;
		КонецЕсли;
	РемонтнаяКарта.Товар = ПЗ.Изделие.Товар;
	РемонтнаяКарта.ВидРемонта = ВидРемонта;
	РемонтнаяКарта.Линейка = ПЗ.Линейка;
	РемонтнаяКарта.Подразделение = ПЗ.Подразделение;
 	РемонтнаяКарта.РабочееМесто = РабочееМесто;
	РемонтнаяКарта.ПричинаРемонта = ПричиныРемонта.ПричинаРемонта;
	РемонтнаяКарта.Комментарий = ПричиныРемонта.Комментарий;
	РемонтнаяКарта.Изделие = ИзделиеРемонта.Изделие;
	РемонтнаяКарта.Количество = ИзделиеРемонта.Количество;
	РемонтнаяКарта.Записать(РежимЗаписиДокумента.Запись);
		Если ВозвратнаяТара <> Неопределено Тогда
		ПЗОбъект = ПЗ.ПолучитьОбъект();
		ПЗОбъект.ВозвратнаяТара = ВозвратнаяТара;
		ПЗОбъект.Записать();
		КонецЕсли; 
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции

Функция СоздатьРемонтнуюКартуКанбан(ПЗ,РабочееМесто,ВидРемонта,ПричиныРемонта,Количество = Неопределено,ВозвратнаяТара = Неопределено) Экспорт
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(ПЗ,Новый Структура("РабочееМесто,Ремонт",РабочееМесто,Истина));
	РемонтнаяКарта = Документы.РемонтнаяКарта.СоздатьДокумент();
	РемонтнаяКарта.Номер = ПЗ.Номер+"-"+ПолучитьНомерРемонтнойКарты(ПЗ);
	РемонтнаяКарта.Дата = ТекущаяДата();
	РемонтнаяКарта.ДокументОснование = ПЗ;
	РемонтнаяКарта.ВидРемонта = ВидРемонта;
	РемонтнаяКарта.Линейка = ПЗ.Линейка;
	РемонтнаяКарта.ВозвратнаяТара = ?(ВозвратнаяТара = Неопределено,ПЗ.ВозвратнаяТара,ВозвратнаяТара);
	РемонтнаяКарта.Подразделение = ПЗ.Подразделение;
 	РемонтнаяКарта.РабочееМесто = РабочееМесто;
	РемонтнаяКарта.Изделие = ПЗ.Изделие;
    РемонтнаяКарта.Количество = Количество;
	РемонтнаяКарта.ПричинаРемонта = ПричиныРемонта.ПричинаРемонта;
	РемонтнаяКарта.Комментарий = ПричиныРемонта.Комментарий;
	РемонтнаяКарта.Записать(РежимЗаписиДокумента.Запись);
		Если ВозвратнаяТара <> Неопределено Тогда
		ПЗОбъект = ПЗ.ПолучитьОбъект();
		ПЗОбъект.ВозвратнаяТара = ВозвратнаяТара;
		ПЗОбъект.Записать();
		КонецЕсли; 
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Неопределено);
	КонецПопытки;
Возврат(РемонтнаяКарта.Ссылка);
КонецФункции

Процедура ИзменениеДокументовПередЗаписью(Источник, Отказ, РежимЗаписи, РежимПроведения) Экспорт
	Если ТипЗнч(Источник) <> Тип("ДокументОбъект.ЗаказНаПроизводство") и
		 ТипЗнч(Источник) <> Тип("ДокументОбъект.МаршрутнаяКарта") и 
		 ТипЗнч(Источник) <> Тип("ДокументОбъект.ПроизводственноеЗадание") и
		 ТипЗнч(Источник) <> Тип("ДокументОбъект.ИндивидульныйНаряд") и		 
		 ТипЗнч(Источник) <> Тип("ДокументОбъект.РемонтнаяКарта") и
		 ТипЗнч(Источник) <> Тип("ДокументОбъект.Перепрогон") Тогда
		Если РольДоступна("Снабжение")или РольДоступна("Администратор") Тогда	
			Если ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаказПоставщику") или 
				 ТипЗнч(Источник) = Тип("ДокументОбъект.ЗаявкаОтПокупателя") или
				 ТипЗнч(Источник) = Тип("ДокументОбъект.СпецификацияКДоговоруСПоставщиком") Тогда
			Возврат;
			КонецЕсли; 
		КонецЕсли; 
			Если Источник.Дата <= КонецДня(Константы.ДатаЗапретаРедактирования.Получить()) Тогда
			Сотрудник = Константы.ОтменитьЗапретРедактированияДляСотрудника.Получить();
				Если Сотрудник.Пустая() Тогда
				Сообщить("Период закрыт для редактирования!");
				Отказ = Истина;
				Иначе	
					Если Сотрудник <> ПараметрыСеанса.Пользователь Тогда
					Сообщить("Период закрыт для редактирования!");
					Отказ = Истина;
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;	
	КонецЕсли;   
КонецПроцедуры

Функция ЗапретРедактирования(Док,ИспользоватьЗапретПоДате,ИспользоватьЗапретПоАвтору,СписокРазрешенныхРолей = Неопределено) Экспорт
	Если Док.Ссылка.Пустая() Тогда	
	Возврат(Ложь);
	КонецЕсли;
		Если ИспользоватьЗапретПоАвтору Тогда
			Если Док.Автор <> ПараметрыСеанса.Пользователь Тогда
				Если СписокРазрешенныхРолей <> Неопределено Тогда
				флНайдена = Истина;
					Для каждого Роль Из СписокРазрешенныхРолей Цикл
						Если РольДоступна(Роль.Значение) Тогда
						флНайдена = Ложь;
						Прервать;
						КонецЕсли; 
					КонецЦикла;
						Если флНайдена Тогда
						Возврат(Истина);
						КонецЕсли;
				КонецЕсли;				
			КонецЕсли;		
		КонецЕсли; 
			Если ИспользоватьЗапретПоДате Тогда
				Если Док.Дата <= КонецДня(Константы.ДатаЗапретаРедактирования.Получить()) Тогда
				Сотрудник = Константы.ОтменитьЗапретРедактированияДляСотрудника.Получить();
					Если Сотрудник.Пустая() Тогда
					Возврат(Истина);
					Иначе	
						Если Сотрудник <> ПараметрыСеанса.Пользователь Тогда
						Возврат(Истина);
						Иначе	
						Возврат(Ложь);
						КонецЕсли; 
					КонецЕсли;
				Иначе
				Возврат(Ложь);
				КонецЕсли;
			Иначе
			Возврат(Ложь);
			КонецЕсли;  
КонецФункции

Процедура УдалениеДокументовПередУдалением(Источник, Отказ) Экспорт
	//Если (Не РольДоступна("Администратор"))и(Не РольДоступна("Мастер")) Тогда
	//Сообщить("Удалить документ может только администратор!");
	//Отказ = Истина;
	//КонецЕсли;	 
КонецПроцедуры
