
Функция ПолучитьТекущийКаталог(ВыбРодитель,ТекущийКаталог = "") Экспорт
ВыбКаталог = ВыбРодитель.Ссылка;	
	Пока Не ВыбКаталог.Пустая()  Цикл
	ТекущийКаталог = СокрЛП(ВыбКаталог.Наименование)+"\"+ТекущийКаталог;
	ВыбКаталог = ВыбКаталог.Родитель;	
	КонецЦикла;
Возврат(Константы.КаталогДокументовИПрограмм.Получить()+ТекущийКаталог);
КонецФункции

Функция ПолучитьТекущийКаталогДоп(ВыбРодитель,ТекущийКаталог = "") Экспорт
ВыбКаталог = ВыбРодитель.Ссылка;	
	Пока Не ВыбКаталог.Пустая()  Цикл
	ТекущийКаталог = СокрЛП(ВыбКаталог.Наименование)+"\"+ТекущийКаталог;
	ВыбКаталог = ВыбКаталог.Родитель;	
	КонецЦикла;
Возврат(Константы.КаталогДокументовИПрограммДоп.Получить()+ТекущийКаталог);
КонецФункции

Функция ПолучитьТекущийКаталогПроектныхДокументов(ВыбРодитель,ТекущийКаталог = "") Экспорт
ВыбКаталог = ВыбРодитель.Ссылка;	
	Пока Не ВыбКаталог.Пустая()  Цикл
	ТекущийКаталог = СокрЛП(ВыбКаталог.Наименование)+"\"+ТекущийКаталог;
	ВыбКаталог = ВыбКаталог.Родитель;	
	КонецЦикла;
Возврат(Константы.КаталогПроектныхДокументов.Получить()+ТекущийКаталог);
КонецФункции	

Функция ПолучитьБазовоеКоличество(Количество,ОсновнаяЕдиницаИзмерения) Экспорт
Коэффициент = ?(ОсновнаяЕдиницаИзмерения.Коэффициент = 0, 1, ОсновнаяЕдиницаИзмерения.Коэффициент);
Возврат(Окр(Количество*Коэффициент,3,1));
КонецФункции

Функция ПолучитьБазовоеКоличествоБезОкругления(Количество,ОсновнаяЕдиницаИзмерения) Экспорт
Коэффициент = ?(ОсновнаяЕдиницаИзмерения.Коэффициент = 0, 1, ОсновнаяЕдиницаИзмерения.Коэффициент);
Возврат(Количество*Коэффициент);	
КонецФункции

Функция ПолучитьБазовуюЦену(Цена,ОсновнаяЕдиницаИзмерения) Экспорт
Коэффициент = ?(ОсновнаяЕдиницаИзмерения.Коэффициент = 0, 1, ОсновнаяЕдиницаИзмерения.Коэффициент);
Возврат(Окр(Цена/Коэффициент,5,1));	
КонецФункции

Функция ПолучитьОсновнуюЕдиницуИзмеренияПоБазовой(МПЗ) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеЕдиницыИзмерений.Ссылка
	|ИЗ
	|	Справочник.ОсновныеЕдиницыИзмерений КАК ОсновныеЕдиницыИзмерений
	|ГДЕ
	|	ОсновныеЕдиницыИзмерений.Владелец = &Владелец
	|	И ОсновныеЕдиницыИзмерений.ЕдиницаИзмерения = &ЕдиницаИзмерения
	|	И ОсновныеЕдиницыИзмерений.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("Владелец", МПЗ);
Запрос.УстановитьПараметр("ЕдиницаИзмерения", МПЗ.ЕдиницаИзмерения);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
Возврат(МПЗ.ОсновнаяЕдиницаИзмерения);	
КонецФункции

Функция ПолучитьПрефиксЭтапаПроизводства(РодительСпецификации) Экспорт
ТекРодитель = РодительСпецификации;	
	Пока Не ТекРодитель.Пустая() Цикл
		Если ЗначениеЗаполнено(ТекРодитель.Префикс) Тогда
		Возврат(СокрЛП(ТекРодитель.Префикс));	
		КонецЕсли;
	ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
Возврат("");	
КонецФункции

Функция ПолучитьГруппуЭтапаПроизводства(РодительСпецификации) Экспорт
ТекРодитель = РодительСпецификации;	
	Пока Не ТекРодитель.Пустая() Цикл
		Если ЗначениеЗаполнено(ТекРодитель.Префикс) Тогда
		Возврат(ТекРодитель);	
		КонецЕсли;
	ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
Возврат(Справочники.Номенклатура.ПустаяСсылка());	
КонецФункции

Функция ПолучитьСтатус(ВыбМПЗ,ВыбДата = Неопределено) Экспорт
	Если ВыбДата = Неопределено Тогда
	ВыбДата = ТекущаяДата();	
	КонецЕсли; 
Возврат(РегистрыСведений.СтатусыМПЗ.ПолучитьПоследнее(ВыбДата,Новый Структура("МПЗ",ВыбМПЗ)).Статус);  
КонецФункции

Функция ПолучитьВерхнегоРодителя(ВыбМПЗ) Экспорт
ВыбРодитель = ВыбМПЗ;	
	Пока Не ВыбРодитель.Родитель.Пустая() Цикл
	ВыбРодитель = ВыбРодитель.Родитель;	
	КонецЦикла;
Возврат(ВыбРодитель);
КонецФункции

Функция ПолучитьНаименованиеВерхнегоРодителя(ВыбМПЗ) Экспорт
	Если ТипЗнч(ВыбМПЗ) = Тип("Null") Тогда
	Возврат("Пустая запись");
	КонецЕсли; 	
ВыбРодитель = ВыбМПЗ;	
	Пока Не ВыбРодитель.Родитель.Пустая() Цикл
	ВыбРодитель = ВыбРодитель.Родитель;	
	КонецЦикла;
Возврат(ВыбРодитель.Наименование);
КонецФункции

Функция глНаименованиеВСкобкахБезЭтапа(ВыбНаименование) Экспорт
ТекНаим = ВыбНаименование;
	Если Найти(ТекНаим,"(") > 0 Тогда
	ТекНаим = СокрЛП(Сред(ТекНаим,Найти(ТекНаим,"(")+1));
	ТекНаим = Лев(ТекНаим,СтрДлина(ТекНаим)-1);
	КонецЕсли;
ТекПоз = Найти(ТекНаим,"-");
	Если (ТекПоз = 3)или(ТекПоз = 4) Тогда
	ТекНаим = Сред(ТекНаим,Найти(ТекНаим,"-")+1);	
	КонецЕсли;
Возврат(ТекНаим);	
КонецФункции

Функция глНовыйMACАдрес(Нумератор,КоличествоMACАдресов) Экспорт
КолMAC = ?(КоличествоMACАдресов = 0,1,КоличествоMACАдресов);
НумераторMAC = Нумератор.ПолучитьОбъект(); 
	Если НумераторMAC.Коэффициент = -1 Тогда
		Если Нумератор.СледующийНомер+(Нумератор.Коэффициент*КолMAC) > Нумератор.ОграничительАдресации Тогда
		x = НумераторMAC.СледующийНомер;
		Стр = "";
			Для к = 1 по 6 Цикл
			x1 = x%16;
				Если x1 < 10 Тогда
				Стр = Строка(x1) + Стр;
				ИначеЕсли x1 = 10 Тогда
				Стр = "A" + Стр;
				ИначеЕсли x1 = 11 Тогда
				Стр = "B" + Стр;
				ИначеЕсли x1 = 12 Тогда
				Стр = "C" + Стр;
				ИначеЕсли x1 = 13 Тогда
				Стр = "D" + Стр;
				ИначеЕсли x1 = 14 Тогда
				Стр = "E" + Стр;
				ИначеЕсли x1 = 15 Тогда
				Стр = "F" + Стр;		
				КонецЕсли;                                             
			x = Цел(x/16);	
			КонецЦикла; 
		НумераторMAC.СледующийНомер = НумераторMAC.СледующийНомер+(НумераторMAC.Коэффициент*КолMAC);
		НумераторMAC.Записать();
		Возврат(НумераторMAC.ПостояннаяЧасть + Стр);
		Иначе
		Сообщить("Нумератор МАС-адреса достиг ограничения нумерации!
		         |Обратитесь к администратору базы!");
		Возврат(Неопределено);
		КонецЕсли;
	Иначе
		Если Нумератор.СледующийНомер+(Нумератор.Коэффициент*КолMAC) <= Нумератор.ОграничительАдресации Тогда 
		x = НумераторMAC.СледующийНомер;
		Стр = "";
			Для к = 1 по 6 Цикл
			x1 = x%16;
				Если x1 < 10 Тогда
				Стр = Строка(x1) + Стр;
				ИначеЕсли x1 = 10 Тогда
				Стр = "A" + Стр;
				ИначеЕсли x1 = 11 Тогда
				Стр = "B" + Стр;
				ИначеЕсли x1 = 12 Тогда
				Стр = "C" + Стр;
				ИначеЕсли x1 = 13 Тогда
				Стр = "D" + Стр;
				ИначеЕсли x1 = 14 Тогда
				Стр = "E" + Стр;
				ИначеЕсли x1 = 15 Тогда
				Стр = "F" + Стр;		
				КонецЕсли;                                             
			x = Цел(x/16);	
			КонецЦикла; 
		НумераторMAC.СледующийНомер = НумераторMAC.СледующийНомер+(НумераторMAC.Коэффициент*КолMAC);
		НумераторMAC.Записать();
		Возврат(НумераторMAC.ПостояннаяЧасть + Стр);
		Иначе
		Сообщить("Нумератор МАС-адреса достиг ограничения нумерации!
		         |Обратитесь к администратору базы!");
		Возврат(Неопределено);
		КонецЕсли;
	КонецЕсли;	
КонецФункции  

Функция MACАдресНаПечать(MAC) Экспорт
Возврат(Сред(MAC,1,2)+":"+Сред(MAC,3,2)+":"+Сред(MAC,5,2)+":"+Сред(MAC,7,2)+":"+Сред(MAC,9,2)+":"+Сред(MAC,11,2));
КонецФункции

Функция ПолучитьРазделПоЕСКД(РодительСпецификации) Экспорт
ТекРодитель = РодительСпецификации;	
	Пока Не ТекРодитель.Пустая() Цикл
		Если ЗначениеЗаполнено(ТекРодитель.РазделПоЕСКД) Тогда
		Возврат(ТекРодитель.РазделПоЕСКД);	
		КонецЕсли;
	ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
Возврат("");	
КонецФункции
 
Процедура глДобавитьРеквизит(Стр, Предлог = "", Реквизит) Экспорт
	Если ЗначениеЗаполнено(Реквизит) Тогда
	Стр = Стр + Предлог + СокрЛП(Реквизит);
	КонецЕсли;
КонецПроцедуры

Процедура глПлатежныеРеквизиты(Счет, СтрОрганизация="", СтрБанк="", РасчСчет="", БИК="", КоррСчет="") Экспорт
СтрОрганизация = "";
СтрБанк = "";
	Если ТипЗнч(Счет)=Тип("СправочникСсылка.РасчетныеСчета") Тогда
	глДобавитьРеквизит(СтрОрганизация, "ИНН ", Счет.Владелец.ИНН);
		Если Не ЗначениеЗаполнено(Счет.Владелец.ПолнНаименование) Тогда
		глДобавитьРеквизит(СтрОрганизация, " ", Счет.Владелец.Наименование);
		Иначе
		глДобавитьРеквизит(СтрОрганизация, " ", Счет.Владелец.ПолнНаименование);
		КонецЕсли;
	Иначе
	глДобавитьРеквизит(СтрОрганизация, "ИНН ", Константы.ИННОрганизации.Получить());
	глДобавитьРеквизит(СтрОрганизация, " ", Константы.НазваниеОрганизации.Получить());
	КонецЕсли;
		Если Не Счет.БанкДляРасчетов.Пустая() Тогда
			Если ЗначениеЗаполнено(Счет.БанкОрганизации.КоррСчет) Тогда
			глДобавитьРеквизит(СтрОрганизация, " р/с ", Счет.Номер);
			РасчСчет = Счет.БанкОрганизации.КоррСчет;
			Иначе
			РасчСчет = Счет.Номер;
			КонецЕсли;
		глДобавитьРеквизит(СтрОрганизация, " в ", Счет.БанкОрганизации.Наименование);
		глДобавитьРеквизит(СтрОрганизация, " ", Счет.БанкОрганизации.Местонахождение);

		глДобавитьРеквизит(СтрБанк, "", Счет.БанкДляРасчетов.Наименование);
		глДобавитьРеквизит(СтрБанк, " ", Счет.БанкДляРасчетов.Местонахождение);
		БИК = Счет.БанкДляРасчетов.Код;
		КоррСчет = Счет.БанкДляРасчетов.КоррСчет;			
		Иначе
		РасчСчет = Счет.Номер;
		глДобавитьРеквизит(СтрБанк, "", Счет.БанкОрганизации.Наименование);
		глДобавитьРеквизит(СтрБанк, " ", Счет.БанкОрганизации.Местонахождение);
		БИК = Счет.БанкОрганизации.Код;
		КоррСчет = Счет.БанкОрганизации.КоррСчет;
		КонецЕсли;
    		Если ЗначениеЗаполнено(Счет.Корреспондент) Тогда
			СтрОрганизация=Счет.Корреспондент;
			КонецЕсли;	
КонецПроцедуры

Функция ПолучитьЗначениеПериодическойКонстанты(Наименование,НаДату) Экспорт
ПериодическиеКонстанты = РегистрыСведений.ПериодическиеКонстанты.ПолучитьПоследнее(НаДату,Новый Структура("ПериодическаяКонстанта",Перечисления.ПериодическиеКонстанты[Наименование]));
Возврат(ПериодическиеКонстанты.ЗначениеКонстанты);
КонецФункции

Функция УдалитьПробелы(Стр) Экспорт
Возврат(СокрЛП(Стр));
КонецФункции

Функция ПолучитьСуммуПоСтрокеПоступления(Регистратор,НомерСтроки) Экспорт
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеМПЗ") Тогда	
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеМПЗТабличнаяЧасть.Сумма
		|ИЗ
		|	Документ.ПоступлениеМПЗ.ТабличнаяЧасть КАК ПоступлениеМПЗТабличнаяЧасть
		|ГДЕ
		|	ПоступлениеМПЗТабличнаяЧасть.Ссылка = &Ссылка
		|	И ПоступлениеМПЗТабличнаяЧасть.НомерСтроки = &НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	Запрос.УстановитьПараметр("НомерСтроки", НомерСтроки);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат(ВыборкаДетальныеЗаписи.Сумма);
		КонецЦикла;
	КонецЕсли; 
Возврат(0);
КонецФункции

Функция ПолучитьВсегоПоПоступлению(Регистратор) Экспорт
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеМПЗ") Тогда	
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПоступлениеМПЗТабличнаяЧасть.Всего КАК Всего,
		|	ПоступлениеМПЗТабличнаяЧасть.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ПоступлениеМПЗ.ТабличнаяЧасть КАК ПоступлениеМПЗТабличнаяЧасть
		|ГДЕ
		|	ПоступлениеМПЗТабличнаяЧасть.Ссылка = &Ссылка
		|ИТОГИ
		|	СУММА(Всего)
		|ПО
		|	Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Регистратор);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат(ВыборкаДетальныеЗаписи.Всего);
		КонецЦикла;
	КонецЕсли; 
Возврат(0);
КонецФункции

Функция ПолучитьВнутреннийКод(Ссылка) Экспорт
Возврат(ЗначениеВСтрокуВнутр(Ссылка));
КонецФункции

Функция ПолучитьСписокСотрудниковОборудования(Оборудование) Экспорт
Запрос = Новый Запрос;
СписокСотрудников = Новый СписокЗначений;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТехОснасткаСотрудники.Сотрудник
	|ИЗ
	|	Справочник.ТехОснастка.Сотрудники КАК ТехОснасткаСотрудники
	|ГДЕ
	|	ТехОснасткаСотрудники.Ссылка = &Ссылка";
Запрос.УстановитьПараметр("Ссылка", Оборудование);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокСотрудников.Добавить(ВыборкаДетальныеЗаписи.Сотрудник);
	КонецЦикла;
Возврат(СписокСотрудников);
КонецФункции

Функция ПолучитьРазностьДатДокументов(Регистратор) Экспорт
	Если ТипЗнч(Регистратор) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	Возврат(Формат(Регистратор.ДатаИсполнения,"ДФ=dd.MM.yyyy"));
	ИначеЕсли(ТипЗнч(Регистратор) = Тип("ДокументСсылка.ПоступлениеМПЗ"))Тогда
	РазностьДат = КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(Константы.ОсновнойПроизводственныйКалендарь.Получить(),Регистратор.ДокументОснование.ДатаИсполнения,Регистратор.Дата);
		Если НачалоДня(Регистратор.Дата) <= Регистратор.ДокументОснование.ДатаИсполнения Тогда
		РазностьДат = -1*(РазностьДат-1);	
		КонецЕсли; 
	Возврат(РазностьДат);
	Иначе
	Возврат("");
	КонецЕсли;
КонецФункции

Функция ПолучитьДатуОтгрузкиПоЗаявкеОтПокупателя(ЗаявкаОтПокупателя,МПЗ) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РеализацияТабличнаяЧасть.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.Реализация.ТабличнаяЧасть КАК РеализацияТабличнаяЧасть
	|ГДЕ
	|	РеализацияТабличнаяЧасть.Ссылка.ДокументОснование = &ДокументОснование
	|	И РеализацияТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТабличнаяЧасть.Товар = &Товар
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";	
Запрос.УстановитьПараметр("ДокументОснование", ЗаявкаОтПокупателя);
Запрос.УстановитьПараметр("Товар", МПЗ);	
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Дата);
	КонецЦикла;
Возврат("");
КонецФункции

Функция ПолучитьМассивИменПараметров(ОбластьТабДокумента) Экспорт
МассивИменПараметров = Новый Массив;

	Для НомерСтроки = 1 По ОбластьТабДокумента.ВысотаТаблицы Цикл
    	Для НомерКолонки = 1 По ОбластьТабДокумента.ШиринаТаблицы Цикл
        Ячейка = ОбластьТабДокумента.Область(НомерСтроки, НомерКолонки, НомерСтроки, НомерКолонки);
        	Если Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
            //если такого параметра еще нет, то добавим его
                Если МассивИменПараметров.Найти(Ячейка.Параметр) = Неопределено Тогда
                МассивИменПараметров.Добавить(Ячейка.Параметр);
                КонецЕсли;
            ИначеЕсли Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
            //выделим все параметры в шаблоне в отдельные строки
            ТекстШаблона = Ячейка.Текст;
            ТекстШаблона = СтрЗаменить(ТекстШаблона, "[", Символы.ПС + "[");
            ТекстШаблона = СтрЗаменить(ТекстШаблона, "]", Символы.ПС);
                Для Счетчик = 1 По СтрЧислоСтрок(ТекстШаблона) Цикл
                ТекСтрока = СтрПолучитьСтроку(ТекстШаблона, Счетчик);
                    Если Лев(ТекСтрока, 1) = "[" тогда
                    ИмяПараметра = Сред(ТекСтрока, 2);
                    //если такого параметра еще нет, то добавим его
                        Если МассивИменПараметров.Найти(ИмяПараметра) = Неопределено Тогда
                        МассивИменПараметров.Добавить(ИмяПараметра);
                        КонецЕсли;
                    КонецЕсли;
                КонецЦикла; 
            КонецЕсли;
        КонецЦикла;
    КонецЦикла;
		Для к = 0 по ОбластьТабДокумента.Рисунки.Количество()-1 Цикл
		Ячейка = ОбластьТабДокумента.Рисунки[к];
			Попытка 
	       		Если Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Параметр Тогда
	            //если такого параметра еще нет, то добавим его
	                Если МассивИменПараметров.Найти(Ячейка.Параметр) = Неопределено Тогда
	                МассивИменПараметров.Добавить(Ячейка.Параметр);
	                КонецЕсли;
	            ИначеЕсли Ячейка.Заполнение = ТипЗаполненияОбластиТабличногоДокумента.Шаблон Тогда
	            //выделим все параметры в шаблоне в отдельные строки
	            ТекстШаблона = Ячейка.Текст;
	            ТекстШаблона = СтрЗаменить(ТекстШаблона, "[", Символы.ПС + "[");
	            ТекстШаблона = СтрЗаменить(ТекстШаблона, "]", Символы.ПС);
	                Для Счетчик = 1 По СтрЧислоСтрок(ТекстШаблона) Цикл
	                ТекСтрока = СтрПолучитьСтроку(ТекстШаблона, Счетчик);
	                    Если Лев(ТекСтрока, 1) = "[" тогда
	                    ИмяПараметра = Сред(ТекСтрока, 2);
	                    //если такого параметра еще нет, то добавим его
	                        Если МассивИменПараметров.Найти(ИмяПараметра) = Неопределено Тогда
	                        МассивИменПараметров.Добавить(ИмяПараметра);
	                        КонецЕсли;
	                    КонецЕсли;
	                КонецЦикла; 
	            КонецЕсли;
			Исключение
			
			КонецПопытки;
		КонецЦикла;
Возврат МассивИменПараметров;
КонецФункции
  
Функция ПодсчитатьДатуВыполненияЗНП(ЗНП) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказыНаПроизводствоОстаткиИОбороты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводство.ОстаткиИОбороты(, , Регистратор, , Документ = &Док) КАК ЗаказыНаПроизводствоОстаткиИОбороты";
Запрос.УстановитьПараметр("Док", ЗНП);
РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	Возврат(ЗНП.Дата);
	КонецЕсли;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыНаПроизводствоОстаткиИОбороты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводство.ОстаткиИОбороты(, , Регистратор, , Документ = &Док) КАК ЗаказыНаПроизводствоОстаткиИОбороты
	|ГДЕ
	|	ЗаказыНаПроизводствоОстаткиИОбороты.КоличествоКонечныйОстаток = 0";
Запрос.УстановитьПараметр("Док", ЗНП);
РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РезервированиеГПОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.РезервированиеГП.Обороты(, , Регистратор, Документ = &Док) КАК РезервированиеГПОбороты
		|ГДЕ
		|	РезервированиеГПОбороты.КоличествоПриход > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	Запрос.УстановитьПараметр("Док", ЗНП);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат(ВыборкаДетальныеЗаписи.Период);
		КонецЦикла;		
	КонецЕсли; 
Возврат("");
КонецФункции 

Функция ПодсчитатьДатуВыполненияПродукцииЗНП(ЗНП,Продукция) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РезервированиеГПОбороты.Период КАК Период
	|ИЗ
	|	РегистрНакопления.РезервированиеГП.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			Документ = &Док
	|				И Продукция = &Продукция) КАК РезервированиеГПОбороты
	|ГДЕ
	|	РезервированиеГПОбороты.КоличествоПриход > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период УБЫВ";
Запрос.УстановитьПараметр("Док", ЗНП);
Запрос.УстановитьПараметр("Продукция", Продукция);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Период);
	КонецЦикла;
Возврат("");
КонецФункции

Функция ПолучитьПредставлениеОрганизации() Экспорт
Возврат(СокрЛП(Константы.НазваниеОрганизации.Получить())+", ИНН "+СокрЛП(Константы.ИННОрганизации.Получить())+", "+СокрЛП(Константы.АдресОрганизации.Получить())+", р/с "+СокрЛП(Константы.ОсновнойБанковскийСчёт.Получить().Номер)+", в банке "+СокрЛП(Константы.ОсновнойБанковскийСчёт.Получить().БанкОрганизации.Наименование)+", БИК "+СокрЛП(Константы.ОсновнойБанковскийСчёт.Получить().БанкОрганизации.Код)+", к/с "+СокрЛП(Константы.ОсновнойБанковскийСчёт.Получить().БанкОрганизации.КоррСчет));
КонецФункции
 
Функция ПолучитьОбщийОстатокВРезерве(МестоХранения,Продукция) Экспорт
Фильтр   = Новый Структура;

Фильтр.Вставить("МестоХранения",МестоХранения);
Фильтр.Вставить("Продукция", Продукция);
ТабОстатков = РегистрыНакопления.РезервированиеГП.Остатки(ТекущаяДата(),Фильтр);
КоличествоОстаток = 0;
	Если ТабОстатков.Количество() > 0 Тогда
		Для к = 0 По ТабОстатков.Количество()-1 Цикл
		КоличествоОстаток = КоличествоОстаток + ТабОстатков[к].Количество;
		КонецЦикла;	
	КонецЕсли;
Возврат(КоличествоОстаток);
КонецФункции

Функция ОбщПолучитьКоличествоВПроизводстве(ЗНП,Продукция) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПланыВыпускаОстатки.Номенклатура КАК Номенклатура,
	|	СУММА(ПланыВыпускаОстатки.КоличествоОстаток) КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ПланыВыпуска.Остатки КАК ПланыВыпускаОстатки
	|ГДЕ
	|	ПланыВыпускаОстатки.МаршрутнаяКарта.ДокументОснование = &ДокументОснование
	|	И ПланыВыпускаОстатки.Номенклатура = &Номенклатура
	|
	|СГРУППИРОВАТЬ ПО
	|	ПланыВыпускаОстатки.Номенклатура";
Запрос.УстановитьПараметр("ДокументОснование", ЗНП);
Запрос.УстановитьПараметр("Номенклатура", Продукция);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.КоличествоОстаток);
	КонецЦикла;
Возврат(0);
КонецФункции 

Функция ОбщПолучитьКоличествоГотовоКОтгрузке(ЗНП,Продукция) Экспорт
Количество = 0;
	Если Продукция <> Неопределено Тогда
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезервированиеГПОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.РезервированиеГП.Остатки КАК РезервированиеГПОстатки
		|ГДЕ
		|	РезервированиеГПОстатки.Документ = &Документ
		|	И РезервированиеГПОстатки.МестоХранения = &МестоХранения
		|	И РезервированиеГПОстатки.Продукция = &Продукция";
	Запрос.УстановитьПараметр("Документ", ЗНП);
	Запрос.УстановитьПараметр("Продукция", Продукция);
		Если ТипЗнч(Продукция) = Тип("СправочникСсылка.Номенклатура") Тогда
		Запрос.УстановитьПараметр("МестоХранения", Продукция.Линейка.МестоХраненияГП);		
		Иначе	
		Запрос.УстановитьПараметр("МестоХранения", Константы.МестоХраненияТНП.Получить());		
		КонецЕсли;
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Количество = Количество + ВыборкаДетальныеЗаписи.КоличествоОстаток;
		КонецЦикла;
	КонецЕсли; 
Возврат(Количество);
КонецФункции 

Функция ОбщПолучитьКоличествоДолг(ЗНП,Продукция,КоличествоВЗаказе) Экспорт
	Если Не ЗначениеЗаполнено(Продукция) Тогда
	Возврат(0);
	КонецЕсли; 
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолгиОстатки.Продукция КАК Продукция,
	|	ДолгиОстатки.Документ КАК Документ,
	|	ДолгиОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.Долги.Остатки(&НаДату, ) КАК ДолгиОстатки
	|ГДЕ
	|	ДолгиОстатки.Документ = &Документ
	|	И ДолгиОстатки.Продукция = &Продукция";
Запрос.УстановитьПараметр("НаДату",ТекущаяДата());
Запрос.УстановитьПараметр("Документ", ЗНП);
Запрос.УстановитьПараметр("Продукция", Продукция);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(КоличествоВЗаказе-ВыборкаДетальныеЗаписи.КоличествоОстаток);
	КонецЦикла;
Возврат(КоличествоВЗаказе);
КонецФункции 

Функция ОбщПолучитьКоличествоДолгПоТовару(ЗНП,Товар,НаДату) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолгиОстатки.Продукция.Товар КАК Товар,
	|	ДолгиОстатки.Документ КАК Документ,
	|	ДолгиОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.Долги.Остатки(&НаДату, ) КАК ДолгиОстатки
	|ГДЕ
	|	ДолгиОстатки.Документ = &Документ
	|	И ДолгиОстатки.Продукция.Товар = &Товар";
Запрос.УстановитьПараметр("НаДату",НаДату);
Запрос.УстановитьПараметр("Документ", ЗНП);
Запрос.УстановитьПараметр("Товар", Товар);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.КоличествоОстаток);
	КонецЦикла;
Возврат(0);
КонецФункции 

Функция ОбщПолучитьКоличество(ЗНП,Продукция,Статус) Экспорт
	Если Статус = 1 Тогда
	СтатусНС = Перечисления.СтатусыНакладнойНаСборку.НаСборке;
	ИначеЕсли Статус = 2 Тогда
	СтатусНС = Перечисления.СтатусыНакладнойНаСборку.Собран;		
	ИначеЕсли Статус = 3 Тогда
	СтатусНС = Перечисления.СтатусыНакладнойНаСборку.НаУпаковке;	
	КонецЕсли; 
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НакладнаяНаСборкуТабличнаяЧасть.Количество КАК Количество
	|ИЗ
	|	РегистрСведений.СтатусыНакладныхНаСборку.СрезПоследних(, ) КАК СтатусыНакладныхНаСборкуСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.НакладнаяНаСборку.ТабличнаяЧасть КАК НакладнаяНаСборкуТабличнаяЧасть
	|		ПО СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку = НакладнаяНаСборкуТабличнаяЧасть.Ссылка
	|ГДЕ
	|	НакладнаяНаСборкуТабличнаяЧасть.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|	И НакладнаяНаСборкуТабличнаяЧасть.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И НакладнаяНаСборкуТабличнаяЧасть.Продукция = &Продукция
	|	И СтатусыНакладныхНаСборкуСрезПоследних.Статус = &Статус";
Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗНП);
Запрос.УстановитьПараметр("Продукция", Продукция);
Запрос.УстановитьПараметр("Статус", СтатусНС);
РезультатЗапроса = Запрос.Выполнить();
Количество = 0;
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Количество = Количество + ВыборкаДетальныеЗаписи.Количество;
	КонецЦикла;
Возврат(Количество);
КонецФункции

Функция ОбщПолучитьДатуОтгрузки(ЗНП,СрокПоставки) Экспорт
Возврат(Формат(КалендарныеГрафики.ПолучитьДатуПоКалендарю(Константы.ОсновнойПроизводственныйКалендарь.Получить(),ЗНП.Дата,СрокПоставки),"ДФ=dd.MM.yyyy"));
КонецФункции

Функция ПолучитьКоличествоСтрокВДокументе(Документ) Экспорт
Возврат(Документ.ТабличнаяЧасть.Количество());
КонецФункции 

Функция ПолучитьДатуЗапуска(ПЗ) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПередачаВПроизводство.Дата КАК Дата
	|ИЗ
	|	Документ.ПередачаВПроизводство КАК ПередачаВПроизводство
	|ГДЕ
	|	ПередачаВПроизводство.ДокументОснование = &ДокументОснование";
	Если ПЗ.Изделие.Канбан.Пустая() Тогда
	Запрос.УстановитьПараметр("ДокументОснование", ПЗ);	
	Иначе	
	Запрос.УстановитьПараметр("ДокументОснование", ПЗ.ДокументОснование);	
	КонецЕсли;
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Дата);
	КонецЦикла;
Возврат(Дата(1,1,1));
КонецФункции

Функция ЭтоКрупныйЗаказ(ЗНП) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказНаПроизводствоЗаказ.Товар КАК Товар
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Заказ КАК ЗаказНаПроизводствоЗаказ
	|ГДЕ
	|	ЗаказНаПроизводствоЗаказ.Ссылка = &Ссылка
	|	И ЗаказНаПроизводствоЗаказ.КрупныйЗаказ = ИСТИНА";
Запрос.УстановитьПараметр("Ссылка", ЗНП);
РезультатЗапроса = Запрос.Выполнить();
Возврат(?(РезультатЗапроса.Пустой(),"","*"));
КонецФункции

Функция ПолучитьДатуПоследнегоПоступления(МПЗ,МестоХранения) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ПоступлениеМПЗТабличнаяЧасть.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.ПоступлениеМПЗ.ТабличнаяЧасть КАК ПоступлениеМПЗТабличнаяЧасть
	|ГДЕ
	|	ПоступлениеМПЗТабличнаяЧасть.Ссылка.МестоХранения = &МестоХранения
	|	И ПоступлениеМПЗТабличнаяЧасть.МПЗ = &МПЗ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Дата УБЫВ";
Запрос.УстановитьПараметр("МестоХранения", МестоХранения);	
Запрос.УстановитьПараметр("МПЗ", МПЗ);	
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Дата);
	КонецЦикла;
Возврат(Дата(1,1,1));
КонецФункции

Функция ПолучитьПолныйКод(МПЗ) Экспорт
ПолныйКод = СтрЗаменить(МПЗ.ПолныйКод(),"/","-");
ПолныйКод = СокрЛП(СтрЗаменить(ПолныйКод,Символы.НПП,""));
Возврат(ПолныйКод);
КонецФункции

Функция ОбщПолучитьЯчейкуКомплектацииПоМестуХранения(МестоХранения,МПЗ,НаДату) Экспорт
ЯК = РегистрыСведений.ЯчейкиКомплектации.ПолучитьПоследнее(НаДату,Новый Структура("МПЗ,МестоХранения",МПЗ,МестоХранения));
Возврат("Ячеек: "+ЯК.КоличествоЯчеек+", в ячейке: "+ЯК.КоличествоВЯчейке);
КонецФункции

Функция ОбщПолучитьКоличествоЗоны(ННС,ЗонаКомплектации) Экспорт
Запрос = Новый Запрос;

	Если ЗонаКомплектации = Перечисления.ЗоныКомплектации.ТНП Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НакладнаяНаСборкуТабличнаяЧасть.Продукция КАК Продукция,
		|	НакладнаяНаСборкуТабличнаяЧасть.Количество КАК Количество
		|ИЗ
		|	Документ.НакладнаяНаСборку.ТабличнаяЧасть КАК НакладнаяНаСборкуТабличнаяЧасть
		|ГДЕ
		|	НакладнаяНаСборкуТабличнаяЧасть.Ссылка = &Ссылка
		|	И (ТИПЗНАЧЕНИЯ(НакладнаяНаСборкуТабличнаяЧасть.Продукция) = ТИП(Справочник.Материалы)
		|			ИЛИ НакладнаяНаСборкуТабличнаяЧасть.Продукция.Линейка.ЗонаКомплектации = &ЗонаКомплектации)
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Продукция";	
	Иначе	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НакладнаяНаСборкуТабличнаяЧасть.Продукция КАК Продукция,
		|	НакладнаяНаСборкуТабличнаяЧасть.Количество КАК Количество
		|ИЗ
		|	Документ.НакладнаяНаСборку.ТабличнаяЧасть КАК НакладнаяНаСборкуТабличнаяЧасть
		|ГДЕ
		|	НакладнаяНаСборкуТабличнаяЧасть.Ссылка = &Ссылка
		|	И НакладнаяНаСборкуТабличнаяЧасть.Продукция.Линейка.ЗонаКомплектации = &ЗонаКомплектации
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	Продукция";	
	КонецЕсли; 
Запрос.УстановитьПараметр("Ссылка", ННС);
Запрос.УстановитьПараметр("ЗонаКомплектации", ЗонаКомплектации);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
Количество = 0;
	Пока ВыборкаПродукция.Следующий() Цикл	
	Количество = Количество + ВыборкаПродукция.Количество;
	КонецЦикла;
Возврат(Количество);
КонецФункции

Функция ПолучитьКоличествоМесяцевВПериоде(Период) Экспорт
КоличествоМесяцев = 1;
ТекДата = НачалоДня(Период.ДатаНачала) + 86400;
	Пока ТекДата <= Период.ДатаОкончания Цикл
		Если День(ТекДата) = 1 Тогда
		КоличествоМесяцев = КоличествоМесяцев + 1;
		КонецЕсли; 
	ТекДата = ТекДата + 86400; 
	КонецЦикла;
Возврат(КоличествоМесяцев); 
КонецФункции

Функция ПолучитьКоличествоЛетВПериоде(Период) Экспорт
КоличествоЛет = 1;
ТекДата = НачалоДня(Период.ДатаНачала) + 86400;
	Пока ТекДата <= Период.ДатаОкончания Цикл
		Если (День(ТекДата) = 1)и(Месяц(ТекДата) = 1) Тогда
		КоличествоЛет = КоличествоЛет + 1;
		КонецЕсли; 
	ТекДата = ТекДата + 86400; 
	КонецЦикла;
Возврат(КоличествоЛет); 
КонецФункции 

Функция ПрисвоитьПрефикс(Подразделение,ДатаДок = Неопределено) Экспорт
	Если ДатаДок = Неопределено Тогда
	ДатаДок = ТекущаяДата();	
	КонецЕсли;
		Если Константы.ПроверятьПризнакБазыЛинеек.Получить() Тогда
		СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
		ИмяСервераОсновнойБазы = НРег(СокрЛП(Константы.РабочийСервер.Получить())); 
		ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
		НачальнаяПозицияКопирования = 7;
		КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
		ИмяСервера = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
			Если Найти(НРег(ИмяСервера),ИмяСервераОсновнойБазы) > 0 Тогда
			Возврат(Подразделение.Префикс+Формат(ДатаДок,"ДФ=гг")+"-"); 
			Иначе
				Если ЗначениеЗаполнено(Подразделение.ПрефиксБазыЛинеек) Тогда
				Возврат(Подразделение.ПрефиксБазыЛинеек+Формат(ДатаДок,"ДФ=гг")+"-");			
				Иначе	
				Возврат(Подразделение.Префикс+Формат(ДатаДок,"ДФ=гг")+"-");			
				КонецЕсли;
			КонецЕсли;
	    Иначе
		Возврат(Подразделение.Префикс+Формат(ДатаДок,"ДФ=гг")+"-");
		КонецЕсли;
КонецФункции

Функция ОкруглитьДоБольшегоЦелого(Значение) Экспорт
Возврат(?(Значение > Цел(Значение),Цел(Значение)+1,Значение));
КонецФункции
   
Функция ОбщПолучитьКоличествоКПроизводству(ЗНП,Товар) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПроизводствоЗаказ.Продукция КАК Продукция,
	|	ЗаказНаПроизводствоЗаказ.Количество КАК Количество,
	|	ЗаказНаПроизводствоЗаказ.КоличествоВЗаказе КАК КоличествоВЗаказе
	|ИЗ
	|	Документ.ЗаказНаПроизводство.Заказ КАК ЗаказНаПроизводствоЗаказ
	|ГДЕ
	|	ЗаказНаПроизводствоЗаказ.Ссылка = &Ссылка
	|	И ЗаказНаПроизводствоЗаказ.Товар = &Товар";
Запрос.УстановитьПараметр("Ссылка",ЗНП);
Запрос.УстановитьПараметр("Товар",Товар);	
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Продукция) Тогда
		Возврат(ВыборкаДетальныеЗаписи.Количество);		
		Иначе	
		Возврат(ВыборкаДетальныеЗаписи.КоличествоВЗаказе);
		КонецЕсли; 
	КонецЦикла;
Возврат(0);
КонецФункции

Функция ПолучитьКоличествоСозданых(ЗНП,Продукция) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутнаяКарта.Номенклатура КАК Номенклатура,
	|	СУММА(МаршрутнаяКарта.Количество) КАК Количество
	|ИЗ
	|	Документ.МаршрутнаяКарта КАК МаршрутнаяКарта
	|ГДЕ
	|	МаршрутнаяКарта.ДокументОснование = &ДокументОснование
	|	И МаршрутнаяКарта.Номенклатура = &Продукция
	|
	|СГРУППИРОВАТЬ ПО
	|	МаршрутнаяКарта.Номенклатура";
Запрос.УстановитьПараметр("ДокументОснование",ЗНП);	
Запрос.УстановитьПараметр("Продукция",Продукция);	
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
    Возврат(ВыборкаДетальныеЗаписи.Количество);
	КонецЦикла;
Возврат(0);
КонецФункции                                                    

Функция ОбщПолучитьКоличествоЗарезервировано(ЗНП,Продукция) Экспорт
Запрос = Новый Запрос;
СписокМестХранения = Новый СписокЗначений;

СписокМестХранения.Добавить(Константы.МестоХраненияТНП.Получить());
СписокМестХранения.Добавить(Константы.МестоХраненияНеликвидов.Получить());
СписокМестХранения.Добавить(Константы.МестоХраненияПерепрогон.Получить());

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезервированиеГПОбороты.Продукция КАК Продукция,
	|	СУММА(РезервированиеГПОбороты.КоличествоПриход) КАК КоличествоПриход
	|ИЗ
	|	РегистрНакопления.РезервированиеГП.Обороты КАК РезервированиеГПОбороты
	|ГДЕ
	|	РезервированиеГПОбороты.Документ = &Документ
	|	И РезервированиеГПОбороты.Продукция = &Продукция
	|	И РезервированиеГПОбороты.МестоХранения В(&СписокМестХранения)
	|	И РезервированиеГПОбороты.КоличествоПриход > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	РезервированиеГПОбороты.Продукция";
Запрос.УстановитьПараметр("Документ", ЗНП);
Запрос.УстановитьПараметр("Продукция", Продукция);
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.КоличествоПриход);
	КонецЦикла;
Возврат(0);
КонецФункции
 
Функция ОбщПолучитьКоличествоНеВыполненных(ЗНП,Товар,Продукция) Экспорт
	Если Не ЗначениеЗаполнено(Продукция) Тогда
	Возврат(ОбщПолучитьКоличествоКПроизводству(ЗНП,Товар));
	ИначеЕсли ТипЗнч(Продукция) = Тип("СправочникСсылка.Номенклатура") Тогда
	Возврат(ОбщПолучитьКоличествоВПроизводстве(ЗНП,Продукция)+(ОбщПолучитьКоличествоКПроизводству(ЗНП,Товар)-ПолучитьКоличествоСозданых(ЗНП,Продукция)));
	Иначе	
	Возврат(ОбщПолучитьКоличествоКПроизводству(ЗНП,Товар)-ОбщПолучитьКоличествоЗарезервировано(ЗНП,Продукция));
	КонецЕсли;	
КонецФункции

Функция ОбщСокрЛП(Элемент) Экспорт
Возврат(СокрЛП(Элемент.Наименование));
КонецФункции
