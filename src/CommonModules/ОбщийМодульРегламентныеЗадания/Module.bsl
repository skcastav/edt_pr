
#Область ВспомогательныеФункции

Функция ЭтоФоновоеЗаданиеНаТестовомСервере(Код = 0) Экспорт
// получим имя текущего сервера
СтрокаСоединения = СтрокаСоединенияИнформационнойБазы();
ПозицияПоиска = Найти(Врег(СтрокаСоединения), "SRVR=");
	Если ПозицияПоиска <> 1 Тогда
	// возможно, что база файловая
	Возврат Истина;
	КонецЕсли;
ПозицияТочкиСЗапятой = Найти(СтрокаСоединения, ";");
НачальнаяПозицияКопирования = 7;
КонечнаяПозицияКопирования = ПозицияТочкиСЗапятой - 2; 
ИмяСервера = Сред(СтрокаСоединения, НачальнаяПозицияКопирования, КонечнаяПозицияКопирования - НачальнаяПозицияКопирования + 1);
	Если СокрЛП(ВРег(ИмяСервера)) = СокрЛП(ВРег(Константы.РабочийСервер.Получить())) Тогда
	// сервер таки рабочий
	Возврат Ложь;
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(Код,"Запущено на тестовом сервере");
Возврат Истина;
КонецФункции

Процедура ЗаписатьСостояниеРегламентногоЗадания(Код,СостояниеРЗ)
СРЗ = Справочники.СостояниеРегламентныхЗаданий.НайтиПоКоду(Код);
	Если Не СРЗ.Пустая() Тогда
	СРЗОбъект = СРЗ.ПолучитьОбъект();
	СРЗОбъект.ДатаВыполнения = ТекущаяДата();
	СРЗОбъект.Комментарий = СостояниеРЗ;
	СРЗОбъект.Записать();
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаГП

Функция СоздатьРеализациюИСчётФактуру(БазаСбыта,ПоступлениеТоваровИУслуг,ОшибкиПриВыгрузкеГП)
	Попытка
	бсСклад = БазаСбыта.Справочники.Склады.НайтиПоНаименованию("СД 423",Истина);
	бсНовДок = БазаСбыта.Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	бсНовДок.Дата = ТекущаяДата();
	бсНовДок.Организация = БазаСбыта.Справочники.Организации.НайтиПоКоду("30");
	бсНовДок.Партнер = БазаСбыта.Справочники.Партнеры.НайтиПоКоду("00-00000010");
	бсНовДок.Контрагент = БазаСбыта.Справочники.Контрагенты.НайтиПоКоду("99999911267");
	бсНовДок.Склад = бсСклад;
	бсНовДок.ХозяйственнаяОперация = БазаСбыта.Перечисления.ХозяйственныеОперации.РеализацияТоваровВДругуюОрганизацию;
	бсНовДок.НалогообложениеНДС = БазаСбыта.Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	бсНовДок.БанковскийСчетОрганизации = БазаСбыта.ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(бсНовДок.Организация);
	бсНовДок.Валюта = БазаСбыта.Справочники.Валюты.НайтиПоКоду("643");
	бсНовДок.ВалютаВзаиморасчетов = БазаСбыта.Справочники.Валюты.НайтиПоКоду("643");
		Для каждого ТЧ Из ПоступлениеТоваровИУслуг.Товары Цикл
		ТЧ_Р = бсНовДок.Товары.Добавить();
		ТЧ_Р.Склад = бсСклад;	
		ТЧ_Р.Номенклатура = ТЧ.Номенклатура;
		ТЧ_Р.ИМНомерЗаказаЗаказнойТовар = ТЧ.ИМНомерЗаказаЗаказнойТовар;
		ТЧ_Р.КоличествоУпаковок = ТЧ.КоличествоУпаковок;
		ТЧ_Р.ИмКоличествоЗарегистрировано = ТЧ.ИмКоличествоЗарегистрировано;
		ТЧ_Р.Количество = ТЧ.Количество;
		ТЧ_Р.СтавкаНДС = ТЧ.СтавкаНДС;
		ТЧ_Р.Цена = ТЧ.Цена;
		ТЧ_Р.Сумма = ТЧ.Сумма;
		ТЧ_Р.СуммаНДС = ТЧ.СуммаНДС;
		ТЧ_Р.СуммаСНДС = ТЧ.СуммаСНДС;
		КонецЦикла;
			Для каждого ТЧ Из ПоступлениеТоваровИУслуг.Штрихкоды Цикл
			ТЧ_ШК = бсНовДок.Штрихкоды.Добавить();	
			ТЧ_ШК.Номенклатура = ТЧ.Номенклатура;
			ТЧ_ШК.ШК = ТЧ.ШК;
			КонецЦикла;
	бсНовДок.Записать(БазаСбыта.РежимЗаписиДокумента.Проведение);
	бсСФ = БазаСбыта.Документы.СчетФактураВыданный.СоздатьДокумент();
	бсСФ.Номер = бсНовДок.Номер;
	бсСФ.Дата = ТекущаяДата();
	бсСФ.ДокументОснование = бсНовДок.Ссылка;
	бсСФ.Организация = БазаСбыта.Справочники.Организации.НайтиПоКоду("30");
	бсСФ.КодВидаОперации = "01";
	бсСФ.ТипСчетаФактуры = БазаСбыта.Перечисления.ТипыВыданныхСчетовФактур.НаРеализацию;
	бсСФ.ДатаВыставления = ТекущаяДата();
	бсСФ.Записать(БазаСбыта.РежимЗаписиДокумента.Проведение);
	Исключение
	ОшибкиПриВыгрузкеГП = ОшибкиПриВыгрузкеГП+ОписаниеОшибки()+Символы.ПС;
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции 

Процедура ВыгрузкаВСбыт_СтараяСхема(БазаСбыта,бсНовДок,бсНомен,Кол,бсСклад,ЗНП,МТК,СписокСК,Товар)
    Если ?(ТипЗнч(ЗНП) = Тип("ДокументСсылка.ЗаказНаПроизводство"),ЗНП.СервисЦентр,Ложь) или 
		 Товар.ТоварнаяГруппа.ГрупповаяУпаковка или 
		 СписокСК.НайтиПоЗначению(МТК.СтандартныйКомментарий) <> Неопределено Тогда
	флНайдено = Ложь;
		Для каждого ТЧ Из бсНовДок.Товары Цикл
			Если (СокрЛП(ТЧ.Номенклатура.Наименование) = СокрЛП(бсНомен.Наименование))и
				 (СокрЛП(ТЧ.ИМНомерЗаказаЗаказнойТовар) = СокрЛП(МТК.Счёт)) Тогда	
			флНайдено = Истина;
			ТЧ.КоличествоУпаковок = ТЧ.КоличествоУпаковок + Кол;
			ТЧ.ИмКоличествоЗарегистрировано = ТЧ.ИмКоличествоЗарегистрировано + 1;
			ТЧ.Количество = ТЧ.Количество + Кол;					
			Прервать;
			КонецЕсли;			
		КонецЦикла; 
			Если Не флНайдено Тогда
			ТЧ = бсНовДок.Товары.Добавить();
			ТЧ.Склад = бсСклад;	
			ТЧ.Номенклатура = бсНомен;
			ТЧ.ИМНомерЗаказаЗаказнойТовар = МТК.Счёт; 
			ТЧ.КоличествоУпаковок = Кол;
			ТЧ.ИмКоличествоЗарегистрировано = 1;
			ТЧ.Количество = Кол;
			ТЧ.СтавкаНДС = бсНомен.СтавкаНДС;
			ТЧ.Цена = бсНомен.ИмЦена;
			ТЧ.Сумма = ТЧ.КоличествоУпаковок*ТЧ.Цена;
				Если БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС18) Тогда
				ТЧ.СуммаНДС = ТЧ.Сумма*0.18;
				ТЧ.СуммаСНДС = ТЧ.Сумма + ТЧ.СуммаНДС;
				ИначеЕсли БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС20) Тогда
				ТЧ.СуммаНДС = ТЧ.Сумма*0.2;
				ТЧ.СуммаСНДС = ТЧ.Сумма + ТЧ.СуммаНДС;
				Иначе	
				ТЧ.СуммаСНДС = ТЧ.Сумма;
				КонецЕсли;
			КонецЕсли;
	Иначе
	флНайдено = Ложь;
		Для каждого ТЧ Из бсНовДок.Товары Цикл
			Если (СокрЛП(ТЧ.Номенклатура.Наименование) = СокрЛП(бсНомен.Наименование))и
				 (Не ЗначениеЗаполнено(ТЧ.ИМНомерЗаказаЗаказнойТовар)) Тогда	
			флНайдено = Истина;
			ТЧ.КоличествоУпаковок = ТЧ.КоличествоУпаковок + Кол;
			ТЧ.ИмКоличествоЗарегистрировано = ТЧ.ИмКоличествоЗарегистрировано + 1;
			ТЧ.Количество = ТЧ.Количество + Кол;					
			Прервать;
			КонецЕсли;			
		КонецЦикла;					
			Если Не флНайдено Тогда
			ТЧ = бсНовДок.Товары.Добавить();
			ТЧ.Склад = бсСклад;	
			ТЧ.Номенклатура = бсНомен; 
			ТЧ.КоличествоУпаковок = Кол;
			ТЧ.ИмКоличествоЗарегистрировано = 1;
			ТЧ.Количество = Кол;
			ТЧ.СтавкаНДС = бсНомен.СтавкаНДС;
			ТЧ.Цена = бсНомен.ИмЦена;
			ТЧ.Сумма = ТЧ.КоличествоУпаковок*ТЧ.Цена;
				Если БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС18) Тогда
				ТЧ.СуммаНДС = ТЧ.Сумма*0.18;
				ТЧ.СуммаСНДС = ТЧ.Сумма + ТЧ.СуммаНДС;
				ИначеЕсли БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС20) Тогда
				ТЧ.СуммаНДС = ТЧ.Сумма*0.2;
				ТЧ.СуммаСНДС = ТЧ.Сумма + ТЧ.СуммаНДС;
				Иначе	
				ТЧ.СуммаСНДС = ТЧ.Сумма;
				КонецЕсли;
			КонецЕсли;			
	КонецЕсли;
КонецПроцедуры

Процедура ВыгрузкаВСбыт_НоваяСхема(БазаСбыта,бсНовДок,бсНомен,Кол,бсСклад,ЗНП,МТК,СписокСК,Товар)
флНайдено = Ложь;
	Для каждого ТЧ Из бсНовДок.Товары Цикл
		Если (СокрЛП(ТЧ.Номенклатура.Наименование) = СокрЛП(бсНомен.Наименование))и
			 (СокрЛП(ТЧ.ИМНомерЗаказаЗаказнойТовар) = СокрЛП(МТК.Счёт)) Тогда	
		флНайдено = Истина;
		ТЧ.КоличествоУпаковок = ТЧ.КоличествоУпаковок + Кол;
		ТЧ.ИмКоличествоЗарегистрировано = ТЧ.ИмКоличествоЗарегистрировано + 1;
		ТЧ.Количество = ТЧ.Количество + Кол;					
		Прервать;
		КонецЕсли;			
	КонецЦикла; 
		Если Не флНайдено Тогда
		ТЧ = бсНовДок.Товары.Добавить();
		ТЧ.Склад = бсСклад;	
		ТЧ.Номенклатура = бсНомен;
		ТЧ.ИМНомерЗаказаЗаказнойТовар = МТК.Счёт; 
		ТЧ.КоличествоУпаковок = Кол;
		ТЧ.ИмКоличествоЗарегистрировано = 1;
		ТЧ.Количество = Кол;
		ТЧ.СтавкаНДС = бсНомен.СтавкаНДС;
		ТЧ.Цена = бсНомен.ИмЦена;
		ТЧ.Сумма = ТЧ.КоличествоУпаковок*ТЧ.Цена;
			Если БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС18) Тогда
			ТЧ.СуммаНДС = ТЧ.Сумма*0.18;
			ТЧ.СуммаСНДС = ТЧ.Сумма + ТЧ.СуммаНДС;
			ИначеЕсли БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС20) Тогда
			ТЧ.СуммаНДС = ТЧ.Сумма*0.2;
			ТЧ.СуммаСНДС = ТЧ.Сумма + ТЧ.СуммаНДС;
			Иначе	
			ТЧ.СуммаСНДС = ТЧ.Сумма;
			КонецЕсли;
		КонецЕсли;			
КонецПроцедуры

Процедура ВыгрузкаВСбыт(БазаСбыта,Подразделение,ОшибкиПриВыгрузкеГП)
СписокСК = Новый СписокЗначений;

НомерПЗ = "";

СписокСК.Добавить(Справочники.СтандартныеКомментарии.НайтиПоНаименованию("Изделия для Группы компаний",Истина));
СписокСК.Добавить(Справочники.СтандартныеКомментарии.НайтиПоНаименованию("Крупный заказ для Группы компаний",Истина));
СписокСК.Добавить(Справочники.СтандартныеКомментарии.НайтиПоНаименованию("Крупный заказ",Истина));
СписокСК.Добавить(Справочники.СтандартныеКомментарии.НайтиПоНаименованию("Крупный заказ последний",Истина));
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Запрос = Новый Запрос;
	СписокПЗ = Новый СписокЗначений;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыпускПродукции.ДокументОснование КАК ДокументОснование,
		|	ВыпускПродукции.ДокументОснование.Изделие КАК Изделие,
		|	ВыпускПродукции.ДокументОснование.БарКод КАК БарКод,
		|	ВыпускПродукции.ДокументОснование.Линейка КАК Линейка,
		|	ВыпускПродукции.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ВыпускПродукции КАК ВыпускПродукции
		|ГДЕ
		|	ВыпускПродукции.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ВыпускПродукции.Подразделение = &Подразделение
		|	И ВыпускПродукции.НаСклад = ИСТИНА
		|	И ВыпускПродукции.ДокументОснование.Испытания = 0
		|	И ВыпускПродукции.ДокументОснование.Выгружено = ЛОЖЬ
		|	И ВыпускПродукции.ДокументОснование.ДокументОснование.Ремонт = ЛОЖЬ
		|	И ВыпускПродукции.ДокументОснование.ДокументОснование.СтандартныйКомментарий.НеВыгружать = ЛОЖЬ
		|	И ВыпускПродукции.ДокументОснование.ДокументОснование.Выгружено = ЛОЖЬ
		|	И ВыпускПродукции.ДокументОснование.Изделие.Канбан <> &ВидКанбана"; 
	Запрос.УстановитьПараметр("ДатаНач", Дата('2017.10.27 00:00:00'));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Подразделение",Подразделение);
	Запрос.УстановитьПараметр("ВидКанбана", Справочники.ВидыКанбанов.НайтиПоНаименованию("Канбан УПЭА (внутренний)",Истина));
	РезультатЗапроса = Запрос.Выполнить();
	бсСклад = БазаСбыта.Справочники.Склады.НайтиПоНаименованию("СД 423",Истина);
	бсНовДок = БазаСбыта.Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	бсНовДок.Дата = ТекущаяДата();
	бсНовДок.Организация = БазаСбыта.Справочники.Организации.НайтиПоКоду("02");
	бсНовДок.Партнер = БазаСбыта.Справочники.Партнеры.НайтиПоКоду("00-00000010");
	бсНовДок.Склад = бсСклад;
	бсНовДок.ХозяйственнаяОперация = БазаСбыта.Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	бсНовДок.НалогообложениеНДС = БазаСбыта.Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	бсНовДок.БанковскийСчетОрганизации = БазаСбыта.ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(бсНовДок.Организация);
	бсНовДок.Валюта = БазаСбыта.Справочники.Валюты.НайтиПоКоду("643");
	бсНовДок.ВалютаВзаиморасчетов = БазаСбыта.Справочники.Валюты.НайтиПоКоду("643");
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Товар = ВыборкаДетальныеЗаписи.Изделие.Товар;
		ПЗ = ВыборкаДетальныеЗаписи.ДокументОснование;
			Если Товар.Пустая() Тогда
			ОшибкиПриВыгрузкеГП = ОшибкиПриВыгрузкеГП+ПЗ.Номер+" ("+СокрЛП(ВыборкаДетальныеЗаписи.Изделие.Наименование)+") - не привязан к товару!"+Символы.ПС;
			Продолжить;
			КонецЕсли;
		Артикул = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(Товар.Код);
		бсНомен = БазаСбыта.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
			Если бсНомен.Пустая() Тогда
			ОшибкиПриВыгрузкеГП = ОшибкиПриВыгрузкеГП+ПЗ.Номер+" ("+СокрЛП(Товар.Наименование)+") - товар с артикулом "+Артикул+" не найден в торговой базе!"+Символы.ПС;				
			Продолжить;
			КонецЕсли;
		МТК = ПЗ.ДокументОснование; 
			Если Не Товар.НумераторГрупповойУпаковки.Пустая() Тогда
				Если Не ЗначениеЗаполнено(ПЗ.ДатаГрупповойУпаковки) Тогда
				Продолжить;
				КонецЕсли;					
			КонецЕсли;
				Если Товар.ТоварнаяГруппа.ГрупповаяУпаковка Тогда	
					Если ОбщийМодульВызовСервера.ПолучитьНезавершённоеКоличество(ТекущаяДата(),МТК) > 0 Тогда
					Продолжить;
					КонецЕсли; 
				КонецЕсли;				
		Кол = ВыборкаДетальныеЗаписи.Ссылка.Поступление[0].Количество*?(Товар.КоличествоГрупповойУпаковки > 0,Товар.КоличествоГрупповойУпаковки,1);
		ЗНП = МТК.ДокументОснование;
		ВыгрузкаВСбыт_СтараяСхема(БазаСбыта,бсНовДок,бсНомен,Кол,бсСклад,ЗНП,МТК,СписокСК,Товар);
		//	Если ТипЗнч(ЗНП) <> Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		//ВыгрузкаВСбыт_СтараяСхема(БазаСбыта,бсНовДок,бсНомен,Кол,бсСклад,ЗНП,МТК,СписокСК,Товар);
		//	Иначе	
		//		Если ЗНП.Дата < Дата('2020.07.18 00:00:00') Тогда
		//		ВыгрузкаВСбыт_СтараяСхема(БазаСбыта,бсНовДок,бсНомен,Кол,бсСклад,ЗНП,МТК,СписокСК,Товар);
		//		Иначе	
		//		ВыгрузкаВСбыт_НоваяСхема(БазаСбыта,бсНовДок,бсНомен,Кол,бсСклад,ЗНП,МТК,СписокСК,Товар);
		//		КонецЕсли; 
		//	КонецЕсли; 
		ТЧ = бсНовДок.Штрихкоды.Добавить();	
		ТЧ.Номенклатура = бсНомен;
		ТЧ.ШК = ВыборкаДетальныеЗаписи.БарКод;
		СписокПЗ.Добавить(ПЗ);
		КонецЦикла;
			Если бсНовДок.Товары.Количество() > 0 Тогда
				Для каждого Стр Из СписокПЗ Цикл
				ПЗ = Стр.Значение.ПолучитьОбъект();
				НомерПЗ = Стр.Значение.Номер;
				ПЗ.Выгружено = Истина;
				ПЗ.Записать();			
				КонецЦикла;
			НомерПЗ = "";
					Если (Найти(Подразделение.Наименование,"Богородицк УД") > 0)или
						 (Найти(Подразделение.Наименование,"Богородицк датчики давления") > 0) Тогда
					бсНовДок.Комментарий = "&ДД Выгрузка УД из производственной базы от "+ТекущаяДата();
					Иначе	
					бсНовДок.Комментарий = "Выгрузка УПЭА из производственной базы от "+ТекущаяДата();
					КонецЕсли;
			бсНовДок.Записать();
			ОшибкиПриВыгрузкеГП = ОшибкиПриВыгрузкеГП+"Создан документ "+бсНовДок.Номер+Символы.ПС;
			бсНовДок.Записать(БазаСбыта.РежимЗаписиДокумента.Проведение); 
			КонецЕсли; 
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	ОшибкиПриВыгрузкеГП = ОшибкиПриВыгрузкеГП+ОписаниеОшибки()+" ["+НомерПЗ+"]"+Символы.ПС;
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
КонецПроцедуры

Процедура ВыгрузкаГотовойПродукции() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1ССбыт.Получить());
	Если БазаСбыта = Неопределено Тогда
	Константы.ДатаПоследнейВыгрузкиГотовойПродукции.Установить(ТекущаяДата());
	Константы.ОшибкиПриВыгрузкеГП.Установить("Не открыто соединение с базой сбыта!");
	ЗаписьЖурналаРегистрации("ВыгрузкаГП",УровеньЖурналаРегистрации.Информация,Метаданные.РегламентныеЗадания.ВыгрузкаГотовойПродукции,"Не открыто соединение с базой сбыта!");
	Возврат;
	КонецЕсли;
ОшибкиПриВыгрузкеГП = "";
ВыгрузкаВСбыт(БазаСбыта,Справочники.Подразделения.НайтиПоНаименованию("Богородицк",Истина),ОшибкиПриВыгрузкеГП);
ВыгрузкаВСбыт(БазаСбыта,Справочники.Подразделения.НайтиПоНаименованию("Богородицк УПЭА",Истина),ОшибкиПриВыгрузкеГП);
ВыгрузкаВСбыт(БазаСбыта,Справочники.Подразделения.НайтиПоНаименованию("Богородицк УД",Истина),ОшибкиПриВыгрузкеГП);
ВыгрузкаВСбыт(БазаСбыта,Справочники.Подразделения.НайтиПоНаименованию("Богородицк датчики давления",Истина),ОшибкиПриВыгрузкеГП);
Константы.ОшибкиПриВыгрузкеГП.Установить(ОшибкиПриВыгрузкеГП);
Константы.ДатаПоследнейВыгрузкиГотовойПродукции.Установить(ТекущаяДата());
ЗаписьЖурналаРегистрации("ВыгрузкаГП",УровеньЖурналаРегистрации.Информация,Метаданные.РегламентныеЗадания.ВыгрузкаГотовойПродукции,ОшибкиПриВыгрузкеГП);
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли; 
КонецПроцедуры

Процедура ВыгрузкаТНПВСбыт(БазаСбыта,ОшибкиПриВыгрузкеТНП)
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Запрос = Новый Запрос;
	СписокДвижений = Новый СписокЗначений;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДвижениеМПЗ.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.ДвижениеМПЗ КАК ДвижениеМПЗ
		|ГДЕ
		|	ДвижениеМПЗ.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ДвижениеМПЗ.Выгружено = ЛОЖЬ
		|	И ДвижениеМПЗ.МестоХраненияВ = &МестоХраненияВ"; 
	Запрос.УстановитьПараметр("ДатаНач", Дата('2019.12.06 00:00:00'));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("МестоХраненияВ",Справочники.МестаХранения.НайтиПоКоду("273"));
	РезультатЗапроса = Запрос.Выполнить();
	бсСклад = БазаСбыта.Справочники.Склады.НайтиПоНаименованию("СД 423",Истина);
	бсНовДок = БазаСбыта.Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	бсНовДок.Дата = ТекущаяДата();
	бсНовДок.Организация = БазаСбыта.Справочники.Организации.НайтиПоКоду("02");
	бсНовДок.Партнер = БазаСбыта.Справочники.Партнеры.НайтиПоКоду("00-00000010");
	бсНовДок.Склад = бсСклад;
	бсНовДок.ХозяйственнаяОперация = БазаСбыта.Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	бсНовДок.НалогообложениеНДС = БазаСбыта.Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	бсНовДок.БанковскийСчетОрганизации = БазаСбыта.ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(бсНовДок.Организация);
	бсНовДок.Валюта = БазаСбыта.Справочники.Валюты.НайтиПоКоду("643");
	бсНовДок.ВалютаВзаиморасчетов = БазаСбыта.Справочники.Валюты.НайтиПоКоду("643");
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокДвижений.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		НомерЗНП = ВыборкаДетальныеЗаписи.Ссылка.ДокументОснование.Номер;
			Для каждого ТЧ Из ВыборкаДетальныеЗаписи.Ссылка.ТабличнаяЧасть Цикл
			Товар = ТЧ.МПЗ.Товар;
				Если Товар.Пустая() Тогда
				ОшибкиПриВыгрузкеТНП = ОшибкиПриВыгрузкеТНП+СокрЛП(ТЧ.МПЗ.Наименование)+" - не привязан к товару!"+Символы.ПС;
				Продолжить;
				КонецЕсли;
			Артикул = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(Товар.Код);
			бсНомен = БазаСбыта.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
				Если бсНомен.Пустая() Тогда
				ОшибкиПриВыгрузкеТНП = ОшибкиПриВыгрузкеТНП+СокрЛП(Товар.Наименование)+" - товар с артикулом "+Артикул+" не найден в торговой базе!"+Символы.ПС;				
				Продолжить;
				КонецЕсли;
			ТЧ = бсНовДок.Товары.Добавить();
			ТЧ.Склад = бсСклад;	
			ТЧ.Номенклатура = бсНомен;
			ТЧ.ИМНомерЗаказаЗаказнойТовар = НомерЗНП; 
			ТЧ.КоличествоУпаковок = ТЧ.Количество;
			ТЧ.ИмКоличествоЗарегистрировано = ТЧ.Количество;
			ТЧ.Количество = ТЧ.Количество;
			ТЧ.СтавкаНДС = бсНомен.СтавкаНДС;
			ТЧ.Цена = бсНомен.ИмЦена;
			ТЧ.Сумма = ТЧ.КоличествоУпаковок*ТЧ.Цена;
				Если БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС18) Тогда
				ТЧ.СуммаНДС = ТЧ.Сумма*0.18;
				ТЧ.СуммаСНДС = ТЧ.Сумма + ТЧ.СуммаНДС;
				ИначеЕсли БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС20) Тогда
				ТЧ.СуммаНДС = ТЧ.Сумма*0.2;
				ТЧ.СуммаСНДС = ТЧ.Сумма + ТЧ.СуммаНДС;
				Иначе	
				ТЧ.СуммаСНДС = ТЧ.Сумма;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
			Если бсНовДок.Товары.Количество() > 0 Тогда
				Для каждого Стр Из СписокДвижений Цикл
				ДвижениеМПЗ = Стр.Значение.ПолучитьОбъект();
				ДвижениеМПЗ.Выгружено = Истина;
				ДвижениеМПЗ.Записать();			
				КонецЦикла;
			бсНовДок.Комментарий = "&ТНП Выгрузка ТНП из производственной базы от "+ТекущаяДата();
			бсНовДок.Записать();
			ОшибкиПриВыгрузкеТНП = ОшибкиПриВыгрузкеТНП+"Создан документ "+бсНовДок.Номер+Символы.ПС;
			бсНовДок.Записать(БазаСбыта.РежимЗаписиДокумента.Проведение); 
			КонецЕсли; 
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	ОшибкиПриВыгрузкеТНП = ОшибкиПриВыгрузкеТНП+ОписаниеОшибки()+Символы.ПС;
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
КонецПроцедуры

Процедура ВыгрузкаГотовойПродукцииТНП() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1ССбыт.Получить());
	Если БазаСбыта = Неопределено Тогда
	Константы.ДатаПоследнейВыгрузкиТНП.Установить(ТекущаяДата());
	Константы.ОшибкиПриВыгрузкеТНП.Установить("Не открыто соединение с базой сбыта!");
	ЗаписьЖурналаРегистрации("ВыгрузкаТНП",УровеньЖурналаРегистрации.Информация,Метаданные.РегламентныеЗадания.ВыгрузкаГотовойПродукцииТНП,"Не открыто соединение с базой сбыта!");
	Возврат;
	КонецЕсли;
ОшибкиПриВыгрузкеТНП = "";
ВыгрузкаТНПВСбыт(БазаСбыта,ОшибкиПриВыгрузкеТНП);
Константы.ОшибкиПриВыгрузкеТНП.Установить(ОшибкиПриВыгрузкеТНП);
Константы.ДатаПоследнейВыгрузкиТНП.Установить(ТекущаяДата());
ЗаписьЖурналаРегистрации("ВыгрузкаТНП",УровеньЖурналаРегистрации.Информация,Метаданные.РегламентныеЗадания.ВыгрузкаГотовойПродукцииТНП,ОшибкиПриВыгрузкеТНП);
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли; 
КонецПроцедуры

Процедура ВыгрузкаГотовойПродукцииУД() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);

//НастройкиОбменаДанными = ОбщийМодульСинхронизации.ПолучитьНастройкиОбменаДанными("Производство");
//V7 = ОбщийМодульКлиент.ПодключитьсяК1С77(НастройкиОбменаДанными.ПутьКБазеДанных,Объект.ИмяПользователя,Объект.Пароль);
//	Если V7 = Неопределено Тогда
//	Возврат;	
//	КонецЕсли;

БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1ССбыт.Получить());
	Если БазаСбыта = Неопределено Тогда
	Константы.ДатаПоследнейВыгрузкиГотовойПродукции.Установить(ТекущаяДата());
	Константы.ОшибкиПриВыгрузкеГП.Установить("Не открыто соединение с базой сбыта!");
	Возврат;
	КонецЕсли;
ОшибкиПриВыгрузкеГП = "";
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	бсСклад = БазаСбыта.Справочники.Склады.НайтиПоНаименованию("СД 423",Истина);
	бсНовДок = БазаСбыта.Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	бсНовДок.Дата = ТекущаяДата();
	//бсНовДок.УстановитьНовыйНомер("ПБ-");
	бсНовДок.Организация = БазаСбыта.Справочники.Организации.НайтиПоКоду("02");
	бсНовДок.Партнер = БазаСбыта.Справочники.Партнеры.НайтиПоКоду("00-00000010");
	бсНовДок.Склад = бсСклад;
	бсНовДок.ХозяйственнаяОперация = БазаСбыта.Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	бсНовДок.НалогообложениеНДС = БазаСбыта.Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	бсНовДок.БанковскийСчетОрганизации = БазаСбыта.ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(бсНовДок.Организация);
	бсНовДок.Валюта = БазаСбыта.Справочники.Валюты.НайтиПоКоду("643");
	бсНовДок.ВалютаВзаиморасчетов = БазаСбыта.Справочники.Валюты.НайтиПоКоду("643");
	ДатаНачалаПериода = Дата("2017.10.17 00:00:00");
	СписокЛинеек = Новый СписокЗначений;

	СписокЛинеек.Добавить(Справочники.Линейки.НайтиПоНаименованию("Б16О",Истина));
	СписокЛинеек.Добавить(Справочники.Линейки.НайтиПоНаименованию("Б16Д",Истина));
	СписокЛинеек.Добавить(Справочники.Линейки.НайтиПоНаименованию("Б16П",Истина));
	СписокЛинеек.Добавить(Справочники.Линейки.НайтиПоНаименованию("Б17Х",Истина));
	СписокЛинеек.Добавить(Справочники.Линейки.НайтиПоНаименованию("Б17Х1",Истина));

	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыпускПродукции.ДокументОснование,
		|	ВыпускПродукции.ДокументОснование.Изделие КАК Изделие,
		|	ВыпускПродукции.ДокументОснование.БарКод КАК БарКод
		|ИЗ
		|	Документ.ВыпускПродукции КАК ВыпускПродукции
		|ГДЕ
		|	ВыпускПродукции.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И ВыпускПродукции.НаСклад = ИСТИНА
		|	И ВыпускПродукции.ДокументОснование.Выгружено = ЛОЖЬ
		|	И ВыпускПродукции.ДокументОснование.Линейка В(&СписокЛинеек)";
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("СписокЛинеек", СписокЛинеек);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Артикул = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(ВыборкаДетальныеЗаписи.Изделие.Товар.Код);
			бсНомен = БазаСбыта.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
				Если бсНомен.Пустая() Тогда
				ОшибкиПриВыгрузкеГП = ОшибкиПриВыгрузкеГП+ВыборкаДетальныеЗаписи.ДокументОснование.Номер+" ("+СокрЛП(ВыборкаДетальныеЗаписи.Изделие.Товар.Наименование)+") - товар с артикулом "+Артикул+" не найден в торговой базе!"+Символы.ПС;	
				Продолжить;
				КонецЕсли;
			Выборка =  бсНовДок.Товары.Найти(бсНомен,"Номенклатура");
				Если Выборка = Неопределено Тогда
				ТЧ = бсНовДок.Товары.Добавить();
				ТЧ.Склад = бсСклад;	
				ТЧ.Номенклатура = бсНомен;
				ТЧ.КоличествоУпаковок = 1;
				ТЧ.ИмКоличествоЗарегистрировано = 1;
				ТЧ.Количество = 1;
				ТЧ.СтавкаНДС = бсНомен.СтавкаНДС;
				Иначе
				Выборка.КоличествоУпаковок = Выборка.КоличествоУпаковок + 1;
				Выборка.ИмКоличествоЗарегистрировано = Выборка.ИмКоличествоЗарегистрировано + 1;
				Выборка.Количество = Выборка.Количество + 1;
				КонецЕсли;
			ТЧ = бсНовДок.Штрихкоды.Добавить();	
			ТЧ.Номенклатура = бсНомен;
			ТЧ.ШК = ВыборкаДетальныеЗаписи.БарКод;
			ПЗ = ВыборкаДетальныеЗаписи.ДокументОснование.ПолучитьОбъект();
			ПЗ.Выгружено = Истина;
			ПЗ.Записать();
			КонецЦикла;
				Если бсНовДок.Товары.Количество() > 0 Тогда
					Для каждого ТЧ Из бсНовДок.Товары Цикл
					ТЧ.Цена = бсНомен.ИмЦена;
					ТЧ.Сумма = ТЧ.КоличествоУпаковок*ТЧ.Цена;
						Если БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС18) Тогда
						ТЧ.СуммаНДС = ТЧ.Сумма*0.18;
						ТЧ.СуммаСНДС = ТЧ.Сумма + ТЧ.СуммаНДС;
						ИначеЕсли БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС20) Тогда
						ТЧ.СуммаНДС = ТЧ.Сумма*0.2;
						ТЧ.СуммаСНДС = ТЧ.Сумма + ТЧ.СуммаНДС;
						Иначе	
						ТЧ.СуммаСНДС = ТЧ.Сумма;
						КонецЕсли; 
					КонецЦикла;
				бсНовДок.Комментарий = "Выгрузка из производственной базы от "+ТекущаяДата();
				бсНовДок.Записать();
				ОшибкиПриВыгрузкеГП = ОшибкиПриВыгрузкеГП+"Создан документ "+бсНовДок.Номер+Символы.ПС;
				КонецЕсли;  
		КонецЕсли; 
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	ОшибкиПриВыгрузкеГП = ОшибкиПриВыгрузкеГП+ОписаниеОшибки()+Символы.ПС;
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
Константы.ДатаПоследнейВыгрузкиГотовойПродукции.Установить(ТекущаяДата());
Константы.ОшибкиПриВыгрузкеГП.Установить(ОшибкиПриВыгрузкеГП);
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаСреднегоВремениИзготовления

Процедура ВыгрузкаСреднегоВремениИзготовления() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
ОбменДанными = Справочники.ОбменДанными.НайтиПоНаименованию("База сбыта",Истина);
БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(ОбменДанными);
	Если БазаСбыта = Неопределено Тогда
	Возврат;
	КонецЕсли;
Запрос = Новый Запрос;
ТаблицаИзделий = Новый ТаблицаЗначений;

ТаблицаИзделий.Колонки.Добавить("Изделие",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ТаблицаИзделий.Колонки.Добавить("СреднееВремяИзготовления",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,0)));

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВыпускПродукцииПоступление.Ссылка.ДокументОснование КАК ПЗ,
	|	ВыпускПродукцииПоступление.Номенклатура КАК Изделие,
	|	ВыпускПродукцииПоступление.Количество КАК Количество,
	|	ВыпускПродукцииПоступление.Ссылка
	|ИЗ
	|	Документ.ВыпускПродукции.Поступление КАК ВыпускПродукцииПоступление
	|ГДЕ
	|	ВыпускПродукцииПоступление.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ВыпускПродукцииПоступление.Ссылка.НаСклад = ИСТИНА
	|	И ВыпускПродукцииПоступление.Ссылка.ДокументОснование.ДокументОснование.Ремонт = ЛОЖЬ
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Изделие";
Запрос.УстановитьПараметр("ДатаНач", НачалоДня(НачалоДня(ТекущаяДата()-1)-1));
Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
РезультатЗапроса = Запрос.Выполнить();
ВыборкаИзделия = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаИзделия.Следующий() Цикл
	ТЧ = ТаблицаИзделий.Добавить();
	ТЧ.Изделие = ВыборкаИзделия.Изделие;
	ОбщееВремяИзготовления = 0;
	ВыборкаДетальныеЗаписи = ВыборкаИзделия.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ВремяИзготовления = ОбщийМодульВызовСервера.ПолучитьВремяМеждуДатами(ВыборкаДетальныеЗаписи.ПЗ.Дата,ВыборкаДетальныеЗаписи.Ссылка.Дата,0,Истина,15.4,Истина);
		ОбщееВремяИзготовления = ОбщееВремяИзготовления + ВремяИзготовления;
		КонецЦикла;
	СреднееВремяИзготовления = ОбщееВремяИзготовления/ВыборкаИзделия.Количество;
	КолДней = Окр(СреднееВремяИзготовления,0,РежимОкругления.Окр15как20);
	ТЧ.СреднееВремяИзготовления = ?(КолДней < СреднееВремяИзготовления,КолДней+1,КолДней)+2;
	КонецЦикла;
		Для каждого ТЧ Из ТаблицаИзделий Цикл
			Если ТЧ.СреднееВремяИзготовления = 0 Тогда
			Продолжить;
			КонецЕсли; 
		Артикул = СтрЗаменить(Строка(ТЧ.Изделие.Товар.Код),Символы.НПП,"");
		бсНомен = БазаСбыта.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
			Если Не бсНомен.Пустая() Тогда
				Если бсНомен.ИмСрокПоставки <> ТЧ.СреднееВремяИзготовления Тогда	
					Попытка
					бсНоменОбъект = бсНомен.ПолучитьОбъект();	
					бсНоменОбъект.ИмСрокПоставки = ТЧ.СреднееВремяИзготовления;
					бсНоменОбъект.Записать();	
					Исключение
					
					КонецПопытки;				
				КонецЕсли; 
			КонецЕсли;
		КонецЦикла;
	   		Если ПривилегированныйРежим() Тогда 
	   		УстановитьПривилегированныйРежим(Ложь);
	   		КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СписаниеГП

Процедура СписаниеГотовойПродукции() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1ССбыт.Получить());
	Если БазаСбыта = Неопределено Тогда
	Константы.ДатаПоследнегоСписанияГотовойПродукции.Установить(ТекущаяДата());
	Константы.ОшибкиПриСписанииГП.Установить("Не открыто соединение с базой сбыта!");
	Возврат;
	КонецЕсли;

Склад = БазаСбыта.Справочники.Склады.НайтиПоНаименованию("СД 423");
//Группа = БазаСбыта.Справочники.ОвенГруппыПроизводственныхЛинеек.НайтиПоНаименованию("7");
Дата1 = НачалоДня(НачалоДня(НачалоДня(ТекущаяДата()-1)-1));
Дата2 = ТекущаяДата();

Запрос = БазаСбыта.NewObject("Запрос",
	"ВЫБРАТЬ
	|РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
	|СУММА(РеализацияТоваровУслугТовары.Количество) КАК Кол
	|ИЗ
	|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
	|ГДЕ
	//|	РеализацияТоваровУслугТовары.Номенклатура.ПроизводственнаяЛинейка.ГруппаПроизводственнойЛинейки = &Группа
	|	РеализацияТоваровУслугТовары.Ссылка.Склад = &Склад
	|	И РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
	|	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
	|	И РеализацияТоваровУслугТовары.ВыгруженоВПроизводство = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТоваровУслугТовары.Номенклатура.Артикул");
Запрос.УстановитьПараметр("Дата1", Дата1);
Запрос.УстановитьПараметр("Дата2", Дата2);
Запрос.УстановитьПараметр("Склад", Склад);
//Запрос.УстановитьПараметр("Группа", Группа);
	
Выборка = Запрос.Выполнить().Выбрать();	 
	
ТЗ = Новый ТаблицаЗначений;

ТЗ.Колонки.Добавить("Ном");
ТЗ.Колонки.Добавить("Кол");
ТЗ.Колонки.Добавить("Место");
ТЗ.Колонки.Добавить("Артикул");

Найдено = Ложь;
СписокНайденных = Новый СписокЗначений;

	Пока Выборка.Следующий() Цикл
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.Ссылка КАК Ссылка,
		|	Номенклатура.ОсновнаяЕдиницаИзмерения КАК ЕД
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Товар.Код = &Код
		|
		|УПОРЯДОЧИТЬ ПО
		|	Ссылка";
	Запрос.УстановитьПараметр("Код", Число(Выборка.Артикул));
	РезультатЗапроса = Запрос.Выполнить();
	Выб = РезультатЗапроса.Выбрать();
	МесХран = Справочники.МестаХранения.Выбрать(Справочники.МестаХранения.НайтиПоКоду("95"));
		Пока Выб.Следующий() Цикл
			Если Найдено Тогда
			//СписокНайденных.Добавить(Выборка.Артикул);
			Найдено = Ложь;
			Прервать; //выйти из цикла, найденных по артикулу номенклатур
			КонецЕсли;
				Пока МесХран.Следующий() Цикл
				Фильтр	= Новый Структура;
				Фильтр.Вставить("МестоХранения", МесХран.Ссылка);
				Фильтр.Вставить("ВидМПЗ", Перечисления.ВидыМПЗ.Полуфабрикаты);
				Фильтр.Вставить("МПЗ", Выб.Ссылка);	
				Дата = ТекущаяДата();
				Остаток = РегистрыНакопления.МестаХранения.Остатки(Дата,Фильтр,"МестоХранения,ВидМПЗ,МПЗ", "Количество").Итог("Количество");
					Если Остаток >= Выборка.Кол  Тогда
					НовСтр = ТЗ.Добавить();
					НовСтр.Ном = Выб.Ссылка;
					НовСтр.Кол = Выборка.Кол;
					НовСтр.Место = МесХран.Ссылка;
					СписокНайденных.Добавить(Выборка.Артикул);
					Найдено = Истина;
					Прервать; //прервать поиск по местам хранения, если найдено
					КонецЕсли;	
				КонецЦикла;	
		КонецЦикла;
	КонецЦикла;
МесХран = Справочники.МестаХранения.Выбрать(Справочники.МестаХранения.НайтиПоКоду("95"));
	Пока МесХран.Следующий() Цикл
	Отбор = Новый Структура;
	Отбор.Вставить("Место", МесХран.Ссылка);
	Строки = ТЗ.НайтиСтроки(Отбор);
		Если Строки.Количество() > 0 Тогда
		Нов = Документы.СписаниеМПЗПрочее.СоздатьДокумент();
		Нов.Дата = ТекущаяДата();
		Нов.Подразделение = Справочники.Подразделения.НайтиПоКоду("32");
		Нов.МестоХранения = МесХран.Ссылка;
		Нов.Статья = Справочники.СтатьиПоступленийСписанийПрочих.НайтиПоКоду("00027");
		Нов.Утвердил = Справочники.Сотрудники.НайтиПоНаименованию("Миронова Наталья Игоревна");
			Для Каждого Стр Из Строки Цикл
			СтрокаТЧ = Нов.ТабличнаяЧасть.Добавить();
			СтрокаТЧ.МПЗ = Стр.Ном;
				Если ТипЗнч(СтрокаТЧ.МПЗ) = Тип("СправочникСсылка.Материалы") Тогда
				СтрокаТЧ.ВидМПЗ = Перечисления.ВидыМПЗ.Материалы;
				Иначе
				СтрокаТЧ.ВидМПЗ = Перечисления.ВидыМПЗ.Полуфабрикаты;	
				КонецЕсли; 
			СтрокаТЧ.Количество = Стр.Кол;
			СтрокаТЧ.ЕдиницаИзмерения = Стр.Ном.ОсновнаяЕдиницаИзмерения;
			КонецЦикла;
				Попытка
				Нов.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
				Нов.Записать();
				КонецПопытки;			
		КонецЕсли;	
	КонецЦикла;

	Если СписокНайденных.Количество() > 0 Тогда
		Для Каждого Значен Из СписокНайденных Цикл
			Номенклатура = БазаСбыта.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Значен.Значение);
			Запрос = БазаСбыта.NewObject("Запрос",
				"ВЫБРАТЬ
				|РеализацияТоваровУслугТовары.Номерстроки КАК Номер,
				|РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
				|ИЗ
				|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
				|ГДЕ
				//|	РеализацияТоваровУслугТовары.Номенклатура.ПроизводственнаяЛинейка.ГруппаПроизводственнойЛинейки = &Группа
				|	РеализацияТоваровУслугТовары.Ссылка.Склад = &Склад
				|	И РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
				|	И РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
				|	И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура");
			Запрос.УстановитьПараметр("Дата1", Дата1);
			Запрос.УстановитьПараметр("Дата2", Дата2);
			Запрос.УстановитьПараметр("Склад", Склад);
			//Запрос.УстановитьПараметр("Группа", Группа);
			Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
			Выборка = Запрос.Выполнить().Выбрать();	 
				Пока Выборка.Следующий() Цикл
				Док = Выборка.Ссылка.ПолучитьОбъект();
					Для каждого Стр Из Док.Товары Цикл
						Если Стр.НомерСтроки = Выборка.Номер Тогда
						Стр.ВыгруженоВПроизводство = Истина;
						КонецЕсли;
					КонецЦикла;
				Док.Записать();
				Сообщить(Док.Номер);
				КонецЦикла;
		КонецЦикла;	
	КонецЕсли;
Константы.ДатаПоследнегоСписанияГотовойПродукции.Установить(ТекущаяДата());
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли; 
КонецПроцедуры

Процедура СписаниеГотовойПродукцииТНП() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1ССбыт.Получить());
	Если БазаСбыта = Неопределено Тогда
	Константы.ДатаПоследнегоСписанияГотовойПродукции.Установить(ТекущаяДата());
	Константы.ОшибкиПриСписанииГП.Установить("Не открыто соединение с базой сбыта!");
	Возврат;
	КонецЕсли;
ОшибкиПриСписанииГП = "";
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	СписокНайденных = Новый СписокЗначений;

	МестоХраненияТНП = Справочники.МестаХранения.НайтиПоНаименованию("Склад ТНП",Истина);

	Списание = Документы.СписаниеМПЗПрочее.СоздатьДокумент();
	Списание.Дата = ТекущаяДата();
	Списание.Подразделение = Справочники.Подразделения.НайтиПоНаименованию("Торговля ТНП",Истина);
	Списание.МестоХранения = МестоХраненияТНП.Ссылка;
	Списание.Статья = Справочники.СтатьиПоступленийСписанийПрочих.НайтиПоНаименованию("Реализация ТНП",Истина);
	Списание.Утвердил = Справочники.Сотрудники.НайтиПоНаименованию("Мартьянова Лариса Алексеевна");
	Списание.Комментарий = "Выгрузка реализаций ТНП из базы сбыта";

	Склад = БазаСбыта.Справочники.Склады.НайтиПоНаименованию("СД 423");
	ВидНоменклатуры = БазаСбыта.Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Покупные изделия");
	Дата1 = Дата('2017.11.01 00:00:00');
	Дата2 = ТекущаяДата();

	Запрос = БазаСбыта.NewObject("Запрос",
		"ВЫБРАТЬ
		|РеализацияТоваровУслугТовары.Номенклатура.Наименование КАК Наименование,
		|РеализацияТоваровУслугТовары.Номенклатура.Артикул КАК Артикул,
		|СУММА(РеализацияТоваровУслугТовары.Количество) КАК Количество
		|ИЗ
		|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
		|ГДЕ
		|	РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
		|	И РеализацияТоваровУслугТовары.Номенклатура.ВидНоменклатуры = &ВидНоменклатуры
		|	И РеализацияТоваровУслугТовары.Ссылка.Склад = &Склад
		|	И РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
		|	И РеализацияТоваровУслугТовары.ВыгруженоВПроизводство = ЛОЖЬ
		|
		|СГРУППИРОВАТЬ ПО
		|	РеализацияТоваровУслугТовары.Номенклатура.Артикул,
		|	РеализацияТоваровУслугТовары.Номенклатура.Наименование");
	Запрос.УстановитьПараметр("Дата1", Дата1);
	Запрос.УстановитьПараметр("Дата2", Дата2);
	Запрос.УстановитьПараметр("Склад", Склад);
	Запрос.УстановитьПараметр("ВидНоменклатуры", ВидНоменклатуры);
		
	Выборка = Запрос.Выполнить().Выбрать();	 
		Пока Выборка.Следующий() Цикл
		Запрос = Новый Запрос;

		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Материалы.Ссылка
			|ИЗ
			|	Справочник.Материалы КАК Материалы
			|ГДЕ
			|	Материалы.Товар.Код = &Код";
		Запрос.УстановитьПараметр("Код", Число(Выборка.Артикул));
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаТНП = РезультатЗапроса.Выбрать();
			Если ВыборкаТНП.Количество() > 0 Тогда
				Пока ВыборкаТНП.Следующий() Цикл
				КоличествоНаСкладе = ОбщийМодульРаботаСРегистрами.ПолучитьОстатокПоМестуХранения(МестоХраненияТНП.Ссылка,ВыборкаТНП.Ссылка);
					Если КоличествоНаСкладе >= Выборка.Количество Тогда
					СписокНайденных.Добавить(Выборка.Артикул);
					ТЧ = Списание.ТабличнаяЧасть.Добавить();
					ТЧ.ВидМПЗ = Перечисления.ВидыМПЗ.Материалы;
					ТЧ.МПЗ = ВыборкаТНП.Ссылка;
					ТЧ.Количество = Выборка.Количество;
					ТЧ.ЕдиницаИзмерения = ВыборкаТНП.Ссылка.ОсновнаяЕдиницаИзмерения;
					Иначе
					ОшибкиПриСписанииГП = ОшибкиПриСписанииГП+СокрЛП(ВыборкаТНП.Ссылка.Наименование)+" (Требуется списать: "+Выборка.Количество+" На складе: "+КоличествоНаСкладе+")"+Символы.ПС;
					КонецЕсли; 
				КонецЦикла;
			Иначе
			ОшибкиПриСписанииГП = ОшибкиПриСписанииГП+СокрЛП(Выборка.Наименование)+" (Артикул: "+Выборка.Артикул+") не найден в справочнике материалов!"+Символы.ПС;
			КонецЕсли;
		КонецЦикла;
			Если Списание.ТабличнаяЧасть.Количество() > 0 Тогда
			Списание.Записать(РежимЗаписиДокумента.Проведение);
			ОшибкиПриСписанииГП = ОшибкиПриСписанииГП+"Создан документ списания "+Списание.Номер;	
			КонецЕсли;
				Для Каждого Артикул Из СписокНайденных Цикл
				Номенклатура = БазаСбыта.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", Артикул.Значение);
				Запрос = БазаСбыта.NewObject("Запрос",
					"ВЫБРАТЬ
					|РеализацияТоваровУслугТовары.Номерстроки КАК Номер,
					|РеализацияТоваровУслугТовары.Ссылка КАК Ссылка
					|ИЗ
					|	Документ.РеализацияТоваровУслуг.Товары КАК РеализацияТоваровУслугТовары
					|ГДЕ
					|	РеализацияТоваровУслугТовары.Ссылка.Дата МЕЖДУ &Дата1 И &Дата2
					|	И РеализацияТоваровУслугТовары.Ссылка.Склад = &Склад
					|	И РеализацияТоваровУслугТовары.Ссылка.Проведен = ИСТИНА
					|	И РеализацияТоваровУслугТовары.Номенклатура = &Номенклатура");
				Запрос.УстановитьПараметр("Дата1", Дата1);
				Запрос.УстановитьПараметр("Дата2", Дата2);
				Запрос.УстановитьПараметр("Склад", Склад);
				Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
				Выборка = Запрос.Выполнить().Выбрать();	 
					Пока Выборка.Следующий() Цикл
					Док = Выборка.Ссылка.ПолучитьОбъект();
						Для каждого Стр Из Док.Товары Цикл
							Если Стр.НомерСтроки = Выборка.Номер Тогда
							Стр.ВыгруженоВПроизводство = Истина;
							КонецЕсли;
						КонецЦикла;
					Док.Записать();
					КонецЦикла;
				КонецЦикла;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;	
	Исключение
	ОшибкиПриСписанииГП = ОшибкиПриСписанииГП+ОписаниеОшибки()+Символы.ПС;
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);	
	КонецПопытки;
Константы.ДатаПоследнегоСписанияГотовойПродукции.Установить(ТекущаяДата());
Константы.ОшибкиПриСписанииГП.Установить(ОшибкиПриСписанииГП);
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ПолучениеКурсовВалют

Процедура ПолучитьКурсыВалют() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
Запрос = Новый Запрос;

ТекстЗапроса = 
	"ВЫБРАТЬ
   |	Валюты.Ссылка КАК Ссылка,
   |	Валюты.Код КАК КодЧисловой
   |ИЗ
   |	Справочник.Валюты КАК Валюты
   |ГДЕ
   |	Валюты.Ссылка <> &Ссылка
   |
   |УПОРЯДОЧИТЬ ПО
   |	Валюты.Код";
Запрос.УстановитьПараметр("Ссылка",Константы.ОсновнаяВалюта.Получить());
Запрос.Текст = ТекстЗапроса; 	
СписокВалют = Запрос.Выполнить().Выгрузить();
СписокВалют.Колонки.Добавить("Курс");
СписокВалют.Колонки.Добавить("Кратность");
	Если Константы.КодБазы.Получить() = "БГР" Тогда
	// АдресЦБРФ равен путь к файлу XML + КурсНаДату
	// КурсНаДату должен содержать дату вида "01.01.2009" 
	АдресЦБРФ = "http://www.cbr.ru/scripts/XML_daily.asp?date_req=" + Формат(ТекущаяДата(), "ДФ = дд.ММ.гггг");

	// Пробуем загрузить XML-файл с курсами валют
	// В случае исключение возвращаем значение Неопределено
	Чт = Новый ЧтениеXML;
	    Попытка
	    Чт.ОткрытьФайл(АдресЦБРФ);
	    Исключение
	    Возврат;
	    КонецПопытки;
	КодВалюты = "";
	Курс = 0;
		Пока Чт.Прочитать() Цикл
			Если Чт.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если Чт.Имя = "NumCode" Тогда
				Атриб = "NumCode";
				ИначеЕсли Чт.Имя = "Value" Тогда
				Атриб = "Value";
				ИначеЕсли Чт.Имя = "Nominal" Тогда
				Атриб = "Nominal";
				КонецЕсли;	
			ИначеЕсли Чт.ТипУзла = ТипУзлаXML.Текст Тогда
				Если Атриб = "NumCode" Тогда
				КодВалюты = Чт.Значение;
				ИначеЕсли Атриб = "Value" Тогда
				ВыбВалюта = СписокВалют.Найти(КодВалюты,"КодЧисловой");
					Если ВыбВалюта <> Неопределено Тогда
					ВыбВалюта.Курс = Чт.Значение;
					КонецЕсли;
				ИначеЕсли Атриб = "Nominal" Тогда
				ВыбВалюта = СписокВалют.Найти(КодВалюты,"КодЧисловой");
					Если ВыбВалюта <> Неопределено Тогда
					ВыбВалюта.Кратность = Чт.Значение;
					КонецЕсли;			 
				КонецЕсли;
			ИначеЕсли Чт.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Атриб = "";
	        КонецЕсли; 
	    КонецЦикла;
	НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
		Для Каждого Строка Из СписокВалют Цикл	
			Если ЗначениеЗаполнено(Строка.Курс) Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период = ТекущаяДата();
			НоваяЗапись.Валюта = Строка.Ссылка; 
			НоваяЗапись.Курс = Число(Строка.Курс);
			НоваяЗапись.Кратность = Число(Строка.Кратность);
			КонецЕсли;
		КонецЦикла;
	НаборЗаписей.Записать();	
	Иначе 
	АдресЦБ = "https://bank.gov.ua/NBUStatService/v1/statdirectory/exchange?date=" + Формат(ТекущаяДата(), "ДФ=yyyyMMdd");

	// Пробуем загрузить XML-файл с курсами валют
	// В случае исключение возвращаем значение Неопределено
	Чт = Новый ЧтениеXML;
	    Попытка
	    Чт.ОткрытьФайл(АдресЦБ);
	    Исключение
	    Возврат;
	    КонецПопытки;
	КодВалюты = "";
	Курс = 0;
		Пока Чт.Прочитать() Цикл
			Если Чт.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
				Если Чт.Имя = "r030" Тогда
				Атриб = "r030";
				ИначеЕсли Чт.Имя = "rate" Тогда
				Атриб = "rate";
				КонецЕсли;	
			ИначеЕсли Чт.ТипУзла = ТипУзлаXML.Текст Тогда
				Если Атриб = "r030" Тогда
				КодВалюты = Чт.Значение;
				ИначеЕсли Атриб = "rate" Тогда
				ВыбВалюта = СписокВалют.Найти(КодВалюты,"КодЧисловой");
					Если ВыбВалюта <> Неопределено Тогда
					ВыбВалюта.Курс = Чт.Значение;
					КонецЕсли;			 
				КонецЕсли;
			ИначеЕсли Чт.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда
			Атриб = "";
	        КонецЕсли; 
	    КонецЦикла;
	НаборЗаписей = РегистрыСведений.КурсыВалют.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТекущаяДата()); 
		Для Каждого Строка Из СписокВалют Цикл	
			Если (ЗначениеЗаполнено(Строка.Курс)) Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Период = ТекущаяДата();
			НоваяЗапись.Валюта = Строка.Ссылка; 
			НоваяЗапись.Курс = Число(Строка.Курс);
			НоваяЗапись.Кратность = 1;
			КонецЕсли;
		КонецЦикла;
	НаборЗаписей.Записать();	
	КонецЕсли;
   		Если ПривилегированныйРежим() Тогда 
   		УстановитьПривилегированныйРежим(Ложь);
   		КонецЕсли;
КонецПроцедуры 

#КонецОбласти

#Область ЗагрузкаКонтрагентовИзБИТФинанс

Функция ПолучитьВидКИ(КИ)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВидыКИ._Description
	|ИЗ
	|	ВнешнийИсточникДанных.БазаБитФинанс.Таблица.ВидыКИ КАК ВидыКИ
	|ГДЕ
	|	ВидыКИ._IDRRef = &_IDRRef";
Запрос.УстановитьПараметр("_IDRRef", КИ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи._Description);
	КонецЦикла;
Возврат("");
КонецФункции

Функция ПолучитьКонтактнуюИнформацию(_IDRRef)
Запрос = Новый Запрос;
СписокКИ = Новый СписокЗначений;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты_КИ.Вид,
	|	Контрагенты_КИ.Представление
	|ИЗ
	|	ВнешнийИсточникДанных.БазаБитФинанс.Таблица.Контрагенты_КИ КАК Контрагенты_КИ
	|ГДЕ
	|	Контрагенты_КИ._Reference81_IDRRef = &_Reference81_IDRRef";
Запрос.УстановитьПараметр("_Reference81_IDRRef", _IDRRef);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокКИ.Добавить(ПолучитьВидКИ(ВыборкаДетальныеЗаписи.Вид),ВыборкаДетальныеЗаписи.Представление);
	КонецЦикла;
Возврат(СписокКИ);
КонецФункции

Процедура ЗагрузкаКонтрагентовИзБазыБИТФинанс() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
Запрос = Новый Запрос;
СписокРодителей = Новый СписокЗначений;

СписокРодителей.Добавить("00-011907");
СписокРодителей.Добавить("00-011908");
СписокРодителей.Добавить("00-011958");
СписокРодителей.Добавить("00-013553");
СписокРодителей.Добавить("00-014274");
СписокРодителей.Добавить("00-011552");
СписокРодителей.Добавить("00-014960");
СписокРодителей.Добавить("00-011553");
СписокРодителей.Добавить("00-011731");

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Контрагенты._IDRRef
	|ИЗ
	|	ВнешнийИсточникДанных.БазаБитФинанс.Таблица.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты._Code В(&СписокРодителей)";
Запрос.УстановитьПараметр("СписокРодителей",СписокРодителей);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаРодителей = РезультатЗапроса.Выбрать();	
	Пока ВыборкаРодителей.Следующий() Цикл
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Контрагенты._IDRRef,
		|	Контрагенты._Code,
		|	Контрагенты._Description,
		|	Контрагенты.НаименованиеПолное,
		|	Контрагенты.ИНН,
		|	Контрагенты.КПП,
		|	Контрагенты._Folder,
		|	ДОБАВИТЬКДАТЕ(Контрагенты.ДатаСоздания, МЕСЯЦ, -24000) КАК ДатаСоздания
		|ИЗ
		|	ВнешнийИсточникДанных.БазаБитФинанс.Таблица.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты._ParentIDRRef = &_ParentIDRRef
		|	И Контрагенты._Folder <> &_Folder
		|	И ДОБАВИТЬКДАТЕ(Контрагенты.ДатаСоздания, МЕСЯЦ, -24000) = &НаДату";
	Запрос.УстановитьПараметр("_ParentIDRRef",ВыборкаРодителей._IDRRef);
	Запрос.УстановитьПараметр("_Folder","00");
	Запрос.УстановитьПараметр("НаДату",НачалоДня(НачалоДня(ТекущаяДата())-1));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Контрагент = Справочники.Контрагенты.СоздатьЭлемент();
		Контрагент.Наименование = ВыборкаДетальныеЗаписи._Description;
		Контрагент.ПолнНаименование = ВыборкаДетальныеЗаписи.НаименованиеПолное;
		Контрагент.ИНН = ВыборкаДетальныеЗаписи.ИНН;
		Контрагент.КПП = ВыборкаДетальныеЗаписи.КПП;
		СписокКИ = ПолучитьКонтактнуюИнформацию(ВыборкаДетальныеЗаписи._IDRRef);
			Для каждого КИ Из СписокКИ Цикл	
				Если СокрЛП(КИ.Значение) = "Юридический адрес" Тогда
				Контрагент.ЮридическийАдрес = КИ.Представление;
				ИначеЕсли СокрЛП(КИ.Значение) = "Почтовый адрес" Тогда
				Контрагент.ПочтовыйАдрес = КИ.Представление;
				ИначеЕсли СокрЛП(КИ.Значение) = "Телефон" Тогда
				Контрагент.Телефоны = КИ.Представление;					
				ИначеЕсли СокрЛП(КИ.Значение) = "Email" Тогда
				Контрагент.Email = КИ.Представление;				
				КонецЕсли; 
			КонецЦикла; 
		Контрагент.Записать();
		//	Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ИНН) Тогда
		//	ТЧ.Ссылка = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СокрЛП(ВыборкаДетальныеЗаписи.ИНН));
		//	КонецЕсли;
		//		Если ТЧ.Ссылка.Пустая() Тогда
		//		ТЧ.Ссылка = НайтиКонтрагентаПоНаименованию(ВыборкаДетальныеЗаписи._Description);
		//			Если Не ТЧ.Ссылка.Пустая() Тогда	
		//				Если СокрЛП(ВРЕГ(ТЧ.Ссылка.Наименование)) <> СокрЛП(ВРЕГ(ВыборкаДетальныеЗаписи._Description)) Тогда
		//				ТЧ.НеточноеСоответствие = Истина;
		//				КонецЕсли; 
		//			КонецЕсли; 
		//		КонецЕсли;  
		КонецЦикла;
	КонецЦикла;
	   	Если ПривилегированныйРежим() Тогда 
	   	УстановитьПривилегированныйРежим(Ложь);
	   	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаКрупныхЗаказов

Процедура НайтиМТКНаСервере(СписокМТК,Счёт,Номенклатура)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутнаяКарта.Ссылка
	|ИЗ
	|	Документ.МаршрутнаяКарта КАК МаршрутнаяКарта
	|ГДЕ
	|	МаршрутнаяКарта.СтандартныйКомментарий = &СтандартныйКомментарий
	|	И МаршрутнаяКарта.Счёт = &Счёт
	|	И МаршрутнаяКарта.Номенклатура = &Номенклатура";
Запрос.УстановитьПараметр("СтандартныйКомментарий",Справочники.СтандартныеКомментарии.НайтиПоНаименованию("Крупный заказ",Истина));
Запрос.УстановитьПараметр("Счёт",Счёт);
Запрос.УстановитьПараметр("Номенклатура",Номенклатура);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокМТК.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
КонецПроцедуры

Функция ПроверитьНаИспытания(СписокМТК)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственноеЗадание.Ссылка
	|ИЗ
	|	Документ.ПроизводственноеЗадание КАК ПроизводственноеЗадание
	|ГДЕ
	|	ПроизводственноеЗадание.ДокументОснование В(&СписокМТК)
	|	И ПроизводственноеЗадание.Испытания <> 0";
Запрос.УстановитьПараметр("СписокМТК",СписокМТК);
РезультатЗапроса = Запрос.Выполнить();
Возврат(Не РезультатЗапроса.Пустой());
КонецФункции

Процедура ВыгрузитьКрупныйЗаказ(БазаСбыта,СписокМТК,ОшибкиПриВыгрузкеКЗ)
Запрос = Новый Запрос;

бсСклад = БазаСбыта.Справочники.Склады.НайтиПоНаименованию("СД 423",Истина);
Номенклатура = СписокМТК[0].Значение.Номенклатура;
Счёт = СписокМТК[0].Значение.Счёт;
Количество = 0;
	Для каждого МТК Из СписокМТК Цикл
	Количество = Количество + МТК.Значение.Количество;
	КонецЦикла;

	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	бсНовДок = БазаСбыта.Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	бсНовДок.Дата = ТекущаяДата();
	бсНовДок.Организация = БазаСбыта.Справочники.Организации.НайтиПоКоду("02");
	бсНовДок.Партнер = БазаСбыта.Справочники.Партнеры.НайтиПоКоду("00-00000010");
	бсНовДок.Склад = бсСклад;
	бсНовДок.ХозяйственнаяОперация = БазаСбыта.Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
	бсНовДок.НалогообложениеНДС = БазаСбыта.Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
	бсНовДок.БанковскийСчетОрганизации = БазаСбыта.ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(бсНовДок.Организация);
	бсНовДок.Валюта = БазаСбыта.Справочники.Валюты.НайтиПоКоду("643");
	бсНовДок.ВалютаВзаиморасчетов = БазаСбыта.Справочники.Валюты.НайтиПоКоду("643");

	Артикул = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(Номенклатура.Товар.Код);
	бсНомен = БазаСбыта.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
		Если бсНомен.Пустая() Тогда
		ОшибкиПриВыгрузкеКЗ = ОшибкиПриВыгрузкеКЗ+СокрЛП(Номенклатура.Товар.Наименование)+" - товар с артикулом "+Артикул+" не найден в торговой базе!"+Символы.ПС;				
		Возврат;
		КонецЕсли;
	Количество = Количество*?(Номенклатура.Товар.КоличествоГрупповойУпаковки > 0,Номенклатура.Товар.КоличествоГрупповойУпаковки,1);
	ТЧ_Т = бсНовДок.Товары.Добавить();
	ТЧ_Т.Склад = бсСклад;	
	ТЧ_Т.Номенклатура = бсНомен;
	ТЧ_Т.ИМНомерЗаказаЗаказнойТовар = Счёт;
	ТЧ_Т.КоличествоУпаковок = Количество;
	ТЧ_Т.ИмКоличествоЗарегистрировано = Количество;
	ТЧ_Т.Количество = Количество;
	ТЧ_Т.СтавкаНДС = бсНомен.СтавкаНДС;
	ТЧ_Т.Цена = бсНомен.ИмЦена;
	ТЧ_Т.Сумма = ТЧ_Т.КоличествоУпаковок*ТЧ_Т.Цена;
		Если БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС18) Тогда
		ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.18;
		ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
		ИначеЕсли БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС20) Тогда
		ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.2;
		ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
		Иначе	
		ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма;
		КонецЕсли;
			Для каждого МТК Из СписокМТК Цикл
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	БарКоды.БарКод
				|ИЗ
				|	РегистрСведений.БарКоды КАК БарКоды
				|ГДЕ
				|	БарКоды.ПЗ.ДокументОснование = &ДокументОснование";
			Запрос.УстановитьПараметр("ДокументОснование", МТК.Значение);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ТЧ_ШК = бсНовДок.Штрихкоды.Добавить();	
				ТЧ_ШК.Номенклатура = бсНомен;
				ТЧ_ШК.ШК = ВыборкаДетальныеЗаписи.БарКод;
				КонецЦикла;
			МТК = МТК.Значение.ПолучитьОбъект();
			МТК.Выгружено = Истина;
			МТК.Записать(РежимЗаписиДокумента.Проведение);
			КонецЦикла;
				Если (Найти(СписокМТК[0].Значение.Подразделение.Наименование,"Богородицк УД") > 0)или
					 (Найти(СписокМТК[0].Значение.Подразделение.Наименование,"Богородицк датчики давления") > 0) Тогда
				бсНовДок.Комментарий = "&ДД Выгрузка УД из производственной базы от "+ТекущаяДата();
				Иначе	
				бсНовДок.Комментарий = "Выгрузка УПЭА из производственной базы от "+ТекущаяДата();
				КонецЕсли;
	бсНовДок.Записать();
	ОшибкиПриВыгрузкеКЗ = ОшибкиПриВыгрузкеКЗ+"Создан документ "+бсНовДок.Номер+Символы.ПС;
	бсНовДок.Записать(БазаСбыта.РежимЗаписиДокумента.Проведение);
		Если ТипЗнч(СписокМТК[0].Значение.ДокументОснование) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
			Если СписокМТК[0].Значение.ДокументОснование.ТорговыйДом Тогда
				Если Не СоздатьРеализациюИСчётФактуру(БазаСбыта,бсНовДок.Ссылка,ОшибкиПриВыгрузкеКЗ) Тогда
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				ОшибкиПриВыгрузкеКЗ = ОшибкиПриВыгрузкеКЗ+"Не создан документ реализации и счёт фактуры!"+Символы.ПС;
				Возврат;
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли; 			 
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	ОшибкиПриВыгрузкеКЗ = ОшибкиПриВыгрузкеКЗ+ОписаниеОшибки()+Символы.ПС;
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
КонецПроцедуры

Процедура ВыгрузкаКрупныхЗаказов() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1ССбыт.Получить());
	Если БазаСбыта = Неопределено Тогда
	Константы.ДатаПоследнейВыгрузкиКЗ.Установить(ТекущаяДата());
	Константы.ОшибкиПриВыгрузкеКЗ.Установить("Не открыто соединение с базой сбыта!");
	ЗаписьЖурналаРегистрации("ВыгрузкаКЗ",УровеньЖурналаРегистрации.Информация,Метаданные.РегламентныеЗадания.ВыгрузкаКрупныхЗаказов,"Не открыто соединение с базой сбыта!");
	Возврат;
	КонецЕсли;

Запрос = Новый Запрос;
СписокМТК = Новый СписокЗначений;

ОшибкиПриВыгрузкеКЗ = "";

Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутнаяКарта.Ссылка КАК Ссылка,
	|	МаршрутнаяКарта.Номенклатура КАК Номенклатура,
	|	МаршрутнаяКарта.Количество КАК Количество
	|ИЗ
	|	Документ.МаршрутнаяКарта КАК МаршрутнаяКарта
	|ГДЕ
	|	МаршрутнаяКарта.СтандартныйКомментарий = &СтандартныйКомментарий
	|	И МаршрутнаяКарта.Выгружено = ЛОЖЬ";
Запрос.УстановитьПараметр("СтандартныйКомментарий",Справочники.СтандартныеКомментарии.НайтиПоНаименованию("Крупный заказ последний",Истина));
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокМТК.Очистить();
	СписокМТК.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
	НайтиМТКНаСервере(СписокМТК,ВыборкаДетальныеЗаписи.Ссылка.Счёт,ВыборкаДетальныеЗаписи.Ссылка.Номенклатура);
	флВыполнено = Истина;
		Для каждого МТК Из СписокМТК Цикл
			Если МТК.Значение.Статус <> 3 Тогда
			флВыполнено = Ложь;
			Прервать;
			КонецЕсли; 
		КонецЦикла;
			Если флВыполнено Тогда
				Если Не ПроверитьНаИспытания(СписокМТК) Тогда
				ВыгрузитьКрупныйЗаказ(БазаСбыта,СписокМТК,ОшибкиПриВыгрузкеКЗ);				
				КонецЕсли;		
			КонецЕсли; 
	КонецЦикла;
Константы.ОшибкиПриВыгрузкеКЗ.Установить(ОшибкиПриВыгрузкеКЗ);
Константы.ДатаПоследнейВыгрузкиКЗ.Установить(ТекущаяДата());
ЗаписьЖурналаРегистрации("ВыгрузкаКЗ",УровеньЖурналаРегистрации.Информация,Метаданные.РегламентныеЗадания.ВыгрузкаКрупныхЗаказов,ОшибкиПриВыгрузкеКЗ);
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СинхронизациПроектов

Процедура СинхронизацияПроектов() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(7) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БазаАСЗП = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Справочники.ОбменДанными.НайтиПоНаименованию("База АСЗП",Истина));
	Если БазаАСЗП <> Неопределено Тогда
		Попытка
	    Запрос = БазаАСЗП.NewObject("Запрос");
		СписокСтатусов = БазаАСЗП.NewObject("СписокЗначений");
		//СписокСтатусов = Новый СписокЗначений;

		СписокСтатусов.Добавить("Новый");
		СписокСтатусов.Добавить("Открыт");
		СписокСтатусов.Добавить("Закрыт");
	                                            
		СписокРодителей = БазаАСЗП.NewObject("СписокЗначений");
		//СписокРодителей = Новый СписокЗначений;

		СписокРодителей.Добавить("000003");
		СписокРодителей.Добавить("000004");
		СписокРодителей.Добавить("000005");
		СписокРодителей.Добавить("000011");
		СписокРодителей.Добавить("000026");
		СписокРодителей.Добавить("000050");
		СписокРодителей.Добавить("000300");
		СписокРодителей.Добавить("001688");
		СписокРодителей.Добавить("001694");
		СписокРодителей.Добавить("001697");
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Проекты.Код,
			|	Проекты.Наименование,
			|	Проекты.Шифр,
			|	Проекты.Статус.Наименование КАК Статус,
			|	Проекты.ТипРабот.Код КАК ТипРаботКод
			|ИЗ
			|	Справочник.Проекты КАК Проекты
			|ГДЕ
			|	Проекты.Статус.Наименование В(&СписокСтатусов)
			|	И Проекты.Родитель.Код В(&СписокРодителей)
			|	И Проекты.ПометкаУдаления = ЛОЖЬ
			|	И Проекты.ЭтоГруппа = ЛОЖЬ";
		Запрос.УстановитьПараметр("СписокРодителей", СписокРодителей);
		Запрос.УстановитьПараметр("СписокСтатусов", СписокСтатусов);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			Родитель = Справочники.Проекты.НайтиПоНаименованию("Проекты по разработке",Истина);
			Проект = Справочники.Проекты.НайтиПоКоду(ВыборкаДетальныеЗаписи.Код,,Родитель);
				Если Проект.Пустая() Тогда
					Если СокрЛП(ВыборкаДетальныеЗаписи.Статус) <> "Закрыт" Тогда
					ПроектОбъект = Справочники.Проекты.СоздатьЭлемент();                  
                    ПроектОбъект.Родитель = Родитель;
					ПроектОбъект.Код = ВыборкаДетальныеЗаписи.Код;
					ПроектОбъект.Наименование = ВыборкаДетальныеЗаписи.Шифр;
					ПроектОбъект.Комментарий = ВыборкаДетальныеЗаписи.Наименование;
						Если ВыборкаДетальныеЗаписи.ТипРаботКод = 18 Тогда
						ПроектОбъект.Редизайн = Истина;					
						КонецЕсли;
					ПроектОбъект.Записать();
					КонецЕсли; 
				Иначе
					Если СокрЛП(ВыборкаДетальныеЗаписи.Статус) = "Закрыт" Тогда
					ПроектОбъект = Проект.ПолучитьОбъект();                  
					ПроектОбъект.Закрыт = Истина;
					ПроектОбъект.Записать();
					КонецЕсли;			
				КонецЕсли;		
			КонецЦикла;
		Исключение
		СостояниеРЗ = СостояниеРЗ + ОписаниеОшибки() + Символы.ПС;
		КонецПопытки;
    Иначе 
    СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с базой АСЗП!" + Символы.ПС;
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(7,СостояниеРЗ);
   	Если ПривилегированныйРежим() Тогда 
   	УстановитьПривилегированныйРежим(Ложь);
   	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СозданиеННС

Функция ПолучитьКоличествоННС(ЗНП,Продукция,КоличествоВЗаказе)
Запрос = Новый Запрос;

	Если ТипЗнч(Продукция) = Тип("СправочникСсылка.Номенклатура") Тогда
	МестоХранения = Продукция.Линейка.МестоХраненияГП;
	Иначе	
	МестоХранения = Константы.МестоХраненияТНП.Получить();
	КонецЕсли;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезервированиеГПОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.РезервированиеГП.Остатки КАК РезервированиеГПОстатки
	|ГДЕ
	|	РезервированиеГПОстатки.МестоХранения = &МестоХранения
	|	И РезервированиеГПОстатки.Продукция = &Продукция
	|	И РезервированиеГПОстатки.Документ = &Документ";
Запрос.УстановитьПараметр("Документ", ЗНП); 
Запрос.УстановитьПараметр("МестоХранения", МестоХранения);
Запрос.УстановитьПараметр("Продукция", Продукция);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.КоличествоОстаток > 0 Тогда
			Если Продукция.Товар.ТоварнаяГруппа.ГрупповаяУпаковка Тогда
				Если КоличествоВЗаказе = ВыборкаДетальныеЗаписи.КоличествоОстаток Тогда
				Возврат(ВыборкаДетальныеЗаписи.КоличествоОстаток);
				КонецЕсли; 
		    Иначе
			Возврат(ВыборкаДетальныеЗаписи.КоличествоОстаток);
			КонецЕсли;		
		КонецЕсли;	 
	КонецЦикла;
Возврат(0);
КонецФункции

Процедура ПроверитьЧастичнуюОтгрузку(ЗНП,ТаблицаЗНП)
Запрос = Новый Запрос;

	Для каждого ТЧ Из ЗНП.Заказ Цикл
		Если ТипЗнч(ТЧ.Продукция) = Тип("Неопределено") Тогда
		Продолжить;
		КонецЕсли;
			Если ТипЗнч(ТЧ.Продукция) = Тип("СправочникСсылка.Номенклатура") Тогда
			МестоХранения = ТЧ.Продукция.Линейка.МестоХраненияГП;
			Иначе
			МестоХранения = Константы.МестоХраненияТНП.Получить();
			КонецЕсли;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезервированиеГПОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.РезервированиеГП.Остатки КАК РезервированиеГПОстатки
		|ГДЕ
		|	РезервированиеГПОстатки.Документ = &Документ
		|	И РезервированиеГПОстатки.Продукция = &Продукция
		|	И РезервированиеГПОстатки.МестоХранения = &МестоХранения";
	Запрос.УстановитьПараметр("Документ", ЗНП);
	Запрос.УстановитьПараметр("Продукция", ТЧ.Продукция);
	Запрос.УстановитьПараметр("МестоХранения", МестоХранения);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ТЧ.Товар.ТоварнаяГруппа.ГрупповаяУпаковка Тогда
				Если ТЧ.КоличествоВЗаказе = ВыборкаДетальныеЗаписи.КоличествоОстаток Тогда
				ТЧ_ЗНП = ТаблицаЗНП.Добавить();
				ТЧ_ЗНП.ЗНП = ЗНП;
				ТЧ_ЗНП.Продукция = ТЧ.Продукция;
				ТЧ_ЗНП.Количество = ВыборкаДетальныеЗаписи.КоличествоОстаток;
				КонецЕсли; 
		    Иначе
			ТЧ_ЗНП = ТаблицаЗНП.Добавить();
			ТЧ_ЗНП.ЗНП = ЗНП;
			ТЧ_ЗНП.Продукция = ТЧ.Продукция;
			ТЧ_ЗНП.Количество = ВыборкаДетальныеЗаписи.КоличествоОстаток;
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла; 
КонецПроцедуры

Процедура ПроверитьПолнуюОтгрузку(ЗНП,ТаблицаЗНП)
Запрос = Новый Запрос;
ТаблицаТоваров = Новый ТаблицаЗначений;

ТаблицаТоваров.Колонки.Добавить("Продукция");
ТаблицаТоваров.Колонки.Добавить("Количество");

Результат = Истина;

	Для каждого ТЧ Из ЗНП.Заказ Цикл
		Если ТипЗнч(ТЧ.Продукция) = Тип("Неопределено") Тогда
		Результат = Ложь;
		Прервать;
		КонецЕсли;
			Если ТипЗнч(ТЧ.Продукция) = Тип("СправочникСсылка.Номенклатура") Тогда
			МестоХранения = ТЧ.Продукция.Линейка.МестоХраненияГП;
			Иначе
			МестоХранения = Константы.МестоХраненияТНП.Получить();
			КонецЕсли;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РезервированиеГПОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.РезервированиеГП.Остатки КАК РезервированиеГПОстатки
		|ГДЕ
		|	РезервированиеГПОстатки.МестоХранения = &МестоХранения
		|	И РезервированиеГПОстатки.Продукция = &Продукция
		|	И РезервированиеГПОстатки.Документ = &Документ";
	Запрос.УстановитьПараметр("Документ", ЗНП); 
	Запрос.УстановитьПараметр("МестоХранения",МестоХранения);
	Запрос.УстановитьПараметр("Продукция", ТЧ.Продукция);
	РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать(); 
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				//Если ВыборкаДетальныеЗаписи.КоличествоОстаток < (ТЧ.КоличествоВЗаказе - ПолучитьКорректировкуЗНП(ЗНП,ТЧ.Продукция)) Тогда
				Если ВыборкаДетальныеЗаписи.КоличествоОстаток < (ТЧ.КоличествоВЗаказе) Тогда
				Результат = Ложь;
				Прервать;
				Иначе
				ТЧ = ТаблицаТоваров.Добавить();
				ТЧ.Продукция = ТЧ.Продукция;
				ТЧ.Количество = ВыборкаДетальныеЗаписи.КоличествоОстаток;	
				КонецЕсли; 
			КонецЦикла;
		Иначе
		Результат = Ложь;
		Прервать;	
		КонецЕсли;
	КонецЦикла;
		Если Результат Тогда
			Для каждого ТЧ Из ТаблицаТоваров Цикл
			ТЧ_ЗНП = ТаблицаЗНП.Добавить();
			ТЧ_ЗНП.ЗНП = ЗНП;
			ТЧ_ЗНП.Продукция = ТЧ.Продукция;
			ТЧ_ЗНП.Количество = ТЧ.Количество;
			КонецЦикла; 
		КонецЕсли; 
КонецПроцедуры

Процедура СоздатьННС(Контрагент,КартаДоставки,ТаблицаЗНП)
ННС = Документы.НакладнаяНаСборку.СоздатьДокумент();
ННС.Автор = ПараметрыСеанса.Пользователь;
ННС.Дата = ТекущаяДата();
ННС.Контрагент = Контрагент;
ННС.КартаДоставки = КартаДоставки;
ННС.ДатаОтгрузки = ТекущаяДата();
	Для каждого ТЧ Из ТаблицаЗНП Цикл
	ТЧ_ННС = ННС.ТабличнаяЧасть.Добавить();
	ТЧ_ННС.ЗаказНаПроизводство = ТЧ.ЗНП;
	ТЧ_ННС.Товар = ТЧ.Продукция.Товар;
	ТЧ_ННС.Продукция = ТЧ.Продукция;
	ТЧ_ННС.Количество = ТЧ.Количество;
	КонецЦикла;
		Если ННС.ТабличнаяЧасть.Количество() > 0 Тогда
		ННС.ТабличнаяЧасть.Сортировать("Товар");
		ННС.Записать(РежимЗаписиДокумента.Проведение);
		СННС = РегистрыСведений.СтатусыНакладныхНаСборку.СоздатьМенеджерЗаписи();
		СННС.Период = ТекущаяДата();
		СННС.НакладнаяНаСборку = ННС.Ссылка;
		СННС.Статус = Перечисления.СтатусыНакладнойНаСборку.Создан;
		СННС.Записать();
		КонецЕсли;
КонецПроцедуры

Процедура СозданиеНакладныхНаСборку() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);

Запрос = Новый Запрос;

ТаблицаЗНП = Новый ТаблицаЗначений;

ТаблицаЗНП.Колонки.Добавить("ЗНП");
ТаблицаЗНП.Колонки.Добавить("Продукция");
ТаблицаЗНП.Колонки.Добавить("Количество");

ДН = ДеньНедели(ТекущаяДата());
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПроизводство.Ссылка КАК Ссылка,
	|	ЗаказНаПроизводство.Контрагент КАК Контрагент,
	|	ЗаказНаПроизводство.КартаДоставки КАК КартаДоставки
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Закрыт = ЛОЖЬ
	|	И ЗаказНаПроизводство.ОтгрузкаПоЗапросу = ЛОЖЬ
	|	И ЗаказНаПроизводство.ВидОтгрузки <> &ВидОтгрузки";
	Запрос.Текст = Запрос.Текст + " И ЗаказНаПроизводство.ОтгрузкаПоЗапросу = ЛОЖЬ";	
		Если ДН = 1 Тогда
		Запрос.Текст = Запрос.Текст + " И ЗаказНаПроизводство.Понедельник = ИСТИНА";
		ИначеЕсли ДН = 2 Тогда
		Запрос.Текст = Запрос.Текст + " И ЗаказНаПроизводство.Вторник = ИСТИНА";
		ИначеЕсли ДН = 3 Тогда
		Запрос.Текст = Запрос.Текст + " И ЗаказНаПроизводство.Среда = ИСТИНА";
		ИначеЕсли ДН = 4 Тогда
		Запрос.Текст = Запрос.Текст + " И ЗаказНаПроизводство.Четверг = ИСТИНА";
		ИначеЕсли ДН = 5 Тогда
		Запрос.Текст = Запрос.Текст + " И ЗаказНаПроизводство.Пятница = ИСТИНА";
		ИначеЕсли ДН = 6 Тогда
		Запрос.Текст = Запрос.Текст + " И ЗаказНаПроизводство.Суббота = ИСТИНА";
		ИначеЕсли ДН = 7 Тогда
		Запрос.Текст = Запрос.Текст + " И ЗаказНаПроизводство.Воскресенье = ИСТИНА";	
		КонецЕсли;	
Запрос.Текст = Запрос.Текст + "	УПОРЯДОЧИТЬ ПО
								|	Контрагент,
								|	КартаДоставки
								|ИТОГИ ПО
								|	Контрагент,
								|	КартаДоставки";
Запрос.УстановитьПараметр("ВидОтгрузки",Перечисления.ВидыОтгрузки.ПустаяСсылка()); 
РезультатЗапроса = Запрос.Выполнить();
ВыборкаКонтрагенты = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаКонтрагенты.Следующий() Цикл
	ВыборкаКД = ВыборкаКонтрагенты.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаКД.Следующий() Цикл
		ТаблицаЗНП.Очистить();
		ВыборкаДетальныеЗаписи = ВыборкаКД.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.Ссылка.ВидОтгрузки = Перечисления.ВидыОтгрузки.Частичная Тогда
				ПроверитьЧастичнуюОтгрузку(ВыборкаДетальныеЗаписи.Ссылка,ТаблицаЗНП);	
				ИначеЕсли ВыборкаДетальныеЗаписи.Ссылка.ВидОтгрузки = Перечисления.ВидыОтгрузки.Полная Тогда
				ПроверитьПолнуюОтгрузку(ВыборкаДетальныеЗаписи.Ссылка,ТаблицаЗНП);
				КонецЕсли;
			КонецЦикла;
				Если ТаблицаЗНП.Количество() > 0 Тогда	
				СоздатьННС(ВыборкаКонтрагенты.Контрагент,ВыборкаКД.КартаДоставки,ТаблицаЗНП);
				КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
		Если ПривилегированныйРежим() Тогда 
		УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаСвободныхОстатков 

Процедура ПочтоваяРассылка(Файл)
Сообщение = Новый ИнтернетПочтовоеСообщение;
ИПП = Новый ИнтернетПочтовыйПрофиль; 

НастройкиПочты = ОбщийМодульВызовСервера.ПолучитьНастройкиПочты();
ИПП.АдресСервераSMTP = НастройкиПочты.АдресСервераSMTP; 
ИПП.ПортSMTP = НастройкиПочты.ПортSMTP;
ИПП.ВремяОжидания = 60; 
ИПП.Пароль = НастройкиПочты.ПарольПочтовогоСервера; 
ИПП.Пользователь = "Автоматическая рассылка из ПБ";
//Сообщение.Отправитель.Адрес = "a.dvortsov@owen.ru"; 
//Сообщение.Получатели.Добавить("a.dvortsov@owen.ru");
Сообщение.Получатели.Добавить("sales@owen.ru");
Сообщение.Получатели.Добавить("support@owen.ru");
Сообщение.Получатели.Добавить("dealer@owen.ru");

Сообщение.Тема = "Выгрузка свободных остатков ГП (автоматическая рассылка)!"; 
Текст = "Здравствуйте!";
Текст = Текст + Символы.ПС+ "";
Текст = Текст + Символы.ПС+ "В прикрепленном файле выгрузка свободных остатков ГП";	
Текст = Текст + Символы.ПС+ "";
Текст = Текст + Символы.ПС+ "Служба автоматической рассылки производственной базы!";
Сообщение.Тексты.Добавить(Текст);
Сообщение.Вложения.Добавить(Файл);	
// Подключиться и отправить. 
Почта = Новый ИнтернетПочта; 
Почта.Подключиться(ИПП);
Почта.Послать(Сообщение); 
Почта.Отключиться();
КонецПроцедуры

Процедура ВыгрузкаСвободныхОстатков() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(4) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";

БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1ССбыт.Получить());
	Если БазаСбыта <> Неопределено Тогда
	Запрос = Новый Запрос;
	Фильтр   = Новый Структура;
	СписокСтатусов = Новый СписокЗначений;

	СписокСтатусов.Добавить(Перечисления.СтатусыМПЗ.Запрещённая);
	СписокСтатусов.Добавить(Перечисления.СтатусыСпецификаций.Запрещённая);
		Попытка
			Если Константы.КодБазы.Получить() = "БГР" Тогда
			НаборЗаписей = БазаСбыта.РегистрыСведений.ОвенСвободныеОстатки.СоздатьНаборЗаписей();
			НаборЗаписей.Записать();
			Иначе
			НаборЗаписей = БазаСбыта.РегистрыСведений.СвободныеОстатки.СоздатьНаборЗаписей();
			НаборЗаписей.Записать();
			КонецЕсли;
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МестаХраненияОстатки.МестоХранения КАК МестоХранения,
			|	МестаХраненияОстатки.МПЗ КАК МПЗ,
			|	МестаХраненияОстатки.КоличествоОстаток КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.МестаХранения.Остатки КАК МестаХраненияОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
			|		ПО МестаХраненияОстатки.МПЗ = СтатусыМПЗСрезПоследних.МПЗ
			|ГДЕ
			|	МестаХраненияОстатки.МестоХранения.ВыгружатьСвободныеОстатки = ИСТИНА
			|	И МестаХраненияОстатки.МестоХранения <> &МестоХранения
			|	И НЕ СтатусыМПЗСрезПоследних.Статус В (&СписокСтатусов)
			|
			|УПОРЯДОЧИТЬ ПО
			|	МестаХраненияОстатки.МПЗ.Наименование
			|ИТОГИ ПО
			|	МПЗ";
		Запрос.УстановитьПараметр("МестоХранения",Константы.МестоХраненияНеликвидов.Получить());
		Запрос.УстановитьПараметр("СписокСтатусов",СписокСтатусов);
		Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаМПЗ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаМПЗ.Следующий() Цикл
				Если Константы.КодБазы.Получить() = "ХРК" Тогда
					Если Найти(ВыборкаМПЗ.МПЗ.Наименование,"_КТ") > 0 Тогда
					Продолжить;
					КонецЕсли; 
				КонецЕсли; 
					Если ВыборкаМПЗ.МПЗ.Товар.Пустая() Тогда
					Продолжить;			
					КонецЕсли;
			КоличествоОстаток = 0;
			КоличествоРезерв = 0;
			ВыборкаДетальныеЗаписи = ВыборкаМПЗ.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				КоличествоОстаток = КоличествоОстаток + ВыборкаДетальныеЗаписи.КоличествоОстаток;
				Фильтр.Очистить();
				Фильтр.Вставить("МестоХранения", ВыборкаДетальныеЗаписи.МестоХранения);
				Фильтр.Вставить("Продукция",ВыборкаМПЗ.МПЗ);
				ТабРезерв = РегистрыНакопления.РезервированиеГП.Остатки(ТекущаяДата(),Фильтр);
					Для к = 0 По ТабРезерв.Количество()-1 Цикл	
					КоличествоРезерв = КоличествоРезерв + ТабРезерв[к].Количество;
					КонецЦикла;
				КонецЦикла;
			КоличествоОстаток = КоличествоОстаток - КоличествоРезерв;
				Если КоличествоОстаток > 0 Тогда 
				Артикул = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(ВыборкаМПЗ.МПЗ.Товар.Код);
					Если Константы.КодБазы.Получить() = "БГР" Тогда
					СвободныеОстатки = БазаСбыта.РегистрыСведений.ОвенСвободныеОстатки.СоздатьМенеджерЗаписи();
					Иначе
					СвободныеОстатки = БазаСбыта.РегистрыСведений.СвободныеОстатки.СоздатьМенеджерЗаписи();
					КонецЕсли;
				СвободныеОстатки.Артикул = Артикул;
				СвободныеОстатки.Количество = КоличествоОстаток;
			    СвободныеОстатки.Записать();			
				КонецЕсли;
			КонецЦикла;	
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	МестаХраненияОстатки.МестоХранения КАК МестоХранения,
			|	МестаХраненияОстатки.МПЗ КАК МПЗ,
			|	МестаХраненияОстатки.КоличествоОстаток КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.МестаХранения.Остатки КАК МестаХраненияОстатки
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
			|		ПО МестаХраненияОстатки.МПЗ = СтатусыМПЗСрезПоследних.МПЗ
			|ГДЕ
			|	МестаХраненияОстатки.МестоХранения.ВыгружатьСвободныеОстатки = ИСТИНА
			|	И МестаХраненияОстатки.МестоХранения = &МестоХранения
			|	И НЕ СтатусыМПЗСрезПоследних.Статус В (&СписокСтатусов)
			|
			|УПОРЯДОЧИТЬ ПО
			|	МестаХраненияОстатки.МПЗ.Наименование
			|ИТОГИ ПО
			|	МПЗ";
		Запрос.УстановитьПараметр("МестоХранения",Константы.МестоХраненияНеликвидов.Получить());
		Запрос.УстановитьПараметр("СписокСтатусов",СписокСтатусов);
		Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаМПЗ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаМПЗ.Следующий() Цикл
				Если Константы.КодБазы.Получить() = "ХРК" Тогда
					Если Найти(ВыборкаМПЗ.МПЗ.Наименование,"_КТ") > 0 Тогда
					Продолжить;
					КонецЕсли; 
				КонецЕсли;
					Если ВыборкаМПЗ.МПЗ.Товар.Пустая() Тогда
					Продолжить;			
					КонецЕсли;
			КоличествоОстаток = 0;
			КоличествоРезерв = 0;
			ВыборкаДетальныеЗаписи = ВыборкаМПЗ.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				КоличествоОстаток = КоличествоОстаток + ВыборкаДетальныеЗаписи.КоличествоОстаток;
				Фильтр.Очистить();
				Фильтр.Вставить("МестоХранения", ВыборкаДетальныеЗаписи.МестоХранения);
				Фильтр.Вставить("Продукция",ВыборкаМПЗ.МПЗ);
				ТабРезерв = РегистрыНакопления.РезервированиеГП.Остатки(ТекущаяДата(),Фильтр);
					Для к = 0 По ТабРезерв.Количество()-1 Цикл	
					КоличествоРезерв = КоличествоРезерв + ТабРезерв[к].Количество;
					КонецЦикла;
				КонецЦикла;
			КоличествоОстаток = КоличествоОстаток - КоличествоРезерв;
				Если КоличествоОстаток > 0 Тогда 
				Артикул = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(ВыборкаМПЗ.МПЗ.Товар.Код);
					Если Константы.КодБазы.Получить() = "БГР" Тогда
					СвободныеОстатки = БазаСбыта.РегистрыСведений.ОвенСвободныеОстатки.СоздатьМенеджерЗаписи();
					Иначе
					СвободныеОстатки = БазаСбыта.РегистрыСведений.СвободныеОстатки.СоздатьМенеджерЗаписи();
					КонецЕсли;
				СвободныеОстатки.Артикул = Артикул;
				СвободныеОстатки.Количество = КоличествоОстаток;
				СвободныеОстатки.Неликвиды = Истина;
			    СвободныеОстатки.Записать();			
				КонецЕсли;
			КонецЦикла;
		СостояниеРЗ = СостояниеРЗ+"Остатки выгружены!"+Символы.ПС;
		Исключение
		СостояниеРЗ = СостояниеРЗ+ОписаниеОшибки()+Символы.ПС;		
		КонецПопытки;
	Иначе
	СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с базой сбыта!"+Символы.ПС;
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(4,СостояниеРЗ);
	Если ПривилегированныйРежим() Тогда 
	УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры
 
#КонецОбласти

#Область ЗагрузкаИзмененийПоДоставкеЗНП

Функция ПолучитьСоздатьТипДоставки(ТипДоставки)
	Если ТипДоставки.Пустая() Тогда
	Возврат(Справочники.ТипыДоставкиНП.ПустаяСсылка());
	КонецЕсли; 
ТД = Справочники.ТипыДоставкиНП.НайтиПоКоду(СокрЛП(ТипДоставки.Код));
	Если ТД.Пустая() Тогда                             
	ТДОбъект = Справочники.ТипыДоставкиНП.СоздатьЭлемент();
	ТДОбъект.Код = ТипДоставки.Код;
	ТДОбъект.Наименование = ТипДоставки.Наименование;
	ТДОбъект.RefNP = ТипДоставки.RefNP;
	ТДОбъект.Записать();
	Возврат(ТДОбъект.Ссылка);
	Иначе
	Возврат(ТД);
	КонецЕсли;
КонецФункции

Функция ПолучитьСоздатьТК(ТрансКом)
	Если ТрансКом.Пустая() Тогда
	Возврат(Справочники.ТранспортныеКомпании.ПустаяСсылка());
	КонецЕсли; 
ТК = Справочники.ТранспортныеКомпании.НайтиПоКоду(СокрЛП(ТрансКом.Код));
	Если ТК.Пустая() Тогда                             
	ТКОбъект = Справочники.ТранспортныеКомпании.СоздатьЭлемент();
	ТКОбъект.Код = ТрансКом.Код;
	ТКОбъект.Наименование = ТрансКом.Наименование;
	ТКОбъект.Записать();
	Возврат(ТКОбъект.Ссылка);
	Иначе
	Возврат(ТК);
	КонецЕсли;
КонецФункции

Функция ПолучитьСоздатьТипДоставкиМосква(Наименование)
	Если Наименование = "ДоДверей" Тогда
	ТД = Справочники.ТипыДоставкиНП.НайтиПоНаименованию("До дверей",ИСТИНА);
	ИначеЕсли Наименование = "ДоПунктаТК" Тогда
	ТД = Справочники.ТипыДоставкиНП.НайтиПоНаименованию("До пункта ТК",ИСТИНА);
	Иначе
	ТД = Справочники.ТипыДоставкиНП.НайтиПоНаименованию("",ИСТИНА);
	КонецЕсли; 

	Если ТД.Пустая() Тогда                             
	ТДОбъект = Справочники.ТипыДоставкиНП.СоздатьЭлемент();
	ТДОбъект.Наименование = Наименование;
	ТДОбъект.Записать();
	Возврат(ТДОбъект.Ссылка);
	Иначе
	Возврат(ТД);
	КонецЕсли;
КонецФункции

Функция ПолучитьСоздатьКартуДоставки(БазаСбыта,ЗаказКлиента,Контрагент)
	Если Константы.КодБазы.Получить() = "БГР" Тогда
	КартаДоставки = ЗаказКлиента.ИМКартаДоставки;	
	Иначе
	КартаДоставки = ЗаказКлиента.КартаДоставки;
	КонецЕсли;
		Если Не БазаСбыта.ЗначениеЗаполнено(КартаДоставки) Тогда
		Возврат(Справочники.КартыДоставки.ПустаяСсылка());
		КонецЕсли; 
КД = Справочники.КартыДоставки.НайтиПоКоду(СокрЛП(КартаДоставки.Код));	
	Если КД.Пустая() Тогда                             
	КДОбъект = Справочники.КартыДоставки.СоздатьЭлемент();
	КДОбъект.Владелец = Контрагент;
	КДОбъект.Код = КартаДоставки.Код;	
	Иначе
	КДОбъект = КД.ПолучитьОбъект();
	КонецЕсли;
КДОбъект.Наименование = КартаДоставки.Наименование;
КДОбъект.Плательщик = КартаДоставки.Плательщик;
	Если Константы.КодБазы.Получить() = "БГР" Тогда
	КДОбъект.ДатаСоздания = КартаДоставки.ДатаСоздания;
	КДОбъект.ТрансКом =  ПолучитьСоздатьТК(КартаДоставки.ТрансКом);
	КДОбъект.НазваниеКлиента = КартаДоставки.НазваниеКлиента;
	КДОбъект.Город = КартаДоставки.Город;
	КДОбъект.Телефон = КартаДоставки.Телефон;
	КДОбъект.УсловияДоставки = КартаДоставки.УсловияДоставки;
	КДОбъект.ТипДоставки = ПолучитьСоздатьТипДоставкиМосква(БазаСбыта.XMLString(КартаДоставки.ЦельДоставки));
		Если БазаСбыта.XMLString(КартаДоставки.КодОплаты) = "БезналСчет" Тогда
		КДОбъект.КодОплаты = Перечисления.КодыОплаты.БезналСчет;
		ИначеЕсли БазаСбыта.XMLString(КартаДоставки.КодОплаты) = "ПлатятСами" Тогда
		КДОбъект.КодОплаты = Перечисления.КодыОплаты.ПлатятСами;					
		ИначеЕсли БазаСбыта.XMLString(КартаДоставки.КодОплаты) = "Предоплата" Тогда
		КДОбъект.КодОплаты = Перечисления.КодыОплаты.Предоплата;				
		КонецЕсли;
	КДОбъект.ИНН = КартаДоставки.ИНН;
	Иначе
	КДОбъект.Город = КартаДоставки.ГородДоставкиНП.Наименование;
	КДОбъект.Телефон = КартаДоставки.ТелефонПолучателя;
	КДОбъект.ТипДоставки = ПолучитьСоздатьТипДоставки(КартаДоставки.ТипДоставки);
		Если СокрЛП(КартаДоставки.ФормаОплаты.Наименование) = "Безготівковий" Тогда
		КДОбъект.КодОплаты = Перечисления.КодыОплаты.Безготівковий;
		ИначеЕсли СокрЛП(КартаДоставки.ФормаОплаты.Наименование) = "Готівка" Тогда
		КДОбъект.КодОплаты = Перечисления.КодыОплаты.Готівка;	
		КонецЕсли;
			Если БазаСбыта.XMLString(КартаДоставки.ВариантОтгрузки) = "Самовывоз" Тогда
			КДОбъект.ВариантОтгрузки = Перечисления.ВариантыОтгрузки.Самовывоз;
			ИначеЕсли БазаСбыта.XMLString(КартаДоставки.ВариантОтгрузки) = "НоваяПочта" Тогда
			КДОбъект.ВариантОтгрузки = Перечисления.ВариантыОтгрузки.НоваяПочта;					
			ИначеЕсли БазаСбыта.XMLString(КартаДоставки.ВариантОтгрузки) = "ДругойПеревозчик" Тогда
			КДОбъект.ВариантОтгрузки = Перечисления.ВариантыОтгрузки.ДругойПеревозчик;
			ИначеЕсли БазаСбыта.XMLString(КартаДоставки.ВариантОтгрузки) = "ОфисОвен" Тогда
			КДОбъект.ВариантОтгрузки = Перечисления.ВариантыОтгрузки.ОфисОвен;
			ИначеЕсли БазаСбыта.XMLString(КартаДоставки.ВариантОтгрузки) = "НочнойЭкспресс" Тогда
			КДОбъект.ВариантОтгрузки = Перечисления.ВариантыОтгрузки.НочнойЭкспресс;
			ИначеЕсли БазаСбыта.XMLString(КартаДоставки.ВариантОтгрузки) = "САТ" Тогда
			КДОбъект.ВариантОтгрузки = Перечисления.ВариантыОтгрузки.САТ;
			ИначеЕсли БазаСбыта.XMLString(КартаДоставки.ВариантОтгрузки) = "Деливери" Тогда
			КДОбъект.ВариантОтгрузки = Перечисления.ВариантыОтгрузки.Деливери;
			ИначеЕсли БазаСбыта.XMLString(КартаДоставки.ВариантОтгрузки) = "Интайм" Тогда
			КДОбъект.ВариантОтгрузки = Перечисления.ВариантыОтгрузки.Интайм;				
			КонецЕсли; 
	КДОбъект.ПредставительПолучателя = КартаДоставки.ПредставительПолучателя;
	КДОбъект.ИмяПолучателя = КартаДоставки.ИмяПолучателя;
	КДОбъект.Улица = КартаДоставки.StreetRef;
	КДОбъект.НомерДома = КартаДоставки.BuildingNumber;
	КДОбъект.Квартира = КартаДоставки.Flat;
	КонецЕсли;
КДОбъект.Записать();
Возврат(КДОбъект.Ссылка);
КонецФункции
        
Функция ПолучитьСоздатьПроект(БазаСбыта,бсПроект)
	Если Не БазаСбыта.ЗначениеЗаполнено(бсПроект) Тогда
	Возврат(Справочники.Проекты.ПустаяСсылка());
	КонецЕсли;
Родитель = Справочники.Проекты.НайтиПоНаименованию("Проекты продаж",Истина);
Проект = Справочники.Проекты.НайтиПоКоду(СокрЛП(бсПроект.Код),,Родитель);
	Если Проект.Пустая() Тогда                             
	ПроектОбъект = Справочники.Проекты.СоздатьЭлемент();
    ПроектОбъект.Родитель = Родитель;
	ПроектОбъект.Код = СокрЛП(бсПроект.Код);
	ПроектОбъект.Наименование = СокрЛП(бсПроект.Код)+" "+СокрЛП(бсПроект.Наименование);
	ПроектОбъект.Записать();
	Возврат(ПроектОбъект.Ссылка);
	Иначе
	Возврат(Проект);
	КонецЕсли;
КонецФункции

Процедура ЗагрузкаИзмененийПоДоставкеЗНП() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(6) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1ССбыт.Получить());
	Если БазаСбыта <> Неопределено Тогда
	Запрос = БазаСбыта.NewObject("Запрос");

	Запрос.Текст = "ВЫБРАТЬ *
	   |ИЗ
	   |	РегистрСведений.ИзмененияПоДоставкеЗаказа КАК ИзмененияПоДоставкеЗаказа
	   |ГДЕ
	   |	ИзмененияПоДоставкеЗаказа.Выгружено = ЛОЖЬ";
	ТЗ = Запрос.Выполнить().Выгрузить();
		Для Каждого ТЧ Из ТЗ Цикл
		Заказ =  ТЧ.Заказ;
		ЗНП = Документы.ЗаказНаПроизводство.НайтиПоНомеру(Заказ.Номер,ТекущаяДата());
			Если ЗНП.Пустая() Тогда
			ЗНП = Документы.ЗаказНаПроизводство.НайтиПоНомеру(Заказ.Номер,НачалоГода(ТекущаяДата())-1);			
				Если ЗНП.Пустая() Тогда
				СостояниеРЗ = СостояниеРЗ + Заказ.Номер+" - заказ не найден в пр-ве!"+Символы.ПС;
				Продолжить;
				КонецЕсли;
			КонецЕсли;
				Попытка
				ЗНПОбъект = ЗНП.ПолучитьОбъект();
					Если БазаСбыта.XMLString(Заказ.ВидОтгрузки) = "Частичная" Тогда
					ЗНПОбъект.ВидОтгрузки = Перечисления.ВидыОтгрузки.Частичная;
					ИначеЕсли БазаСбыта.XMLString(Заказ.ВидОтгрузки) = "Полная" Тогда
					ЗНПОбъект.ВидОтгрузки = Перечисления.ВидыОтгрузки.Полная;	
					КонецЕсли;
				ЗНПОбъект.Понедельник = Заказ.Понедельник;
				ЗНПОбъект.Вторник = Заказ.Вторник;
				ЗНПОбъект.Среда = Заказ.Среда;
				ЗНПОбъект.Четверг = Заказ.Четверг;
				ЗНПОбъект.Пятница = Заказ.Пятница;
				ЗНПОбъект.Суббота = Заказ.Суббота;
				ЗНПОбъект.Воскресенье = Заказ.Воскресенье;
				ЗНПОбъект.ТелефоныКонтактногоЛица = Заказ.ТелефонКонтактногоЛица;	
					Если Константы.КодБазы.Получить() = "БГР" Тогда
					ЗНПОбъект.Проект = ПолучитьСоздатьПроект(БазаСбыта,Заказ.Проект);
					ЗНПОбъект.ОтгрузкаПоЗапросу = Заказ.ОтгрузкаПоЗапросу;
					ЗНПОбъект.ВЭД = Заказ.ВЭД;
					ЗНПОбъект.КонтактноеЛицо = Заказ.КонтактноеЛицо.Наименование;
					ЗНПОбъект.Комментарий = Заказ.КомЛогиста;
						Если ЗначениеЗаполнено(ТЧ.ОтгрузкаРазрешена) Тогда
						ЗНПОбъект.ОтгрузкаРазрешена = Истина;
						ЗНПОбъект.ДатаОтгрузки = ТЧ.ОтгрузкаРазрешена;					
						Иначе	
						ЗНПОбъект.ОтгрузкаРазрешена = Ложь;
						ЗНПОбъект.ДатаОтгрузки = Дата(1,1,1);					
						КонецЕсли;
							Если Не Заказ.ИМКартаДоставки.Пустая() Тогда
							ЗНПОбъект.КартаДоставки = ПолучитьСоздатьКартуДоставки(БазаСбыта,Заказ,ЗНП.Контрагент);
								Если ЗНПОбъект.КартаДоставки.ВариантОтгрузки = Перечисления.ВариантыОтгрузки.Самовывоз Тогда
								ЗНПОбъект.ТипДоставки = Перечисления.ТипыДоставки.Самовывоз;
								КонецЕсли; 
							КонецЕсли; 
					Иначе
					ЗНПОбъект.ВариантСопровожденияОтгрузки = Заказ.ВариантСопровожденияОтгрузки;
					ЗНПОбъект.КонтактноеЛицо = Заказ.КонтактноеЛицоКонтрагента.Наименование;
					ЗНПОбъект.ОтгрузкаРазрешена = Заказ.ОтгрузкаРазрешена;
					ЗНПОбъект.ДатаОтгрузки = Заказ.ДатаРазрешенияОтгрузки;
						Если Не Заказ.КартаДоставки.Пустая() Тогда
						ЗНПОбъект.КартаДоставки = ПолучитьСоздатьКартуДоставки(БазаСбыта,Заказ,ЗНП.Контрагент);
							Если ЗНПОбъект.КартаДоставки.ВариантОтгрузки = Перечисления.ВариантыОтгрузки.Самовывоз Тогда
							ЗНПОбъект.ТипДоставки = Перечисления.ТипыДоставки.Самовывоз;
							КонецЕсли; 
						КонецЕсли;
					КонецЕсли;
				ЗНПОбъект.Записать(РежимЗаписиДокумента.Запись);
				НаборЗаписей = БазаСбыта.РегистрыСведений.ИзмененияПоДоставкеЗаказа.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Заказ.Установить(Заказ);
			    НаборЗаписей.Записать();
				Исключение
				СостояниеРЗ = СостояниеРЗ + ОписаниеОшибки()+Символы.ПС;
				КонецПопытки;
		КонецЦикла;
	Иначе
	СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с базой сбыта!"+Символы.ПС;
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(6,СостояниеРЗ);	
	Если ПривилегированныйРежим() Тогда 
	УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры	

#КонецОбласти

#Область ВыгрузкаННС
Процедура ПолучитьНомераГТД(Регистратор,ТаблицаГТД)
ТаблицаГТД.Очистить();
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ГТД.Товар КАК Товар,
	|	ГТД.НомерГТД КАК НомерГТД,
	|	ГТД.Количество КАК Количество
	|ИЗ
	|	РегистрНакопления.ГТД КАК ГТД
	|ГДЕ
	|	ГТД.Регистратор = &Регистратор";
Запрос.УстановитьПараметр("Регистратор", Регистратор);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = ТаблицаГТД.Добавить();
	ТЧ.Продукция = ВыборкаДетальныеЗаписи.Товар;
	ТЧ.ГТД = ВыборкаДетальныеЗаписи.НомерГТД;
	ТЧ.Количество = ВыборкаДетальныеЗаписи.Количество;
	КонецЦикла;
ТаблицаГТД.Свернуть("Продукция,ГТД","Количество");
КонецПроцедуры 

Функция ПолучитьСоздатьГТД(БазаСбыта,ГТД)
НомерГТД = БазаСбыта.Справочники.НомераГТД.НайтиПоКоду(СокрЛП(ГТД.Наименование));
	Если НомерГТД = БазаСбыта.Справочники.НомераГТД.ПустаяСсылка() Тогда
	НомерГТД = БазаСбыта.Справочники.НомераГТД.СоздатьЭлемент();
	НомерГТД.Код = ГТД.Наименование;
	НомерГТД.СтранаПроисхождения = БазаСбыта.Справочники.СтраныМира.НайтиПоНаименованию(СокрЛП(ГТД.Страна.Наименование),Истина);
	НомерГТД.Записать();
	Возврат(НомерГТД.Ссылка);
	Иначе
	Возврат(НомерГТД);
	КонецЕсли; 	
КонецФункции

Процедура ВыгрузкаННСВСбыт(БазаСбыта,СостояниеРЗ)
Запрос = Новый Запрос;	
ТаблицаГТД = Новый ТаблицаЗначений;

ТаблицаГТД.Колонки.Добавить("Продукция");
ТаблицаГТД.Колонки.Добавить("ГТД");
ТаблицаГТД.Колонки.Добавить("Количество");

бсСклад = БазаСбыта.Справочники.Склады.НайтиПоНаименованию("СД 423",Истина);

Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку КАК НакладнаяНаСборку
	|ИЗ
	|	РегистрСведений.СтатусыНакладныхНаСборку.СрезПоследних КАК СтатусыНакладныхНаСборкуСрезПоследних
	|ГДЕ
	|	СтатусыНакладныхНаСборкуСрезПоследних.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И СтатусыНакладныхНаСборкуСрезПоследних.Статус = &Статус
	|	И СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку.ДатаОтгрузки <= &ДатаОтгрузки
	|	И СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку.ПометкаУдаления = ЛОЖЬ";
	Запрос.УстановитьПараметр("ДатаНач", Дата('2017.12.20 00:00:00'));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыНакладнойНаСборку.Собран);
Запрос.УстановитьПараметр("ДатаОтгрузки",КонецДня(ТекущаяДата()));
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		ННС = ВыборкаДетальныеЗаписи.НакладнаяНаСборку; 
		бсНовДок = БазаСбыта.Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
		бсНовДок.Номер = "АП-П-"+Прав(ННС.Номер,8);
		бсНовДок.Дата = ТекущаяДата();
		бсНовДок.Организация = БазаСбыта.Справочники.Организации.НайтиПоКоду("02");
		бсНовДок.Партнер = БазаСбыта.Справочники.Партнеры.НайтиПоКоду("00-00000010");
		бсНовДок.Склад = бсСклад;
		бсНовДок.ХозяйственнаяОперация = БазаСбыта.Перечисления.ХозяйственныеОперации.ЗакупкаУПоставщика;
		бсНовДок.НалогообложениеНДС = БазаСбыта.Перечисления.ТипыНалогообложенияНДС.ПродажаОблагаетсяНДС;
		бсНовДок.БанковскийСчетОрганизации = БазаСбыта.ЗначениеНастроекПовтИсп.ПолучитьБанковскийСчетОрганизацииПоУмолчанию(бсНовДок.Организация);
		бсНовДок.Валюта = БазаСбыта.Справочники.Валюты.НайтиПоКоду("643");
		бсНовДок.ВалютаВзаиморасчетов = БазаСбыта.Справочники.Валюты.НайтиПоКоду("643");
		бсНовДок.НакладнаяНаСборку = ННС.Номер;
		бсНовДок.НомерТары = ННС.НомераТары;
		НомерЗНП = ННС.ТабличнаяЧасть[0].ЗаказНаПроизводство.Номер;
		бсНовДок.НомерЛинейки = БазаСбыта.Справочники.ОвенПроизводственныеЛинейки.НайтиПоНаименованию(Строка(ННС.ЛинейкаУпаковки),Истина);
		ПолучитьНомераГТД(ННС,ТаблицаГТД);
				Для каждого ТЧ Из ННС.ТабличнаяЧасть Цикл
				Артикул = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(ТЧ.Товар.Код);
				бсНомен = БазаСбыта.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
					Если бсНомен.Пустая() Тогда
					СостояниеРЗ = СостояниеРЗ+ННС.Номер+" ("+СокрЛП(ТЧ.Товар.Наименование)+") - товар с артикулом "+Артикул+" не найден в торговой базе!"+Символы.ПС;				Продолжить;
					Продолжить;
					КонецЕсли;
				КолОстаток = ТЧ.Количество;
				Выборка = ТаблицаГТД.НайтиСтроки(Новый Структура("Продукция",ТЧ.Продукция));
					Если Выборка.Количество() = 0 Тогда
					ТЧ_Т = бсНовДок.Товары.Добавить();
					ТЧ_Т.Склад = бсСклад;
					ТЧ_Т.ИМНомерЗаказаЗаказнойТовар = СокрЛП(ТЧ.ЗаказНаПроизводство.Номер);	
					ТЧ_Т.Номенклатура = бсНомен;
					ТЧ_Т.КоличествоУпаковок = КолОстаток;
					ТЧ_Т.ИмКоличествоЗарегистрировано = КолОстаток;
					ТЧ_Т.Количество = КолОстаток;
					ТЧ_Т.СтавкаНДС = бсНомен.СтавкаНДС;
					ТЧ_Т.Цена = бсНомен.ИмЦена;
					ТЧ_Т.Сумма = ТЧ_Т.КоличествоУпаковок*ТЧ_Т.Цена;
						Если БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС18) Тогда
						ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.18;
						ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
						ИначеЕсли БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС20) Тогда
						ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.2;
						ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
						Иначе	
						ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма;
						КонецЕсли;
					КолОстаток = 0;
					Иначе
						Для к = 0 По Выборка.Количество()-1 Цикл
							Если Выборка[к].Количество > 0 Тогда
								Если Выборка[к].Количество >= КолОстаток Тогда
								ТЧ_Т = бсНовДок.Товары.Добавить();
								ТЧ_Т.Склад = бсСклад;
								ТЧ_Т.ИМНомерЗаказаЗаказнойТовар = СокрЛП(ТЧ.ЗаказНаПроизводство.Номер);	
								ТЧ_Т.Номенклатура = бсНомен;
								ТЧ_Т.КоличествоУпаковок = КолОстаток;
								ТЧ_Т.ИмКоличествоЗарегистрировано = КолОстаток;
								ТЧ_Т.Количество = КолОстаток;
								ТЧ_Т.СтавкаНДС = бсНомен.СтавкаНДС;
								ТЧ_Т.Цена = бсНомен.ИмЦена;
								ТЧ_Т.Сумма = ТЧ_Т.КоличествоУпаковок*ТЧ_Т.Цена;
								ТЧ_Т.НомерГТД = ПолучитьСоздатьГТД(БазаСбыта,Выборка[к].ГТД);				
									Если БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС18) Тогда
									ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.18;
									ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
									ИначеЕсли БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС20) Тогда
									ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.2;
									ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
									Иначе	
									ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма;
									КонецЕсли;
								Выборка[к].Количество = Выборка[к].Количество - КолОстаток; 
								КолОстаток = 0;
								Прервать;
								Иначе
								ТЧ_Т = бсНовДок.Товары.Добавить();
								ТЧ_Т.Склад = бсСклад;
								ТЧ_Т.ИМНомерЗаказаЗаказнойТовар = СокрЛП(ТЧ.ЗаказНаПроизводство.Номер);	
								ТЧ_Т.Номенклатура = бсНомен;
								ТЧ_Т.КоличествоУпаковок = Выборка[к].Количество;
								ТЧ_Т.ИмКоличествоЗарегистрировано = Выборка[к].Количество;
								ТЧ_Т.Количество = Выборка[к].Количество;
								ТЧ_Т.СтавкаНДС = бсНомен.СтавкаНДС;
								ТЧ_Т.Цена = бсНомен.ИмЦена;
								ТЧ_Т.Сумма = ТЧ_Т.КоличествоУпаковок*ТЧ_Т.Цена;
								ТЧ_Т.НомерГТД = ПолучитьСоздатьГТД(БазаСбыта,Выборка[к].ГТД);				
									Если БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС18) Тогда
									ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.18;
									ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
									ИначеЕсли БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС20) Тогда
									ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.2;
									ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
									Иначе	
									ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма;
									КонецЕсли; 
								КолОстаток = КолОстаток - Выборка[к].Количество;
								Выборка[к].Количество = 0;
								КонецЕсли;
							КонецЕсли; 					
						КонецЦикла; 
					КонецЕсли;
						Если КолОстаток > 0 Тогда
						ТЧ_Т = бсНовДок.Товары.Добавить();
						ТЧ_Т.Склад = бсСклад;
						ТЧ_Т.ИМНомерЗаказаЗаказнойТовар = СокрЛП(ТЧ.ЗаказНаПроизводство.Номер);	
						ТЧ_Т.Номенклатура = бсНомен;
						ТЧ_Т.КоличествоУпаковок = КолОстаток;
						ТЧ_Т.ИмКоличествоЗарегистрировано = КолОстаток;
						ТЧ_Т.Количество = КолОстаток;
						ТЧ_Т.СтавкаНДС = бсНомен.СтавкаНДС;
						ТЧ_Т.Цена = бсНомен.ИмЦена;
						ТЧ_Т.Сумма = ТЧ_Т.КоличествоУпаковок*ТЧ_Т.Цена;
							Если БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС18) Тогда
							ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.18;
							ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
							ИначеЕсли БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС20) Тогда
							ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.2;
							ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
							Иначе	
							ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма;
							КонецЕсли;
						КонецЕсли;   
					//Для каждого ТЧ_ГТД Из ТаблицаГТД Цикл
					//ТЧ_Т = бсНовДок.Товары.Добавить();
					//ТЧ_Т.Склад = бсСклад;
					//ТЧ_Т.ИМНомерЗаказаЗаказнойТовар = СокрЛП(ТЧ.ЗаказНаПроизводство.Номер);	
					//ТЧ_Т.Номенклатура = бсНомен;
					//ТЧ_Т.КоличествоУпаковок = ТЧ_ГТД.Количество;
					//ТЧ_Т.ИмКоличествоЗарегистрировано = ТЧ_ГТД.Количество;
					//ТЧ_Т.Количество = ТЧ_ГТД.Количество;
					//ТЧ_Т.СтавкаНДС = бсНомен.СтавкаНДС;
					//ТЧ_Т.Цена = бсНомен.ИмЦена;
					//ТЧ_Т.Сумма = ТЧ_Т.КоличествоУпаковок*ТЧ_Т.Цена;
					//ТЧ_Т.НомерГТД = ПолучитьСоздатьГТД(БазаСбыта,ТЧ_ГТД.ГТД);				
					//	Если БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС18) Тогда
					//	ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.18;
					//	ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
					//	ИначеЕсли БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС20) Тогда
					//	ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.2;
					//	ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
					//	Иначе	
					//	ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма;
					//	КонецЕсли;
					//КолОстаток = КолОстаток - ТЧ_ГТД.Количество;				
					//КонецЦикла;
					//	Если КолОстаток > 0 Тогда
					//	ТЧ_Т = бсНовДок.Товары.Добавить();
					//	ТЧ_Т.Склад = бсСклад;
					//	ТЧ_Т.ИМНомерЗаказаЗаказнойТовар = СокрЛП(ТЧ.ЗаказНаПроизводство.Номер);	
					//	ТЧ_Т.Номенклатура = бсНомен;
					//	ТЧ_Т.КоличествоУпаковок = КолОстаток;
					//	ТЧ_Т.ИмКоличествоЗарегистрировано = КолОстаток;
					//	ТЧ_Т.Количество = КолОстаток;
					//	ТЧ_Т.СтавкаНДС = бсНомен.СтавкаНДС;
					//	ТЧ_Т.Цена = бсНомен.ИмЦена;
					//	ТЧ_Т.Сумма = ТЧ_Т.КоличествоУпаковок*ТЧ_Т.Цена;
					//		Если БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС18) Тогда
					//		ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.18;
					//		ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
					//		ИначеЕсли БазаСбыта.Перечисления.СтавкиНДС.Индекс(ТЧ_Т.СтавкаНДС) = БазаСбыта.Перечисления.СтавкиНДС.Индекс(БазаСбыта.Перечисления.СтавкиНДС.НДС20) Тогда
					//		ТЧ_Т.СуммаНДС = ТЧ_Т.Сумма*0.2;
					//		ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма + ТЧ_Т.СуммаНДС;
					//		Иначе	
					//		ТЧ_Т.СуммаСНДС = ТЧ_Т.Сумма;
					//		КонецЕсли;
					//	КонецЕсли; 
				КонецЦикла;
		бсНовДок.Комментарий = "Выгрузка накладной на сборку из производственной базы от "+ТекущаяДата();
			Попытка
			бсНовДок.Записать(БазаСбыта.РежимЗаписиДокумента.Проведение);
				Если Не БазаСбыта.ИмМодуль.ЗаполнитьРеализациюНаОснованииПоступления(бсНовДок.Ссылка) Тогда
				бсНовДок.Удалить();
				СостояниеРЗ = СостояниеРЗ+ННС.Номер+" - реализация не создана! Операция отменена!"+Символы.ПС;
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Продолжить;
				КонецЕсли;
			Исключение
			СостояниеРЗ = СостояниеРЗ+ОписаниеОшибки()+Символы.ПС;
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Продолжить;
			КонецПопытки;
		СННС = РегистрыСведений.СтатусыНакладныхНаСборку.СоздатьМенеджерЗаписи();
		СННС.Период = ТекущаяДата();
		СННС.НакладнаяНаСборку = ННС;
		СННС.Статус = Перечисления.СтатусыНакладнойНаСборку.НаУпаковке;
		СННС.Записать();
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		СостояниеРЗ = СостояниеРЗ+ОписаниеОшибки()+Символы.ПС;
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ЗаполнитьЗаказПокупателя(БазаСбыта,ЗаказПокупателя,ЗНП)
ЗП = ЗаказПокупателя.ПолучитьОбъект();
ЗП.СДоверенностью = ЗНП.СДоверенностью;
ЗП.ДоверенностьНомер = ЗНП.ДоверенностьНомер;
ЗП.ДоверенностьДата = ЗНП.ДоверенностьДата;
ЗП.ДоверенностьНаКого = ЗНП.ДоверенностьНаКого;
ЗП.ДоверенностьСрок = ЗНП.ДоверенностьСрок;
ЗП.СтраховочнаяСумма = ЗНП.СтраховочнаяСумма;
ЗП.ВариантСопровожденияОтгрузки = ЗНП.ВариантСопровожденияОтгрузки;
ЗП.Записать(БазаСбыта.РежимЗаписиДокумента.Запись);
КонецПроцедуры

Процедура ВыгрузкаННСВСбытХарьков(БазаСбыта,СостояниеРЗ)
Запрос = Новый Запрос;
	
Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку КАК НакладнаяНаСборку
	|ИЗ
	|	РегистрСведений.СтатусыНакладныхНаСборку.СрезПоследних КАК СтатусыНакладныхНаСборкуСрезПоследних
	|ГДЕ
	|	СтатусыНакладныхНаСборкуСрезПоследних.Статус = &Статус
	|	И СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку.ПометкаУдаления = ЛОЖЬ";
	//|	И СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку.ДатаОтгрузки = &ДатаОтгрузки";
Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыНакладнойНаСборку.Собран);
//Запрос.УстановитьПараметр("ДатаОтгрузки",НачалоДня(ТекущаяДата()));
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		бсНовДок = БазаСбыта.Документы.ПриходныйОрдерНаТовары.СоздатьДокумент();
		бсНовДок.Дата = ТекущаяДата();
		бсНовДок.Организация = БазаСбыта.Справочники.Организации.НайтиПоКоду("000000001");
		бсНовДок.УстановитьНовыйНомер(бсНовДок.Организация.Префикс);
		бсНовДок.Контрагент = БазаСбыта.Справочники.Контрагенты.НайтиПоКоду("000000031");
		бсНовДок.НакладнаяНаСборку = ВыборкаДетальныеЗаписи.НакладнаяНаСборку.Номер;
		бсНовДок.НомерВходящегоДокумента = ВыборкаДетальныеЗаписи.НакладнаяНаСборку.Номер;
		бсНовДок.ДатаВходящегоДокумента = ВыборкаДетальныеЗаписи.НакладнаяНаСборку.Дата;
		бсНовДок.НомерТар = ВыборкаДетальныеЗаписи.НакладнаяНаСборку.НомераТары;
		бсНовДок.Комментарий = ВыборкаДетальныеЗаписи.НакладнаяНаСборку.Комментарий;
			Если ВыборкаДетальныеЗаписи.НакладнаяНаСборку.КартаДоставки.Пустая() Тогда
			бсНовДок.НомерЛинейки = БазаСбыта.Справочники.ПроизводственныеЛинейки.НайтиПоНаименованию("1",Истина);
			Иначе
				Если ВыборкаДетальныеЗаписи.НакладнаяНаСборку.КартаДоставки.ВариантОтгрузки = Перечисления.ВариантыОтгрузки.Самовывоз Тогда
				бсНовДок.НомерЛинейки = БазаСбыта.Справочники.ПроизводственныеЛинейки.НайтиПоНаименованию("2",Истина);
				Иначе	
				бсНовДок.НомерЛинейки = БазаСбыта.Справочники.ПроизводственныеЛинейки.НайтиПоНаименованию("1",Истина);
				КонецЕсли;				
			КонецЕсли;
				Если СокрЛП(ВыборкаДетальныеЗаписи.НакладнаяНаСборку.Контрагент.Код) = "000037524" Тогда
				бсНовДок.Склад = БазаСбыта.Справочники.Склады.НайтиПоКоду("000000005");
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.НакладнаяНаСборку.Контрагент.Код) = "000034316" Тогда
				бсНовДок.Склад = БазаСбыта.Справочники.Склады.НайтиПоКоду("000000004");
				Иначе
				бсНовДок.Склад = БазаСбыта.Справочники.Склады.НайтиПоКоду("000000001");
				КонецЕсли;
		бсНовДок.ВидОперации = БазаСбыта.Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика;
		флОшибка = Ложь;
			Для каждого ТЧ Из ВыборкаДетальныеЗаписи.НакладнаяНаСборку.ТабличнаяЧасть Цикл
			Артикул = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(ТЧ.Товар.Код);
			бсНомен = БазаСбыта.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
				Если бсНомен.Пустая() Тогда
				СостояниеРЗ = СостояниеРЗ+ВыборкаДетальныеЗаписи.НакладнаяНаСборку.Номер+" ("+СокрЛП(ТЧ.Товар.Наименование)+") - товар с артикулом "+Артикул+" не найден в торговой базе!"+Символы.ПС;
				флОшибка = Истина;
				Прервать;
				КонецЕсли;
			ТЧ_Т = бсНовДок.Товары.Добавить();
			ЗП = БазаСбыта.Документы.ЗаказПокупателя.НайтиПоНомеру(СокрЛП(ТЧ.ЗаказНаПроизводство.Номер),ТекущаяДата());	
				Если ЗП.Пустая() Тогда	
				ТЧ_Т.ДокументРезерва = БазаСбыта.Документы.ЗаказПокупателя.НайтиПоНомеру(СокрЛП(ТЧ.ЗаказНаПроизводство.Номер),НачалоГода(ТекущаяДата())-1);
				Иначе
				ТЧ_Т.ДокументРезерва = ЗП;
				КонецЕсли; 
			ТЧ_Т.Номенклатура = бсНомен;
			ТЧ_Т.Количество = ТЧ.Количество;
			ТЧ_Т.ЕдиницаИзмерения = бсНомен.ЕдиницаХраненияОстатков;
			ТЧ_Т.Коэффициент = бсНомен.ЕдиницаХраненияОстатков.Коэффициент;
			ТЧ_Т.Качество = БазаСбыта.Справочники.Качество.НайтиПоКоду("000000001");
				Если Не ТЧ_Т.ДокументРезерва.Пустая() Тогда	
				ЗаполнитьЗаказПокупателя(БазаСбыта,ТЧ_Т.ДокументРезерва,ТЧ.ЗаказНаПроизводство);
				КонецЕсли;				
			КонецЦикла; 
				Если Не флОшибка Тогда
					Если бсНовДок.Товары.Количество() > 0 Тогда
						Попытка
						бсНовДок.Записать(БазаСбыта.РежимЗаписиДокумента.Проведение);
							Если СокрЛП(бсНовДок.Склад.Код) = "000000001" Тогда
								Если Не БазаСбыта.ИмМодуль.ЗаполнитьРеализациюНаОснованииПоступления(бсНовДок.Ссылка) Тогда
								бсНовДок.Удалить();
								СостояниеРЗ = СостояниеРЗ+ВыборкаДетальныеЗаписи.НакладнаяНаСборку.Номер+" - реализация не создана! Операция отменена!"+Символы.ПС;
								ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
								Продолжить;
								КонецЕсли;
							КонецЕсли;
						Исключение
						СостояниеРЗ = СостояниеРЗ+ОписаниеОшибки()+Символы.ПС;
						ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
						Продолжить;
						КонецПопытки;
					СННС = РегистрыСведений.СтатусыНакладныхНаСборку.СоздатьМенеджерЗаписи();
					СННС.Период = ТекущаяДата();
					СННС.НакладнаяНаСборку = ВыборкаДетальныеЗаписи.НакладнаяНаСборку;
					СННС.Статус = Перечисления.СтатусыНакладнойНаСборку.НаУпаковке;
					СННС.Записать();
					КонецЕсли;
				КонецЕсли;  
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		СостояниеРЗ = СостояниеРЗ+ОписаниеОшибки()+Символы.ПС;
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Процедура ВыгрузкаННС()Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(18) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1ССбыт.Получить());
	Если БазаСбыта <> Неопределено Тогда
		Если Константы.КодБазы.Получить() = "БГР" Тогда
		ВыгрузкаННСВСбыт(БазаСбыта,СостояниеРЗ);		
		Иначе	
		ВыгрузкаННСВСбытХарьков(БазаСбыта,СостояниеРЗ);
		КонецЕсли;
	Иначе
	СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с базой сбыта!"+Символы.ПС;
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(18,СостояниеРЗ);	
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаННСДляСайта

Процедура ВыгрузкаННСДляСайта()Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(3) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";

Запрос = Новый Запрос;
ЗаписьJSON = Новый ЗаписьJSON;

	Попытка
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб); 
	ЗаписьJSON.ОткрытьФайл(СокрЛП(Справочники.ОбменДанными.НайтиПоНаименованию("Выгрузка ННС для сайта",Истина).ПутьКБазеДанных), , , ПараметрыЗаписиJSON);

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку КАК НакладнаяНаСборку,
		|	СтатусыНакладныхНаСборкуСрезПоследних.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.СтатусыНакладныхНаСборку.СрезПоследних КАК СтатусыНакладныхНаСборкуСрезПоследних
		|ГДЕ
		|	СтатусыНакладныхНаСборкуСрезПоследних.Период МЕЖДУ &ДатаНач И &ДатаКон
		|	И СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку.ПометкаУдаления = ЛОЖЬ
		|	И СтатусыНакладныхНаСборкуСрезПоследних.Статус <> &Статус
		|	И СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку.ДатаОтгрузки = &ДатаОтгрузки";
	Запрос.УстановитьПараметр("ДатаНач", Дата('2020.09.28 00:00:00'));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("ДатаОтгрузки", НачалоДня(ТекущаяДата()));
	Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыНакладнойНаСборку.Упакован);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("nns");
	ЗаписьJSON.ЗаписатьНачалоМассива();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ННС = ВыборкаДетальныеЗаписи.НакладнаяНаСборку;
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("cli_nnn");
		ЗаписьJSON.ЗаписатьЗначение(СокрЛП(ННС.Контрагент.Код));
		ЗаписьJSON.ЗаписатьИмяСвойства("otgruzka_id");
		ЗаписьJSON.ЗаписатьЗначение(ННС.Номер);
		ЗаписьJSON.ЗаписатьИмяСвойства("status");
		ЗаписьJSON.ЗаписатьЗначение(Строка(ВыборкаДетальныеЗаписи.Статус));
		ЗаписьJSON.ЗаписатьИмяСвойства("otgruzka_date");
		ЗаписьJSON.ЗаписатьЗначение(Формат(ННС.ДатаОтгрузки,"ДФ=dd.MM.yyyy"));
		ЗаписьJSON.ЗаписатьИмяСвойства("otgruzka");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	НакладнаяНаСборкуТабличнаяЧасть.Товар КАК Товар,
			|	НакладнаяНаСборкуТабличнаяЧасть.Количество КАК Количество,
			|	НакладнаяНаСборкуТабличнаяЧасть.ЗаказНаПроизводство КАК ЗаказНаПроизводство
			|ИЗ
			|	Документ.НакладнаяНаСборку.ТабличнаяЧасть КАК НакладнаяНаСборкуТабличнаяЧасть
			|ГДЕ
			|	НакладнаяНаСборкуТабличнаяЧасть.Ссылка = &Ссылка
			|ИТОГИ ПО
			|	ЗаказНаПроизводство";
		Запрос.УстановитьПараметр("Ссылка",ННС);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаЗНП = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЗНП.Следующий() Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("zakaz");
			ЗаписьJSON.ЗаписатьЗначение(СокрЛП(ВыборкаЗНП.ЗаказНаПроизводство.Номер));
			ЗаписьJSON.ЗаписатьИмяСвойства("tovar");
			ЗаписьJSON.ЗаписатьНачалоМассива();
			ВыборкаТЧ = ВыборкаЗНП.Выбрать();
				Пока ВыборкаТЧ.Следующий() Цикл
				ЗаписьJSON.ЗаписатьНачалоОбъекта();
				ЗаписьJSON.ЗаписатьИмяСвойства("name");
				ЗаписьJSON.ЗаписатьЗначение(СокрЛП(ВыборкаТЧ.Товар.Наименование));
				ЗаписьJSON.ЗаписатьИмяСвойства("kolvo");
				ЗаписьJSON.ЗаписатьЗначение(ВыборкаТЧ.Количество);			
				ЗаписьJSON.ЗаписатьКонецОбъекта();
				КонецЦикла;
			ЗаписьJSON.ЗаписатьКонецМассива();
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();	
		КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	СостояниеРЗ = СостояниеРЗ+"Файл для сайта создан!"+Символы.ПС;
	Исключение
	СостояниеРЗ = СостояниеРЗ+ОписаниеОшибки()+Символы.ПС;	
	КонецПопытки;
ЗаписатьСостояниеРегламентногоЗадания(3,СостояниеРЗ);
	Если ПривилегированныйРежим() Тогда 
	УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаПоставкиMeyertecДляСайта

Процедура ВыгрузкаПоставкиMeyertecДляСайта() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(8) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);

СписокГруппМПЗ = Новый СписокЗначений;

ГруппаМат = Справочники.Материалы.НайтиПоНаименованию("Товары для перепродажи",Истина);
	Если Не ГруппаМат.Пустая() Тогда
	СписокГруппМПЗ.Добавить(ГруппаМат);
	Иначе
	ЗаписатьСостояниеРегламентногоЗадания(8,"Не найдена группа материалов: Товары для перепродажи");
		Если ПривилегированныйРежим() Тогда 
		УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;	
	Возврат;
	КонецЕсли;
ГруппаМат = Справочники.Материалы.НайтиПоНаименованию("Тиристорные регуляторы напряжения",Истина);
	Если Не ГруппаМат.Пустая() Тогда
	СписокГруппМПЗ.Добавить(ГруппаМат);
	Иначе
	ЗаписатьСостояниеРегламентногоЗадания(8,"Не найдена группа материалов: Тиристорные регуляторы напряжения");
		Если ПривилегированныйРежим() Тогда 
		УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;	
	Возврат;
	КонецЕсли; 

СостояниеРЗ = "";

Запрос = Новый Запрос;
ЗаписьJSON = Новый ЗаписьJSON;
СписокМестХранения = Новый СписокЗначений;
                                                                        
СписокМестХранения.Добавить(Константы.МестоХраненияТНП.Получить());
СписокМестХранения.Добавить(Константы.МестоХраненияТранзит.Получить()); 
	Попытка
	ПараметрыЗаписиJSON = Новый ПараметрыЗаписиJSON( , Символы.Таб); 
	ЗаписьJSON.ОткрытьФайл(СокрЛП(Справочники.ОбменДанными.НайтиПоНаименованию("Выгрузка поставки Meyertec для сайта",Истина).ПутьКБазеДанных), , , ПараметрыЗаписиJSON);

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказыПоставщикамОстатки.МПЗ КАК МПЗ,
		|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
		|	ЗаказыПоставщикамОстатки.ДатаИсполнения КАК ДатаИсполнения,
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&НаДату, МПЗ В ИЕРАРХИИ (&СписокГруппМПЗ)) КАК ЗаказыПоставщикамОстатки
		|ГДЕ
		|	ЗаказыПоставщикамОстатки.КоличествоОстаток > 0
		|	И ЗаказыПоставщикамОстатки.ЗаказПоставщику.Дата >= ДАТАВРЕМЯ(2021, 1, 1, 0, 0, 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаИсполнения,
		|	МПЗ,
		|	ЗаказПоставщику
		|ИТОГИ
		|	СУММА(КоличествоОстаток)
		|ПО
		|	МПЗ,
		|	ДатаИсполнения";
	Запрос.УстановитьПараметр("НаДату", ТекущаяДата());	
	Запрос.УстановитьПараметр("СписокГруппМПЗ", СписокГруппМПЗ);	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	ЗаписьJSON.ЗаписатьНачалоОбъекта();
	ЗаписьJSON.ЗаписатьИмяСвойства("ostatki");
	ЗаписьJSON.ЗаписатьНачалоМассива();
		Пока ВыборкаПродукция.Следующий() Цикл
		ЗаписьJSON.ЗаписатьНачалоОбъекта();
		ЗаписьJSON.ЗаписатьИмяСвойства("code");
		ЗаписьJSON.ЗаписатьЗначение(ВыборкаПродукция.МПЗ.Товар.Код);
		ЗаписьJSON.ЗаписатьИмяСвойства("dolg");                                                                 
		Количество = ОбщийМодульРаботаСРегистрами.ПолучитьСводныйОстатокПоДолгам(ВыборкаПродукция.МПЗ) - ОбщийМодульВызовСервера.ПолучитьСводныйОстатокПоМестамХранения(СписокМестХранения,ВыборкаПродукция.МПЗ); 
			Если Количество > 0 Тогда
			ЗаписьJSON.ЗаписатьЗначение(Цел(Количество));			
			Иначе	
			ЗаписьJSON.ЗаписатьЗначение(0);			
			КонецЕсли;
		ЗаписьJSON.ЗаписатьИмяСвойства("add");
		ЗаписьJSON.ЗаписатьНачалоМассива();
		ВыборкаДатаИсполнения = ВыборкаПродукция.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаДатаИсполнения.Следующий() Цикл
			ЗаписьJSON.ЗаписатьНачалоОбъекта();
			ЗаписьJSON.ЗаписатьИмяСвойства("date");
			ЗаписьJSON.ЗаписатьЗначение(Формат(ВыборкаДатаИсполнения.ДатаИсполнения,"ДФ=dd.MM.yyyy"));
			ЗаписьJSON.ЗаписатьИмяСвойства("quantity");
			ЗаписьJSON.ЗаписатьЗначение(ВыборкаДатаИсполнения.КоличествоОстаток);			
			ЗаписьJSON.ЗаписатьКонецОбъекта();
			КонецЦикла;
		ЗаписьJSON.ЗаписатьКонецМассива();
		ЗаписьJSON.ЗаписатьКонецОбъекта();
		КонецЦикла;
	ЗаписьJSON.ЗаписатьКонецМассива();
	ЗаписьJSON.ЗаписатьКонецОбъекта();
	ЗаписьJSON.Закрыть();
	СостояниеРЗ = СостояниеРЗ+"Файл для сайта создан!"+Символы.ПС;
	Исключение
	СостояниеРЗ = СостояниеРЗ+ОписаниеОшибки()+Символы.ПС;	
	КонецПопытки;
ЗаписатьСостояниеРегламентногоЗадания(8,СостояниеРЗ);
	Если ПривилегированныйРежим() Тогда 
	УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаННСвБухБазу

Процедура ВыгруННСВБухБазуРоссии(БазаСД,СостояниеРЗ)
Запрос = Новый Запрос;
ТЗ = Новый ТаблицаЗначений;

ТЗ.Колонки.Добавить("Подразделение");
ТЗ.Колонки.Добавить("Товар");
ТЗ.Колонки.Добавить("Количество");
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НакладнаяНаСборкуТабличнаяЧасть.Продукция КАК Продукция,
		|	НакладнаяНаСборкуТабличнаяЧасть.Товар КАК Товар,
		|	НакладнаяНаСборкуТабличнаяЧасть.Количество КАК Количество
		|ИЗ
		|	Документ.НакладнаяНаСборку.ТабличнаяЧасть КАК НакладнаяНаСборкуТабличнаяЧасть
		|ГДЕ
		|	НакладнаяНаСборкуТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|	И НакладнаяНаСборкуТабличнаяЧасть.Ссылка.Проведен = ИСТИНА"; 
	ПредыдущийДень = НачалоДня(ТекущаяДата())-1;
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПредыдущийДень));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПредыдущийДень));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ТЧ = ТЗ.Добавить();
			Если ТипЗнч(ВыборкаДетальныеЗаписи.Продукция) = Тип("СправочникСсылка.Номенклатура") Тогда
			ТЧ.Подразделение = ВыборкаДетальныеЗаписи.Продукция.Линейка.Подразделение;
			Иначе	
			ТЧ.Подразделение = Справочники.Подразделения.НайтиПоНаименованию("Торговля ТНП",Истина);
			КонецЕсли;
		ТЧ.Товар = ВыборкаДетальныеЗаписи.Товар;
		ТЧ.Количество = ВыборкаДетальныеЗаписи.Количество;
		КонецЦикла;	
	ТЗ.Свернуть("Подразделение,Товар","Количество");
	ТЗ.Сортировать("Подразделение,Товар");
	бсНовДок = БазаСД.Документы.ПеремещениеТоваров.СоздатьДокумент();	
	ТекПодразделение = Неопределено;	
		Для Каждого ТЧ Из ТЗ Цикл
			Если ТЧ.Подразделение <> ТекПодразделение Тогда
				Если ТекПодразделение <> Неопределено Тогда
				БазаСД.Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(бсНовДок, "Товары");
				бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Запись);
					Попытка
					бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Проведение);
					Исключение
					
					КонецПопытки;
				КонецЕсли;
			бсНовДок = БазаСД.Документы.ПеремещениеТоваров.СоздатьДокумент();
			бсНовДок.Дата = НачалоДня(ПредыдущийДень)+600;
			бсНовДок.Организация = БазаСД.Справочники.Организации.НайтиПоРеквизиту("ИНН","7112011490");
				Если Найти(ТЧ.Подразделение,"Богородицк УПЭА") > 0 Тогда
				бсНовДок.СкладОтправитель = БазаСД.Справочники.Склады.НайтиПоНаименованию("Склад ГП УПЭА",Истина);
				ИначеЕсли Найти(ТЧ.Подразделение,"Торговля ТНП") > 0 Тогда
				бсНовДок.СкладОтправитель = БазаСД.Справочники.Склады.НайтиПоНаименованию("Склад ТНП",Истина);				
				Иначе	
				бсНовДок.СкладОтправитель = БазаСД.Справочники.Склады.НайтиПоНаименованию("Склад ГП УД",Истина);			
				КонецЕсли;
			бсНовДок.СкладПолучатель = БазаСД.Справочники.Склады.НайтиПоНаименованию("Транзитная зона",Истина);
			бсНовДок.НДСвСтоимостиТоваров = БазаСД.Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			бсНовДок.Комментарий = "Выгрузка из производственной базы за "+Формат(ПредыдущийДень,"ДФ=dd.MM.yyyy");			
			ТекПодразделение = ТЧ.Подразделение;
			КонецЕсли;
		ТЧ_П = бсНовДок.Товары.Добавить();
		ТЧ_П.Номенклатура = ВыбратьДобавитьНоменклатуру(БазаСД,ТЧ.Товар);
		ТЧ_П.ЕдиницаИзмерения = ТЧ_П.Номенклатура.ЕдиницаИзмерения;
		ТЧ_П.Количество = ТЧ.Количество;
		//ТЧ_П.Себестоимость=ПолучитьЦенуЦена(БазаСД,ТЧ_П.Номенклатура);		
		КонецЦикла;
			Если ТекПодразделение <> Неопределено Тогда
			БазаСД.Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(бсНовДок, "Товары");
			бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Запись);
				Попытка
				бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Проведение);
				Исключение

				КонецПопытки;
			КонецЕсли;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	СостояниеРЗ = СостояниеРЗ+"Документы выгружены!"+Символы.ПС;
	Исключение
	СостояниеРЗ = СостояниеРЗ+ОписаниеОшибки()+Символы.ПС;
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
КонецПроцедуры

Процедура ВыгрузкаННСВБухБазу()Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(2) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БазаСД = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1СБух.Получить());
	Если БазаСД <> Неопределено Тогда
		Если Константы.КодБазы.Получить() = "БГР" Тогда
		ВыгруННСВБухБазуРоссии(БазаСД,СостояниеРЗ);
		КонецЕсли;
	Иначе
	СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с бух. базой!"+Символы.ПС;
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(2,СостояниеРЗ);	
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаГПвБухБазу

Функция ПолучитьЦенуЦена(БазаСД,Н)
ТипЦен=БазаСД.Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00-000001");
Запрос = БазаСД.NewObject("Запрос"); 

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.ТипЦен,
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Номенклатура = &Н
	|	И ЦеныНоменклатуры.ТипЦен = &ТипЦен
	|АВТОУПОРЯДОЧИВАНИЕ";
Запрос.УстановитьПараметр("Н", Н);
Запрос.УстановитьПараметр("ТипЦен", ТипЦен.Ссылка);	
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Цена=ВыборкаДетальныеЗаписи.Цена;
	КонецЦикла;
Возврат Цена;
КонецФункции

Функция ВыбратьДобавитьНоменклатуру(БазаСД,Товар)
Наименование = Товар.Наименование;	
Артикул = Формат(Товар.Код, "ЧДЦ=; ЧГ=0");
Артикул = СтрЗаменить(Артикул, " ", "");
	Пока СтрДлина(Артикул) < 9 Цикл
	Артикул = "0" + Артикул;
	Конеццикла;
Номенклатура =  БазаСД.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);	
	Если Номенклатура = БазаСД.Справочники.Номенклатура.ПустаяСсылка() Тогда
	РодительНоменклатурыНов = БазаСД.Справочники.Номенклатура.НайтиПоНаименованию("Новые", Истина);
	Справ = БазаСД.Справочники.Номенклатура.СоздатьЭлемент();
	ГруппаНоменклатуры = БазаСД.Справочники.Номенклатура.НайтиПоНаименованию("Новые", Истина);
		Если ГруппаНоменклатуры = БазаСД.Справочники.Номенклатура.ПустаяСсылка() Тогда
		ГруппаНоменклатуры = БазаСД.Справочники.Номенклатура.СоздатьГруппу();
		ГруппаНоменклатуры.Наименование = "Новые";
		ГруппаНоменклатуры.Записать();
		КонецЕсли;
	ЕдиницаИзмерения = БазаСД.Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
	Справ.Артикул = 			Артикул;
	Справ.Наименование = 		Наименование;
	Справ.НаименованиеПолное = 	Товар.ПолнНаименование;
	Справ.Родитель = 			ГруппаНоменклатуры;
	Справ.ВидСтавкиНДС = 		БазаСД.Перечисления.ВидыСтавокНДС.Общая;
	Справ.ЕдиницаИзмерения = 	ЕдиницаИзмерения;
	Справ.Записать();
	Номенклатура = БазаСД.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);	
	КонецЕсли;	
Возврат Номенклатура;
КонецФункции

Процедура СозданиеДокументаВБухБазу(БазаСД,СостояниеРЗ)
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Запрос = Новый Запрос;
	ТЗ = Новый ТаблицаЗначений;
	
	ТЗ.Колонки.Добавить("Подразделение");
	ТЗ.Колонки.Добавить("Товар");
	ТЗ.Колонки.Добавить("Количество");

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВыпускПродукцииПоступление.Ссылка КАК Ссылка,
		|	ВыпускПродукцииПоступление.Номенклатура КАК Номенклатура,
		|	ВыпускПродукцииПоступление.Количество КАК Количество,
		|	ВыпускПродукцииПоступление.Ссылка.Подразделение КАК Подразделение
		|ИЗ
		|	Документ.ВыпускПродукции.Поступление КАК ВыпускПродукцииПоступление
		|ГДЕ
		|	ВыпускПродукцииПоступление.Ссылка.НаСклад = ИСТИНА
		|	И ВыпускПродукцииПоступление.Ссылка.ДокументОснование.ДокументОснование.Ремонт = ЛОЖЬ
		|	И ВыпускПродукцииПоступление.Ссылка.ДокументОснование.ДокументОснование.СтандартныйКомментарий.НеВыгружать = ЛОЖЬ
		|	И ВыпускПродукцииПоступление.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
		|ИТОГИ ПО
		|	Подразделение";
	ПредыдущийДень = НачалоДня(ТекущаяДата())-1;
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПредыдущийДень));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПредыдущийДень));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаПодразделения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПодразделения.Следующий() Цикл
		ВыборкаДетальныеЗаписи = ВыборкаПодразделения.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				//Если ВыборкаДетальныеЗаписи.Ссылка.ДокументОснование.Линейка.МестоХраненияГП = ВыборкаДетальныеЗаписи.Ссылка.МестоХранения Тогда
				Если ВыборкаДетальныеЗаписи.Ссылка.ДокументОснование.ДокументОснование.МестоХраненияПотребитель.Пустая() Тогда
					Если Не ВыборкаДетальныеЗаписи.Номенклатура.Товар.Пустая() Тогда
					ТЧ = ТЗ.Добавить();
					ТЧ.Подразделение = ВыборкаПодразделения.Подразделение;
					ТЧ.Товар = ВыборкаДетальныеЗаписи.Номенклатура.Товар;
					ТЧ.Количество = ВыборкаДетальныеЗаписи.Количество;
					Иначе
					СостояниеРЗ = СостояниеРЗ+"Не присвоен товар для "+ВыборкаДетальныеЗаписи.Номенклатура.Наименование+Символы.ПС;
					КонецЕсли;
				КонецЕсли; 
			КонецЦикла;	
		КонецЦикла;
	ТЗ.Свернуть("Подразделение,Товар","Количество");
	ТЗ.Сортировать("Подразделение,Товар");
	бсНовДок = БазаСД.Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();	
	ТекПодразделение = Неопределено;	
		Для Каждого ТЧ Из ТЗ Цикл
			Если ТЧ.Подразделение <> ТекПодразделение Тогда
				Если ТекПодразделение <> Неопределено Тогда
				//БазаСД.Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(бсНовДок, "Продукция");
				бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Проведение);	
				КонецЕсли;
			бсНовДок = БазаСД.Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();
			бсНовДок.Дата = НачалоДня(ПредыдущийДень);
			бсНовДок.Организация = БазаСД.Справочники.Организации.НайтиПоРеквизиту("ИНН","7112011490");
			бсНовДок.СчетЗатрат =  БазаСД.ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01");
				Если Найти(ТЧ.Подразделение,"Богородицк УПЭА") > 0 Тогда
				бсНовДок.ПодразделениеЗатрат = БазаСД.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Завод  УПЭА",Истина);
				бсНовДок.Склад = БазаСД.Справочники.Склады.НайтиПоНаименованию("Склад ГП УПЭА",Истина);
				Иначе	
				бсНовДок.ПодразделениеЗатрат = БазаСД.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Завод  УД",Истина);
				бсНовДок.Склад = БазаСД.Справочники.Склады.НайтиПоНаименованию("Склад ГП УД",Истина);			
				КонецЕсли;
			бсНовДок.НДСвСтоимостиТоваров = БазаСД.Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			бсНовДок.Комментарий = "Выгрузка из производственной базы за "+Формат(ПредыдущийДень,"ДФ=dd.MM.yyyy");			
			ТекПодразделение = ТЧ.Подразделение;
			КонецЕсли;
		ТЧ_П = бсНовДок.Продукция.Добавить();
		ТЧ_П.Номенклатура = ВыбратьДобавитьНоменклатуру(БазаСД,ТЧ.Товар);
		ТЧ_П.НоменклатурнаяГруппа = ТЧ_П.Номенклатура.НоменклатурнаяГруппа;
		ТЧ_П.ЕдиницаИзмерения = ТЧ_П.Номенклатура.ЕдиницаИзмерения;
		ТЧ_П.Количество = ТЧ.Количество;
		ТЧ_П.ПлановаяСтоимость=ПолучитьЦенуЦена(БазаСД,ТЧ_П.Номенклатура);
		ТЧ_П.СуммаПлановая=ТЧ_П.Количество*ТЧ_П.ПлановаяСтоимость;
		ТЧ_П.Счет = БазаСД.ПланыСчетов.Хозрасчетный.ГотоваяПродукция;		
		КонецЦикла;
			Если ТекПодразделение <> Неопределено Тогда
			//БазаСД.Документы.ОтчетПроизводстваЗаСмену.ЗаполнитьСчетаУчетаВТабличнойЧасти(бсНовДок, "Продукция");
			бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Проведение);	
			КонецЕсли;    	
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	СостояниеРЗ = СостояниеРЗ+"Документы выгружены!"+Символы.ПС;
	Исключение
	СостояниеРЗ = СостояниеРЗ+ОписаниеОшибки()+Символы.ПС;
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
КонецПроцедуры

Процедура ВыгрузкаГотовойПродукцииВБухБазу() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(1) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БазаСД = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1СБух.Получить());
	Если БазаСД <> Неопределено Тогда
	СозданиеДокументаВБухБазу(БазаСД,СостояниеРЗ);
	Иначе
	СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с бух. базой!"+Символы.ПС;
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(1,СостояниеРЗ);
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли; 
КонецПроцедуры 

#КонецОбласти

#Область ВыгрузкаДвиженийВБухБазу

Процедура ОбработатьРезультатЗапроса(БазаСД,Запрос,СостояниеРЗ)
ПредыдущийДень = НачалоДня(ТекущаяДата())-1;
Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПредыдущийДень));
Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПредыдущийДень));
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		бсНовДок = БазаСД.Документы.ПеремещениеТоваров.СоздатьДокумент();
		бсНовДок.Номер = ВыборкаДетальныеЗаписи.Ссылка.Номер;
		бсНовДок.Дата = НачалоДня(ПредыдущийДень)+300;
		бсНовДок.Организация = БазаСД.Справочники.Организации.НайтиПоРеквизиту("ИНН","7112011490");
		бсНовДок.СкладОтправитель = БазаСД.Справочники.Склады.НайтиПоКоду(ВыборкаДетальныеЗаписи.МестоХранения.КодВБухБазе);
		бсНовДок.СкладПолучатель = БазаСД.Справочники.Склады.НайтиПоКоду(ВыборкаДетальныеЗаписи.МестоХраненияВ.КодВБухБазе);
		бсНовДок.НДСвСтоимостиТоваров = БазаСД.Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		бсНовДок.Комментарий = "Выгрузка из производственной базы за "+Формат(ПредыдущийДень,"ДФ=dd.MM.yyyy");
			Для каждого ТЧ Из ВыборкаДетальныеЗаписи.Ссылка.ТабличнаяЧасть Цикл
				Если ТЧ.МПЗ.Товар.Пустая() Тогда
				СостояниеРЗ = СостояниеРЗ + ""+ТЧ.МПЗ+" - в производственной базе не присвоен Товар!"+Символы.ПС;
				Продолжить; 			
				КонецЕсли; 
			ТЧ_П = бсНовДок.Товары.Добавить();
			ТЧ_П.Номенклатура = ВыбратьДобавитьНоменклатуру(БазаСД,ТЧ.МПЗ.Товар);
			ТЧ_П.ЕдиницаИзмерения = ТЧ_П.Номенклатура.ЕдиницаИзмерения;
			ТЧ_П.Количество = ПолучитьБазовоеКоличество(ТЧ.Количество,ТЧ.ЕдиницаИзмерения);
			//ТЧ_П.Себестоимость=ПолучитьЦенуЦена(БазаСД,ТЧ_П.Номенклатура);
			КонецЦикла; 
		БазаСД.Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(бсНовДок, "Товары");
		бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Запись);
		ДвижениеОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	   	ДвижениеОбъект.Выгружено = Истина;
		ДвижениеОбъект.Записать(РежимЗаписиДокумента.Запись);
		бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Проведение);
		Исключение
		СостояниеРЗ = СостояниеРЗ + ОписаниеОшибки()+Символы.ПС;
		СостояниеРЗ = СостояниеРЗ + бсНовДок.Номер+" - документ не проведен в бух. базе!"+Символы.ПС;
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

Функция ПроверитьДвижение(Перепрогон)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДвижениеМПЗ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДвижениеМПЗ КАК ДвижениеМПЗ
	|ГДЕ
	|	ДвижениеМПЗ.ДокументОснование = &ДокументОснование";
Запрос.УстановитьПараметр("ДокументОснование", Перепрогон);	
РезультатЗапроса = Запрос.Выполнить();	
Возврат(Не РезультатЗапроса.Пустой());
КонецФункции

Процедура СозданиеПеремещенийВБухБазе(БазаСД,СостояниеРЗ)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвижениеМПЗ.Ссылка КАК Ссылка,
	|	ДвижениеМПЗ.МестоХранения КАК МестоХранения,
	|	ДвижениеМПЗ.МестоХраненияВ КАК МестоХраненияВ
	|ИЗ
	|	Документ.ДвижениеМПЗ КАК ДвижениеМПЗ
	|ГДЕ
	|	ДвижениеМПЗ.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ДвижениеМПЗ.Проведен = ИСТИНА
	|	И ДвижениеМПЗ.МестоХранения В ИЕРАРХИИ(&СписокМестХранения)
	|	И ДвижениеМПЗ.МестоХраненияВ В ИЕРАРХИИ(&СписокМестоХраненияВ)"; 

СписокМестХранения = Новый СписокЗначений;
СписокМестХраненияВ = Новый СписокЗначений;

СписокМестХранения.Добавить(Константы.МестоХраненияТранзит.Получить());
СписокМестХранения.Добавить(Константы.МестоХраненияНеликвидов.Получить());
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
СписокМестХраненияВ.Добавить(Константы.МестоХраненияПерепрогон.Получить());
СписокМестХраненияВ.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Богородицк Основной",ИСТИНА));
Запрос.УстановитьПараметр("СписокМестоХраненияВ", СписокМестХраненияВ);
ОбработатьРезультатЗапроса(БазаСД,Запрос,СостояниеРЗ);

СписокМестХранения.Очистить();
СписокМестХраненияВ.Очистить();
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция УПЭА",ИСТИНА));
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция ДД",ИСТИНА));
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция УД",ИСТИНА));
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
СписокМестХраненияВ.Добавить(Константы.МестоХраненияНеликвидов.Получить());
СписокМестХраненияВ.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Изолятор",Истина));
Запрос.УстановитьПараметр("СписокМестоХраненияВ", СписокМестХраненияВ);
ОбработатьРезультатЗапроса(БазаСД,Запрос,СостояниеРЗ);

СписокМестХранения.Очистить();
СписокМестХраненияВ.Очистить();
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Изолятор",ИСТИНА));
СписокМестХранения.Добавить(Константы.МестоХраненияТранзит.Получить());
СписокМестХранения.Добавить(Константы.МестоХраненияНеликвидов.Получить());
СписокМестХранения.Добавить(Константы.МестоХраненияТНП.Получить());
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
СписокМестХраненияВ.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция УПЭА",ИСТИНА));
СписокМестХраненияВ.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция ДД",ИСТИНА));
СписокМестХраненияВ.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция УД",ИСТИНА));
СписокМестХраненияВ.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Богородицк ГП СД (старые)",ИСТИНА));
СписокМестХраненияВ.Добавить(Константы.МестоХраненияНеликвидов.Получить());
Запрос.УстановитьПараметр("СписокМестоХраненияВ", СписокМестХраненияВ);
ОбработатьРезультатЗапроса(БазаСД,Запрос,СостояниеРЗ);

СписокМестХранения.Очистить();
СписокМестХраненияВ.Очистить();
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Богородицк Основной",ИСТИНА));
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
СписокМестХраненияВ.Добавить(Константы.МестоХраненияНеликвидов.Получить());
Запрос.УстановитьПараметр("СписокМестоХраненияВ", СписокМестХраненияВ);
ОбработатьРезультатЗапроса(БазаСД,Запрос,СостояниеРЗ);

ТЗ = Новый ТаблицаЗначений;
СписокДвижений = Новый СписокЗначений;

ТЗ.Колонки.Добавить("Товар");
ТЗ.Колонки.Добавить("Количество");

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвижениеМПЗТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ДвижениеМПЗТабличнаяЧасть.Ссылка.МестоХраненияВ КАК МестоХраненияВ,
	|	ДвижениеМПЗТабличнаяЧасть.МПЗ КАК МПЗ,
	|	ДвижениеМПЗТабличнаяЧасть.Количество КАК Количество,
	|	ДвижениеМПЗТабличнаяЧасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ДвижениеМПЗ.ТабличнаяЧасть КАК ДвижениеМПЗТабличнаяЧасть
	|ГДЕ
	|	ДвижениеМПЗТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ДвижениеМПЗТабличнаяЧасть.Ссылка.Проведен = ИСТИНА
	|	И ДвижениеМПЗТабличнаяЧасть.Ссылка.МестоХранения = &МестоХранения
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестоХраненияВ
	|ИТОГИ ПО
	|	МестоХраненияВ";
ПредыдущийДень = НачалоДня(ТекущаяДата())-1;
Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПредыдущийДень));
Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПредыдущийДень));
Запрос.УстановитьПараметр("МестоХранения", Константы.МестоХраненияПерепрогон.Получить());
РезультатЗапроса = Запрос.Выполнить();
ВыборкаМестаХраненияВ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМестаХраненияВ.Следующий() Цикл
	ТЗ.Очистить();
	СписокДвижений.Очистить();
	ВыборкаДетальныеЗаписи = ВыборкаМестаХраненияВ.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если Не ВыборкаДетальныеЗаписи.МПЗ.Товар.Пустая() Тогда
				Если СписокДвижений.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка) = Неопределено Тогда
				СписокДвижений.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
				КонецЕсли; 
			ТЧ = ТЗ.Добавить();
			ТЧ.Товар = ВыборкаДетальныеЗаписи.МПЗ.Товар;
			ТЧ.Количество = ПолучитьБазовоеКоличество(ВыборкаДетальныеЗаписи.Количество,ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
			Иначе
			СостояниеРЗ = СостояниеРЗ + ""+ВыборкаДетальныеЗаписи.МПЗ+" - в производственной базе не присвоен Товар!"+Символы.ПС;			
			КонецЕсли;
		КонецЦикла;
			Если ТЗ.Количество() > 0 Тогда
			ТЗ.Свернуть("Товар","Количество");
			ТЗ.Сортировать("Товар");
			бсНовДок = БазаСД.Документы.ПеремещениеТоваров.СоздатьДокумент();
			бсНовДок.Дата = НачалоДня(ПредыдущийДень)+300;
			бсНовДок.Организация = БазаСД.Справочники.Организации.НайтиПоРеквизиту("ИНН","7112011490");
			бсНовДок.СкладОтправитель = БазаСД.Справочники.Склады.НайтиПоКоду(Константы.МестоХраненияПерепрогон.Получить().КодВБухБазе);
			бсНовДок.СкладПолучатель = БазаСД.Справочники.Склады.НайтиПоКоду(ВыборкаМестаХраненияВ.МестоХраненияВ.КодВБухБазе);
			бсНовДок.НДСвСтоимостиТоваров = БазаСД.Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			бсНовДок.Комментарий = "Выгрузка из производственной базы за "+Формат(ПредыдущийДень,"ДФ=dd.MM.yyyy");
				Для каждого ТЧ Из ТЗ Цикл
				ТЧ_П = бсНовДок.Товары.Добавить();
				ТЧ_П.Номенклатура = ВыбратьДобавитьНоменклатуру(БазаСД,ТЧ.Товар);
				ТЧ_П.ЕдиницаИзмерения = ТЧ_П.Номенклатура.ЕдиницаИзмерения;
				ТЧ_П.Количество =ТЧ.Количество;
				//ТЧ_П.Себестоимость=ПолучитьЦенуЦена(БазаСД,ТЧ_П.Номенклатура);
				КонецЦикла;
			БазаСД.Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(бсНовДок, "Товары");
				Попытка
				бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Запись);
					Для каждого Док Из СписокДвижений Цикл
					ДвижениеОбъект = Док.Значение.ПолучитьОбъект();
				   	ДвижениеОбъект.Выгружено = Истина;
					ДвижениеОбъект.Записать(РежимЗаписиДокумента.Запись);
					КонецЦикла;
				бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Проведение);		
				Исключение
				СостояниеРЗ = СостояниеРЗ + ОписаниеОшибки()+Символы.ПС;
				СостояниеРЗ = СостояниеРЗ + бсНовДок.Номер+" - документ не проведен в бух. базе!"+Символы.ПС;
				КонецПопытки;
			КонецЕсли; 	
	КонецЦикла;
КонецПроцедуры

Процедура ВыгрузкаДвиженийВБухБазу() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(10) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БазаСД = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1СБух.Получить());
	Если БазаСД <> Неопределено Тогда
	СозданиеПеремещенийВБухБазе(БазаСД,СостояниеРЗ);
	Иначе
	СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с бух. базой!"+Символы.ПС;
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(10,СостояниеРЗ);
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли; 
КонецПроцедуры 

#КонецОбласти
     
#Область ВыгрузкаВозвратныхОтходов

Функция НайтиСоздатьНоменклатуру(БухБаза, Элемент)
	Если Элемент.Уровень()>1 Тогда
	г = БухБаза.Справочники.Номенклатура.НайтиПоНаименованию(Элемент.Родитель.Наименование,-1);
		Если БухБаза.ЗначениеЗаполнено(г) Тогда
		бсдГруппа = г;	
		КонецЕсли;
	КонецЕсли;
ПолныйКод = СтрЗаменить(Элемент.ПолныйКод(),"/","-");
ПолныйКод = СокрЛП(СтрЗаменить(ПолныйКод,Символы.НПП,""));	
Ном = БухБаза.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", ПолныйКод);
	Если Не БухБаза.ЗначениеЗаполнено(Ном) Тогда		
	НомОбъект = БухБаза.Справочники.Номенклатура.СоздатьЭлемент();
 	НомОбъект.Артикул 				= ПолныйКод;					
	НомОбъект.ПометкаУдаления 		= Элемент.ПометкаУдаления;
  	НомОбъект.НаименованиеПолное 	= Элемент.ПолнНаименование;
 	НомОбъект.Наименование 			= Элемент.Наименование;	
 	ЕдИзм = БухБаза.Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию(Элемент.ЕдиницаИзмерения.Наименование);
	 	Если Не БухБаза.ЗначениеЗаполнено(ЕдИзм) Тогда
 		ЕдИзмОбъект = БухБаза.Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент(); 		
 	    ЕдИзмОбъект.Наименование 		= Элемент.ЕдиницаИзмерения.Наименование;
 	    ЕдИзмОбъект.НаименованиеПолное 	= Элемент.ЕдиницаИзмерения.ПолнНаименование;
 	    ЕдИзмОбъект.Код 				= Элемент.ЕдиницаИзмерения.Код;
 		ЕдИзмОбъект.Записать();
 		ЕдИзм = ЕдИзмОбъект.Ссылка;
	 	КонецЕсли;	 	
 	НомОбъект.ЕдиницаИзмерения = ЕдИзм;	
 	НомОбъект.ВидСтавкиНДС =  БухБаза.Перечисления.ВидыСтавокНДС.Общая;
 	НомОбъект.Записать();	
 	Возврат НомОбъект.Ссылка;
 	Иначе
	Возврат Ном;
 	КонецЕсли;	
КонецФункции

Процедура ВыгрузитьВО(БухБаза,СостояниеРЗ)
бсдМенеджерСклады = БухБаза.Справочники.Склады;
Запрос = Новый Запрос;
                       
	Попытка
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтменаЗапускаПЗ.МестоХранения КАК МестоХранения,
		|	ОтменаЗапускаПЗ.МПЗ КАК МПЗ,
		|	ОтменаЗапускаПЗ.Количество КАК Количество
		|ИЗ
		|	РегистрСведений.ОтменаЗапускаПЗ КАК ОтменаЗапускаПЗ
		|ИТОГИ
		|	СУММА(Количество)
		|ПО
		|	МестоХранения,
		|	МПЗ"; 
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаМестоХранения = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМестоХранения.Следующий() Цикл          
		Склад = бсдМенеджерСклады.НайтиПоКоду(СокрЛП(ВыборкаМестоХранения.МестоХранения.КодВБухБазе));
			Если Склад.Пустая() Тогда
			СостояниеРЗ = СостояниеРЗ+"Склад с кодом "+СокрЛП(ВыборкаМестоХранения.МестоХранения.КодВБухБазе)+" не найден в бух. базе!"+Символы.ПС;
			Продолжить;
			КонецЕсли;
		бсНовДок = БухБаза.Документы.ОтчетПроизводстваЗаСмену.СоздатьДокумент();	
		бсНовДок.Дата = НачалоДня(КонецМесяца(ТекущаяДата()));
		бсНовДок.Организация = БухБаза.Справочники.Организации.НайтиПоРеквизиту("ИНН","7112011490");
		бсНовДок.СчетЗатрат =  БухБаза.ПланыСчетов.Хозрасчетный.НайтиПоКоду("20.01");
			Если Найти(ВыборкаМестоХранения.МестоХранения.Подразделение.Наименование,"Богородицк УПЭА") > 0 Тогда
			флУПЭА = Истина;
			бсНовДок.ПодразделениеЗатрат = БухБаза.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Завод  УПЭА",Истина);
			Иначе	                                                                                                                        
			флУПЭА = Ложь;
			бсНовДок.ПодразделениеЗатрат = БухБаза.Справочники.ПодразделенияОрганизаций.НайтиПоНаименованию("Завод  УД",Истина);			
			КонецЕсли;
		бсНовДок.Склад = Склад;
		бсНовДок.НДСвСтоимостиТоваров = БухБаза.Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		бсНовДок.Комментарий = "Сторно ПЗ за "+Формат(НачалоДня(ТекущаяДата())-1,"ДФ=dd.MM.yyyy");
		ВыборкаМПЗ = ВыборкаМестоХранения.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		 	Пока ВыборкаМПЗ.Следующий() Цикл 
			ВыборкаДетельныхЗаписей = ВыборкаМПЗ.Выбрать();
				Пока ВыборкаДетельныхЗаписей.Следующий() Цикл
				ТЧ_П = бсНовДок.ВозвратныеОтходы.Добавить();
				ТЧ_П.Номенклатура = НайтиСоздатьНоменклатуру(БухБаза,ВыборкаДетельныхЗаписей.МПЗ);             
               		Если флУПЭА Тогда
					ТЧ_П.НоменклатурнаяГруппа = БухБаза.Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Приборы",Истина);					
					Иначе	
					ТЧ_П.НоменклатурнаяГруппа = БухБаза.Справочники.НоменклатурныеГруппы.НайтиПоНаименованию("Датчики",Истина);					
					КонецЕсли;
				ТЧ_П.Количество = ВыборкаДетельныхЗаписей.Количество;
				ТЧ_П.Цена=ОбщийМодульВызовСервера.ПолучитьСтоимостьМПЗ(ВыборкаДетельныхЗаписей.МПЗ,1,ТекущаяДата());
				ТЧ_П.Сумма=ТЧ_П.Количество*ТЧ_П.Цена;
				ТЧ_П.Счет = БухБаза.ПланыСчетов.Хозрасчетный.НайтиПоКоду("10.01");
				ТЧ_П.СтатьяЗатрат=БухБаза.Справочники.СтатьиЗатрат.НайтиПоНаименованию("Списание материалов",Истина);						
				КонецЦикла;
			КонецЦикла;	
		бсНовДок.Записать(БухБаза.РежимЗаписиДокумента.Запись);	
		НаборЗаписей = РегистрыСведений.ОтменаЗапускаПЗ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.МестоХранения.Установить(ВыборкаМестоХранения.МестоХранения);
		НаборЗаписей.Записать(Истина);
		КонецЦикла;	
	Исключение
    Сообщить(ОписаниеОшибки());
	КонецПопытки; 
КонецПроцедуры

Процедура ВыгрузкаВозвратныхОтходов() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(19) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БухБаза = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1СБух.Получить());
	Если БухБаза <> Неопределено Тогда
	ВыгрузитьВО(БухБаза,СостояниеРЗ);
	Иначе
	СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с бух. базой!"+Символы.ПС;
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(19,СостояниеРЗ);
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли;
КонецПроцедуры 

#КонецОбласти

#Область ВыгрузкаСИвБазуАршин

Функция ПолучитьПараметрыСНД(БазаУК,ИС)
Запрос = БазаУК.NewObject("Запрос");
ЗапросСНД = БазаУК.NewObject("Запрос");
Парам = Новый Структура("Температура,Давление,Влажность","","","");

	Если ИС.ТаблицаСтендов.Количество() = 0 Тогда
	Возврат(Парам)
	КонецЕсли;
Стенд = БазаУК.Справочники.Стенды.ПустаяСсылка();
	Для каждого ТЧ Из ИС.ТаблицаСтендов Цикл
	Стенд = ТЧ.Стенд;
	КонецЦикла; 

Запрос.Текст = 
"ВЫБРАТЬ
|	СоставСтендовСрезПоследних.СоставСтенда.Элемент КАК СоставСтендаЭлемент
|ИЗ
|	РегистрСведений.СоставСтендов.СрезПоследних(&НаДату, ) КАК СоставСтендовСрезПоследних
|ГДЕ
|	СоставСтендовСрезПоследних.СоставСтенда.Владелец = &Владелец
|	И СоставСтендовСрезПоследних.Действующий = ИСТИНА";
Запрос.УстановитьПараметр("НаДату", ИС.ДатаИзмерения);
Запрос.УстановитьПараметр("Владелец", Стенд);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ЗапросСНД.Текст = 
	"ВЫБРАТЬ
	|	ИзмеренияСтанцийНепрерывныхДанныхСрезПоследних.ПараметрИзмерения КАК ПараметрИзмерения,
	|	ИзмеренияСтанцийНепрерывныхДанныхСрезПоследних.ЗначениеИзмерения КАК ЗначениеИзмерения
	|ИЗ
	|	РегистрСведений.ИзмеренияСтанцийНепрерывныхДанных.СрезПоследних(&НаДату, ) КАК ИзмеренияСтанцийНепрерывныхДанныхСрезПоследних
	|ГДЕ
	|	ИзмеренияСтанцийНепрерывныхДанныхСрезПоследних.Станция = &Станция";
	ЗапросСНД.УстановитьПараметр("НаДату", ИС.ДатаИзмерения);		
	ЗапросСНД.УстановитьПараметр("Станция", ВыборкаДетальныеЗаписи.СоставСтендаЭлемент);
	РезультатЗапроса = ЗапросСНД.Выполнить();
	ВыборкаСНД = РезультатЗапроса.Выбрать();
		Пока ВыборкаСНД.Следующий() Цикл
		Наимен = СокрЛП(ВыборкаСНД.ПараметрИзмерения.Наименование);
			Если Наимен = "Температура" Тогда
			Температура = ВыборкаСНД.ЗначениеИзмерения;
				Если Температура >= 25 Тогда
				Температура = Температура-(Цел(Температура)-24);
				ИначеЕсли Температура < 15 Тогда
				Температура = Температура+(15-Цел(Температура));
				КонецЕсли;
			Парам.Температура = ""+Температура+" °С";
			ИначеЕсли Наимен = "Давление" Тогда
			Парам.Давление = ""+ВыборкаСНД.ЗначениеИзмерения+" кПа";				
			ИначеЕсли Наимен = "Влажность" Тогда
				Если ВыборкаСНД.ЗначениеИзмерения < 30 Тогда
				Парам.Влажность = ""+(ВыборкаСНД.ЗначениеИзмерения+20)+" %";
				Иначе	
				Парам.Влажность = ""+ВыборкаСНД.ЗначениеИзмерения+" %";
				КонецЕсли;			
			КонецЕсли; 
		КонецЦикла;
	КонецЦикла;
Возврат(Парам);
КонецФункции

Функция ПолучитьПараметрыСНД6(БазаУК,ДатаВыпуска)
ЗапросСНД = БазаУК.NewObject("Запрос");
Парам = Новый Структура("Температура,Давление,Влажность","","",""); 

ЗапросСНД.Текст = 
"ВЫБРАТЬ
|	ИзмеренияСтанцийНепрерывныхДанныхСрезПоследних.ПараметрИзмерения КАК ПараметрИзмерения,
|	ИзмеренияСтанцийНепрерывныхДанныхСрезПоследних.ЗначениеИзмерения КАК ЗначениеИзмерения
|ИЗ
|	РегистрСведений.ИзмеренияСтанцийНепрерывныхДанных.СрезПоследних(&НаДату, ) КАК ИзмеренияСтанцийНепрерывныхДанныхСрезПоследних
|ГДЕ
|	ИзмеренияСтанцийНепрерывныхДанныхСрезПоследних.Станция.Код = 1006";
ЗапросСНД.УстановитьПараметр("НаДату", ДатаВыпуска);
РезультатЗапроса = ЗапросСНД.Выполнить();
ВыборкаСНД = РезультатЗапроса.Выбрать();
	Пока ВыборкаСНД.Следующий() Цикл
	Наимен = СокрЛП(ВыборкаСНД.ПараметрИзмерения.Наименование);
		Если Наимен = "Температура" Тогда
		Температура = ВыборкаСНД.ЗначениеИзмерения;
			Если Температура >= 25 Тогда
			Температура = Температура-(Цел(Температура)-24);
			ИначеЕсли Температура < 15 Тогда
			Температура = Температура+(15-Цел(Температура));
			КонецЕсли;
		Парам.Температура = ""+Температура+" °С";
		ИначеЕсли Наимен = "Давление" Тогда
		Парам.Давление = ""+ВыборкаСНД.ЗначениеИзмерения+" кПа";				
		ИначеЕсли Наимен = "Влажность" Тогда
			Если ВыборкаСНД.ЗначениеИзмерения < 30 Тогда
			Парам.Влажность = ""+(ВыборкаСНД.ЗначениеИзмерения+20)+" %";
			Иначе	
			Парам.Влажность = ""+ВыборкаСНД.ЗначениеИзмерения+" %";
			КонецЕсли;			
		КонецЕсли; 
	КонецЦикла;
Возврат(Парам);
КонецФункции

Функция ПолучитьОборудование(БазаУК,ИС)
	Если ИС.Статус < 3 Тогда
	ДатаПоверкиРасч = ИС.ДатаВыпуска;
	Иначе
	ДатаПоверкиРасч = ИС.ДатаИзмерения;
	КонецЕсли;
Запрос = БазаУК.NewObject("Запрос");
Оборудование = Новый Структура("ПЭ,Вспомогательные","","");
СписокСтендов = БазаУК.NewObject("СписокЗначений");
СписокОборудования = БазаУК.NewObject("СписокЗначений"); 
           
	Для каждого ТЧ Из ИС.ТаблицаСтендов Цикл
	СписокСтендов.Добавить(ТЧ.Стенд);			
	КонецЦикла;	

Запрос.Текст = 
	"ВЫБРАТЬ
     |	СоставСтендовСрезПоследних.СоставСтенда.Позиция КАК Позиция,
     |	СоставСтендовСрезПоследних.СоставСтенда.ВидЭлемента КАК ВидЭлемента,
     |	СоставСтендовСрезПоследних.СоставСтенда.Элемент КАК Элемент
     |ИЗ
     |	РегистрСведений.СоставСтендов.СрезПоследних(&НаДату, ) КАК СоставСтендовСрезПоследних
     |ГДЕ
     |	СоставСтендовСрезПоследних.Действующий = ИСТИНА
     |	И СоставСтендовСрезПоследних.СоставСтенда.Владелец В(&СписокСтендов)
     |	И СоставСтендовСрезПоследних.СоставСтенда.Позиция В(&СписокПозиций)";
Запрос.УстановитьПараметр("НаДату", ДатаПоверкиРасч);
Запрос.УстановитьПараметр("СписокСтендов", СписокСтендов);
Запрос.УстановитьПараметр("СписокПозиций", ИС.МетрологическаяГруппа.ТаблицаОбозначенийСИ.Выгрузить(,"ОбозначениеСИ"));
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если БазаУК.Перечисления.ВидыЭлементов.Индекс(ВыборкаДетальныеЗаписи.ВидЭлемента) = БазаУК.Перечисления.ВидыЭлементов.Индекс(БазаУК.Перечисления.ВидыЭлементов.Оборудование) Тогда
			Если Найти(ВыборкаДетальныеЗаписи.Позиция.Наименование,"Рабочий эталон") > 0 Тогда 
				Если СписокОборудования.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Элемент) = Неопределено Тогда
				СписокОборудования.Добавить(ВыборкаДетальныеЗаписи.Элемент,,Истина);
				КонецЕсли;
					//Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Элемент.НомерСИ) Тогда
					//	Если ЗначениеЗаполнено(Оборудование.ПЭ) Тогда
					//	Оборудование.ПЭ = Оборудование.ПЭ + ", " + СокрЛП(ВыборкаДетальныеЗаписи.Элемент.НомерСИ);
					//	Иначе	
					//	Оборудование.ПЭ = СокрЛП(ВыборкаДетальныеЗаписи.Элемент.НомерСИ);
					//	КонецЕсли;		
					//КонецЕсли;
			Иначе
				Если СписокОборудования.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Элемент) = Неопределено Тогда
				СписокОборудования.Добавить(ВыборкаДетальныеЗаписи.Элемент);
				КонецЕсли;	
					//Если ЗначениеЗаполнено(Оборудование.Вспомогательные) Тогда
					//Оборудование.Вспомогательные = Оборудование.Вспомогательные + ", " + СокрЛП(ВыборкаДетальныеЗаписи.Элемент.НомерТипаСИ)+"/"+СокрЛП(ВыборкаДетальныеЗаписи.Элемент.Код);
					//Иначе	
					//Оборудование.Вспомогательные = СокрЛП(ВыборкаДетальныеЗаписи.Элемент.НомерТипаСИ)+"/"+СокрЛП(ВыборкаДетальныеЗаписи.Элемент.Код);
					//КонецЕсли;		
			КонецЕсли;		
		Иначе	
		Запрос.Текст = 
			"ВЫБРАТЬ
		     |	СоставСтендовСрезПоследних.СоставСтенда.Позиция КАК Позиция,
		     |	СоставСтендовСрезПоследних.СоставСтенда.ВидЭлемента КАК ВидЭлемента,
		     |	СоставСтендовСрезПоследних.СоставСтенда.Элемент КАК Элемент
		     |ИЗ
		     |	РегистрСведений.СоставСтендов.СрезПоследних(&НаДату, ) КАК СоставСтендовСрезПоследних
		     |ГДЕ
		     |	СоставСтендовСрезПоследних.Действующий = ИСТИНА
		     |	И СоставСтендовСрезПоследних.СоставСтенда.Владелец = &Стенд";
		Запрос.УстановитьПараметр("НаДату", ДатаПоверкиРасч);
		Запрос.УстановитьПараметр("Стенд", ВыборкаДетальныеЗаписи.Элемент);
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаСоставСтенда = РезультатЗапроса.Выбрать();
			Пока ВыборкаСоставСтенда.Следующий() Цикл
				Если БазаУК.Перечисления.ВидыЭлементов.Индекс(ВыборкаСоставСтенда.ВидЭлемента) = БазаУК.Перечисления.ВидыЭлементов.Индекс(БазаУК.Перечисления.ВидыЭлементов.Оборудование) Тогда
					Если СписокОборудования.НайтиПоЗначению(ВыборкаСоставСтенда.Элемент) = Неопределено Тогда
					СписокОборудования.Добавить(ВыборкаСоставСтенда.Элемент);
					КонецЕсли;
						//Если ЗначениеЗаполнено(Оборудование.Вспомогательные) Тогда
						//Оборудование.Вспомогательные = Оборудование.Вспомогательные + ", " + СокрЛП(ВыборкаСоставСтенда.Элемент.НомерТипаСИ)+"/"+СокрЛП(ВыборкаСоставСтенда.Элемент.Код);
						//Иначе	
						//Оборудование.Вспомогательные = СокрЛП(ВыборкаСоставСтенда.Элемент.НомерТипаСИ)+"/"+СокрЛП(ВыборкаСоставСтенда.Элемент.Код);
						//КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
	КонецЦикла;
		Для каждого Оборуд Из СписокОборудования Цикл
			Если Оборуд.Пометка Тогда
				Если ЗначениеЗаполнено(Оборуд.Значение.НомерСИ) Тогда
					Если ЗначениеЗаполнено(Оборудование.ПЭ) Тогда
					Оборудование.ПЭ = Оборудование.ПЭ + ", " + СокрЛП(Оборуд.Значение.НомерСИ);
					Иначе	
					Оборудование.ПЭ = СокрЛП(Оборуд.Значение.НомерСИ);
					КонецЕсли;		
				КонецЕсли;			
			Иначе	
				Если ЗначениеЗаполнено(Оборудование.Вспомогательные) Тогда
				Оборудование.Вспомогательные = Оборудование.Вспомогательные + ", " + СокрЛП(Оборуд.Значение.НомерТипаСИ)+"/"+СокрЛП(Оборуд.Значение.Код);
				Иначе	
				Оборудование.Вспомогательные = СокрЛП(Оборуд.Значение.НомерТипаСИ)+"/"+СокрЛП(Оборуд.Значение.Код);
				КонецЕсли;			
			КонецЕсли;
		КонецЦикла;
Возврат(Оборудование);
КонецФункции

Функция ПолучитьПоверителя(БазаУК,ИС)
	Если ИС.Статус < 3 Тогда
	ДатаПоверкиРасч = ИС.ДатаВыпуска;
	Иначе
	ДатаПоверкиРасч = ИС.ДатаИзмерения;
	КонецЕсли;
Запрос = БазаУК.NewObject("Запрос");

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоверителиСрезПоследних.Поверитель КАК Поверитель
	|ИЗ
	|	РегистрСведений.Поверители.СрезПоследних(&НаДату, ) КАК ПоверителиСрезПоследних
	|ГДЕ
	|	ПоверителиСрезПоследних.МетрологическаяГруппа = &МетрологическаяГруппа";
Запрос.УстановитьПараметр("НаДату", ДатаПоверкиРасч);
Запрос.УстановитьПараметр("МетрологическаяГруппа", ИС.МетрологическаяГруппа);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(СокрЛП(ВыборкаДетальныеЗаписи.Поверитель.Наименование));
	КонецЦикла;
Возврат("");
КонецФункции

Функция ПолучитьМП(Товар) Экспорт
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыТоварныхГрупп.ЗначениеПараметра КАК ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.ПараметрыТоварныхГрупп КАК ПараметрыТоварныхГрупп
	|ГДЕ
	|	ПараметрыТоварныхГрупп.ТоварнаяГруппа = &ТоварнаяГруппа
	|	И (ПараметрыТоварныхГрупп.ПараметрТоварнойГруппы.Наименование ПОДОБНО &Наименование
	|			ИЛИ ПараметрыТоварныхГрупп.ПараметрТоварнойГруппы.Наименование ПОДОБНО &Наименование1)";
Запрос.УстановитьПараметр("ТоварнаяГруппа", Товар.ТоварнаяГруппа);
Запрос.УстановитьПараметр("Наименование", "Параметр2");
Запрос.УстановитьПараметр("Наименование1", "МП");
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(СокрЛП(ВыборкаДетальныеЗаписи.ЗначениеПараметра));
	КонецЦикла;
Возврат("");
КонецФункции

Функция ПолучитьДанныеИзУК(БазаУК,БарКод,КодDanfoss,Товар,ДатаВыпуска) Экспорт
ДанныеИзУК = Новый Структура("НомерВРеестре,МП,ПЭ,Вспомогательные,ВспомогательныеНомер,Поверитель,ПервичнаяПоверка,Температура,Давление,Влажность,ОбъемСокращеннойПоверки,ИмяФайлаПротокола","","","","","","",true,"","","","","");
Запрос = БазаУК.NewObject("Запрос");

	Если ЗначениеЗаполнено(КодDanfoss) Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИзмеренияСтендов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИзмеренияСтендов КАК ИзмеренияСтендов
		|ГДЕ
		|	ИзмеренияСтендов.КодDanfoss = &КодDanfoss
		|	И ИзмеренияСтендов.Заключение = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИзмеренияСтендов.ДатаИзмерения УБЫВ";
	Запрос.УстановитьПараметр("КодDanfoss", КодDanfoss);
	Иначе
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ИзмеренияСтендов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ИзмеренияСтендов КАК ИзмеренияСтендов
		|ГДЕ
		|	ИзмеренияСтендов.Код = &Код
		|	И ИзмеренияСтендов.Заключение = ИСТИНА
		|
		|УПОРЯДОЧИТЬ ПО
		|	ИзмеренияСтендов.ДатаИзмерения УБЫВ";
	Запрос.УстановитьПараметр("Код", БарКод);
	КонецЕсли;
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ИС = ВыборкаДетальныеЗаписи.Ссылка;
		ДанныеИзУК.НомерВРеестре = СокрЛП(ИС.МетрологическаяГруппа.РегистрационныйНомер);
		ДанныеИзУК.МП = СокрЛП(ИС.МетрологическаяГруппа.НомерМетодикиПоверки);
		Оборудование = ПолучитьОборудование(БазаУК,ИС);
		ДанныеИзУК.ПЭ = Оборудование.ПЭ;
		ДанныеИзУК.Вспомогательные = Оборудование.Вспомогательные;
		ДанныеИзУК.ПервичнаяПоверка = ИС.ПервичнаяПоверка;
		ДанныеИзУК.Поверитель = ПолучитьПоверителя(БазаУК,ИС);
		Парам = ПолучитьПараметрыСНД(БазаУК,ИС);
		ДанныеИзУК.Температура = Парам.Температура;
		ДанныеИзУК.Давление = Парам.Давление;
		ДанныеИзУК.Влажность = Парам.Влажность;
			Если ИС.МетрологическаяГруппа.СокращеннаяПоверка Тогда
			ДанныеИзУК.ОбъемСокращеннойПоверки = ИС.МетрологическаяГруппа.ОбъемСокращеннойПоверки;
				Если ИС.ПротоколВыгружен Тогда
				ДанныеИзУК.ИмяФайлаПротокола = СокрЛП(ИС.Код)+"_"+Формат(ИС.ДатаВыпуска,"ДФ=dd_MM_yyyy")+".docx";
				КонецЕсли; 		
			КонецЕсли; 
		КонецЦикла;
	Иначе
	Парам = ПолучитьПараметрыСНД6(БазаУК,ДатаВыпуска);
	ДанныеИзУК.Температура = Парам.Температура;
	ДанныеИзУК.Давление = Парам.Давление;
	ДанныеИзУК.Влажность = Парам.Влажность;
	КонецЕсли;
Возврат(ДанныеИзУК);
КонецФункции 

Функция ПолучитьДанныеИзУТ(БазаУТ,Товар) Экспорт
ДанныеИзУТ = Новый Структура("НомерВРеестре,МП,МИ","","",0);
бсНомен = БазаУТ.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(Товар.Код));
	Если Не бсНомен.Пустая() Тогда
	ДанныеИзУТ.НомерВРеестре = СокрЛП(бсНомен.ИМРегистрационныйНомер);				
	ДанныеИзУТ.МП = СокрЛП(бсНомен.ИМДокументПоверки);
	ДанныеИзУТ.МИ = бсНомен.ИмМежповерочныйИнтервал;
	КонецЕсли;
Возврат(ДанныеИзУТ);
КонецФункции 

Функция ПолучитьМИ(Товар,МИ_УТ) Экспорт
Запрос = Новый Запрос;

МежповерочныйИнтервал = 0;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПараметрыТоварныхГрупп.ЗначениеПараметра КАК ЗначениеПараметра
	|ИЗ
	|	РегистрСведений.ПараметрыТоварныхГрупп КАК ПараметрыТоварныхГрупп
	|ГДЕ
	|	ПараметрыТоварныхГрупп.ТоварнаяГруппа = &ТоварнаяГруппа
	|	И (ПараметрыТоварныхГрупп.ПараметрТоварнойГруппы.Наименование ПОДОБНО &Наименование
	|			ИЛИ ПараметрыТоварныхГрупп.ПараметрТоварнойГруппы.Наименование ПОДОБНО &Наименование1)";
Запрос.УстановитьПараметр("ТоварнаяГруппа", Товар.ТоварнаяГруппа);
Запрос.УстановитьПараметр("Наименование", "Параметр5");
Запрос.УстановитьПараметр("Наименование1", "МежповерочныйИнтервал");
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	МИ_Парам = СокрЛП(ВыборкаДетальныеЗаписи.ЗначениеПараметра);
	МИ = Сред(МИ_Парам,1,Найти(МИ_Парам," ")-1);
		Попытка
		МежповерочныйИнтервал = Число(МИ);
		Исключение
		
		КонецПопытки;
	Прервать;
	КонецЦикла;
		Если МежповерочныйИнтервал = 0 Тогда		
		МежповерочныйИнтервал = МИ_УТ;		
		КонецЕсли; 
Возврат(МежповерочныйИнтервал);
КонецФункции

Функция ПолучитьБарКод(Перепрогон)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БарКодыСрезПоследних.БарКод КАК БарКод
	|ИЗ
	|	РегистрСведений.БарКоды.СрезПоследних КАК БарКодыСрезПоследних
	|ГДЕ
	|	БарКодыСрезПоследних.ПЗ = &Док";
Запрос.УстановитьПараметр("Док", Перепрогон);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.БарКод);
	КонецЦикла;
Возврат("");
КонецФункции

Процедура ОбработкаЗапроса(БазаУТ,БазаУК,Запрос,ТабДок,ОблСтрока,Перепрогон) Экспорт
РезультатЗапроса = Запрос.Выполнить();
ВыборкаМПЗ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМПЗ.Следующий() Цикл
	Товар = ВыборкаМПЗ.МПЗ.Товар;
	ДанныеИзУТ = ПолучитьДанныеИзУТ(БазаУТ,Товар);
	МИ = ПолучитьМИ(Товар,ДанныеИзУТ.МИ);
	МП = ПолучитьМП(Товар);
	Наименование = СокрЛП(Товар.Наименование);
		Если Найти(Наименование,"[") > 0 Тогда                         
		Наименование = СокрП(Сред(Наименование,1,Найти(Наименование,"[")-1)); 
		КонецЕсли;
	ВыборкаДетальныеЗаписи = ВыборкаМПЗ.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если Перепрогон Тогда
			БарКод = ПолучитьБарКод(ВыборкаДетальныеЗаписи.Документ);
				Если Не ЗначениеЗаполнено(БарКод) Тогда
				Продолжить;
				КонецЕсли;			
			Иначе	
			БарКод = ВыборкаДетальныеЗаписи.Документ.БарКод;
			КонецЕсли;
		КодDanfoss = ОбщийМодульВызовСервера.ПолучитьКодDanfoss(БарКод);
		ДанныеИзУК = ПолучитьДанныеИзУК(БазаУК,БарКод,КодDanfoss,Товар,ВыборкаДетальныеЗаписи.Дата); 
		ОблСтрока.Параметры.modification = Наименование;
		ОблСтрока.Параметры.signCipher = "ГМД";
		ОблСтрока.Параметры.miOwner = "ООО "+""""+"Завод № 423"+"""";
		ОблСтрока.Параметры.signMi = "false";
		ОблСтрока.Параметры.calibration = "false";
		ОблСтрока.Параметры.type = ?(ДанныеИзУК.ПервичнаяПоверка,"первичная","периодическая");
		ОблСтрока.Параметры.signPass = ?(ДанныеИзУК.ПервичнаяПоверка,"true","false");
		ОблСтрока.Параметры.manufactureNum = ?(ЗначениеЗаполнено(КодDanfoss),КодDanfoss,БарКод);
		ОблСтрока.Параметры.mitypeNumber = ?(ЗначениеЗаполнено(ДанныеИзУК.НомерВРеестре),ДанныеИзУК.НомерВРеестре,ДанныеИзУТ.НомерВРеестре);
		ОблСтрока.Параметры.vrfDate = Формат(ВыборкаДетальныеЗаписи.Дата,"ДФ=yyyy-MM-dd");
		ОблСтрока.Параметры.validDate = Формат(ДобавитьМесяц(ВыборкаДетальныеЗаписи.Дата,МИ*12)-86400,"ДФ=yyyy-MM-dd");
		ОблСтрока.Параметры.metrologist = ДанныеИзУК.Поверитель;
			Если ЗначениеЗаполнено(ДанныеИзУК.МП) Тогда
			ОблСтрока.Параметры.docTitle = ДанныеИзУК.МП;			
			ИначеЕсли ЗначениеЗаполнено(МП) Тогда	
			ОблСтрока.Параметры.docTitle = МП;
			Иначе
			ОблСтрока.Параметры.docTitle = ДанныеИзУТ.МП;
			КонецЕсли;
		ОблСтрока.Параметры.number = ДанныеИзУК.ПЭ;
		ОблСтрока.Параметры.typeNum = ДанныеИзУК.Вспомогательные;
		ОблСтрока.Параметры.temperature = ДанныеИзУК.Температура;
		ОблСтрока.Параметры.pressure = ДанныеИзУК.Давление;
		ОблСтрока.Параметры.hymidity = ДанныеИзУК.Влажность;
		ОблСтрока.Параметры.ОбъемСокращеннойПоверки = ДанныеИзУК.ОбъемСокращеннойПоверки;
		ОблСтрока.Параметры.ИмяФайлаПротокола = ДанныеИзУК.ИмяФайлаПротокола;		
		ТабДок.Вывести(ОблСтрока);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ВыгрузкаСИвБазуАршин() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(9) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БазаАршин = Справочники.ОбменДанными.НайтиПоНаименованию("База Аршин",Истина);
	Если Не БазаАршин.Пустая() Тогда
	ПутьКБазеАршин = СокрЛП(БазаАршин.ПутьКБазеДанных);
	Иначе	
	СостояниеРЗ = "Не найдена База Аршин в справочнике обмена данными!";
	ЗаписатьСостояниеРегламентногоЗадания(9,СостояниеРЗ);
	Возврат;	
	КонецЕсли; 
Файл = Новый Файл(ПутьКБазеАршин);

	Если Не Файл.Существует() Тогда
	СостояниеРЗ = "Каталог "+ПутьКБазеАршин+" - не доступен!";
	ЗаписатьСостояниеРегламентногоЗадания(9,СостояниеРЗ);
	Возврат;
	КонецЕсли; 

ПредыдущийДень = НачалоДня(ТекущаяДата())-1;
ИмяФайла = ПутьКБазеАршин+"Выгрузка от "+Формат(ПредыдущийДень,"ДФ=ddMMyyyy")+".xlsx";

БазаУК = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Справочники.ОбменДанными.НайтиПоНаименованию("База управления качеством",Истина));
	Если БазаУК = Неопределено Тогда
	СостояниеРЗ = "Не установлена связь с базой УК";
	ЗаписатьСостояниеРегламентногоЗадания(9,СостояниеРЗ);
	Возврат;
	КонецЕсли;
БазаУТ = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Справочники.ОбменДанными.НайтиПоНаименованию(Константы.БазаДанных1ССбыт.Получить(),Истина));
	Если БазаУТ = Неопределено Тогда
	СостояниеРЗ = "Не установлена связь с базой УТ";
	ЗаписатьСостояниеРегламентногоЗадания(9,СостояниеРЗ);
	Возврат;
	КонецЕсли;
ТабДок = Новый ТабличныйДокумент;
СписокМестХранения = Новый СписокЗначений;

СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция УПЭА"));
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция УД"));
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция ДД"));

Макет = ПолучитьОбщийМакет("ВыгрузкаСИвБазуАршин");

ОблШапка = Макет.ПолучитьОбласть("Шапка");
ОблСтрока = Макет.ПолучитьОбласть("Строка");

ТабДок.Вывести(ОблШапка);

Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияОбороты.Регистратор.ДокументОснование КАК Документ,
	|	МестаХраненияОбороты.МПЗ КАК МПЗ,
	|	МестаХраненияОбороты.Регистратор.Дата КАК Дата
	|ИЗ
	|	РегистрНакопления.МестаХранения.Обороты(&ДатаНач, &ДатаКон, Регистратор, МестоХранения В ИЕРАРХИИ (&СписокМестХранения)) КАК МестаХраненияОбороты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(МестаХраненияОбороты.Регистратор) = ТИП(Документ.ВыпускПродукции)
	|	И МестаХраненияОбороты.МПЗ.Товар.СИ = ИСТИНА
	|	И МестаХраненияОбороты.МПЗ.Товар.СторонняяПоверка = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестаХраненияОбороты.МПЗ.Товар.Наименование
	|ИТОГИ ПО
	|	МПЗ";
Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПредыдущийДень));
Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПредыдущийДень));
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
ОбработкаЗапроса(БазаУТ,БазаУК,Запрос,ТабДок,ОблСтрока,Ложь);
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвижениеМПЗТабличнаяЧасть.Ссылка.ДокументОснование КАК Документ,
	|	ДвижениеМПЗТабличнаяЧасть.МПЗ КАК МПЗ,
	|	ДвижениеМПЗТабличнаяЧасть.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.ДвижениеМПЗ.ТабличнаяЧасть КАК ДвижениеМПЗТабличнаяЧасть
	|ГДЕ
	|	ДвижениеМПЗТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ТИПЗНАЧЕНИЯ(ДвижениеМПЗТабличнаяЧасть.Ссылка.ДокументОснование) = ТИП(Документ.Перепрогон)
	|	И ДвижениеМПЗТабличнаяЧасть.Ссылка.ДокументОснование.Статус = 1
	|	И ДвижениеМПЗТабличнаяЧасть.Ссылка.Проведен = ИСТИНА
	|	И ДвижениеМПЗТабличнаяЧасть.МПЗ.Товар.СИ = ИСТИНА
	|	И ДвижениеМПЗТабличнаяЧасть.МПЗ.Товар.СторонняяПоверка = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДвижениеМПЗТабличнаяЧасть.МПЗ.Товар.Наименование
	|ИТОГИ ПО
	|	МПЗ КАК МПЗ";
ОбработкаЗапроса(БазаУТ,БазаУК,Запрос,ТабДок,ОблСтрока,Истина);
		Попытка
		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLSX);
		СостояниеРЗ = ИмяФайла+" - записан!";
		Исключение
		СостояниеРЗ = ОписаниеОшибки();
		КонецПопытки;
ЗаписатьСостояниеРегламентногоЗадания(9,СостояниеРЗ);
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли;
КонецПроцедуры

Процедура ВыгрузкаСИвБазуАршинСП() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(14) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БазаАршин = Справочники.ОбменДанными.НайтиПоНаименованию("База Аршин",Истина);
	Если Не БазаАршин.Пустая() Тогда
	ПутьКБазеАршин = СокрЛП(БазаАршин.ПутьКБазеДанных);
	Иначе	
	СостояниеРЗ = "Не найдена База Аршин в справочнике обмена данными!";
	ЗаписатьСостояниеРегламентногоЗадания(14,СостояниеРЗ);
	Возврат;	
	КонецЕсли; 
Файл = Новый Файл(ПутьКБазеАршин);

	Если Не Файл.Существует() Тогда
	СостояниеРЗ = "Каталог "+ПутьКБазеАршин+" - не доступен!";
	ЗаписатьСостояниеРегламентногоЗадания(14,СостояниеРЗ);
	Возврат;
	КонецЕсли; 

ПредыдущийДень = НачалоДня(ТекущаяДата())-1;
ИмяФайла = ПутьКБазеАршин+"Выгрузка СП от "+Формат(ПредыдущийДень,"ДФ=ddMMyyyy")+".xlsx";

БазаУК = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Справочники.ОбменДанными.НайтиПоНаименованию("База управления качеством",Истина));
	Если БазаУК = Неопределено Тогда
	СостояниеРЗ = "Не установлена связь с базой УК";
	ЗаписатьСостояниеРегламентногоЗадания(14,СостояниеРЗ);
	Возврат;
	КонецЕсли;
БазаУТ = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Справочники.ОбменДанными.НайтиПоНаименованию(Константы.БазаДанных1ССбыт.Получить(),Истина));
	Если БазаУТ = Неопределено Тогда
	СостояниеРЗ = "Не установлена связь с базой УТ";
	ЗаписатьСостояниеРегламентногоЗадания(14,СостояниеРЗ);
	Возврат;
	КонецЕсли;
ТабДок = Новый ТабличныйДокумент;
СписокМестХранения = Новый СписокЗначений;

СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция УПЭА"));
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция УД"));
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция ДД"));

Макет = ПолучитьОбщийМакет("ВыгрузкаСИвБазуАршин");

ОблШапка = Макет.ПолучитьОбласть("Шапка");
ОблСтрока = Макет.ПолучитьОбласть("Строка");

ТабДок.Вывести(ОблШапка);

Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияОбороты.Регистратор.ДокументОснование КАК Документ,
	|	МестаХраненияОбороты.МПЗ КАК МПЗ,
	|	МестаХраненияОбороты.Регистратор.Дата КАК Дата
	|ИЗ
	|	РегистрНакопления.МестаХранения.Обороты(&ДатаНач, &ДатаКон, Регистратор, МестоХранения В ИЕРАРХИИ (&СписокМестХранения)) КАК МестаХраненияОбороты
	|ГДЕ
	|	ТИПЗНАЧЕНИЯ(МестаХраненияОбороты.Регистратор) = ТИП(Документ.ВыпускПродукции)
	|	И МестаХраненияОбороты.МПЗ.Товар.СИ = ИСТИНА
	|	И МестаХраненияОбороты.МПЗ.Товар.СторонняяПоверка = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестаХраненияОбороты.МПЗ.Товар.Наименование
	|ИТОГИ ПО
	|	МПЗ";
Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ПредыдущийДень));//-864000)); //-10 дней
Запрос.УстановитьПараметр("ДатаКон", КонецДня(ПредыдущийДень));
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
ОбработкаЗапроса(БазаУТ,БазаУК,Запрос,ТабДок,ОблСтрока,Ложь);
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвижениеМПЗТабличнаяЧасть.Ссылка.ДокументОснование КАК Документ,
	|	ДвижениеМПЗТабличнаяЧасть.МПЗ КАК МПЗ,
	|	ДвижениеМПЗТабличнаяЧасть.Ссылка.Дата КАК Дата
	|ИЗ
	|	Документ.ДвижениеМПЗ.ТабличнаяЧасть КАК ДвижениеМПЗТабличнаяЧасть
	|ГДЕ
	|	ДвижениеМПЗТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ТИПЗНАЧЕНИЯ(ДвижениеМПЗТабличнаяЧасть.Ссылка.ДокументОснование) = ТИП(Документ.Перепрогон)
	|	И ДвижениеМПЗТабличнаяЧасть.Ссылка.ДокументОснование.Статус = 1
	|	И ДвижениеМПЗТабличнаяЧасть.Ссылка.Проведен = ИСТИНА
	|	И ДвижениеМПЗТабличнаяЧасть.МПЗ.Товар.СИ = ИСТИНА
	|	И ДвижениеМПЗТабличнаяЧасть.МПЗ.Товар.СторонняяПоверка = ИСТИНА
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДвижениеМПЗТабличнаяЧасть.МПЗ.Товар.Наименование
	|ИТОГИ ПО
	|	МПЗ КАК МПЗ";
ОбработкаЗапроса(БазаУТ,БазаУК,Запрос,ТабДок,ОблСтрока,Истина);
		Попытка
		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLSX);
		СостояниеРЗ = ИмяФайла+" - записан!";
		Исключение
		СостояниеРЗ = ОписаниеОшибки();
		КонецПопытки;
ЗаписатьСостояниеРегламентногоЗадания(14,СостояниеРЗ);
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаРеализацийИзУТ

Процедура ПроверитьННС(ЗНП)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НакладнаяНаСборкуТабличнаяЧасть.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.НакладнаяНаСборку.ТабличнаяЧасть КАК НакладнаяНаСборкуТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыНакладныхНаСборку.СрезПоследних КАК СтатусыНакладныхНаСборкуСрезПоследних
	|		ПО НакладнаяНаСборкуТабличнаяЧасть.Ссылка = СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку
	|ГДЕ
	|	СтатусыНакладныхНаСборкуСрезПоследних.Статус = &Статус
	|	И НакладнаяНаСборкуТабличнаяЧасть.ЗаказНаПроизводство = &ЗаказНаПроизводство
	|ИТОГИ ПО
	|	Ссылка";
Запрос.УстановитьПараметр("ЗаказНаПроизводство", ЗНП);
Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыНакладнойНаСборку.НаУпаковке);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылка.Следующий() Цикл
	УстановитьСтатусННС(ВыборкаСсылка.Ссылка);
	КонецЦикла;
КонецПроцедуры

Функция СоздатьРеализацию(БазаСбыта,ЗНП,РеализацияУТ,СостояниеРЗ)
Запрос = Новый Запрос;

	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Реализация = Документы.Реализация.СоздатьДокумент();
	Реализация.Номер = РеализацияУТ.Номер;
	Реализация.Дата = РеализацияУТ.ИмДатаОтгрузки;
	Реализация.ДокументОснование = ЗНП;
	Реализация.Подразделение = Константы.МестоХраненияТранзит.Получить().Подразделение;
	Реализация.МестоХранения = Константы.МестоХраненияТранзит.Получить();
	Реализация.Контрагент = ЗНП.Контрагент; 
	Реализация.Договор = ЗНП.Контрагент.ОсновнойДоговор;
	Реализация.Коэфф = 0;
	Реализация.НеУчитыватьГТД = Истина;
	Реализация.Комментарий = "Загружен из УТ";
		Для каждого ТЧ_Товар Из РеализацияУТ.Товары Цикл
		Товар = Справочники.Товары.НайтиПоКоду(Число(СокрЛП(ТЧ_Товар.Номенклатура.Артикул)));
		КоличествоКРеализации = ТЧ_Товар.Количество;
			Если Не Товар.Пустая() Тогда
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДолгиОстатки.Продукция КАК Продукция,
				|	ДолгиОстатки.КоличествоОстаток КАК КоличествоОстаток
				|ИЗ
				|	РегистрНакопления.Долги.Остатки КАК ДолгиОстатки
				|ГДЕ
				|	ДолгиОстатки.Документ = &Документ
				|	И ДолгиОстатки.Продукция.Товар = &Товар
				|	И ДолгиОстатки.КоличествоОстаток > 0";
			Запрос.УстановитьПараметр("Документ", ЗНП);
			Запрос.УстановитьПараметр("Товар", Товар);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если КоличествоКРеализации > 0 Тогда
						ТЧ = Реализация.ТабличнаяЧасть.Добавить();
							Если ТипЗнч(ВыборкаДетальныеЗаписи.Продукция) = Тип("СправочникСсылка.Материалы") Тогда
							ТЧ.ВидТовара = Перечисления.ВидыМПЗ.Материалы;
							Иначе
							ТЧ.ВидТовара = Перечисления.ВидыМПЗ.Полуфабрикаты;
							КонецЕсли;  
						ТЧ.Товар = ВыборкаДетальныеЗаписи.Продукция;
						ТЧ.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.Продукция.ОсновнаяЕдиницаИзмерения;
						ТЧ.СтавкаНДС = Константы.ОсновнаяСтавкаНДС.Получить();
						ТЧ.Цена = ТЧ_Товар.Цена;
							Если КоличествоКРеализации > ВыборкаДетальныеЗаписи.КоличествоОстаток Тогда
							ТЧ.Количество = ВыборкаДетальныеЗаписи.КоличествоОстаток;
							ТЧ.Сумма = ТЧ.Количество*ТЧ_Товар.Цена;
							ТЧ.НДС = ТЧ.Сумма*ТЧ.СтавкаНДС.Ставка/100;
							ТЧ.Всего = ТЧ.Сумма+ТЧ.НДС;
							КоличествоКРеализации = КоличествоКРеализации - ВыборкаДетальныеЗаписи.КоличествоОстаток;
							Иначе	
							ТЧ.Количество = КоличествоКРеализации;
							ТЧ.Сумма = ТЧ.Количество*ТЧ_Товар.Цена;
							ТЧ.НДС = ТЧ.Сумма*ТЧ.СтавкаНДС.Ставка/100;
							ТЧ.Всего = ТЧ.Сумма+ТЧ.НДС;
							Прервать;							
							КонецЕсли;					
						КонецЕсли; 
					КонецЦикла;				
				Иначе	
				СостояниеРЗ = СостояниеРЗ + Товар+" - не найден в долгах производства по заказу "+СокрЛП(ЗНП.Номер)+"!"+Символы.ПС;
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат(Ложь);				
				КонецЕсли;			
			Иначе	
			СостояниеРЗ = СостояниеРЗ + СокрЛП(ТЧ_Товар.Товар.Артикул)+" - товар с таким кодом не найден в справочнике товаров!"+Символы.ПС;
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат(Ложь);			
			КонецЕсли; 
		КонецЦикла;
	Реализация.Записать(РежимЗаписиДокумента.Проведение);
	РеализацияУТОбъект = РеализацияУТ.ПолучитьОбъект();
	РеализацияУТОбъект.ВыгруженоВПроизводство = Истина;
	РеализацияУТОбъект.Записать(БазаСбыта.РежимЗаписиДокумента.Запись);
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	СостояниеРЗ = СостояниеРЗ + ОписаниеОшибки()+Символы.ПС;
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции

Функция СоздатьРеализациюИзХарькова(БазаСбыта,ЗНП,РеализацияУТ,СостояниеРЗ)
Запрос = Новый Запрос;

	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Реализация = Документы.Реализация.СоздатьДокумент();
	Реализация.Номер = РеализацияУТ.Номер;
	Реализация.Дата = РеализацияУТ.Дата;
	Реализация.ДокументОснование = ЗНП;
	Реализация.Подразделение = Константы.МестоХраненияТранзит.Получить().Подразделение;
	Реализация.МестоХранения = Константы.МестоХраненияТранзит.Получить();
	Реализация.Контрагент = ЗНП.Контрагент; 
	Реализация.Договор = ЗНП.Контрагент.ОсновнойДоговор;
	Реализация.Коэфф = 1;
	Реализация.Комментарий = "Загружен из УТ";
		Для каждого ТЧ_Товар Из РеализацияУТ.Товары Цикл
		Товар = Справочники.Товары.НайтиПоКоду(Число(СокрЛП(ТЧ_Товар.Номенклатура.Артикул)));
		КоличествоКРеализации = ТЧ_Товар.Количество;
			Если Не Товар.Пустая() Тогда
			Запрос.Текст = 
				"ВЫБРАТЬ
				|	ДолгиОстатки.Продукция КАК Продукция,
				|	ДолгиОстатки.КоличествоОстаток КАК КоличествоОстаток
				|ИЗ
				|	РегистрНакопления.Долги.Остатки КАК ДолгиОстатки
				|ГДЕ
				|	ДолгиОстатки.Документ = &Документ
				|	И ДолгиОстатки.Продукция.Товар = &Товар
				|	И ДолгиОстатки.КоличествоОстаток > 0";
			Запрос.УстановитьПараметр("Документ", ЗНП);
			Запрос.УстановитьПараметр("Товар", Товар);
			РезультатЗапроса = Запрос.Выполнить();
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
				Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
					Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						Если КоличествоКРеализации > 0 Тогда
						ТЧ = Реализация.ТабличнаяЧасть.Добавить();
							Если ТипЗнч(ВыборкаДетальныеЗаписи.Продукция) = Тип("СправочникСсылка.Материалы") Тогда
							ТЧ.ВидТовара = Перечисления.ВидыМПЗ.Материалы;
							Иначе
							ТЧ.ВидТовара = Перечисления.ВидыМПЗ.Полуфабрикаты;
							КонецЕсли;  
						ТЧ.Товар = ВыборкаДетальныеЗаписи.Продукция;
						ТЧ.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.Продукция.ОсновнаяЕдиницаИзмерения;
						ТЧ.Цена = ТЧ_Товар.Цена;
							Если КоличествоКРеализации > ВыборкаДетальныеЗаписи.КоличествоОстаток Тогда
							ТЧ.Количество = ВыборкаДетальныеЗаписи.КоличествоОстаток;
								Если Реализация.Договор.БезНДС Тогда
								ТЧ.Сумма = ТЧ.Количество*ТЧ_Товар.Цена;
								ТЧ.Всего = ТЧ.Сумма;
								Иначе
								ТЧ.СтавкаНДС = Константы.ОсновнаяСтавкаНДС.Получить();
								ТЧ.Сумма = ТЧ.Количество*ТЧ_Товар.Цена;
								ТЧ.НДС = ТЧ.Сумма*ТЧ.СтавкаНДС.Ставка/100;
								ТЧ.Всего = ТЧ.Сумма+ТЧ.НДС;
								КонецЕсли;
							КоличествоКРеализации = КоличествоКРеализации - ВыборкаДетальныеЗаписи.КоличествоОстаток;
							Иначе	
							ТЧ.Количество = КоличествоКРеализации;
								Если Реализация.Договор.БезНДС Тогда
								ТЧ.Сумма = ТЧ.Количество*ТЧ_Товар.Цена;
								ТЧ.Всего = ТЧ.Сумма;
								Иначе
								ТЧ.СтавкаНДС = Константы.ОсновнаяСтавкаНДС.Получить();
								ТЧ.Сумма = ТЧ.Количество*ТЧ_Товар.Цена;
								ТЧ.НДС = ТЧ.Сумма*ТЧ.СтавкаНДС.Ставка/100;
								ТЧ.Всего = ТЧ.Сумма+ТЧ.НДС;
								КонецЕсли;
							Прервать;							
							КонецЕсли;					
						КонецЕсли; 
					КонецЦикла;				
				Иначе	
				СостояниеРЗ = СостояниеРЗ + Товар+" - не найден в долгах производства по заказу "+СокрЛП(ЗНП.Номер)+"!"+Символы.ПС;
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат(Ложь);				
				КонецЕсли;			
			Иначе	
			СостояниеРЗ = СостояниеРЗ + СокрЛП(ТЧ_Товар.Товар.Артикул)+" - товар с таким кодом не найден в справочнике товаров!"+Символы.ПС;
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат(Ложь);			
			КонецЕсли; 
		КонецЦикла;
	Реализация.Записать(РежимЗаписиДокумента.Проведение);
	РеализацияУТОбъект = РеализацияУТ.ПолучитьОбъект();
	РеализацияУТОбъект.ВыгруженоВПроизводство = Истина;
	РеализацияУТОбъект.Записать(БазаСбыта.РежимЗаписиДокумента.Запись);
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	СостояниеРЗ = СостояниеРЗ + ОписаниеОшибки()+Символы.ПС;
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции

Процедура ЗагрузкаРеализацийИзСбыта(БазаСбыта,СостояниеРЗ)
Запрос = БазаСбыта.NewObject("Запрос");

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.ВыгруженоВПроизводство = ЛОЖЬ
	|	И РеализацияТоваровУслуг.ИМПровестиБезДвижений = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Склад.Код = &Код
	|	И ТИПЗНАЧЕНИЯ(РеализацияТоваровУслуг.ЗаказКлиента) = ТИП(Документ.ЗаказКлиента)
	|	И РеализацияТоваровУслуг.ЗаказКлиента <> &ЗаказКлиента
	|	И РеализацияТоваровУслуг.НакладнаяНаСборку <> """"
	|	И РеализацияТоваровУслуг.ИмДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("ДатаНач",Дата('2020.10.05 00:00:00'));
Запрос.УстановитьПараметр("ДатаКон",ТекущаяДата());
Запрос.УстановитьПараметр("ЗаказКлиента",БазаСбыта.Документы.ЗаказКлиента.ПустаяСсылка());
Запрос.УстановитьПараметр("Код","00-000010");
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	РеализацияУТ = ВыборкаДетальныеЗаписи.Ссылка;
	ЗНП = Документы.ЗаказНаПроизводство.НайтиПоНомеру(СокрЛП(РеализацияУТ.ЗаказКлиента.Номер),ТекущаяДата());
		Если ЗНП.Пустая() Тогда
		ЗНП = Документы.ЗаказНаПроизводство.НайтиПоНомеру(СокрЛП(РеализацияУТ.ЗаказКлиента.Номер),НачалоГода(ТекущаяДата())-1);
			Если ЗНП.Пустая() Тогда			
			СостояниеРЗ = СостояниеРЗ + "Заказ на производство №"+СокрЛП(РеализацияУТ.ЗаказКлиента.Номер)+" не найден!"+Символы.ПС;
			Продолжить;
			КонецЕсли;
		КонецЕсли;
			Если СоздатьРеализацию(БазаСбыта,ЗНП,РеализацияУТ,СостояниеРЗ) Тогда
			ПроверитьННС(ЗНП);
			Иначе
			СостояниеРЗ = СостояниеРЗ + "Реализация №"+СокрЛП(РеализацияУТ.Номер)+" по заказу на производство №"+СокрЛП(РеализацияУТ.ЗаказКлиента.Номер)+" не создана!"+Символы.ПС;
			КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Функция РаспределитьРеализациюИзХарькова(БазаСбыта,РеализацияУТ,СостояниеРЗ)
Запрос = Новый Запрос;
СписокТоваров = Новый СписокЗначений;
ТЗ = Новый ТаблицаЗначений;

ТЗ.Колонки.Добавить("Товар");
ТЗ.Колонки.Добавить("Количество");
ТЗ.Колонки.Добавить("Цена");

	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		Для каждого ТЧ_Товар Из РеализацияУТ.Товары Цикл
		Товар = Справочники.Товары.НайтиПоКоду(Число(СокрЛП(ТЧ_Товар.Номенклатура.Артикул)));
			Если Не Товар.Пустая() Тогда
			СписокТоваров.Добавить(Товар);
			ТЧ_ТЗ = ТЗ.Добавить();
		    ТЧ_ТЗ.Товар = Товар;
		    ТЧ_ТЗ.Количество = ТЧ_Товар.Количество;
		    ТЧ_ТЗ.Цена = ТЧ_Товар.Цена;
			Иначе	
			СостояниеРЗ = СостояниеРЗ + СокрЛП(ТЧ_Товар.Товар.Артикул)+" - товар с таким кодом не найден в справочнике товаров!"+Символы.ПС;
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат(Ложь);			
			КонецЕсли; 
		КонецЦикла;	
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДолгиОстатки.Документ КАК Документ,
		|	ДолгиОстатки.Продукция.Товар КАК Товар,
		|	ДолгиОстатки.Продукция КАК Продукция,
		|	ДолгиОстатки.КоличествоОстаток КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.Долги.Остатки КАК ДолгиОстатки
		|ГДЕ
		|	ДолгиОстатки.Документ.Контрагент = &Контрагент
		|	И ДолгиОстатки.Продукция.Товар В(&СписокТоваров)
		|	И ДолгиОстатки.КоличествоОстаток > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДолгиОстатки.Документ.Дата
		|ИТОГИ ПО
		|	Документ,
		|	Товар";
	Запрос.УстановитьПараметр("Контрагент", Справочники.Контрагенты.НайтиПоКоду("000034316"));
	Запрос.УстановитьПараметр("СписокТоваров", СписокТоваров);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДокументы = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументы.Следующий() Цикл
		ЗНП = ВыборкаДокументы.Документ;
		Реализация = Документы.Реализация.СоздатьДокумент();
		Реализация.Дата = РеализацияУТ.Дата;
		Реализация.ДокументОснование = ЗНП;
		Реализация.Подразделение = Константы.МестоХраненияТранзит.Получить().Подразделение;
		Реализация.МестоХранения = Константы.МестоХраненияТранзит.Получить();
		Реализация.Контрагент = ЗНП.Контрагент; 
		Реализация.Договор = ЗНП.Контрагент.ОсновнойДоговор;
		Реализация.Коэфф = 1;
		Реализация.Комментарий = "Распределён из УТ "+РеализацияУТ.Номер;
		ВыборкаТовары = ВыборкаДокументы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаТовары.Следующий() Цикл
			ВыборкаТЗ = ТЗ.Найти(ВыборкаТовары.Товар,"Товар");		
			ВыборкаДетальныеЗаписи = ВыборкаТовары.Выбрать();
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
					Если ВыборкаТЗ.Количество > 0 Тогда
					ТЧ = Реализация.ТабличнаяЧасть.Добавить();
						Если ТипЗнч(ВыборкаДетальныеЗаписи.Продукция) = Тип("СправочникСсылка.Материалы") Тогда
						ТЧ.ВидТовара = Перечисления.ВидыМПЗ.Материалы;
						Иначе
						ТЧ.ВидТовара = Перечисления.ВидыМПЗ.Полуфабрикаты;
						КонецЕсли;  
					ТЧ.Товар = ВыборкаДетальныеЗаписи.Продукция;
					ТЧ.ЕдиницаИзмерения = ВыборкаДетальныеЗаписи.Продукция.ОсновнаяЕдиницаИзмерения;
					ТЧ.СтавкаНДС = Константы.ОсновнаяСтавкаНДС.Получить();
					ТЧ.Цена = ТЧ_Товар.Цена;
						Если ВыборкаТЗ.Количество > ВыборкаДетальныеЗаписи.КоличествоОстаток Тогда
						ТЧ.Количество = ВыборкаДетальныеЗаписи.КоличествоОстаток;
						ТЧ.Сумма = ТЧ.Количество*ТЧ_Товар.Цена;
						ТЧ.НДС = ТЧ.Сумма*ТЧ.СтавкаНДС.Ставка/100;
						ТЧ.Всего = ТЧ.Сумма+ТЧ.НДС;
						ВыборкаТЗ.Количество = ВыборкаТЗ.Количество - ВыборкаДетальныеЗаписи.КоличествоОстаток;
						Иначе	
						ТЧ.Количество = ВыборкаТЗ.Количество;
						ТЧ.Сумма = ТЧ.Количество*ТЧ_Товар.Цена;
						ТЧ.НДС = ТЧ.Сумма*ТЧ.СтавкаНДС.Ставка/100;
						ТЧ.Всего = ТЧ.Сумма+ТЧ.НДС;
						ВыборкаТЗ.Количество = 0;
						КонецЕсли;					
					КонецЕсли; 
				КонецЦикла;
			КонецЦикла; 
				Если Реализация.ТабличнаяЧасть.Количество() > 0 Тогда
				Реализация.Записать(РежимЗаписиДокумента.Проведение);
				ПроверитьННС(ЗНП);
				КонецЕсли;
		КонецЦикла;
			Если ТЗ.Итог("Количество") = 0 Тогда
			РеализацияУТОбъект = РеализацияУТ.ПолучитьОбъект();
			РеализацияУТОбъект.ВыгруженоВПроизводство = Истина;
			РеализацияУТОбъект.Записать(БазаСбыта.РежимЗаписиДокумента.Запись);		
			Иначе
			СостояниеРЗ = СостояниеРЗ + "В долгах производства не хватает количества для полного распределения реализации!"+Символы.ПС;
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат(Ложь);									
			КонецЕсли;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(Истина);
	Исключение
	СостояниеРЗ = СостояниеРЗ + ОписаниеОшибки()+Символы.ПС;
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
КонецФункции 

Процедура ЗагрузкаРеализацийИзСбытаХарьков(БазаСбыта,СостояниеРЗ)
Запрос = БазаСбыта.NewObject("Запрос");

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.ВыгруженоВПроизводство = ЛОЖЬ
	|	И ТИПЗНАЧЕНИЯ(РеализацияТоваровУслуг.Сделка) = ТИП(Документ.ЗаказПокупателя)
	|	И РеализацияТоваровУслуг.Сделка <> &Сделка
	|	И РеализацияТоваровУслуг.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("ДатаНач",Дата('2020.05.12 00:00:00'));
Запрос.УстановитьПараметр("ДатаКон",ТекущаяДата());
Запрос.УстановитьПараметр("Сделка",БазаСбыта.Документы.ЗаказПокупателя.ПустаяСсылка());
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	РеализацияУТ = ВыборкаДетальныеЗаписи.Ссылка; 
	ЗНП = Документы.ЗаказНаПроизводство.НайтиПоНомеру(СокрЛП(РеализацияУТ.Сделка.Номер),ТекущаяДата());
		Если ЗНП.Пустая() Тогда
		ЗНП = Документы.ЗаказНаПроизводство.НайтиПоНомеру(СокрЛП(РеализацияУТ.Сделка.Номер),НачалоГода(ТекущаяДата())-1);
			Если ЗНП.Пустая() Тогда		
			СостояниеРЗ = СостояниеРЗ + "Заказ на производство №"+СокрЛП(РеализацияУТ.Сделка.Номер)+" не найден!"+Символы.ПС;
			Продолжить;
			КонецЕсли;
		КонецЕсли;
			Если СоздатьРеализациюИзХарькова(БазаСбыта,ЗНП,РеализацияУТ,СостояниеРЗ) Тогда
			ПроверитьННС(ЗНП);
			Иначе
			СостояниеРЗ = СостояниеРЗ + "Реализация №"+СокрЛП(РеализацияУТ.Номер)+" по заказу на производство №"+СокрЛП(РеализацияУТ.Сделка.Номер)+" не создана!"+Символы.ПС;
			КонецЕсли;
	КонецЦикла;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РеализацияТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
	|ГДЕ
	|	РеализацияТоваровУслуг.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И РеализацияТоваровУслуг.ПометкаУдаления = ЛОЖЬ
	|	И РеализацияТоваровУслуг.ВыгруженоВПроизводство = ЛОЖЬ
	|	И РеализацияТоваровУслуг.Контрагент.Код = &Код
	|	И РеализацияТоваровУслуг.ДатаОтгрузки <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("ДатаНач",Дата('2020.05.12 00:00:00'));
Запрос.УстановитьПараметр("ДатаКон",ТекущаяДата());
Запрос.УстановитьПараметр("Код","000034316");
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	РеализацияУТ = ВыборкаДетальныеЗаписи.Ссылка; 
		Если Не РаспределитьРеализациюИзХарькова(БазаСбыта,РеализацияУТ,СостояниеРЗ) Тогда
		СостояниеРЗ = СостояниеРЗ + "Реализация №"+СокрЛП(РеализацияУТ.Номер)+" не распределена по заказам на производство!"+Символы.ПС;
		КонецЕсли;			
	КонецЦикла;
КонецПроцедуры

Процедура ЗагрузкаРеализаций() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(5) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1ССбыт.Получить());
	Если БазаСбыта <> Неопределено Тогда
		Если Константы.КодБазы.Получить() = "БГР" Тогда
		ЗагрузкаРеализацийИзСбыта(БазаСбыта,СостояниеРЗ);		
		Иначе	
		ЗагрузкаРеализацийИзСбытаХарьков(БазаСбыта,СостояниеРЗ);
		КонецЕсли;
	Иначе
	СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с базой сбыта!"+Символы.ПС;
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(5,СостояниеРЗ);
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗапросДатыВыполненияЗаказаКлиента

Функция ПолучитьДатуВыполненияЗаказаКлиента(НомерЗаказа,ДатаЗаказа,Артикул) Экспорт

ЗНП = Документы.ЗаказНаПроизводство.НайтиПоНомеру(НомерЗаказа,ДатаЗаказа);
	Если ЗНП.Пустая() Тогда
	Возврат(Дата(1,1,1));
	КонецЕсли; 

Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗаказыНаПроизводствоОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыНаПроизводство.Остатки(, Документ = &Док) КАК ЗаказыНаПроизводствоОстатки
	|ГДЕ
	|	ЗаказыНаПроизводствоОстатки.Продукция.Товар.Код = &Код
	|	И ЗаказыНаПроизводствоОстатки.КоличествоОстаток > 0";
Запрос.УстановитьПараметр("Док", ЗНП);
Запрос.УстановитьПараметр("Код", Число(Артикул));
РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	РезервированиеГПОбороты.Период КАК Период
		|ИЗ
		|	РегистрНакопления.РезервированиеГП.Обороты(, , Регистратор, Документ = &Док) КАК РезервированиеГПОбороты
		|ГДЕ
		|	РезервированиеГПОбороты.Продукция.Товар.Код = &Код
		|	И РезервированиеГПОбороты.КоличествоПриход > 0
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период УБЫВ";
	Запрос.УстановитьПараметр("Док", ЗНП);
	Запрос.УстановитьПараметр("Код", Число(Артикул));
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Возврат(ВыборкаДетальныеЗаписи.Период);
		КонецЦикла;
	КонецЕсли;
Возврат(Дата(1,1,1)); 
КонецФункции 

#КонецОбласти

#Область ОчисткаРегистровСведений

Процедура ОчисткаРегистровСведений() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзменениеДатыОтгрузкиОбещанной.Период КАК Период,
	|	ИзменениеДатыОтгрузкиОбещанной.ЗНП КАК ЗНП,
	|	ИзменениеДатыОтгрузкиОбещанной.Товар КАК Товар
	|ИЗ
	|	РегистрСведений.ИзменениеДатыОтгрузкиОбещанной КАК ИзменениеДатыОтгрузкиОбещанной
	|ГДЕ
	|	ИзменениеДатыОтгрузкиОбещанной.Период <= &Период";
Запрос.УстановитьПараметр("Период", ДобавитьМесяц(КонецДня(ТекущаяДата()),-12));
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Рег = РегистрыСведений.ИзменениеДатыОтгрузкиОбещанной.СоздатьНаборЗаписей();
	Рег.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
	Рег.Отбор.ЗНП.Установить(ВыборкаДетальныеЗаписи.ЗНП);
	Рег.Отбор.Товар.Установить(ВыборкаДетальныеЗаписи.Товар);
	Рег.Записать();
	КонецЦикла;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвободныеОстаткиПоставщиков.Период КАК Период,
	|	СвободныеОстаткиПоставщиков.МПЗ КАК МПЗ,
	|	СвободныеОстаткиПоставщиков.Количество КАК Количество,
	|	СвободныеОстаткиПоставщиков.СрокПоставки КАК СрокПоставки
	|ИЗ
	|	РегистрСведений.СвободныеОстаткиПоставщиков КАК СвободныеОстаткиПоставщиков
	|ГДЕ
	|	СвободныеОстаткиПоставщиков.Период < &Период";
Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата())-1);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Рег = РегистрыСведений.СвободныеОстаткиПоставщиков.СоздатьНаборЗаписей();
	Рег.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
	Рег.Отбор.МПЗ.Установить(ВыборкаДетальныеЗаписи.МПЗ);
	Рег.Записать();
	КонецЦикла;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	КрупныеЗаказы.Период КАК Период,
	|	КрупныеЗаказы.Счёт КАК Счёт,
	|	КрупныеЗаказы.Контрагент КАК Контрагент,
	|	КрупныеЗаказы.Товар КАК Товар
	|ИЗ
	|	РегистрСведений.КрупныеЗаказы КАК КрупныеЗаказы
	|ГДЕ
	|	КрупныеЗаказы.Период <= &Период";
Запрос.УстановитьПараметр("Период", ДобавитьМесяц(КонецДня(ТекущаяДата()),-3));
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Рег = РегистрыСведений.КрупныеЗаказы.СоздатьНаборЗаписей();
	Рег.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
	Рег.Отбор.Счёт.Установить(ВыборкаДетальныеЗаписи.Счёт);
	Рег.Отбор.Контрагент.Установить(ВыборкаДетальныеЗаписи.Контрагент);
	Рег.Отбор.Товар.Установить(ВыборкаДетальныеЗаписи.Товар);
	Рег.Записать();
	КонецЦикла;
	   Если ПривилегированныйРежим() Тогда 
	   УстановитьПривилегированныйРежим(Ложь);
	   КонецЕсли;
КонецПроцедуры

Процедура ОчисткаСвободныхОстатковПоставщиков() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвободныеОстаткиПоставщиков.Период КАК Период,
	|	СвободныеОстаткиПоставщиков.МПЗ КАК МПЗ,
	|	СвободныеОстаткиПоставщиков.Количество КАК Количество,
	|	СвободныеОстаткиПоставщиков.СрокПоставки КАК СрокПоставки
	|ИЗ
	|	РегистрСведений.СвободныеОстаткиПоставщиков КАК СвободныеОстаткиПоставщиков
	|ГДЕ
	|	СвободныеОстаткиПоставщиков.Период < &Период";
Запрос.УстановитьПараметр("Период", НачалоДня(ТекущаяДата())-1);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Рег = РегистрыСведений.СвободныеОстаткиПоставщиков.СоздатьНаборЗаписей();
	Рег.Отбор.Период.Установить(ВыборкаДетальныеЗаписи.Период);
	Рег.Отбор.МПЗ.Установить(ВыборкаДетальныеЗаписи.МПЗ);
	Рег.Записать();
	КонецЦикла;
	   Если ПривилегированныйРежим() Тогда 
	   УстановитьПривилегированныйРежим(Ложь);
	   КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВыгрузкаИзмененийОбещаннойДатыОтгрузки

Процедура ВыгрузкаИзмененийОбещаннойДатыОтгрузки() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(11) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);

МассивДат = Новый Массив;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИзменениеДатыОтгрузкиОбещанной.ЗНП.Номер КАК ЗНПНомер,
	|	ИзменениеДатыОтгрузкиОбещанной.Товар.Код КАК ТоварКод,
	|	ИзменениеДатыОтгрузкиОбещанной.ДатаОтгрузкиНовая КАК ДатаОтгрузкиНовая
	|ИЗ
	|	РегистрСведений.ИзменениеДатыОтгрузкиОбещанной КАК ИзменениеДатыОтгрузкиОбещанной
	|ГДЕ
	|	ИзменениеДатыОтгрузкиОбещанной.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ИзменениеДатыОтгрузкиОбещанной.ЗНП.Номер ПОДОБНО &Номер
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗНПНомер
	|ИТОГИ ПО
	|	ЗНПНомер";
Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));
Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
Запрос.УстановитьПараметр("Номер", "СХ%");
РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
	СостояниеРЗ = "";
	БазаПроизводствоХарьков = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Справочники.ОбменДанными.НайтиПоНаименованию("Производство Харьков 1С 8",Истина));
		Если БазаПроизводствоХарьков <> Неопределено Тогда
		ВыборкаЗНП = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаЗНП.Следующий() Цикл
			бпДок = БазаПроизводствоХарьков.Документы.ЗаказПоставщику.НайтиПоРеквизиту("НомерЗНП",СокрЛП(ВыборкаЗНП.ЗНПНомер));
				Если Не бпДок.Пустая() Тогда			
				ВыборкаДетальныхЗаписей = ВыборкаЗНП.Выбрать();
				бпДокОбъект = бпДок.ПолучитьОбъект();
				флИзменение = Ложь;
					Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
					Код = ВыборкаДетальныхЗаписей.ТоварКод;
						Для каждого ТЧ Из бпДокОбъект.ТабличнаяЧасть Цикл	
							Если Не ТЧ.МПЗ.Товар.Пустая() Тогда
								Если ТЧ.МПЗ.Товар.Код = Код Тогда
								ДатаОтгрузкиНовая = ВыборкаДетальныхЗаписей.ДатаОтгрузкиНовая+ТЧ.МПЗ.СрокПоставки*7*86400;
								МассивДат.Очистить();
								МассивДат.Добавить(ДатаОтгрузкиНовая);
								ВыбранныеДаты = КалендарныеГрафики.ПолучитьДатыРабочихДней(Константы.ОсновнойПроизводственныйКалендарь.Получить(),МассивДат);
								ДатаОтгрузкиНовая = ВыбранныеДаты.Получить(ДатаОтгрузкиНовая); 
										Если ТЧ.ДатаПоставки <> ДатаОтгрузкиНовая Тогда
										ТЧ.ДатаПоставки = ДатаОтгрузкиНовая;
										флИзменение = Истина;
										КонецЕсли;								
								КонецЕсли;						
							КонецЕсли; 
						КонецЦикла; 
					КонецЦикла;
						Если флИзменение Тогда
						бпДокОбъект.Записать(БазаПроизводствоХарьков.РежимЗаписиДокумента.Запись);
						КонецЕсли;
				КонецЕсли; 
			КонецЦикла;
		Иначе
		СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с базой пр-ва Харьков!"+Символы.ПС;
		КонецЕсли;
	ЗаписатьСостояниеРегламентногоЗадания(11,СостояниеРЗ);
	КонецЕсли; 
	   Если ПривилегированныйРежим() Тогда 
	   УстановитьПривилегированныйРежим(Ложь);
	   КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ВыгрузкаИндивидуальныхНарядов

Процедура ВыгрузкаИндивидуальныхНарядов() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(12) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);

СостояниеРЗ = "";

ИН = Справочники.ОбменДанными.НайтиПоНаименованию("Выгрузка Индивидуальных нарядов",Истина);
	Если Не ИН.Пустая() Тогда
	ПутьКИН = СокрЛП(ИН.ПутьКБазеДанных);
	Иначе	
	СостояниеРЗ = "Не найден путь к индивидуальным нарядам в справочнике обмена данными!";
	ЗаписатьСостояниеРегламентногоЗадания(12,СостояниеРЗ);
	Возврат;	
	КонецЕсли;

ИмяФайла = ПутьКИН+"Выгрузка от "+Формат(ТекущаяДата(),"ДФ=ddMMyyyy")+".xlsx";

Запрос = Новый Запрос;
ТабДок = Новый ТабличныйДокумент;

Макет = ПолучитьОбщийМакет("ВыгрузкаИндивидуальныхНарядов");

ОблШапка = Макет.ПолучитьОбласть("Шапка");
ОблСтрока = Макет.ПолучитьОбласть("Строка");

ТабДок.Вывести(ОблШапка);

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ИндивидульныйНарядТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ИндивидульныйНарядТабличнаяЧасть.Сумма КАК Сумма
	|ИЗ
	|	Документ.ИндивидульныйНаряд.ТабличнаяЧасть КАК ИндивидульныйНарядТабличнаяЧасть
	|ГДЕ
	|	ИндивидульныйНарядТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И НЕ ИндивидульныйНарядТабличнаяЧасть.Ссылка.Проект.Наименование ПОДОБНО &Наименование
	|
	|УПОРЯДОЧИТЬ ПО
	|	ИндивидульныйНарядТабличнаяЧасть.Ссылка.Дата,
	|	ИндивидульныйНарядТабличнаяЧасть.Ссылка.Номер
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	Ссылка";
Запрос.УстановитьПараметр("ДатаНач", НачалоНедели(ТекущаяДата()));
Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
Запрос.УстановитьПараметр("Наименование", "%уч-%");
РезультатЗапроса = Запрос.Выполнить();
ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСсылка.Следующий() Цикл
	ОблСтрока.Параметры.Дата = ВыборкаСсылка.Ссылка.Дата;
	ОблСтрока.Параметры.Номер = ВыборкаСсылка.Ссылка.Номер;
	ОблСтрока.Параметры.Подразделение = ВыборкаСсылка.Ссылка.Линейка.Подразделение;
	ОблСтрока.Параметры.Линейка = ВыборкаСсылка.Ссылка.Линейка;
	ОблСтрока.Параметры.КодПроекта = ВыборкаСсылка.Ссылка.Проект.Код;
	ОблСтрока.Параметры.Сумма = ВыборкаСсылка.Сумма;
	ТабДок.Вывести(ОблСтрока);
	КонецЦикла;
		Попытка
		ТабДок.Записать(ИмяФайла,ТипФайлаТабличногоДокумента.XLSX);
		СостояниеРЗ = ИмяФайла+" - записан!";
		Исключение
		СостояниеРЗ = ОписаниеОшибки();
		КонецПопытки;
ЗаписатьСостояниеРегламентногоЗадания(12,СостояниеРЗ);
	Если ПривилегированныйРежим() Тогда 
	УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ВыгрузкаИндивидуальныхНарядов

Процедура ЗакрытиеЗНП() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере() Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);

Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказНаПроизводство.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ЗаказНаПроизводство КАК ЗаказНаПроизводство
	|ГДЕ
	|	ЗаказНаПроизводство.Закрыт = ЛОЖЬ
	|	И ЗаказНаПроизводство.ПометкаУдаления = ЛОЖЬ";
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ОбщийМодульВызовСервера.ПроверитьЗаказНаПроизводство(ВыборкаДетальныеЗаписи.Ссылка,0,ТекущаяДата());
	КонецЦикла;
		Если ПривилегированныйРежим() Тогда 
		УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
КонецПроцедуры

#КонецОбласти 

#Область ВыгрузкаИндивидуальныхНарядов

Процедура ПроверкаСтатусовЗРДС_БФ() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(13) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БазаБФ = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Справочники.ОбменДанными.НайтиПоНаименованию("База Бит-Финанс",Истина));
	Если БазаБФ <> Неопределено Тогда
	ЗапросБФ = БазаБФ.NewObject("Запрос");
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаказПоставщикуНомераБФ.Ссылка КАК Ссылка,
		|	ЗаказПоставщикуНомераБФ.НомерДок КАК НомерДок,
		|	ЗаказПоставщикуНомераБФ.ДатаДок КАК ДатаДок
		|ИЗ
		|	Документ.ЗаказПоставщику.НомераБФ КАК ЗаказПоставщикуНомераБФ
		|ГДЕ
		|	ЗаказПоставщикуНомераБФ.Ссылка.Дата >= &СДаты
		|	И ЗаказПоставщикуНомераБФ.Ссылка.Проведен = ИСТИНА
		|	И ЗаказПоставщикуНомераБФ.Оплачен = ЛОЖЬ
		|	И ЗаказПоставщикуНомераБФ.НомерДок <> &НомерДок
		|	И ЗаказПоставщикуНомераБФ.ДатаДок <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|ИТОГИ ПО
		|	Ссылка";
	Запрос.УстановитьПараметр("СДаты", Дата(2022,4,13));
	Запрос.УстановитьПараметр("НомерДок", "");
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаСсылки = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
    	Пока ВыборкаСсылки.Следующий() Цикл       
		флИзменен = Ложь;
		ЗП = ВыборкаСсылки.Ссылка.ПолучитьОбъект();
		ВыборкаДетальныеЗаписи = ВыборкаСсылки.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			ЗапросБФ.Текст = 
				"ВЫБРАТЬ
				|	бит_ИсторияИзмененияСтатусовОбъектовСрезПоследних.Статус КАК Статус
				|ИЗ
				|	РегистрСведений.бит_ИсторияИзмененияСтатусовОбъектов.СрезПоследних КАК бит_ИсторияИзмененияСтатусовОбъектовСрезПоследних
				|ГДЕ
				| 	бит_ИсторияИзмененияСтатусовОбъектовСрезПоследних.Объект.Дата МЕЖДУ &ДатаНач И &ДатаКон
				|	И бит_ИсторияИзмененияСтатусовОбъектовСрезПоследних.Объект.Номер = &Номер
				|	И ТИПЗНАЧЕНИЯ(бит_ИсторияИзмененияСтатусовОбъектовСрезПоследних.Объект) = ТИП(Документ.бит_ЗаявкаНаРасходованиеСредств)";
			ЗапросБФ.УстановитьПараметр("ДатаНач", НачалоДня(ВыборкаДетальныеЗаписи.ДатаДок));
			ЗапросБФ.УстановитьПараметр("ДатаКон", КонецДня(ВыборкаДетальныеЗаписи.ДатаДок));
			ЗапросБФ.УстановитьПараметр("Номер", СокрЛП(ВыборкаДетальныеЗаписи.НомерДок));
			РезультатЗапроса = ЗапросБФ.Выполнить();
			ВыборкаБФ = РезультатЗапроса.Выбрать();
				Пока ВыборкаБФ.Следующий() Цикл
					Если Найти(ВыборкаБФ.Статус.Наименование,"Оплачена") > 0 Тогда
					Выборка = ЗП.НомераБФ.НайтиСтроки(Новый Структура("НомерДок,ДатаДок",ВыборкаДетальныеЗаписи.НомерДок,ВыборкаДетальныеЗаписи.ДатаДок));
						Если Выборка.Количество() > 0 Тогда	
						Выборка[0].Оплачен = Истина;
						флИзменен = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
				Если флИзменен Тогда
					Попытка
					ЗП.Записать(РежимЗаписиДокумента.Запись);
					Исключение
					СостояниеРЗ = СостояниеРЗ + ОписаниеОшибки() + Символы.ПС;
					КонецПопытки
				КонецЕсли;
		КонецЦикла;
	Иначе
	СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с базой Бит-Финанс!" + Символы.ПС;
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(13,СостояниеРЗ);
	Если ПривилегированныйРежим() Тогда 
	УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 
           
#Область ПроверкаСостоянияКонтрагентовБЭД

Процедура ПроверкаСостоянияКонтрагентовБЭД() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(14) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БазаБух = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Справочники.ОбменДанными.НайтиПоНаименованию("Бухгалтерия Совместная Деятельность",Истина));
	Если БазаБух <> Неопределено Тогда
	ЗапросБух = БазаБух.NewObject("Запрос");

	ЗапросБух.Текст = 
		"ВЫБРАТЬ
		|	СостоянияКонтрагентовБЭД.ИНН КАК ИНН,
		|	СостоянияКонтрагентовБЭД.КПП КАК КПП
		|ИЗ
		|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
		|ГДЕ
		|	СостоянияКонтрагентовБЭД.Состояние = &Состояние";
	ЗапросБух.УстановитьПараметр("Состояние", БазаБух.Перечисления.СостоянияКонтрагентаБЭД.Подключен);
	РезультатЗапроса = ЗапросБух.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
       	Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СокрЛП(ВыборкаДетальныеЗаписи.ИНН));
			Если Не Контрагент.Пустая() Тогда
				Если Контрагент.Родитель.Пустая() Тогда
					Если Не Контрагент.ЭДО Тогда
					КонтрагентОбъект = Контрагент.ПолучитьОбъект();
					КонтрагентОбъект.ЭДО = Истина;					
					КонтрагентОбъект.Записать();					
					КонецЕсли;				
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла; 
	ЗапросБух.Текст = 
		"ВЫБРАТЬ
		|	СостоянияКонтрагентовБЭД.ИНН КАК ИНН,
		|	СостоянияКонтрагентовБЭД.КПП КАК КПП
		|ИЗ
		|	РегистрСведений.СостоянияКонтрагентовБЭД КАК СостоянияКонтрагентовБЭД
		|ГДЕ
		|	СостоянияКонтрагентовБЭД.Состояние = &Состояние";
	ЗапросБух.УстановитьПараметр("Состояние", БазаБух.Перечисления.СостоянияКонтрагентаБЭД.НеПодключен);
	РезультатЗапроса = ЗапросБух.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
       	Контрагент = Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",СокрЛП(ВыборкаДетальныеЗаписи.ИНН));
			Если Не Контрагент.Пустая() Тогда
				Если Контрагент.Родитель.Пустая() Тогда
					Если Контрагент.ЭДО Тогда
					КонтрагентОбъект = Контрагент.ПолучитьОбъект();
					КонтрагентОбъект.ЭДО = Ложь;					
					КонтрагентОбъект.Записать();					
					КонецЕсли;				
				КонецЕсли;	
			КонецЕсли;
		КонецЦикла;
	Иначе
	СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с бухгалтерской базой!" + Символы.ПС;
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(14,СостояниеРЗ);
	Если ПривилегированныйРежим() Тогда 
	УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 
           
#Область ВыгрузкаПрослеживаемостиТовара

Процедура ВыгрузкаПрослеживаемостиТовара() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(15) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";
БазаБух = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Справочники.ОбменДанными.НайтиПоНаименованию("Бухгалтерия Совместная Деятельность",Истина));
	Если БазаБух <> Неопределено Тогда
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ИзменениеДанных.ИзменённыйОбъект КАК ИзменённыйОбъект
		|ИЗ
		|	РегистрСведений.ИзменениеДанных КАК ИзменениеДанных
		|ГДЕ
		|	ИзменениеДанных.ИмяРеквизита = &ИмяРеквизита";
	Запрос.УстановитьПараметр("ИмяРеквизита", "ПрослеживаемыйТовар");
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		ПолныйКод = СтрЗаменить(ВыборкаДетальныеЗаписи.ИзменённыйОбъект.ПолныйКод(),"/","-");
		ПолныйКод = СокрЛП(СтрЗаменить(ПолныйКод,Символы.НПП,""));	
		Номен = БазаБух.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул", ПолныйКод);
			Если БазаБух.ЗначениеЗаполнено(Номен) Тогда
				Попытка
				Номен_Объект = Номен.ПолучитьОбъект();
				Номен_Объект.ПрослеживаемыйТовар = ВыборкаДетальныеЗаписи.ИзменённыйОбъект.ПрослеживаемыйТовар;
			    Номен_Объект.Записать();
				НаборЗаписей = РегистрыСведений.ИзменениеДанных.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ИзменённыйОбъект.Установить(ВыборкаДетальныеЗаписи.ИзменённыйОбъект);
				НаборЗаписей.Отбор.ИмяРеквизита.Установить("ПрослеживаемыйТовар");
                НаборЗаписей.Записать(Истина);
				Исключение
				СостояниеРЗ = СостояниеРЗ + "" + ОписаниеОшибки() + Символы.ПС;
				КонецПопытки;
		 	Иначе
			СостояниеРЗ = СостояниеРЗ + "" + СокрЛП(ВыборкаДетальныеЗаписи.ИзменённыйОбъект.Наименование) + " - не найден!"+Символы.ПС;
		 	КонецЕсли;
		КонецЦикла; 
	Иначе
	СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с бухгалтерской базой!" + Символы.ПС;   
	КонецЕсли;
ЗаписатьСостояниеРегламентногоЗадания(15,СостояниеРЗ);
	Если ПривилегированныйРежим() Тогда 
	УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти  

#Область РасчетСреднихЦенМПЗ

Процедура РасчетСреднихЦенМПЗ() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(16) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";

Запрос = Новый Запрос; 
ТаблицаМПЗ = Новый ТаблицаЗначений;

ТаблицаМПЗ.Колонки.Добавить("МПЗ");
ТаблицаМПЗ.Индексы.Добавить("МПЗ");
ТаблицаМПЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14,3)));
ТаблицаМПЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(14,2))); 
               
ДатаКон = НачалоМесяца(ТекущаяДата())-1;
ДатаНач = НачалоМесяца(ДатаКон);
НаДату = НачалоМесяца(ДатаНач-1); 

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныСредниеСрезПоследних.МПЗ КАК МПЗ,
	|	ЦеныСредниеСрезПоследних.Количество КАК Количество,
	|	ЦеныСредниеСрезПоследних.Цена КАК Цена
	|ИЗ
	|	РегистрСведений.ЦеныСредние.СрезПоследних(&НаДату, ) КАК ЦеныСредниеСрезПоследних";
Запрос.УстановитьПараметр("НаДату",НаДату);
РезультатЗапроса = Запрос.Выполнить();
ТаблицаСреднихЦен = РезультатЗапроса.Выгрузить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	РЦС = РегистрыСведений.ЦеныСредние.СоздатьМенеджерЗаписи();
	РЦС.Период = ДатаНач;
	РЦС.МПЗ = ВыборкаДетальныеЗаписи.МПЗ;
	РЦС.Количество = ОбщийМодульРаботаСРегистрами.ПолучитьСводныйОстаток(ВыборкаДетальныеЗаписи.МПЗ,ДатаКон+1);
	РЦС.Цена = ВыборкаДетальныеЗаписи.Цена;
	РЦС.Записать(Истина);
	КонецЦикла;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеМПЗТабличнаяЧасть.МПЗ КАК МПЗ,
	|	ПоступлениеМПЗТабличнаяЧасть.Количество КАК Количество,
	|	ПоступлениеМПЗТабличнаяЧасть.Цена КАК Цена,
	|	ПоступлениеМПЗТабличнаяЧасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ПоступлениеМПЗ.ТабличнаяЧасть КАК ПоступлениеМПЗТабличнаяЧасть
	|ГДЕ
	|	ПоступлениеМПЗТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПоступлениеМПЗТабличнаяЧасть.Ссылка.Проведен = ИСТИНА
	|	И ПоступлениеМПЗТабличнаяЧасть.МПЗ ССЫЛКА Справочник.Материалы
	|ИТОГИ ПО
	|	МПЗ";
Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаМПЗ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМПЗ.Следующий() Цикл 
	ТЧ = ТаблицаМПЗ.Добавить();
	ТЧ.МПЗ = ВыборкаМПЗ.МПЗ;              
	Выборка = ТаблицаСреднихЦен.Найти(ВыборкаМПЗ.МПЗ,"МПЗ");
		Если Выборка <> Неопределено Тогда
		ТЧ.Количество = Выборка.Количество;
		ТЧ.Сумма = Выборка.Цена*Выборка.Количество;		
		Иначе	
		ТЧ.Количество = 0;
		ТЧ.Сумма = 0;		
		КонецЕсли;
	ВыборкаДетальныхЗаписей = ВыборкаМПЗ.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
		БазовоеКоличество = ПолучитьБазовоеКоличествоБезОкругления(ВыборкаДетальныхЗаписей.Количество,ВыборкаДетальныхЗаписей.ЕдиницаИзмерения);
		Коэфф = ВыборкаДетальныхЗаписей.ЕдиницаИзмерения.Коэффициент; 
		БазоваяЦена = ?(Коэфф > 0,Окр(ВыборкаДетальныхЗаписей.Цена/ВыборкаДетальныхЗаписей.ЕдиницаИзмерения.Коэффициент,2,1),ВыборкаДетальныхЗаписей.Цена);
        ТЧ.Количество = ТЧ.Количество+БазовоеКоличество;
		ТЧ.Сумма = ТЧ.Сумма+(БазоваяЦена*БазовоеКоличество); 
		КонецЦикла;	
	КонецЦикла;	   
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВводОстатковМПЗТабличнаяЧасть.МПЗ КАК МПЗ,
	|	ВводОстатковМПЗТабличнаяЧасть.Количество КАК Количество,
	|	ВводОстатковМПЗТабличнаяЧасть.Цена КАК Цена
	|ИЗ
	|	Документ.ВводОстатковМПЗ.ТабличнаяЧасть КАК ВводОстатковМПЗТабличнаяЧасть
	|ГДЕ
	|	ВводОстатковМПЗТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ВводОстатковМПЗТабличнаяЧасть.Ссылка.Проведен = ИСТИНА
	|	И ВводОстатковМПЗТабличнаяЧасть.МПЗ ССЫЛКА Справочник.Материалы
	|ИТОГИ ПО
	|	МПЗ";
Запрос.УстановитьПараметр("ДатаНач", ДатаНач);
Запрос.УстановитьПараметр("ДатаКон", ДатаКон);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаМПЗ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМПЗ.Следующий() Цикл
	Выборка = ТаблицаМПЗ.Найти(ВыборкаМПЗ.МПЗ,"МПЗ");
		Если Выборка = Неопределено Тогда
		ТЧ = ТаблицаМПЗ.Добавить();
		ТЧ.МПЗ = ВыборкаМПЗ.МПЗ; 		
		Выборка = ТаблицаСреднихЦен.Найти(ВыборкаМПЗ.МПЗ,"МПЗ");
			Если Выборка <> Неопределено Тогда
			ТЧ.Количество = Выборка.Количество;
			ТЧ.Сумма = Выборка.Цена*Выборка.Количество;		
			Иначе	
			ТЧ.Количество = 0;
			ТЧ.Сумма = 0;		
			КонецЕсли;
		Иначе
	   	ТЧ = Выборка;
		КонецЕсли;            
	ВыборкаДетальныхЗаписей = ВыборкаМПЗ.Выбрать();
		Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
        ТЧ.Количество = ТЧ.Количество+ВыборкаДетальныхЗаписей.Количество;
		ТЧ.Сумма = ТЧ.Сумма+(ВыборкаДетальныхЗаписей.Цена*ВыборкаДетальныхЗаписей.Количество); 
		КонецЦикла;	
	КонецЦикла;
		Для каждого ТЧ Из ТаблицаМПЗ Цикл
		ЦенаСредняя = ?(ТЧ.Количество > 0,ТЧ.Сумма/ТЧ.Количество,0);
		РЦС = РегистрыСведений.ЦеныСредние.СоздатьМенеджерЗаписи();
		РЦС.Период = ДатаНач;
		РЦС.МПЗ = ТЧ.МПЗ;
		РЦС.Количество = ОбщийМодульРаботаСРегистрами.ПолучитьСводныйОстаток(ТЧ.МПЗ,ДатаКон+1);
		РЦС.Цена = ЦенаСредняя;
		РЦС.Записать(Истина);		
		КонецЦикла;
ЗаписатьСостояниеРегламентногоЗадания(16,СостояниеРЗ);
	Если ПривилегированныйРежим() Тогда 
	УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ЗагрузкаИзмененийСроковПоставки

Функция ПолучитьКоличествоОстатокЗП(ТНП)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.МПЗ КАК МПЗ,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&НаДату, МПЗ = &МПЗ) КАК ЗаказыПоставщикамОстатки
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	МПЗ";
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());  
Запрос.УстановитьПараметр("МПЗ", ТНП); 
РезультатЗапроса = Запрос.Выполнить();
ВыборкаМПЗ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМПЗ.Следующий() Цикл
	Возврат(ВыборкаМПЗ.КоличествоОстаток); 
	КонецЦикла;
Возврат(0);
КонецФункции

Функция ПолучитьКоличествоОстатокРезерв(ТНП)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезервированиеГПОстатки.Продукция КАК Продукция,
	|	РезервированиеГПОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.РезервированиеГП.Остатки(
	|			&НаДату,
	|			МестоХранения = &МестоХранения
	|				И Продукция = &Продукция) КАК РезервированиеГПОстатки
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	Продукция";
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
Запрос.УстановитьПараметр("МестоХранения", Константы.МестоХраненияТНП.Получить());  
Запрос.УстановитьПараметр("Продукция", ТНП); 
РезультатЗапроса = Запрос.Выполнить();
ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПродукция.Следующий() Цикл
	Возврат(ВыборкаПродукция.КоличествоОстаток); 
	КонецЦикла;
Возврат(0);
КонецФункции

Функция ПолучитьКоличествоОстатокДолг(ТНП)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолгиОстатки.Продукция КАК Продукция,
	|	ДолгиОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.Долги.Остатки(&НаДату, Продукция = &Продукция) КАК ДолгиОстатки
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	Продукция";
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
Запрос.УстановитьПараметр("Продукция", ТНП);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПродукция.Следующий() Цикл
	Возврат(ВыборкаПродукция.КоличествоОстаток);
	КонецЦикла;
Возврат(0);
КонецФункции

Функция ПолучитьКоличествоРК(ТНП)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПерспективныеПланы.МПЗ КАК МПЗ,
	|	ПерспективныеПланы.РезКм КАК РезКм
	|ИЗ
	|	РегистрСведений.ПерспективныеПланы КАК ПерспективныеПланы
	|ГДЕ
	|	ПерспективныеПланы.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПерспективныеПланы.МПЗ = &МПЗ
	|	И ПерспективныеПланы.РезКм > 0";
Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(ТекущаяДата())); 
Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(ТекущаяДата())); 
Запрос.УстановитьПараметр("МПЗ", ТНП); 
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныхЗаписей = РезультатЗапроса.Выбрать();
РезКм = 0;
	Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
	РезКм = РезКм + ВыборкаДетальныхЗаписей.РезКм; 
	КонецЦикла;
Возврат(РезКм);
КонецФункции

Функция ПолучитьКоличествоКЗ(ТНП)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	КрупныеЗаказы.Продукция КАК Продукция,
	|	КрупныеЗаказы.Количество КАК Количество
	|ИЗ
	|	РегистрСведений.КрупныеЗаказы КАК КрупныеЗаказы
	|ГДЕ
	|	КрупныеЗаказы.Продукция = &Продукция
	|	И КрупныеЗаказы.ДатаРезерва <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И КрупныеЗаказы.Обработан = ЛОЖЬ
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Продукция";
Запрос.УстановитьПараметр("Продукция", ТНП); 
РезультатЗапроса = Запрос.Выполнить();
ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПродукция.Следующий() Цикл
	Возврат(ВыборкаПродукция.Количество); 
	КонецЦикла;
Возврат(0);
КонецФункции

Функция ПолучитьДатуПоставки(ЗаказПоставщику,МПЗ)
Возврат(ЗаказПоставщику.ТабличнаяЧасть.Найти(МПЗ,"МПЗ").ДатаПоставки);
КонецФункции

Функция ПолучитьДатуПослеРаспределенияЗП(ТНП,КоличествоНераспределено)
Запрос = Новый Запрос;
ТаблицаОстатков = Новый ТаблицаЗначений;

ТаблицаОстатков.Колонки.Добавить("ДатаПоставки");
ТаблицаОстатков.Колонки.Добавить("Количество");

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&НаДату, ) КАК ЗаказыПоставщикамОстатки
	|ГДЕ
	|	ЗаказыПоставщикамОстатки.МПЗ = &МПЗ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	ЗаказПоставщику";
Запрос.УстановитьПараметр("НаДату",ТекущаяДата());
Запрос.УстановитьПараметр("МПЗ",ТНП);	
РезультатЗапроса = Запрос.Выполнить();
ВыборкаЗП = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗП.Следующий() Цикл
	ТЧ = ТаблицаОстатков.Добавить();
	ТЧ.Количество = ВыборкаЗП.КоличествоОстаток;
	ТЧ.ДатаПоставки = ПолучитьДатуПоставки(ВыборкаЗП.ЗаказПоставщику,ТНП);		 
	КонецЦикла;
ТаблицаОстатков.Свернуть("ДатаПоставки","Количество");
ТаблицаОстатков.Сортировать("ДатаПоставки");
	Для каждого ТЧ Из ТаблицаОстатков Цикл
		Если ТЧ.Количество >= КоличествоНераспределено Тогда
		Возврат(ТЧ.ДатаПоставки);
		Иначе
		КоличествоНераспределено = КоличествоНераспределено - ТЧ.Количество;
		КонецЕсли;  
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

Функция ПолучитьКоличествоПраздничныхДней(ДатаОтгрузки)
КоличествоПраздничныхДней = 0;
ТекДата = НачалоДня(ТекущаяДата());	
	Пока ТекДата <> ДатаОтгрузки Цикл	
	ДПК = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьНаборЗаписей();
	ДПК.Отбор.ПроизводственныйКалендарь.Установить(Константы.ОсновнойПроизводственныйКалендарь.Получить());
	ДПК.Отбор.Дата.Установить(ТекДата);
	ДПК.Отбор.Год.Установить(Год(ТекДата));
	ДПК.Прочитать();
	    Для Каждого Запись Из ДПК Цикл
			Если Запись.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда	
			КоличествоПраздничныхДней = КоличествоПраздничныхДней + 1;
			КонецЕсли; 
		КонецЦикла; 	
	ТекДата = ТекДата + 86400;
	КонецЦикла;
Возврат(КоличествоПраздничныхДней); 
КонецФункции

Функция ПолучитьДатуОтгрузки(МПЗ,КоличествоСвободныйОстаток)
Запрос = Новый Запрос;

СрокПоставкиПоставщика = Дата(1,1,1);
Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвободныеОстаткиПоставщиков.МПЗ КАК МПЗ,
	|	СвободныеОстаткиПоставщиков.Количество КАК Количество,
	|	СвободныеОстаткиПоставщиков.СрокПоставки КАК СрокПоставки,
	|	СвободныеОстаткиПоставщиков.Период КАК Период
	|ИЗ
	|	РегистрСведений.СвободныеОстаткиПоставщиков КАК СвободныеОстаткиПоставщиков
	|ГДЕ
	|	СвободныеОстаткиПоставщиков.МПЗ = &МПЗ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвободныеОстаткиПоставщиков.Период";
Запрос.УстановитьПараметр("МПЗ", МПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Количество >= КоличествоСвободныйОстаток Тогда			
		Возврат(ОбщийМодульВызовСервера.ПолучитьВремяМеждуДатами(НачалоДня(ТекущаяДата()),ВыборкаДетальныеЗаписи.Период,0,Ложь,0,Ложь)+МПЗ.СрокПоставки*5+1);
		Иначе
		КоличествоСвободныйОстаток = КоличествоСвободныйОстаток - ВыборкаДетальныеЗаписи.Количество; 
		КонецЕсли;
	СрокПоставкиПоставщика = ВыборкаДетальныеЗаписи.СрокПоставки; 
	КонецЦикла;
		Если ЗначениеЗаполнено(СрокПоставкиПоставщика) Тогда
		Возврат(СрокПоставкиПоставщика*5);
		Иначе
			Если МПЗ.СрокПоставки > 0 Тогда
			Возврат(МПЗ.СрокПоставки*5+1);
			Иначе
			Возврат(0);
			КонецЕсли;
		КонецЕсли;
КонецФункции

Процедура ЗагрузкаИзмененийСроковПоставки() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(17) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = "";

БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1ССбыт.Получить());
	Если БазаСбыта = Неопределено Тогда
	СостояниеРЗ = СостояниеРЗ + "Не открыто соединение с УТ!"+Символы.ПС;
	ЗаписатьСостояниеРегламентногоЗадания(17,СостояниеРЗ);
		Если ПривилегированныйРежим() Тогда 
		УстановитьПривилегированныйРежим(Ложь);
		КонецЕсли;
	Возврат;	
	КонецЕсли;

Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Материалы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Материалы КАК Материалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
	|		ПО Материалы.Ссылка = СтатусыМПЗСрезПоследних.МПЗ
	|ГДЕ
	|	Материалы.Товар <> &Товар
	|	И СтатусыМПЗСрезПоследних.Статус <> &Статус
	|	И Материалы.Товар.Статус <> &СтатусТовара
	|	И Материалы.ПометкаУдаления = ЛОЖЬ"; 
Запрос.УстановитьПараметр("НаДату",ТекущаяДата());
Запрос.УстановитьПараметр("Товар",Справочники.Товары.ПустаяСсылка());
Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыМПЗ.Запрещённая);
Запрос.УстановитьПараметр("СтатусТовара",Перечисления.СтатусыТоваров.НеПроизводимый);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
	ТНП = ВыборкаДетальныеЗаписи.Ссылка;
	Потребность = 1;
	КоличествоОстатокМХ = ОбщийМодульВызовСервера.ПолучитьОстатокПоМестуХранения(Константы.МестоХраненияТНП.Получить(),ТНП);
	КоличествоОстатокТранзит = ОбщийМодульВызовСервера.ПолучитьОстатокПоМестуХранения(Константы.МестоХраненияТранзит.Получить(),ТНП);
	КоличествоОстатокЗП = ПолучитьКоличествоОстатокЗП(ТНП);
	КоличествоОстатокРезерв = ПолучитьКоличествоОстатокРезерв(ТНП);
	КоличествоОстатокДолги = ПолучитьКоличествоОстатокДолг(ТНП);
	РезервКомплектов = ПолучитьКоличествоРК(ТНП);
	КоличествоКЗ = ПолучитьКоличествоКЗ(ТНП);
	КоличествоСвободныйОстаток = КоличествоОстатокМХ - КоличествоОстатокДолги + КоличествоОстатокТранзит - КоличествоКЗ - Потребность - РезервКомплектов; 
		Если КоличествоСвободныйОстаток >= 0 Тогда
		ДатаОтгрузкиДней = 1;
		Иначе
		КоличествоСвободныйОстаток = -1*КоличествоСвободныйОстаток;
			Если КоличествоОстатокЗП > 0 Тогда
				Если (КоличествоСвободныйОстаток) > КоличествоОстатокЗП Тогда
				ДатаОтгрузкиДней = ПолучитьДатуОтгрузки(ТНП,КоличествоСвободныйОстаток); 
					Если ДатаОтгрузкиДней = 0 Тогда
					СостояниеРЗ = СостояниеРЗ + "" + СокрЛП(ТНП.Наименование) + "Срок поставки = 0" + Символы.ПС;
					Продолжить;
					КонецЕсли; 
				Иначе
				ДатаРаспределения = ПолучитьДатуПослеРаспределенияЗП(ТНП,КоличествоСвободныйОстаток);
					Если ДатаРаспределения <> Неопределено Тогда
					ДатаОтгрузкиДней = ОбщийМодульВызовСервера.ПолучитьВремяМеждуДатами(НачалоДня(ТекущаяДата()),ДатаРаспределения,0,Ложь,0,Истина)+1;
					КонецЕсли; 	
				КонецЕсли;		
			Иначе
			ДатаОтгрузкиДней = ПолучитьДатуОтгрузки(ТНП,КоличествоСвободныйОстаток);
				Если ДатаОтгрузкиДней = 0 Тогда
				СостояниеРЗ = СостояниеРЗ + "" + СокрЛП(ТНП.Наименование) + "Срок поставки = 0" + Символы.ПС;
				Продолжить;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	Артикул = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(ТНП.Товар.Код);
	бсНомен = БазаСбыта.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
		Если Не бсНомен.Пустая() Тогда
			Если бсНомен.ИмСрокПоставки <> ДатаОтгрузкиДней Тогда
	        бсНоменОбъект = бсНомен.ПолучитьОбъект();
			бсНоменОбъект.ИмСрокПоставки = ДатаОтгрузкиДней;
	        бсНоменОбъект.Записать();
			КонецЕсли;
		Иначе
		СостояниеРЗ = СостояниеРЗ+СокрЛП(ТНП.Товар.Наименование)+" - товар с артикулом "+Артикул+" не найден в УТ!"+Символы.ПС;		
		КонецЕсли;	 
	КонецЦикла;
ЗаписатьСостояниеРегламентногоЗадания(17,СостояниеРЗ);
	Если ПривилегированныйРежим() Тогда 
	УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьТаблицуТоваровСоСрокамиПоставки() Экспорт
Запрос = Новый Запрос;
ТаблицаТоваров = Новый ТаблицаЗначений;

ТаблицаТоваров.Колонки.Добавить("Артикул");
ТаблицаТоваров.Колонки.Добавить("СрокПоставки"); 
ТаблицаТоваров.Колонки.Добавить("Крупность");

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Материалы.Ссылка КАК Ссылка,
	|	Материалы.Товар.Статус КАК СтатусТовара
	|ИЗ
	|	Справочник.Материалы КАК Материалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
	|		ПО Материалы.Ссылка = СтатусыМПЗСрезПоследних.МПЗ
	|ГДЕ
	|	Материалы.Товар <> &Товар
	|	И СтатусыМПЗСрезПоследних.Статус <> &Статус
	|	И Материалы.Товар.Статус <> &СтатусТовара
	|	И Материалы.ПометкаУдаления = ЛОЖЬ"; 
Запрос.УстановитьПараметр("НаДату",ТекущаяДата());
Запрос.УстановитьПараметр("Товар",Справочники.Товары.ПустаяСсылка());
Запрос.УстановитьПараметр("Статус",Перечисления.СтатусыМПЗ.Запрещённая);
Запрос.УстановитьПараметр("СтатусТовара",Перечисления.СтатусыТоваров.НеПроизводимый);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
	ТНП = ВыборкаДетальныеЗаписи.Ссылка;
	Потребность = 1;
	КоличествоОстатокМХ = ОбщийМодульВызовСервера.ПолучитьОстатокПоМестуХранения(Константы.МестоХраненияТНП.Получить(),ТНП);
	КоличествоОстатокТранзит = ОбщийМодульВызовСервера.ПолучитьОстатокПоМестуХранения(Константы.МестоХраненияТранзит.Получить(),ТНП);
	КоличествоОстатокЗП = ПолучитьКоличествоОстатокЗП(ТНП);
	КоличествоОстатокРезерв = ПолучитьКоличествоОстатокРезерв(ТНП);
	КоличествоОстатокДолги = ПолучитьКоличествоОстатокДолг(ТНП);
	РезервКомплектов = ПолучитьКоличествоРК(ТНП);
	КоличествоКЗ = ПолучитьКоличествоКЗ(ТНП);
	НЗ_Процент = ОкруглитьДоБольшегоЦелого(ТНП.МинОстаток/100*60);
		Если НЗ_Процент > 0 Тогда
		Крупность = НЗ_Процент;
		Иначе
		Крупность = ОкруглитьДоБольшегоЦелого((КоличествоОстатокМХ-КоличествоОстатокДолги)/100*60);	
		Крупность = ?(Крупность > 0,Крупность,0);		
		КонецЕсли;
	КоличествоСвободныйОстаток = КоличествоОстатокМХ - КоличествоОстатокДолги + КоличествоОстатокТранзит - КоличествоКЗ - Потребность - РезервКомплектов; 
		Если КоличествоСвободныйОстаток >= 0 Тогда
		ДатаОтгрузкиДней = 1;
		Иначе
			Если ВыборкаДетальныеЗаписи.СтатусТовара <> Перечисления.СтатусыТоваров.СнимаемыйСПроизводства Тогда
			КоличествоСвободныйОстаток = -1*КоличествоСвободныйОстаток;
				Если КоличествоОстатокЗП > 0 Тогда
					Если КоличествоСвободныйОстаток > КоличествоОстатокЗП Тогда
					ДатаОтгрузкиДней = ПолучитьДатуОтгрузки(ТНП,КоличествоСвободныйОстаток); 
						Если ДатаОтгрузкиДней = 0 Тогда
						Продолжить;
						КонецЕсли; 
					Иначе
					ДатаРаспределения = ПолучитьДатуПослеРаспределенияЗП(ТНП,КоличествоСвободныйОстаток);
						Если ДатаРаспределения <> Неопределено Тогда
						ДатаОтгрузкиДней = ОбщийМодульВызовСервера.ПолучитьВремяМеждуДатами(НачалоДня(ТекущаяДата()),ДатаРаспределения,0,Ложь,0,Истина)+1;
						КонецЕсли; 	
					КонецЕсли;		
				Иначе
				ДатаОтгрузкиДней = ПолучитьДатуОтгрузки(ТНП,КоличествоСвободныйОстаток);
					Если ДатаОтгрузкиДней = 0 Тогда
	                Продолжить;
					КонецЕсли; 
				КонецЕсли;
			Иначе
            ДатаОтгрузкиДней = 0;
			КонецЕсли;	
		КонецЕсли; 
	ТЧ = ТаблицаТоваров.Добавить();
	ТЧ.Артикул = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(ТНП.Товар.Код);
	ТЧ.СрокПоставки = ДатаОтгрузкиДней;
	ТЧ.Крупность = Крупность; 
	КонецЦикла;
Возврат(ТаблицаТоваров);
КонецФункции

#КонецОбласти 

#Область СозданиеРеализацийПоННС

Функция ПолучитьКоличествоПоРеализациям(ЗНП,Продукция)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ                                                     
	|	РеализацияТабличнаяЧасть.Товар КАК Товар,
	|	СУММА(РеализацияТабличнаяЧасть.Количество) КАК Количество
	|ИЗ
	|	Документ.Реализация.ТабличнаяЧасть КАК РеализацияТабличнаяЧасть
	|ГДЕ
	|	РеализацияТабличнаяЧасть.Ссылка.ДокументОснование = &ДокументОснование
	|	И РеализацияТабличнаяЧасть.Товар = &Товар
	|
	|СГРУППИРОВАТЬ ПО
	|	РеализацияТабличнаяЧасть.Товар";
Запрос.УстановитьПараметр("ДокументОснование", ЗНП);
Запрос.УстановитьПараметр("Товар", Продукция);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныхЗаписей = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
	Возврат(ВыборкаДетальныхЗаписей.Количество);
	КонецЦикла;
Возврат(0);
КонецФункции

Процедура УстановитьСтатусННС(ННС)
	Для каждого ТЧ Из ННС.ТабличнаяЧасть Цикл
		Если ТЧ.Количество > ПолучитьКоличествоПоРеализациям(ТЧ.ЗаказНаПроизводство,ТЧ.Продукция) Тогда
		Возврат;
		КонецЕсли; 
	КонецЦикла;
СННС = РегистрыСведений.СтатусыНакладныхНаСборку.СоздатьМенеджерЗаписи();
СННС.Период = ТекущаяДата();
СННС.НакладнаяНаСборку = ННС;
СННС.Статус = Перечисления.СтатусыНакладнойНаСборку.Упакован;
СННС.Записать(); 
КонецПроцедуры

Процедура СозданиеРеализацийПоННС() Экспорт
	Если ЭтоФоновоеЗаданиеНаТестовомСервере(20) Тогда
	Возврат;
	КонецЕсли;
УстановитьПривилегированныйРежим(Истина);
СостояниеРЗ = ""; 

Запрос = Новый Запрос;
СписокКонтрагентов = Новый СписокЗначений;

СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("ОВЕН ВН",Истина));
СписокКонтрагентов.Добавить(Справочники.Контрагенты.НайтиПоНаименованию("ПЭО Овен",Истина));

МестоХранения = Константы.МестоХраненияТранзит.Получить();
ДатаДокумента = ТекущаяДата();

Запрос.Текст = 
	"ВЫБРАТЬ
	|	СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку КАК ННС
	|ИЗ
	|	РегистрСведений.СтатусыНакладныхНаСборку.СрезПоследних КАК СтатусыНакладныхНаСборкуСрезПоследних
	|ГДЕ
	|	СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И СтатусыНакладныхНаСборкуСрезПоследних.Статус = &Статус
	|	И СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку.Контрагент В(&СписокКонтрагентов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыНакладныхНаСборкуСрезПоследних.НакладнаяНаСборку.Дата";
Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ТекущаяДата()));
Запрос.УстановитьПараметр("ДатаКон", ТекущаяДата());
Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыНакладнойНаСборку.НаУпаковке);
Запрос.УстановитьПараметр("СписокКонтрагентов", СписокКонтрагентов);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	НакладнаяНаСборкуТабличнаяЧасть.Ссылка КАК ННС,
		|	НакладнаяНаСборкуТабличнаяЧасть.Продукция КАК Продукция,
		|	НакладнаяНаСборкуТабличнаяЧасть.Количество КАК Количество,
		|	НакладнаяНаСборкуТабличнаяЧасть.ЗаказНаПроизводство КАК ЗНП
		|ИЗ
		|	Документ.НакладнаяНаСборку.ТабличнаяЧасть КАК НакладнаяНаСборкуТабличнаяЧасть
		|ГДЕ
		|	НакладнаяНаСборкуТабличнаяЧасть.Ссылка = &Ссылка
		|ИТОГИ
		|	СУММА(Количество)
		|ПО                     
		|	ННС,
		|	ЗаказНаПроизводство,
		|	Продукция";
	Запрос.УстановитьПараметр("Ссылка", ВыборкаДетальныеЗаписи.ННС);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаННС = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;      
			Пока ВыборкаННС.Следующий() Цикл
			ВыборкаЗНП = ВыборкаННС.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаЗНП.Следующий() Цикл 		
				Реализация = Документы.Реализация.СоздатьДокумент();
				Реализация.Дата = ДатаДокумента;
				Реализация.УстановитьНовыйНомер(ПрисвоитьПрефикс(МестоХранения.Подразделение));
				Реализация.ДокументОснование = ВыборкаЗНП.ЗНП;
				Реализация.Контрагент = ВыборкаЗНП.ЗНП.Контрагент;
				Реализация.Договор = ВыборкаЗНП.ЗНП.Контрагент.ОсновнойДоговор;
				Реализация.Подразделение = МестоХранения.Подразделение;
				Реализация.МестоХранения = МестоХранения;
				Реализация.НеУчитыватьГТД = Истина;
				Реализация.Комментарий = "Создано для закрытия ЗнП. Не для выгрузки в БД СД"; 
				ВыборкаПродукция = ВыборкаЗНП.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаПродукция.Следующий() Цикл
		 			КоличествоКРеализации = ВыборкаПродукция.Количество;
					КоличествоДолг = ОбщийМодульРаботаСРегистрами.ПолучитьОстатокПоДолгам(ВыборкаЗНП.ЗНП,ВыборкаПродукция.Продукция,ДатаДокумента);
					ТЧ_Р = Реализация.ТабличнаяЧасть.Добавить();
					ТЧ_Р.ВидТовара = ?(ТипЗнч(ВыборкаПродукция.Продукция) = Тип("СправочникСсылка.Номенклатура"),Перечисления.ВидыМПЗ.Полуфабрикаты,Перечисления.ВидыМПЗ.Материалы);
					ТЧ_Р.Товар = ВыборкаПродукция.Продукция;
					ТЧ_Р.ЕдиницаИзмерения = ВыборкаПродукция.Продукция.ОсновнаяЕдиницаИзмерения;
						Если КоличествоКРеализации > КоличествоДолг Тогда
						ТЧ_Р.Количество = КоличествоДолг;
						Иначе	
						ТЧ_Р.Количество = КоличествоКРеализации;							
						КонецЕсли;
					КонецЦикла;
				Реализация.Записать(РежимЗаписиДокумента.Проведение);			
				УстановитьСтатусННС(ВыборкаДетальныеЗаписи.ННС); 
				ДатаДокумента = ДатаДокумента + 1;
				КонецЦикла; 
			КонецЦикла;
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение       
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Сообщить(ОписаниеОшибки());
		КонецПопытки;
	КонецЦикла;
ЗаписатьСостояниеРегламентногоЗадания(20,СостояниеРЗ);
	Если ПривилегированныйРежим() Тогда 
	УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти 