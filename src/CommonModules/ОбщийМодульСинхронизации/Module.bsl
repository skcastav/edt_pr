
Функция ПолучитьНастройкиОбменаДанными(ВидБазы) Экспорт
	Если ТипЗнч(ВидБазы) = Тип("Строка") Тогда
		Если ВидБазы = "Зарплата" Тогда
		БД = Константы.БазаДанных1СЗарплата77.Получить();
		ИначеЕсли ВидБазы = "Производство" Тогда
		БД = Константы.БазаДанных1СПроизводство77.Получить();
		ИначеЕсли ВидБазы = "Сбыт" Тогда
		БД = Константы.БазаДанных1ССбыт.Получить();
		КонецЕсли;
	Иначе	
	БД = ВидБазы;
	КонецЕсли; 
Возврат(Новый Структура("ПутьКБазеДанных,Пользователь,Пароль",БД.ПутьКБазеДанных,БД.Пользователь,БД.Пароль));
КонецФункции

Функция УстановитьCOMСоединение(БазаДанных) Экспорт
V83 = Новый COMобъект("V83.ComConnector");

СтрокаПодключения =  "srvr='" + СокрЛП(БазаДанных.Сервер)
+ "'; ref='" + СокрЛП(БазаДанных.БазаДанных)
+ "'; usr='" + СокрЛП(БазаДанных.Пользователь)
+ "'; pwd='" + СокрЛП(БазаДанных.Пароль) + "';";
	Попытка
	БД = V83.Connect(СтрокаПодключения);
	Исключение
	Сообщить(ОписаниеОшибки());
	Возврат(Неопределено);
	КонецПопытки;
Возврат(БД);
КонецФункции 

//Функция СброситьФлагИзменения(ЗапросSQL)
//	Если Не Константы.ТестоваяБаза.Получить() Тогда
//		Если Константы.КодБазы.Получить() = "БГР" Тогда
//		ВнешниеИсточникиДанных.Номенклатура1С77.УстановитьСоединение();
//		пСеанс = ВнешниеИсточникиДанных.Номенклатура1С77.ПолучитьОбщиеПараметрыСоединения();
//		ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
//		ВнешниеИсточникиДанных.Номенклатура1С77_Харьков.УстановитьСоединение();
//		пСеанс = ВнешниеИсточникиДанных.Номенклатура1С77_Харьков.ПолучитьОбщиеПараметрыСоединения();
//		КонецЕсли;
//	Connection  = Новый COMОбъект("ADODB.Connection");
//	Command  = Новый COMОбъект("ADODB.Command");
//	RecordSet  = Новый COMОбъект("ADODB.RecordSet");

//		Попытка
//		Connection.Open(СокрЛП(пСеанс.СтрокаСоединения));
//	  	Command.ActiveConnection = Connection;
//		Command.CommandText = ЗапросSQL;
//	  	Command.Execute();
//		Возврат("");		
//	 	Исключение
//		Возврат("Не сброшен флаг изменений.");
//		КонецПопытки;
//	КонецЕсли;
//КонецФункции

Функция СброситьИзменение(ВИД_Ссылка) Экспорт
	Если Не Константы.ТестоваяБаза.Получить() Тогда
		Попытка
		ВИД = ВИД_Ссылка.ПолучитьОбъект();
		ВИД.флИзменение = 0;
		ВИД.Записать();		
	 	Исключение
		Возврат(Ложь);
		КонецПопытки;
	КонецЕсли;
Возврат(Истина);
КонецФункции

Процедура СоставГруппТовара(СписокГрупп,ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТоварыПриборы.ID КАК ID,
		|	ТоварыПриборы.DESCR КАК DESCR,
		|	ТоварыПриборы.ISMARK КАК ISMARK,
		|	ТоварыПриборы.PARENTID КАК PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварыПриборы КАК ТоварыПриборы
		|ГДЕ
		|	ТоварыПриборы.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТоварыПриборы.ID КАК ID,
		|	ТоварыПриборы.DESCR КАК DESCR,
		|	ТоварыПриборы.ISMARK КАК ISMARK,
		|	ТоварыПриборы.PARENTID КАК PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварыПриборы КАК ТоварыПриборы
		|ГДЕ
		|	ТоварыПриборы.ID = &ID";	
	КонецЕсли; 
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокГрупп.Вставить(0,ВыборкаДетальныеЗаписи.DESCR,ВыборкаДетальныеЗаписи.ID);
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СоставГруппТовара(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура СоставГруппТовараДатчика(СписокГрупп,ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТоварыДатчики.ID КАК ID,
		|	ТоварыДатчики.DESCR КАК DESCR,
		|	ТоварыДатчики.ISMARK КАК ISMARK,
		|	ТоварыДатчики.PARENTID КАК PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварыДатчики КАК ТоварыДатчики
		|ГДЕ
		|	ТоварыДатчики.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТоварыДатчики.ID КАК ID,
		|	ТоварыДатчики.DESCR КАК DESCR,
		|	ТоварыДатчики.ISMARK КАК ISMARK,
		|	ТоварыДатчики.PARENTID КАК PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварыДатчики КАК ТоварыДатчики
		|ГДЕ
		|	ТоварыДатчики.ID = &ID";	
	КонецЕсли; 
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокГрупп.Вставить(0,ВыборкаДетальныеЗаписи.DESCR,ВыборкаДетальныеЗаписи.ID);
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СоставГруппТовараДатчика(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура СоставГруппДокумента(СписокГрупп,ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Документы.ID,
		|	Документы.DESCR,
		|	Документы.ISMARK,
		|	Документы.PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Документы КАК Документы
		|ГДЕ
		|	Документы.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Документы.ID,
		|	Документы.DESCR,
		|	Документы.ISMARK,
		|	Документы.PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Документы КАК Документы
		|ГДЕ
		|	Документы.ID = &ID";	
	КонецЕсли;
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокГрупп.Вставить(0,ВыборкаДетальныеЗаписи.DESCR,ВыборкаДетальныеЗаписи.ID);
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СоставГруппДокумента(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура СоставГруппТехОперации(СписокГрупп,ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОперации.ID,
		|	ТехОперации.DESCR,
		|	ТехОперации.ISMARK,
		|	ТехОперации.PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТехОперации КАК ТехОперации
		|ГДЕ
		|	ТехОперации.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОперации.ID,
		|	ТехОперации.DESCR,
		|	ТехОперации.ISMARK,
		|	ТехОперации.PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТехОперации КАК ТехОперации
		|ГДЕ
		|	ТехОперации.ID = &ID";	
	КонецЕсли;
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокГрупп.Вставить(0,ВыборкаДетальныеЗаписи.DESCR,ВыборкаДетальныеЗаписи.ID);
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СоставГруппТехОперации(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура СоставГруппТехОснастки(СписокГрупп,ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОснастка.ID,
		|	ТехОснастка.DESCR,
		|	ТехОснастка.ISMARK,
		|	ТехОснастка.PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТехОснастка КАК ТехОснастка
		|ГДЕ
		|	ТехОснастка.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОснастка.ID,
		|	ТехОснастка.DESCR,
		|	ТехОснастка.ISMARK,
		|	ТехОснастка.PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТехОснастка КАК ТехОснастка
		|ГДЕ
		|	ТехОснастка.ID = &ID";	
	КонецЕсли;
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокГрупп.Вставить(0,ВыборкаДетальныеЗаписи.DESCR,ВыборкаДетальныеЗаписи.ID);
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СоставГруппТехОснастки(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура СоставГруппМатериала(СписокГрупп,ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Материалы.ID,
		|	Материалы.DESCR,
		|	Материалы.ISMARK,
		|	Материалы.PARENTID,
		|	Материалы.CODE
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Материалы КАК Материалы
		|ГДЕ
		|	Материалы.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Материалы.ID,
		|	Материалы.DESCR,
		|	Материалы.ISMARK,
		|	Материалы.PARENTID,
		|	Материалы.CODE
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Материалы КАК Материалы
		|ГДЕ
		|	Материалы.ID = &ID";	
	КонецЕсли;
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокГрупп.Вставить(0,ВыборкаДетальныеЗаписи.DESCR+"|"+Строка(ВыборкаДетальныеЗаписи.CODE),ВыборкаДетальныеЗаписи.ID);
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СоставГруппМатериала(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Процедура СоставГруппНоменклатуры(СписокГрупп,ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Номенклатура.ID,
		|	Номенклатура.DESCR,
		|	Номенклатура.ISMARK,
		|	Номенклатура.PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Номенклатура.ID,
		|	Номенклатура.DESCR,
		|	Номенклатура.ISMARK,
		|	Номенклатура.PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ID = &ID";		
	КонецЕсли;
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл       
	СписокГрупп.Вставить(0,ВыборкаДетальныеЗаписи.DESCR,ВыборкаДетальныеЗаписи.ID);
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СоставГруппНоменклатуры(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

Функция ПроверкаГруппТоваров(СписокГрупп) Экспорт
ТекРодитель = Справочники.Товары.ПустаяСсылка();
	Для каждого Строка Из СписокГрупп Цикл
	Группа = Справочники.Товары.НайтиПоНаименованию(СокрЛП(Строка.Значение),Истина);	
		Если Группа.Пустая() Тогда
		Группа = Справочники.Товары.СоздатьГруппу();
		Группа.Родитель = ТекРодитель;
		Группа.Наименование = Строка.Значение;
		Группа.Записать();
		КонецЕсли; 
	ТекРодитель = Группа.Ссылка;
	КонецЦикла; 
Возврат(ТекРодитель);		
КонецФункции

Функция ПроверкаГруппДокументов(СписокГрупп) Экспорт
ТекРодитель = Справочники.Документация.ПустаяСсылка();
	Для каждого Строка Из СписокГрупп Цикл
	Группа = Справочники.Документация.НайтиПоРеквизиту("ID",Строка.Представление,ТекРодитель);	
		Если Группа.Пустая() Тогда
		Группа = Справочники.Документация.СоздатьГруппу();
		Группа.ID = Строка.Представление;
		Группа.Родитель = ТекРодитель;
		Группа.Наименование = Строка.Значение;
		Группа.Записать();
		КонецЕсли; 
	ТекРодитель = Группа.Ссылка;
	КонецЦикла; 
Возврат(ТекРодитель);		
КонецФункции

Функция ПроверкаГруппТехОпераций(СписокГрупп) Экспорт
ТекРодитель = Справочники.ТехОперации.ПустаяСсылка();
	Для каждого Строка Из СписокГрупп Цикл
	Группа = Справочники.ТехОперации.НайтиПоРеквизиту("ID",Строка.Представление,ТекРодитель);	
		Если Группа.Пустая() Тогда
		Группа = Справочники.ТехОперации.СоздатьГруппу();
		Группа.ID = Строка.Представление;
		Группа.Родитель = ТекРодитель;
		Группа.Наименование = Строка.Значение;
		Группа.Записать();
		КонецЕсли; 
	ТекРодитель = Группа.Ссылка;
	КонецЦикла; 
Возврат(ТекРодитель);		
КонецФункции

Функция ПроверкаГруппТехОснастки(СписокГрупп) Экспорт
ТекРодитель = Справочники.ТехОснастка.ПустаяСсылка();
	Для каждого Строка Из СписокГрупп Цикл
	Группа = Справочники.ТехОснастка.НайтиПоРеквизиту("ID",Строка.Представление,ТекРодитель);	
		Если Группа.Пустая() Тогда
		Группа = Справочники.ТехОснастка.СоздатьГруппу();
		Группа.ID = Строка.Представление;
		Группа.Родитель = ТекРодитель;
		Группа.Наименование = Строка.Значение;
		Группа.Записать();
		КонецЕсли; 
	ТекРодитель = Группа.Ссылка;
	КонецЦикла; 
Возврат(ТекРодитель);	
КонецФункции

Функция ПроверкаГруппМатериалов(СписокГрупп) Экспорт
ТекРодитель = Справочники.Материалы.ПустаяСсылка();
	Для каждого Строка Из СписокГрупп Цикл
	Группа = Справочники.Материалы.НайтиПоРеквизиту("ID",СокрП(Строка.Представление),ТекРодитель);	
		Если Группа.Пустая() Тогда
		Группа = Справочники.Материалы.СоздатьГруппу();
		Группа.ID = СокрП(Строка.Представление);
		Группа.Родитель = ТекРодитель;
		Группа.Код = Число(Сред(Строка.Значение,Найти(Строка.Значение,"|")+1));
		Группа.Наименование = Лев(Строка.Значение,Найти(Строка.Значение,"|")-1);
		Группа.Записать();
		КонецЕсли; 
	ТекРодитель = Группа.Ссылка;
	КонецЦикла; 
Возврат(ТекРодитель);	
КонецФункции

Функция ПроверкаГруппНоменклатуры(СписокГрупп) Экспорт
ТекРодитель = Справочники.Номенклатура.ПустаяСсылка();
	Для каждого Строка Из СписокГрупп Цикл
	Группа = Справочники.Номенклатура.НайтиПоРеквизиту("ID",Строка.Представление,ТекРодитель);	
		Если Группа.Пустая() Тогда
		Группа = Справочники.Номенклатура.СоздатьГруппу();
		Группа.ID = Строка.Представление;
		Группа.Родитель = ТекРодитель;
		Группа.Наименование = Строка.Значение;
		Группа.Записать();
		КонецЕсли; 
	ТекРодитель = Группа.Ссылка;
	КонецЦикла; 
Возврат(ТекРодитель);		
КонецФункции	
	
Функция СозданиеЕИ(ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.ID,
		|	ЕдиницыИзмерения.CODE КАК Код,
		|	ЕдиницыИзмерения.DESCR КАК Наименование,
		|	ЕдиницыИзмерения.SP3188 КАК ПолнНаименование
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ЕдиницыИзмерения.ID,
		|	ЕдиницыИзмерения.CODE КАК Код,
		|	ЕдиницыИзмерения.DESCR КАК Наименование,
		|	ЕдиницыИзмерения.SP3188 КАК ПолнНаименование
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ЕдиницыИзмерения КАК ЕдиницыИзмерения
		|ГДЕ
		|	ЕдиницыИзмерения.ID = &ID";		
	КонецЕсли;	
Запрос.УстановитьПараметр("ID",ID);

Результат = Запрос.Выполнить();

ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ЕИ = Справочники.ЕдиницыИзмерений.НайтиПоНаименованию(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),Истина);
		Если ЕИ = Справочники.ЕдиницыИзмерений.ПустаяСсылка() Тогда
		ЕИ = Справочники.ЕдиницыИзмерений.СоздатьЭлемент();
		ЕИ.Код = ВыборкаДетальныеЗаписи.Код;
		ЕИ.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		ЕИ.ПолнНаименование = ВыборкаДетальныеЗаписи.ПолнНаименование;
		ЕИ.Записать();
		КонецЕсли;	
	КонецЦикла;
		Если ЕИ = Неопределено Тогда
		Возврат(Справочники.ЕдиницыИзмерений.ПустаяСсылка());
		Иначе
		Возврат(ЕИ.Ссылка);
		КонецЕсли;		
КонецФункции
	
Функция СозданиеОснЕИ(ОснЕИ_ID,Владелец) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ОснЕИНоменклатуры.ID,
		|	ОснЕИНоменклатуры.DESCR КАК Наименование,
		|	ОснЕИНоменклатуры.SP18972 КАК ЕИ_ID,
		|	ОснЕИНоменклатуры.SP18973 КАК Коэффициент
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ОснЕИНоменклатуры КАК ОснЕИНоменклатуры
		|ГДЕ
		|	ОснЕИНоменклатуры.PARENTEXT = &PARENTEXT";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ОснЕИНоменклатуры.ID,
		|	ОснЕИНоменклатуры.DESCR КАК Наименование,
		|	ОснЕИНоменклатуры.SP18972 КАК ЕИ_ID,
		|	ОснЕИНоменклатуры.SP18973 КАК Коэффициент
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ОснЕИНоменклатуры КАК ОснЕИНоменклатуры
		|ГДЕ
		|	ОснЕИНоменклатуры.PARENTEXT = &PARENTEXT";		
	КонецЕсли;	
Запрос.УстановитьПараметр("PARENTEXT",Владелец.ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Выборка = Справочники.ОсновныеЕдиницыИзмерений.НайтиПоНаименованию(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),Истина,,Владелец);
		Если Выборка.Пустая() Тогда
		ОснЕИ = Справочники.ОсновныеЕдиницыИзмерений.СоздатьЭлемент();
		ОснЕИ.Владелец = Владелец;
		ОснЕИ.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		ОснЕИ.ЕдиницаИзмерения = СозданиеЕИ(ВыборкаДетальныеЗаписи.ЕИ_ID);
		ОснЕИ.Коэффициент = ВыборкаДетальныеЗаписи.Коэффициент;
		ОснЕИ.Записать();
			Если ВыборкаДетальныеЗаписи.ID = ОснЕИ_ID Тогда
			ОснЕИПоУмолчанию = ОснЕИ.Ссылка;		
			КонецЕсли; 
		Иначе
			Если ВыборкаДетальныеЗаписи.ID = ОснЕИ_ID Тогда
			ОснЕИПоУмолчанию = Выборка.Ссылка;		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
Возврат(ОснЕИПоУмолчанию);
КонецФункции

Функция СозданиеОснЕИМатериалов(ОснЕИ_ID,Владелец) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ОснЕИМатериалов.ID,
		|	ОснЕИМатериалов.DESCR КАК Наименование,
		|	ОснЕИМатериалов.SP18968 КАК ЕИ_ID,
		|	ОснЕИМатериалов.SP18969 КАК Коэффициент
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ОснЕИМатериалов КАК ОснЕИМатериалов
		|ГДЕ
		|	ОснЕИМатериалов.PARENTEXT = &PARENTEXT";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ОснЕИМатериалов.ID,
		|	ОснЕИМатериалов.DESCR КАК Наименование,
		|	ОснЕИМатериалов.SP18968 КАК ЕИ_ID,
		|	ОснЕИМатериалов.SP18969 КАК Коэффициент
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ОснЕИМатериалов КАК ОснЕИМатериалов
		|ГДЕ
		|	ОснЕИМатериалов.PARENTEXT = &PARENTEXT";		
	КонецЕсли;	
Запрос.УстановитьПараметр("PARENTEXT",Владелец.ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Выборка = Справочники.ОсновныеЕдиницыИзмерений.НайтиПоНаименованию(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),Истина,,Владелец);
		Если Выборка.Пустая() Тогда
		ОснЕИ = Справочники.ОсновныеЕдиницыИзмерений.СоздатьЭлемент();
		ОснЕИ.Владелец = Владелец;
		ОснЕИ.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		ОснЕИ.ЕдиницаИзмерения = СозданиеЕИ(ВыборкаДетальныеЗаписи.ЕИ_ID);
		ОснЕИ.Коэффициент = ВыборкаДетальныеЗаписи.Коэффициент;
		ОснЕИ.Записать();
			Если ВыборкаДетальныеЗаписи.ID = ОснЕИ_ID Тогда
			ОснЕИПоУмолчанию = ОснЕИ.Ссылка;		
			КонецЕсли; 
		Иначе
			Если ВыборкаДетальныеЗаписи.ID = ОснЕИ_ID Тогда
			ОснЕИПоУмолчанию = Выборка.Ссылка;		
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
Возврат(ОснЕИПоУмолчанию);
КонецФункции

Процедура СозданиеДХН(PARENTID,Владелец) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ДополнительныеХарактеристикиНоменклатуры.DESCR КАК Наименование,
		|	ДополнительныеХарактеристикиНоменклатуры.SP28767 КАК Значение
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ДополнительныеХарактеристикиНоменклатуры КАК ДополнительныеХарактеристикиНоменклатуры
		|ГДЕ
		|	ДополнительныеХарактеристикиНоменклатуры.PARENTEXT = &PARENTEXT";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ДополнительныеХарактеристикиНоменклатуры.DESCR КАК Наименование,
		|	ДополнительныеХарактеристикиНоменклатуры.SP28537 КАК Значение
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ДополнительныеХарактеристикиНоменклатуры КАК ДополнительныеХарактеристикиНоменклатуры
		|ГДЕ
		|	ДополнительныеХарактеристикиНоменклатуры.PARENTEXT = &PARENTEXT";	
	КонецЕсли;	
Запрос.УстановитьПараметр("PARENTEXT",PARENTID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
	ДХН = Справочники.ДополнительныеХарактеристикиТовара.НайтиПоНаименованию(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),Истина,,Владелец);
		Если ДХН.Пустая() Тогда
		ДХН = Справочники.ДополнительныеХарактеристикиТовара.СоздатьЭлемент();
		ДХН.Владелец = Владелец;
		ДХН.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		ДХН.Значение = ВыборкаДетальныеЗаписи.Значение;
		ДХН.Записать();	
		Иначе
			Если СокрЛП(ДХН.Значение) <> СокрЛП(ВыборкаДетальныеЗаписи.Значение) Тогда
			ДХН_Объект = ДХН.ПолучитьОбъект();
			ДХН_Объект.Значение = ВыборкаДетальныеЗаписи.Значение;
			ДХН_Объект.Записать();
			КонецЕсли;			
		КонецЕсли; 
	КонецЦикла;	
КонецПроцедуры	
	
Функция СозданиеГМ(ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ГруппыПоМощности.ID,
		|	ГруппыПоМощности.CODE КАК Код,
		|	ГруппыПоМощности.SP27333 КАК Мощность
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ГруппыПоМощности КАК ГруппыПоМощности	
		|ГДЕ
		|	ГруппыПоМощности.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ГруппыПоМощности.ID,
		|	ГруппыПоМощности.CODE КАК Код,
		|	ГруппыПоМощности.SP27163 КАК Мощность
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ГруппыПоМощности КАК ГруппыПоМощности	
		|ГДЕ
		|	ГруппыПоМощности.ID = &ID";		
	КонецЕсли;	
Запрос.УстановитьПараметр("ID",ID);

Результат = Запрос.Выполнить();

ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ГМ = Справочники.ГруппыПоМощности.НайтиПоКоду(ВыборкаДетальныеЗаписи.Код);
		Если ГМ = Справочники.ГруппыПоМощности.ПустаяСсылка() Тогда
		ГМ = Справочники.ГруппыПоМощности.СоздатьЭлемент();
		ГМ.Код = ВыборкаДетальныеЗаписи.Код;
		ГМ.Наименование = "";
		ГМ.Мощность = ВыборкаДетальныеЗаписи.Мощность;
		ГМ.Записать();
		КонецЕсли;	
	КонецЦикла;
		Если ГМ = Неопределено Тогда
		Возврат(Справочники.ГруппыПоМощности.ПустаяСсылка());
		Иначе
		Возврат(ГМ.Ссылка);
		КонецЕсли;		
КонецФункции	
	
Функция СозданиеКанбана(ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ВидыКанбанов.ID,
		|	ВидыКанбанов.DESCR КАК Наименование,
		|	ВидыКанбанов.SP27323 КАК Время
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ВидыКанбанов КАК ВидыКанбанов	
		|ГДЕ
		|	ВидыКанбанов.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ВидыКанбанов.ID,
		|	ВидыКанбанов.DESCR КАК Наименование,
		|	ВидыКанбанов.SP27153 КАК Время
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ВидыКанбанов КАК ВидыКанбанов	
		|ГДЕ
		|	ВидыКанбанов.ID = &ID";		
	КонецЕсли;	
Запрос.УстановитьПараметр("ID",ID);

Результат = Запрос.Выполнить();

ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Канбан = Справочники.ВидыКанбанов.НайтиПоНаименованию(СокрЛП(ВыборкаДетальныеЗаписи.Наименование),Истина);
		Если Канбан = Справочники.ВидыКанбанов.ПустаяСсылка() Тогда
		Канбан = Справочники.ВидыКанбанов.СоздатьЭлемент();
		Канбан.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		Канбан.Время = ВыборкаДетальныеЗаписи.Время;
		Канбан.Записать();
		КонецЕсли;	
	КонецЦикла;
		Если Канбан = Неопределено Тогда
		Возврат(Справочники.ВидыКанбанов.ПустаяСсылка());
		Иначе
		Возврат(Канбан.Ссылка);
		КонецЕсли;		
КонецФункции

Функция СозданиеЛинейки(ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Линейки.ID,
		|	Линейки.DESCR КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Линейки КАК Линейки
		|ГДЕ
		|	Линейки.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Линейки.ID,
		|	Линейки.DESCR КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Линейки КАК Линейки
		|ГДЕ
		|	Линейки.ID = &ID";		
	КонецЕсли;	
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
Линейка = Справочники.Линейки.ПустаяСсылка();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Линейка = Справочники.Линейки.НайтиПоРеквизиту("НаименованиеСтарое",СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
		Если Линейка.Пустая() Тогда
		Линейка = Справочники.Линейки.СоздатьЭлемент();
		Линейка.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		Линейка.НаименованиеСтарое = ВыборкаДетальныеЗаписи.Наименование;
		Линейка.Записать();
		КонецЕсли;	
	КонецЦикла;
Возврат(Линейка.Ссылка);		
КонецФункции

Функция СозданиеПроизводителя(ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Производители.CODE КАК Код,
		|	Производители.DESCR КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Производители КАК Производители
		|ГДЕ
		|	Производители.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Производители.CODE КАК Код,
		|	Производители.DESCR КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Производители КАК Производители
		|ГДЕ
		|	Производители.ID = &ID";		
	КонецЕсли;	
Запрос.УстановитьПараметр("ID",ID);
Производитель = Справочники.Производители.ПустаяСсылка();
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Производитель = Справочники.Производители.НайтиПоКоду(ВыборкаДетальныеЗаписи.Код);
		Если Производитель.Пустая() Тогда
		Производитель = Справочники.Производители.СоздатьЭлемент();
		Производитель.Код = ВыборкаДетальныеЗаписи.Код;
		Производитель.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		Производитель.Записать();
		КонецЕсли;	
	КонецЦикла;
Возврат(Производитель.Ссылка);	
КонецФункции

Функция СозданиеСотрудника(ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Сотрудники.CODE КАК Код,
		|	Сотрудники.DESCR КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Сотрудники.CODE КАК Код,
		|	Сотрудники.DESCR КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Сотрудники КАК Сотрудники
		|ГДЕ
		|	Сотрудники.ID = &ID";		
	КонецЕсли;	
Запрос.УстановитьПараметр("ID",ID);
Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Сотрудник = Справочники.Сотрудники.НайтиПоНаименованию(ВыборкаДетальныеЗаписи.Наименование,Истина);
		Если Сотрудник.Пустая() Тогда
		Сотрудник = Справочники.Сотрудники.СоздатьЭлемент();
		Сотрудник.Код = ВыборкаДетальныеЗаписи.Код;
		Сотрудник.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		Сотрудник.Записать();
		КонецЕсли;	
	КонецЦикла;
Возврат(Сотрудник.Ссылка);	
КонецФункции

Функция СозданиеВидаРабот(ID) Экспорт 
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ВидыРабот.ID,
		|	ВидыРабот.CODE КАК Код,
		|	ВидыРабот.DESCR КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ВидыРабот КАК ВидыРабот
		|ГДЕ
		|	ВидыРабот.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ВидыРабот.ID,
		|	ВидыРабот.CODE КАК Код,
		|	ВидыРабот.DESCR КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ВидыРабот КАК ВидыРабот
		|ГДЕ
		|	ВидыРабот.ID = &ID";		
	КонецЕсли;	
Запрос.УстановитьПараметр("ID",ID);

Результат = Запрос.Выполнить();

ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ВидРабот = Справочники.ВидыРабот.НайтиПоКоду(ВыборкаДетальныеЗаписи.Код);
		Если ВидРабот = Справочники.ВидыРабот.ПустаяСсылка() Тогда
		ВидРабот = Справочники.ВидыРабот.СоздатьЭлемент();
		ВидРабот.Код = ВыборкаДетальныеЗаписи.Код;
		ВидРабот.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		ВидРабот.Записать();
		КонецЕсли;	
	КонецЦикла;
		Если ВидРабот = Неопределено Тогда
		Возврат(Справочники.ВидыРабот.ПустаяСсылка());
		Иначе
		Возврат(ВидРабот.Ссылка);
		КонецЕсли;		
КонецФункции

Функция ПолучитьПеременныеДанные(OBJID,ID) Экспорт
ТаблицаПД = Новый ТаблицаЗначений;

ТаблицаПД.Колонки.Добавить("Дата");
ТаблицаПД.Колонки.Добавить("Данные");

Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ПеременныеДанные.OBJID,
		|	ПеременныеДанные.ID КАК ID,
		|	ПеременныеДанные.VALUE,
		|	ПеременныеДанные.DATE КАК DATE
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ПеременныеДанные КАК ПеременныеДанные
		|ГДЕ
		|	ПеременныеДанные.OBJID = &OBJID
		|	И ПеременныеДанные.ID = &ID";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ПеременныеДанные.OBJID,
		|	ПеременныеДанные.ID КАК ID,
		|	ПеременныеДанные.VALUE,
		|	ПеременныеДанные.DATE КАК DATE
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ПеременныеДанные КАК ПеременныеДанные
		|ГДЕ
		|	ПеременныеДанные.OBJID = &OBJID
		|	И ПеременныеДанные.ID = &ID";		
	КонецЕсли;
Запрос.УстановитьПараметр("OBJID",OBJID);	
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
	ТЧ = ТаблицаПД.Добавить();
	ТЧ.Дата = ВыборкаДетальныеЗаписи.DATE;
	ТЧ.Данные = Число(ВыборкаДетальныеЗаписи.VALUE);	
	КонецЦикла;
Возврат(ТаблицаПД);
КонецФункции
				
Функция ПолучитьДатуСозданияСпецификации(ID) Экспорт
ЗапросНР = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	ЗапросНР.Текст = 
		"ВЫБРАТЬ
		|	НормыРасходов.DESCR
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.НормыРасходов КАК НормыРасходов
		|ГДЕ
		|	НормыРасходов.ID = &ID";
	Иначе
	ЗапросНР.Текст = 
		"ВЫБРАТЬ
		|	НормыРасходов.DESCR
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.НормыРасходов КАК НормыРасходов
		|ГДЕ
		|	НормыРасходов.ID = &ID";
	КонецЕсли;
ЗапросНР.УстановитьПараметр("ID",ID);
Результат = ЗапросНР.Выполнить();
ВыборкаДетальныеЗаписиНР = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписиНР.Следующий() Цикл
		Попытка
		ДатаСоздания = СокрЛП(Сред(ВыборкаДетальныеЗаписиНР.DESCR,Найти(ВыборкаДетальныеЗаписиНР.DESCR,"Спецификация от")+15));
		ДатаСоздания = Лев(ДатаСоздания,6)+"20"+Прав(ДатаСоздания,2); 						
		ДатаСоздания = Сред(ДатаСоздания,7,4)+Сред(ДатаСоздания,4,2)+Лев(ДатаСоздания,2);
		Возврат(Дата(ДатаСоздания));   
		Исключение
		Возврат(ТекущаяДата());
		КонецПопытки; 
	КонецЦикла;
КонецФункции

Функция ПрисвоитьТовар(НаименованиеТовара) Экспорт
Запрос = Новый Запрос;

СозданыйТовар = Справочники.Товары.ПустаяСсылка();
	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыПриборы.ID,
		|	ТоварыПриборы.SP25097 КАК КодТовара,
		|	ТоварыПриборы.ISMARK,
		|	ТоварыПриборы.DESCR
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварыПриборы КАК ТоварыПриборы
		|ГДЕ
		|	ТоварыПриборы.DESCR = &DESCR";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыПриборы.ID,
		|	ТоварыПриборы.SP25097 КАК КодТовара,
		|	ТоварыПриборы.ISMARK,
		|	ТоварыПриборы.DESCR
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварыПриборы КАК ТоварыПриборы
		|ГДЕ
		|	ТоварыПриборы.DESCR = &DESCR";
	КонецЕсли;
Запрос.УстановитьПараметр("DESCR",НаименованиеТовара);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		СозданыйТовар = СозданиеТовара(ВыборкаДетальныеЗаписи.КодТовара);
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		Сообщить("Произошла исключительная ситуация! Копирование не выполнено!");
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		СозданыйТовар = Справочники.Товары.ПустаяСсылка();
		КонецПопытки;
	КонецЦикла;
Возврат(СозданыйТовар);
КонецФункции

Функция ПолучитьВидДатчика(ID)
Запрос = Новый Запрос;

ВидДатчика = "";
	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДатчиков.DESCR
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ВидыДатчиков КАК ВидыДатчиков
		|ГДЕ
		|	ВидыДатчиков.ID = &ID";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВидыДатчиков.DESCR
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ВидыДатчиков КАК ВидыДатчиков
		|ГДЕ
		|	ВидыДатчиков.ID = &ID";
	КонецЕсли;
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ВидДатчика = СокрЛП(ВыборкаДетальныеЗаписи.DESCR);
	КонецЦикла;
Возврат(ВидДатчика);
КонецФункции 

Функция СозданиеДокумента(ID) Экспорт
Документ = Справочники.Документация.НайтиПоРеквизиту("ID",ID);
	Если Не Документ.Пустая() Тогда
	Возврат(Документ.Ссылка);
	КонецЕсли;
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Документы.ID,
		|	Документы.PARENTID,
		|	Документы.CODE КАК Код,
		|	Документы.DESCR КАК Наименование,
		|	Документы.SP25119 КАК ВидДокумента,
		|	Документы.SP25120 КАК ИмяФайла,
		|	Документы.SP27963 КАК Извещение,
		|	Документы.SP25197 КАК Комментарий,
		|	Документы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Документы КАК Документы
		|ГДЕ
		|	Документы.ID = &ID";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Документы.ID,
		|	Документы.PARENTID,
		|	Документы.CODE КАК Код,
		|	Документы.DESCR КАК Наименование,
		|	Документы.SP25119 КАК ВидДокумента,
		|	Документы.SP25120 КАК ИмяФайла,
		|	Документы.SP27793 КАК Извещение,
		|	Документы.SP25197 КАК Комментарий,
		|	Документы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Документы КАК Документы
		|ГДЕ
		|	Документы.ID = &ID";
	КонецЕсли;	
Запрос.УстановитьПараметр("ID",ID);

Результат = Запрос.Выполнить();

ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Документ = Справочники.Документация.СоздатьЭлемент();
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СписокГрупп = Новый СписокЗначений;

		СоставГруппДокумента(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		Документ.Родитель = ПроверкаГруппДокументов(СписокГрупп);
		КонецЕсли;
	Документ.ID = ID;
	Документ.Код = ВыборкаДетальныеЗаписи.Код;
	Документ.Наименование = ВыборкаДетальныеЗаписи.Наименование;
	Документ.ИмяФайла = ВыборкаДетальныеЗаписи.ИмяФайла;
	Документ.Извещение = ВыборкаДетальныеЗаписи.Извещение;
	Документ.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;
   		Если СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "KDK" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.PCB;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "KDD" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.Гербер;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "KDL" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.Гербер;	
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "LKY" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ГТ;	
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JNM" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.Инструкция;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "K8W" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ИнструкцияПоДоработке;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JF9" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ИнструкцияПоЛакировке;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JDM" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ИнструкцияПоМонтажу;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JF5" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ИнструкцияПоНаладке;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JF7" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ИнструкцияПоПроверке;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JF6" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ИнструкцияПоПрошивке;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JFA" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ИнструкцияПоСборке;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JF8" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ИнструкцияПоСуточномуПрогону;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "M9E" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.КР;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JEG" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.МонтажнаяСхема;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JGW" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.НаклейкаНаУпаковку;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JGE" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.Паспорт;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "L03" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ПМИ;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JDN" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ПрограммаМК;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JJH" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ПрограммаПК;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JNN" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ПрограммаТО;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "LKT" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.РПП;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "L9Z" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.РПР;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JGD" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.РЭП;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JKJ" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.СборочныйЧертёж;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JKK" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.СпецификацияЕСКД;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JEX" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.СхемаОбщая;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JO4" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.СхемаСоединений;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JEF" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.СхемаЭлектрическаяПринципиальная;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JO5" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.СхемаЭлектрическаяФункциональная;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JDO" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ТаблицаДоработок;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JHB" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ТехническоеОписание;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "KQG" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.Техпроцесс;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "K8S" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ТрафаретПодПасту;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JFJ" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ТУ;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "K8T" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ФайлДляСтанка;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "JHC" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ЧертёжМатериала;
   		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.ВидДокумента) = "K8U" Тогда	
		Документ.ВидДокумента = Перечисления.ВидыДокументов.ШаблонПодКлей;
		КонецЕсли;  
	Документ.Записать();	
	КонецЦикла;
		Если Документ = Неопределено Тогда
		Возврат(Справочники.Документация.ПустаяСсылка());
		Иначе
		Возврат(Документ.Ссылка);
		КонецЕсли;		
КонецФункции

Функция СозданиеТехОперации(ID) Экспорт
ТО = Справочники.ТехОперации.НайтиПоРеквизиту("ID",ID);
	Если Не ТО.Пустая() Тогда
	Возврат(ТО.Ссылка);
	КонецЕсли; 
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОперации.ID,
		|	ТехОперации.PARENTID,
		|	ТехОперации.CODE КАК Код,
		|	ТехОперации.DESCR КАК Наименование,
		|	ТехОперации.SP28057 КАК Р,
		|	ТехОперации.SP28254 КАК ВидРабот_ID,
		|	ТехОперации.SP28415 КАК БК
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТехОперации КАК ТехОперации
		|ГДЕ
		|	ТехОперации.ID = &ID";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОперации.ID,
		|	ТехОперации.PARENTID,
		|	ТехОперации.CODE КАК Код,
		|	ТехОперации.DESCR КАК Наименование,
		|	ТехОперации.SP27895 КАК Р,
		|	ТехОперации.SP28051 КАК ВидРабот_ID,
		|	ТехОперации.SP28208 КАК БК
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТехОперации КАК ТехОперации
		|ГДЕ
		|	ТехОперации.ID = &ID";
	КонецЕсли;	
Запрос.УстановитьПараметр("ID",ID);

Результат = Запрос.Выполнить();

ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТО = Справочники.ТехОперации.СоздатьЭлемент();
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СписокГрупп = Новый СписокЗначений;

		СоставГруппТехОперации(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		ТО.Родитель = ПроверкаГруппТехОпераций(СписокГрупп);
		КонецЕсли;
	ТО.ID = ID;
	ТО.Код = ВыборкаДетальныеЗаписи.Код;
	ТО.Наименование = ВыборкаДетальныеЗаписи.Наименование;
	ТО.Разовая = ВыборкаДетальныеЗаписи.Р;
	ТО.БК = ВыборкаДетальныеЗаписи.БК;
	ТО.ВидРабот = СозданиеВидаРабот(ВыборкаДетальныеЗаписи.ВидРабот_ID);  
	ТО.Записать();
	//ТаблицаПД = ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписи.ID,3994);//стоимость
	//	Для каждого ТЧ Из ТаблицаПД Цикл
	//	НоваяНормаТО = РегистрыСведений.НормыТО.СоздатьМенеджерЗаписи();
	//	НоваяНормаТО.Период = ТЧ.Дата;
	//	НоваяНормаТО.ТехОперация = ТО.Ссылка;
	//	НоваяНормаТО.Стоимость = ТЧ.Данные;			
	//	НоваяНормаТО.Записать(Истина);
	//	КонецЦикла;
	//ТаблицаПД = ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписи.ID,3995);//норма
	//	Для каждого ТЧ Из ТаблицаПД Цикл
	//	НоваяНормаТО = РегистрыСведений.НормыТО.СоздатьМенеджерЗаписи();
	//	НоваяНормаТО.Период = ТЧ.Дата;
	//	НоваяНормаТО.ТехОперация = ТО.Ссылка;
	//	НоваяНормаТО.Норма = ТЧ.Данные;			
	//	НоваяНормаТО.Записать(Истина);
	//	КонецЦикла;
	КонецЦикла;
		Если ТО = Неопределено Тогда
		Возврат(Справочники.ТехОперации.ПустаяСсылка());
		Иначе
		Возврат(ТО.Ссылка);
		КонецЕсли;		
КонецФункции

Функция СозданиеТехОснастки(ID) Экспорт
ТО = Справочники.ТехОснастка.НайтиПоРеквизиту("ID",ID);
	Если Не ТО.Пустая() Тогда
	Возврат(ТО.Ссылка);
	КонецЕсли; 
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОснастка.ID,
		|	ТехОснастка.PARENTID,
		|	ТехОснастка.DESCR КАК Наименование,
		|	ТехОснастка.SP25473 КАК Документ_ID,
		|	ТехОснастка.SP25653 КАК Комментарий
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТехОснастка КАК ТехОснастка
		|ГДЕ
		|	ТехОснастка.ID = &ID";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОснастка.ID,
		|	ТехОснастка.PARENTID,
		|	ТехОснастка.DESCR КАК Наименование,
		|	ТехОснастка.SP25473 КАК Документ_ID,
		|	ТехОснастка.SP25653 КАК Комментарий
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТехОснастка КАК ТехОснастка
		|ГДЕ
		|	ТехОснастка.ID = &ID";
	КонецЕсли;	
Запрос.УстановитьПараметр("ID",ID);

Результат = Запрос.Выполнить();

ВыборкаДетальныеЗаписи = Результат.Выбрать();

	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТО = Справочники.ТехОснастка.СоздатьЭлемент();
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СписокГрупп = Новый СписокЗначений;

		СоставГруппТехОснастки(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		ТО.Родитель = ПроверкаГруппТехОснастки(СписокГрупп);
		КонецЕсли;
	ТО.ID = ID;
	ТО.Наименование = ВыборкаДетальныеЗаписи.Наименование;
	ТО.ИмяФайла = СозданиеДокумента(ВыборкаДетальныеЗаписи.Документ_ID);
	ТО.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;  
	ТО.Записать();	
	КонецЦикла;
		Если ТО = Неопределено Тогда
		Возврат(Справочники.ТехОснастка.ПустаяСсылка());
		Иначе
		Возврат(ТО.Ссылка);
		КонецЕсли;		
КонецФункции

Функция СозданиеМатериала(ID) Экспорт
Материал = Справочники.Материалы.НайтиПоРеквизиту("ID",ID);
	Если Не Материал.Пустая() Тогда
	Возврат(Материал.Ссылка);
	КонецЕсли; 
Запрос = Новый Запрос;
ЗапросПП = Новый Запрос;
ЗапросТовары = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Материалы.ID,
		|	Материалы.PARENTID,
		|	Материалы.CODE КАК Код,
		|	Материалы.DESCR КАК Наименование,
		|	Материалы.SP20454 КАК Артикул,
		|	Материалы.SP2824 КАК ЕИ_ID,
		|	Материалы.SP20455 КАК МинОстаток,
		|	Материалы.SP18976 КАК ОснЕИ_ID,
		|	Материалы.SP27971 КАК ЦенаПлановая,
		|	Материалы.SP25242 КАК ИмяФайла_ID,
		|	Материалы.SP25313 КАК Статус,
		|	Материалы.SP28808 КАК ПроблеммыЛогистики,
		|	Материалы.SP25600 КАК СрокПоставки,
		|	Материалы.SP14756 КАК ПолнНаименование,
		|	Материалы.SP20456 КАК Комментарий,
		|	Материалы.SP28618 КАК КратностьУпаковки,
		|	Материалы.SP28874 КАК ПричинаВнесения,
		|	Материалы.SP28870 КАК Проект_ID,
		|	Материалы.SP28871 КАК PartNumber,
		|	Материалы.SP28872 КАК Производитель_ID,
		|	Материалы.SP28873 КАК Сотрудник_ID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Материалы КАК Материалы
		|ГДЕ
		|	Материалы.ID = &ID";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Материалы.ID,
		|	Материалы.PARENTID,
		|	Материалы.CODE КАК Код,
		|	Материалы.DESCR КАК Наименование,
		|	Материалы.SP20454 КАК Артикул,
		|	Материалы.SP2824 КАК ЕИ_ID,
		|	Материалы.SP20455 КАК МинОстаток,
		|	Материалы.SP18976 КАК ОснЕИ_ID,
		|	Материалы.SP27801 КАК ЦенаПлановая,
		|	Материалы.SP25242 КАК ИмяФайла_ID,
		|	Материалы.SP25313 КАК Статус,
		|	Материалы.SP28564 КАК ПроблеммыЛогистики,
		|	Материалы.SP25600 КАК СрокПоставки,
		|	Материалы.SP14756 КАК ПолнНаименование,
		|	Материалы.SP20456 КАК Комментарий,
		|	Материалы.SP28409 КАК КратностьУпаковки,
		|	Материалы.SP28617 КАК ПричинаВнесения,
		|	Материалы.SP28613 КАК Проект_ID,
		|	Материалы.SP28614 КАК PartNumber,
		|	Материалы.SP28615 КАК Производитель_ID,
		|	Материалы.SP28616 КАК Сотрудник_ID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Материалы КАК Материалы
		|ГДЕ
		|	Материалы.ID = &ID";
	КонецЕсли;	
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Материал = Справочники.Материалы.СоздатьЭлемент();
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СписокГрупп = Новый СписокЗначений;

		СоставГруппМатериала(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		Материал.Родитель = ПроверкаГруппМатериалов(СписокГрупп);
		КонецЕсли;
	Материал.ID = ID;
	Материал.Код = ВыборкаДетальныеЗаписи.Код;
	Материал.Наименование = ВыборкаДетальныеЗаписи.Наименование;
	Материал.ПолнНаименование = ВыборкаДетальныеЗаписи.ПолнНаименование;
	Материал.ИмяФайла = СозданиеДокумента(ВыборкаДетальныеЗаписи.ИмяФайла_ID);
	Материал.ЕдиницаИзмерения = СозданиеЕИ(ВыборкаДетальныеЗаписи.ЕИ_ID);
		Если СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "A" Тогда
		Материал.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.A;
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "B" Тогда
		Материал.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.B;	
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "C" Тогда
		Материал.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.C;
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "D" Тогда
		Материал.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.D;
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "А" Тогда
		Материал.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.A;
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "В" Тогда
		Материал.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.B;	
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "С" Тогда
		Материал.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.C;
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "S" Тогда
		Материал.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.S;
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "Z" Тогда
		Материал.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.Z;
		Иначе
		Материал.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.ПустаяСсылка();			
		КонецЕсли;
	Материал.МинОстаток = ВыборкаДетальныеЗаписи.МинОстаток;
	Материал.КратностьУпаковки = ВыборкаДетальныеЗаписи.КратностьУпаковки;
	Материал.СрокПоставки = ВыборкаДетальныеЗаписи.СрокПоставки;
	Материал.ЦенаПлановая = ВыборкаДетальныеЗаписи.ЦенаПлановая;
	Материал.Производитель = СозданиеПроизводителя(ВыборкаДетальныеЗаписи.Производитель_ID); 
	Материал.PartNumber = ВыборкаДетальныеЗаписи.PartNumber; 
	Материал.ПричинаВнесения = ВыборкаДетальныеЗаписи.ПричинаВнесения;
 	Материал.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;
	Материал.Товар = ПрисвоитьТовар(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
	Материал.Проект = СозданиеПроекта(ВыборкаДетальныеЗаписи.Проект_ID);
	Материал.ИнициаторВнесения = СозданиеСотрудника(ВыборкаДетальныеЗаписи.Сотрудник_ID);
	Материал.Записать();
	Материал.ОсновнаяЕдиницаИзмерения = СозданиеОснЕИМатериалов(ВыборкаДетальныеЗаписи.ОснЕИ_ID,Материал.Ссылка); 	
	Материал.Записать(); 
	НовыйСтатус = РегистрыСведений.СтатусыМПЗ.СоздатьМенеджерЗаписи();
	НовыйСтатус.Период = ТекущаяДата();
	НовыйСтатус.МПЗ = Материал.Ссылка;
	    Если ВыборкаДетальныеЗаписи.ПроблеммыЛогистики = 1 Тогда
		НовыйСтатус.Статус = Перечисления.СтатусыМПЗ.ПроблеммыЛогистики;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 0 Тогда
        НовыйСтатус.Статус = Перечисления.СтатусыМПЗ.ПустаяСсылка();
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 1 Тогда
		НовыйСтатус.Статус = Перечисления.СтатусыМПЗ.Основная;	
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 2 Тогда
		НовыйСтатус.Статус = Перечисления.СтатусыМПЗ.Основная;	
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 3 Тогда
		НовыйСтатус.Статус = Перечисления.СтатусыМПЗ.ОНР;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 4 Тогда
		НовыйСтатус.Статус = Перечисления.СтатусыМПЗ.ДоИсчерпанияЗапасов;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 5 Тогда
		НовыйСтатус.Статус = Перечисления.СтатусыМПЗ.Запрещённая;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 6 Тогда
		НовыйСтатус.Статус = Перечисления.СтатусыМПЗ.Основная;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 7 Тогда
		НовыйСтатус.Статус = Перечисления.СтатусыМПЗ.Основная;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 8 Тогда
		НовыйСтатус.Статус = Перечисления.СтатусыМПЗ.Неликвид;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 9 Тогда
		НовыйСтатус.Статус = Перечисления.СтатусыМПЗ.Основная;
		Иначе
		НовыйСтатус.Статус = Перечисления.СтатусыМПЗ.ПустаяСсылка();
		КонецЕсли;
	НовыйСтатус.Записать();
	КонецЦикла;
		Если Материал = Неопределено Тогда
		Возврат(Справочники.Материалы.ПустаяСсылка());
		Иначе
		Возврат(Материал.Ссылка);
		КонецЕсли;		
КонецФункции

Процедура СозданиеАналоговНормРасходов(НормаРасходов)
ЗапросАНР = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	ЗапросАНР.Текст = 
		"ВЫБРАТЬ
		|	АналогиНормРасходов.CODE КАК Код,
		|	АналогиНормРасходов.DESCR КАК Наименование,
		|	АналогиНормРасходов.PARENTEXT,
		|	АналогиНормРасходов.SP20526 КАК Приоритет,
		|	АналогиНормРасходов.SP20527 КАК ВидЭлемента,
		|	АналогиНормРасходов.SP20528 КАК Элемент_ID,
		|	АналогиНормРасходов.ID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.АналогиНормРасходов КАК АналогиНормРасходов
		|ГДЕ
		|	АналогиНормРасходов.PARENTEXT = &PARENTEXT";
	Иначе
	ЗапросАНР.Текст = 
		"ВЫБРАТЬ
		|	АналогиНормРасходов.CODE КАК Код,
		|	АналогиНормРасходов.DESCR КАК Наименование,
		|	АналогиНормРасходов.PARENTEXT,
		|	АналогиНормРасходов.SP20526 КАК Приоритет,
		|	АналогиНормРасходов.SP20527 КАК ВидЭлемента,
		|	АналогиНормРасходов.SP20528 КАК Элемент_ID,
		|	АналогиНормРасходов.ID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.АналогиНормРасходов КАК АналогиНормРасходов
		|ГДЕ
		|	АналогиНормРасходов.PARENTEXT = &PARENTEXT";
	КонецЕсли;
ЗапросАНР.УстановитьПараметр("PARENTEXT",НормаРасходов.ID);
Результат = ЗапросАНР.Выполнить();
ВыборкаДетальныеЗаписиАНР = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписиАНР.Следующий() Цикл			
	АНР = Справочники.АналогиНормРасходов.СоздатьЭлемент();
	АНР.ID = ВыборкаДетальныеЗаписиАНР.ID;
	АНР.Владелец = НормаРасходов;
	АНР.Наименование = ВыборкаДетальныеЗаписиАНР.Наименование;
	АНР.Приоритет = ВыборкаДетальныеЗаписиАНР.Приоритет;
	Элемент_ID = СокрЛП(ВыборкаДетальныеЗаписиАНР.Элемент_ID);
	Элемент_ID = Сред(Элемент_ID,Найти(Элемент_ID," "));	
		Если СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JSW" Тогда
		АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Деталь;
		АНР.Элемент = СозданиеНоменклатуры(Элемент_ID);
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AJ0" Тогда
		АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Узел;
		АНР.Элемент = СозданиеНоменклатуры(Элемент_ID);				
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JD0" Тогда
		АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор;
		АНР.Элемент = СозданиеНоменклатуры(Элемент_ID);
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AIY" Тогда
		АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Материал;
		АНР.Элемент = СозданиеМатериала(Элемент_ID);
		Иначе
		Сообщить(СокрЛП(ВыборкаДетальныеЗаписиАНР.Наименование)+" - неверный вид элемента у аналога в базе 1С7.7!");
		КонецЕсли;	
	АНР.Записать();
	ТаблицаПД = ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписиАНР.ID,20529);//норма
		Для каждого ТЧ Из ТаблицаПД Цикл
		НоваяНорма = РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
		НоваяНорма.Период = ТЧ.Дата;
		НоваяНорма.НормаРасходов = АНР.Ссылка;
		НоваяНорма.Норма = ?(АНР.Элемент.ОсновнаяЕдиницаИзмерения.Коэффициент > 0,ТЧ.Данные/АНР.Элемент.ОсновнаяЕдиницаИзмерения.Коэффициент,ТЧ.Данные);			
		НоваяНорма.Записать(Истина);
		КонецЦикла;			
	КонецЦикла;
КонецПроцедуры 

Процедура СозданиеНормРасходов(Спецификация,ОсновнаяСпецификацияID)
ЗапросНР = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	ЗапросНР.Текст = 
		"ВЫБРАТЬ
		|	НормыРасходов.ID,
		|	НормыРасходов.PARENTID,
		|	НормыРасходов.PARENTEXT,
		|	НормыРасходов.CODE,
		|	НормыРасходов.DESCR КАК Наименование,
		|	НормыРасходов.SP4116 КАК ВидЭлемента,
		|	НормыРасходов.SP4110 КАК Элемент_ID,
		|	НормыРасходов.SP20473,
		|	НормыРасходов.SP24886 КАК Позиция,
		|	НормыРасходов.SP24887 КАК Примечание
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.НормыРасходов КАК НормыРасходов
		|ГДЕ
		|	НормыРасходов.PARENTEXT = &PARENTEXT
		|	И НормыРасходов.PARENTID = &PARENTID";
	Иначе
	ЗапросНР.Текст = 
		"ВЫБРАТЬ
		|	НормыРасходов.ID,
		|	НормыРасходов.PARENTID,
		|	НормыРасходов.PARENTEXT,
		|	НормыРасходов.CODE,
		|	НормыРасходов.DESCR КАК Наименование,
		|	НормыРасходов.SP4116 КАК ВидЭлемента,
		|	НормыРасходов.SP4110 КАК Элемент_ID,
		|	НормыРасходов.SP20473,
		|	НормыРасходов.SP24886 КАК Позиция,
		|	НормыРасходов.SP24887 КАК Примечание
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.НормыРасходов КАК НормыРасходов
		|ГДЕ
		|	НормыРасходов.PARENTEXT = &PARENTEXT
		|	И НормыРасходов.PARENTID = &PARENTID";
	КонецЕсли;
ЗапросНР.УстановитьПараметр("PARENTEXT",Спецификация.ID);
ЗапросНР.УстановитьПараметр("PARENTID",ОсновнаяСпецификацияID);
Результат = ЗапросНР.Выполнить();
ВыборкаДетальныеЗаписиНР = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписиНР.Следующий() Цикл
		Если СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIZ" Тогда		
		Продолжить;
		КонецЕсли;			
	НР = Справочники.НормыРасходов.СоздатьЭлемент();
	НР.ID = ВыборкаДетальныеЗаписиНР.ID;
	НР.Владелец = Спецификация;
	НР.Позиция  = ВыборкаДетальныеЗаписиНР.Позиция;
	НР.Наименование = ВыборкаДетальныеЗаписиНР.Наименование;
	НР.Примечание = ВыборкаДетальныеЗаписиНР.Примечание;
	Элемент_ID = СокрЛП(ВыборкаДетальныеЗаписиНР.Элемент_ID);
	Элемент_ID = Сред(Элемент_ID,Найти(Элемент_ID," "));	
		Если СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JSW" Тогда
		НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Деталь;
		НР.Элемент = СозданиеНоменклатуры(Элемент_ID);
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AJ0" Тогда
		НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Узел;
		НР.Элемент = СозданиеНоменклатуры(Элемент_ID);
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "J8Z" Тогда
		НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа;
		НР.Элемент = СозданиеНоменклатуры(Элемент_ID);				
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JD0" Тогда
		НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор;
		НР.Элемент = СозданиеНоменклатуры(Элемент_ID);
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIY" Тогда
		НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Материал;
		НР.Элемент = СозданиеМатериала(Элемент_ID);
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JEL" Тогда
		НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Документ;						
		НР.Элемент = СозданиеДокумента(Элемент_ID);
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JEM" Тогда
		НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Программа;
		НР.Элемент = СозданиеДокумента(Элемент_ID);
		//ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIZ" Тогда
		//НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.ТехОперация;
		//НР.Элемент = СозданиеТехОперации(Элемент_ID);
		ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JK6" Тогда
		НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.ТехОснастка;				
		НР.Элемент = СозданиеТехОснастки(Элемент_ID);
		КонецЕсли;	
	НР.Записать();
	ТаблицаПД = ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписиНР.ID,4111);//норма
		Для каждого ТЧ Из ТаблицаПД Цикл
		НоваяНорма = РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
		НоваяНорма.Период = ТЧ.Дата;
		НоваяНорма.НормаРасходов = НР.Ссылка;
		НоваяНорма.Норма = ТЧ.Данные;			
		НоваяНорма.Записать(Истина);
		КонецЦикла;
	СозданиеАналоговНормРасходов(НР.Ссылка);
	КонецЦикла;	
КонецПроцедуры

Функция СозданиеНоменклатуры(ID) Экспорт
Спецификация = Справочники.Номенклатура.НайтиПоРеквизиту("ID",ID);
	Если Не Спецификация.Пустая() Тогда
	Возврат(Спецификация.Ссылка);
	КонецЕсли;  
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.ID,
		|	Номенклатура.DESCR КАК Наименование,
		|	Номенклатура.ISMARK,
		|	Номенклатура.PARENTID,
		|	Номенклатура.SP25384 КАК Статус,
		|	Номенклатура.SP4090 КАК ПолнНаименование,
		|	Номенклатура.SP28876 КАК Проект_ID,
		//|	Номенклатура.SP27665 КАК УсловныеПриборы,
		|	Номенклатура.SP28516 КАК Линейка_ID,
		|	Номенклатура.SP4093 КАК ЕИ_ID,
		|	Номенклатура.SP27332 КАК ГМ_ID,
		|	Номенклатура.SP27132 КАК Канбан_ID,
		|	Номенклатура.SP27133 КАК КолКанбан,
		|	Номенклатура.SP27134 КАК КолВКанбане,
		|	Номенклатура.SP18978 КАК ОсновнаяСпецификация,
		|	Номенклатура.SP18977 КАК ОснЕИ_ID,
		|	Номенклатура.SP20469 КАК Комментарий,
		|	Номенклатура.SP27836 КАК ДатаПрисвоения
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ID = &ID";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.ID,
		|	Номенклатура.DESCR КАК Наименование,
		|	Номенклатура.ISMARK,
		|	Номенклатура.PARENTID,
		|	Номенклатура.SP25384 КАК Статус,
		|	Номенклатура.SP4090 КАК ПолнНаименование,
		|	Номенклатура.SP28621 КАК Проект_ID,
		//|	Номенклатура.SP27496 КАК УсловныеПриборы,
		|	Номенклатура.SP28307 КАК Линейка_ID,
		|	Номенклатура.SP4093 КАК ЕИ_ID,
		|	Номенклатура.SP27151 КАК ГМ_ID,
		|	Номенклатура.SP27031 КАК Канбан_ID,
		|	Номенклатура.SP27032 КАК КолКанбан,
		|	Номенклатура.SP27033 КАК КолВКанбане,
		|	Номенклатура.SP18978 КАК ОсновнаяСпецификация,
		|	Номенклатура.SP18977 КАК ОснЕИ_ID,
		|	Номенклатура.SP20469 КАК Комментарий,
		|	Номенклатура.SP27667 КАК ДатаПрисвоения
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.ID = &ID";
	КонецЕсли;
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Спецификация = Справочники.Номенклатура.СоздатьЭлемент();		
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СписокГрупп = Новый СписокЗначений;

		СоставГруппНоменклатуры(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		Спецификация.Родитель = ПроверкаГруппНоменклатуры(СписокГрупп);
		КонецЕсли;
	Спецификация.ID = ID;				
	Спецификация.Наименование = ВыборкаДетальныеЗаписи.Наименование;
	Спецификация.ПолнНаименование = ВыборкаДетальныеЗаписи.ПолнНаименование;
	Спецификация.ДатаСозданияСпецификации = ПолучитьДатуСозданияСпецификации(ВыборкаДетальныеЗаписи.ОсновнаяСпецификация);
	//Спецификация.УсловныеПриборы = ВыборкаДетальныеЗаписи.УсловныеПриборы;
	Спецификация.Линейка = СозданиеЛинейки(ВыборкаДетальныеЗаписи.Линейка_ID);
	Спецификация.КолКанбан = ВыборкаДетальныеЗаписи.КолКанбан;
	Спецификация.КолВКанбане = ВыборкаДетальныеЗаписи.КолВКанбане;
	Спецификация.ЕдиницаИзмерения = СозданиеЕИ(ВыборкаДетальныеЗаписи.ЕИ_ID);
	Спецификация.ГруппаПоМощности = СозданиеГМ(ВыборкаДетальныеЗаписи.ГМ_ID);
	Спецификация.Канбан = СозданиеКанбана(ВыборкаДетальныеЗаписи.Канбан_ID);
	Спецификация.Проект = СозданиеПроекта(ВыборкаДетальныеЗаписи.Проект_ID);
	Спецификация.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;			
	Спецификация.Записать();
		Если ВыборкаДетальныеЗаписи.ДатаПрисвоения <> Дата(1,1,1) Тогда
		ДатаПрисвоения = ВыборкаДетальныеЗаписи.ДатаПрисвоения;
		Иначе
		ДатаПрисвоения = ТекущаяДата();
		КонецЕсли; 
			Если ВыборкаДетальныеЗаписи.Статус > 0 Тогда
			НовыйСтатус = РегистрыСведений.СтатусыМПЗ.СоздатьМенеджерЗаписи();
			НовыйСтатус.Период = ДатаПрисвоения;
			НовыйСтатус.МПЗ = Спецификация.Ссылка;
                Если ВыборкаДетальныеЗаписи.Статус = 0 Тогда
				НовыйСтатус.Статус = Перечисления.СтатусыСпецификаций.ПустаяСсылка();
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 1 Тогда
				НовыйСтатус.Статус = Перечисления.СтатусыСпецификаций.Серийная;	
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 2 Тогда
				НовыйСтатус.Статус = Перечисления.СтатусыСпецификаций.Серийная;	
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 3 Тогда
				НовыйСтатус.Статус = Перечисления.СтатусыСпецификаций.ОНР;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 4 Тогда
				НовыйСтатус.Статус = Перечисления.СтатусыСпецификаций.ДоИсчерпанияЗапасов;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 5 Тогда
				НовыйСтатус.Статус = Перечисления.СтатусыСпецификаций.Запрещённая;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 6 Тогда
				НовыйСтатус.Статус = Перечисления.СтатусыСпецификаций.Опытная;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 7 Тогда
				НовыйСтатус.Статус = Перечисления.СтатусыСпецификаций.Опытная1;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 9 Тогда
				НовыйСтатус.Статус = Перечисления.СтатусыСпецификаций.Предсерийная;
				Иначе
	            НовыйСтатус.Статус = Перечисления.СтатусыСпецификаций.ПустаяСсылка();
				КонецЕсли;
			НовыйСтатус.Записать();				
			КонецЕсли;	
	Спецификация.ОсновнаяЕдиницаИзмерения = СозданиеОснЕИ(ВыборкаДетальныеЗаписи.ОснЕИ_ID,Спецификация.Ссылка);	
	Спецификация.Записать();
	СозданиеНормРасходов(Спецификация.Ссылка,ВыборкаДетальныеЗаписи.ОсновнаяСпецификация);
	Сообщить("Создана спецификация: "+Спецификация.Наименование);
	Возврат(Спецификация.Ссылка);	
	КонецЦикла;	
Возврат(Справочники.Номенклатура.ПустаяСсылка());	
КонецФункции	

Процедура СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа,Параметр,Значение) Экспорт
	Если ЗначениеЗаполнено(Значение) Тогда
	ПТГ = РегистрыСведений.ПараметрыТоварныхГрупп.СоздатьМенеджерЗаписи();
	ПТГ.ТоварнаяГруппа = ТоварнаяГруппа;
	ПТГ.ПараметрТоварнойГруппы = ПланыВидовХарактеристик.ПараметрыТоварныхГрупп.НайтиПоНаименованию(Параметр);
	ПТГ.ЗначениеПараметра = Значение;
	ПТГ.Записать(Истина);
	КонецЕсли; 	
КонецПроцедуры

Функция СозданиеТоварнойГруппы(ID) Экспорт
ТоварнаяГруппа = Справочники.ТоварныеГруппы.НайтиПоРеквизиту("ID",ID);
	Если Не ТоварнаяГруппа.Пустая() Тогда
	Возврат(ТоварнаяГруппа.Ссылка);
	КонецЕсли; 
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварныеГруппы.ID,
		|	ТоварныеГруппы.DESCR КАК Наименование,
		|	ТоварныеГруппы.SP26487 КАК Параметр1,
		|	ТоварныеГруппы.SP26488 КАК Параметр2,
		|	ТоварныеГруппы.SP26489 КАК Параметр3,
		|	ТоварныеГруппы.SP26490 КАК Параметр4,
		|	ТоварныеГруппы.SP26491 КАК Параметр5,
		|	ТоварныеГруппы.SP26492 КАК Параметр6,
		|	ТоварныеГруппы.SP26493 КАК Параметр7,
		|	ТоварныеГруппы.SP26494 КАК Параметр8,
		|	ТоварныеГруппы.SP26495 КАК Параметр9,
		|	ТоварныеГруппы.SP26496 КАК Параметр10,
		|	ТоварныеГруппы.SP26497 КАК Параметр11,
		|	ТоварныеГруппы.SP26498 КАК Параметр12,
		|	ТоварныеГруппы.SP26499 КАК Параметр13,
		|	ТоварныеГруппы.SP27127 КАК Параметр14,
		|	ТоварныеГруппы.SP27128 КАК Параметр15,
		|	ТоварныеГруппы.SP27232 КАК Параметр16,
		|	ТоварныеГруппы.SP27596 КАК Параметр17
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварныеГруппы КАК ТоварныеГруппы
		|ГДЕ
		|	ТоварныеГруппы.ID = &ID";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварныеГруппы.ID,
		|	ТоварныеГруппы.DESCR КАК Наименование,
		|	ТоварныеГруппы.SP26460 КАК Параметр1,
		|	ТоварныеГруппы.SP26461 КАК Параметр2,
		|	ТоварныеГруппы.SP26462 КАК Параметр3,
		|	ТоварныеГруппы.SP26463 КАК Параметр4,
		|	ТоварныеГруппы.SP26464 КАК Параметр5,
		|	ТоварныеГруппы.SP26465 КАК Параметр6,
		|	ТоварныеГруппы.SP26466 КАК Параметр7,
		|	ТоварныеГруппы.SP26467 КАК Параметр8,
		|	ТоварныеГруппы.SP26468 КАК Параметр9,
		|	ТоварныеГруппы.SP26469 КАК Параметр10,
		|	ТоварныеГруппы.SP26470 КАК Параметр11,
		|	ТоварныеГруппы.SP26471 КАК Параметр12,
		|	ТоварныеГруппы.SP26472 КАК Параметр13,
		|	ТоварныеГруппы.SP27023 КАК Параметр14,
		|	ТоварныеГруппы.SP27024 КАК Параметр15,
		|	ТоварныеГруппы.SP27103 КАК Параметр16,
		|	ТоварныеГруппы.SP27430 КАК Параметр17
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварныеГруппы КАК ТоварныеГруппы
		|ГДЕ
		|	ТоварныеГруппы.ID = &ID";
	КонецЕсли;
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТоварнаяГруппа = Справочники.ТоварныеГруппы.СоздатьЭлемент();
	ТоварнаяГруппа.ID = ВыборкаДетальныеЗаписи.ID;				
	ТоварнаяГруппа.Наименование = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
	ТоварнаяГруппа.Записать();
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр1",ВыборкаДетальныеЗаписи.Параметр1);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр2",ВыборкаДетальныеЗаписи.Параметр2);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр3",ВыборкаДетальныеЗаписи.Параметр3);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр4",ВыборкаДетальныеЗаписи.Параметр4);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр5",ВыборкаДетальныеЗаписи.Параметр5);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр6",ВыборкаДетальныеЗаписи.Параметр6);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр7",ВыборкаДетальныеЗаписи.Параметр7);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр8",ВыборкаДетальныеЗаписи.Параметр8);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр9",ВыборкаДетальныеЗаписи.Параметр9);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр10",ВыборкаДетальныеЗаписи.Параметр10);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр11",ВыборкаДетальныеЗаписи.Параметр11);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр12",ВыборкаДетальныеЗаписи.Параметр12);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр13",ВыборкаДетальныеЗаписи.Параметр13);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр14",ВыборкаДетальныеЗаписи.Параметр14);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр15",ВыборкаДетальныеЗаписи.Параметр15);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр16",ВыборкаДетальныеЗаписи.Параметр16);
	СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр17",ВыборкаДетальныеЗаписи.Параметр17);	
	Возврат(ТоварнаяГруппа.Ссылка);
	КонецЦикла;	
Возврат(Справочники.ТоварныеГруппы.ПустаяСсылка());	
КонецФункции

Функция СозданиеТовара(Код) Экспорт
Товар = Справочники.Товары.НайтиПоКоду(Число(Код));
	Если Не Товар.Пустая() Тогда
	Возврат(Товар.Ссылка);
	КонецЕсли;  
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыПриборы.ID,
		|	ТоварыПриборы.DESCR КАК Наименование,
		|	ТоварыПриборы.SP25097 КАК КодТовара,
		|	ТоварыПриборы.SP25482 КАК ПолнНаименование,
		|	ТоварыПриборы.SP26485 КАК ТоварнаяГруппа_ID,
		|	ТоварыПриборы.SP28396 КАК КодДанфосс,
		|	ТоварыПриборы.SP28690 КАК Исполнение,
		|	ТоварыПриборы.SP28708 КАК Стандартный,
		|	ТоварыПриборы.PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварыПриборы КАК ТоварыПриборы
		|ГДЕ
		|	ТоварыПриборы.SP25097 = &Код";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыПриборы.ID,
		|	ТоварыПриборы.DESCR КАК Наименование,
		|	ТоварыПриборы.SP25097 КАК КодТовара,
		|	ТоварыПриборы.SP25482 КАК ПолнНаименование,
		|	ТоварыПриборы.SP26491 КАК ТоварнаяГруппа_ID,
		|	ТоварыПриборы.SP28190 КАК КодДанфосс,
		|	ТоварыПриборы.SP28480 КАК Исполнение,
		|	ТоварыПриборы.SP28497 КАК Стандартный,
		|	ТоварыПриборы.PARENTID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварыПриборы КАК ТоварыПриборы
		|ГДЕ
		|	ТоварыПриборы.SP25097 = &Код";
	КонецЕсли;
Запрос.УстановитьПараметр("Код",Код);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Товар = Справочники.Товары.СоздатьЭлемент();		
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СписокГрупп = Новый СписокЗначений;

		СоставГруппТовара(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		Товар.Родитель = ПроверкаГруппТоваров(СписокГрупп);
		КонецЕсли;	
	Товар.Код = ВыборкаДетальныеЗаписи.КодТовара;			
	Товар.Наименование = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
	Товар.ПолнНаименование = ВыборкаДетальныеЗаписи.ПолнНаименование;
	Товар.Исполнение = ВыборкаДетальныеЗаписи.Исполнение;
	Товар.КодДанфосс = ВыборкаДетальныеЗаписи.КодДанфосс;
	Товар.ТоварнаяГруппа = СозданиеТоварнойГруппы(ВыборкаДетальныеЗаписи.ТоварнаяГруппа_ID);
	Товар.Стандартный = ?(ВыборкаДетальныеЗаписи.Стандартный = 1,Истина,Ложь);
	Товар.Записать();
	СозданиеДХН(ВыборкаДетальныеЗаписи.ID,Товар.Ссылка);	
	Возврат(Товар.Ссылка);
	КонецЦикла;	
Возврат(Справочники.Товары.ПустаяСсылка());	
КонецФункции

Функция СозданиеТовараДатчика(Код) Экспорт
Товар = Справочники.Товары.НайтиПоКоду(Число(Код));
	Если Не Товар.Пустая() Тогда
	Возврат(Товар.Ссылка);
	КонецЕсли;  
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыДатчики.ID,
		|	ТоварыДатчики.DESCR КАК Наименование,
		|	ТоварыДатчики.CODE КАК КодТовара,
		|	ТоварыДатчики.SP28709 КАК Стандартный,
		|	ТоварыДатчики.PARENTID,
		|	ТоварыДатчики.SP27459 КАК ВидДатчика
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварыДатчики КАК ТоварыДатчики
		|ГДЕ
		|	ТоварыДатчики.CODE = &Код";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыДатчики.ID,
		|	ТоварыДатчики.DESCR КАК Наименование,
		|	ТоварыДатчики.CODE КАК КодТовара,
		|	ТоварыДатчики.SP28498 КАК Стандартный,
		|	ТоварыДатчики.PARENTID,
		|	ТоварыДатчики.SP27309 КАК ВидДатчика
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварыДатчики КАК ТоварыДатчики
		|ГДЕ
		|	ТоварыДатчики.CODE = &Код";
	КонецЕсли;
Запрос.УстановитьПараметр("Код",Код);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Товар = Справочники.Товары.СоздатьЭлемент();		
		Если ВыборкаДетальныеЗаписи.PARENTID <> "" Тогда
		СписокГрупп = Новый СписокЗначений;

		СоставГруппТовараДатчика(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
		Товар.Родитель = ПроверкаГруппТоваров(СписокГрупп);
		КонецЕсли;	
	Товар.Код = ВыборкаДетальныеЗаписи.КодТовара;
	Товар.ПолнНаименование = ПолучитьВидДатчика(ВыборкаДетальныеЗаписи.ВидДатчика);	
	Товар.Наименование = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
	Товар.Стандартный = ?(ВыборкаДетальныеЗаписи.Стандартный = 1,Истина,Ложь);
	Товар.Записать();	
	Возврат(Товар.Ссылка);
	КонецЦикла;	
Возврат(Справочники.Товары.ПустаяСсылка());	
КонецФункции

Функция СозданиеПроекта(ID) Экспорт
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Проекты.ID,
		|	Проекты.CODE КАК Код,
		|	Проекты.DESCR КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Проекты КАК Проекты	
		|ГДЕ
		|	Проекты.ID = &ID";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Проекты.ID,
		|	Проекты.CODE КАК Код,
		|	Проекты.DESCR КАК Наименование
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Проекты КАК Проекты	
		|ГДЕ
		|	Проекты.ID = &ID";
	КонецЕсли;	
Запрос.УстановитьПараметр("ID",ID);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Проект = Справочники.Проекты.НайтиПоКоду(ВыборкаДетальныеЗаписи.Код);
		Если Проект.Пустая() Тогда
		Проект = Справочники.Проекты.СоздатьЭлемент();
		Проект.Код = ВыборкаДетальныеЗаписи.Код;
		Проект.Наименование = ВыборкаДетальныеЗаписи.Наименование;
		Проект.Записать();
		КонецЕсли;	
	Возврат(Проект.Ссылка);
	КонецЦикла;
Возврат(Справочники.Проекты.ПустаяСсылка());	
КонецФункции

Функция ПроверитьИзменениеТоварныхГрупп()
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварныеГруппы.ID,
		|	ТоварныеГруппы.DESCR КАК Наименование,
		|	ТоварныеГруппы.SP26487 КАК Параметр1,
		|	ТоварныеГруппы.SP26488 КАК Параметр2,
		|	ТоварныеГруппы.SP26489 КАК Параметр3,
		|	ТоварныеГруппы.SP26490 КАК Параметр4,
		|	ТоварныеГруппы.SP26491 КАК Параметр5,
		|	ТоварныеГруппы.SP26492 КАК Параметр6,
		|	ТоварныеГруппы.SP26493 КАК Параметр7,
		|	ТоварныеГруппы.SP26494 КАК Параметр8,
		|	ТоварныеГруппы.SP26495 КАК Параметр9,
		|	ТоварныеГруппы.SP26496 КАК Параметр10,
		|	ТоварныеГруппы.SP26497 КАК Параметр11,
		|	ТоварныеГруппы.SP26498 КАК Параметр12,
		|	ТоварныеГруппы.SP26499 КАК Параметр13,
		|	ТоварныеГруппы.SP27127 КАК Параметр14,
		|	ТоварныеГруппы.SP27128 КАК Параметр15,
		|	ТоварныеГруппы.SP27232 КАК Параметр16,
		|	ТоварныеГруппы.SP27596 КАК Параметр17,
		|	ТоварныеГруппы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварныеГруппы КАК ТоварныеГруппы";
	Запрос.Текст = Запрос.Текст + " ГДЕ ТоварныеГруппы.флИзменение = 1";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварныеГруппы.ID,
		|	ТоварныеГруппы.DESCR КАК Наименование,
		|	ТоварныеГруппы.SP26460 КАК Параметр1,
		|	ТоварныеГруппы.SP26461 КАК Параметр2,
		|	ТоварныеГруппы.SP26462 КАК Параметр3,
		|	ТоварныеГруппы.SP26463 КАК Параметр4,
		|	ТоварныеГруппы.SP26464 КАК Параметр5,
		|	ТоварныеГруппы.SP26465 КАК Параметр6,
		|	ТоварныеГруппы.SP26466 КАК Параметр7,
		|	ТоварныеГруппы.SP26467 КАК Параметр8,
		|	ТоварныеГруппы.SP26468 КАК Параметр9,
		|	ТоварныеГруппы.SP26469 КАК Параметр10,
		|	ТоварныеГруппы.SP26470 КАК Параметр11,
		|	ТоварныеГруппы.SP26471 КАК Параметр12,
		|	ТоварныеГруппы.SP26472 КАК Параметр13,
		|	ТоварныеГруппы.SP27023 КАК Параметр14,
		|	ТоварныеГруппы.SP27024 КАК Параметр15,
		|	ТоварныеГруппы.SP27103 КАК Параметр16,
		|	ТоварныеГруппы.SP27430 КАК Параметр17,
		|	ТоварныеГруппы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварныеГруппы КАК ТоварныеГруппы";
	Запрос.Текст = Запрос.Текст + " ГДЕ ТоварныеГруппы.флИзменение = 1";
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НайденныйЭлемент = Справочники.ТоварныеГруппы.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда					
			ТоварнаяГруппа = НайденныйЭлемент.ПолучитьОбъект();
			ТоварнаяГруппа.Наименование = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			ТоварнаяГруппа.Записать();
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр1",ВыборкаДетальныеЗаписи.Параметр1);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр2",ВыборкаДетальныеЗаписи.Параметр2);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр3",ВыборкаДетальныеЗаписи.Параметр3);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр4",ВыборкаДетальныеЗаписи.Параметр4);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр5",ВыборкаДетальныеЗаписи.Параметр5);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр6",ВыборкаДетальныеЗаписи.Параметр6);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр7",ВыборкаДетальныеЗаписи.Параметр7);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр8",ВыборкаДетальныеЗаписи.Параметр8);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр9",ВыборкаДетальныеЗаписи.Параметр9);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр10",ВыборкаДетальныеЗаписи.Параметр10);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр11",ВыборкаДетальныеЗаписи.Параметр11);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр12",ВыборкаДетальныеЗаписи.Параметр12);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр13",ВыборкаДетальныеЗаписи.Параметр13);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр14",ВыборкаДетальныеЗаписи.Параметр14);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр15",ВыборкаДетальныеЗаписи.Параметр15);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр16",ВыборкаДетальныеЗаписи.Параметр16);
			СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр17",ВыборкаДетальныеЗаписи.Параметр17); 					
			КонецЕсли;
		СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка);
		Исключение

		КонецПопытки; 
	КонецЦикла;	
Возврат Истина;	
КонецФункции

Функция ПроверитьИзменениеТоваров()
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТоварыПриборы.ID,
		|	ТоварыПриборы.DESCR КАК Наименование,
		|	ТоварыПриборы.SP25097 КАК КодТовара,
		|	ТоварыПриборы.SP25482 КАК ПолнНаименование,
		|	ТоварыПриборы.SP26485 КАК ТоварнаяГруппа_ID,
		|	ТоварыПриборы.SP28396 КАК КодДанфосс,
		|	ТоварыПриборы.SP28690 КАК Исполнение,
		|	ТоварыПриборы.SP28708 КАК Стандартный,
		|	ТоварыПриборы.PARENTID,
		|	ТоварыПриборы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварыПриборы КАК ТоварыПриборы";
	Запрос.Текст = Запрос.Текст + " ГДЕ ТоварыПриборы.флИзменение = 1";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТоварыПриборы.ID,
		|	ТоварыПриборы.DESCR КАК Наименование,
		|	ТоварыПриборы.SP25097 КАК КодТовара,
		|	ТоварыПриборы.SP25482 КАК ПолнНаименование,
		|	ТоварыПриборы.SP26491 КАК ТоварнаяГруппа_ID,
		|	ТоварыПриборы.SP28190 КАК КодДанфосс,
		|	ТоварыПриборы.SP28480 КАК Исполнение,
		|	ТоварыПриборы.SP28497 КАК Стандартный,
		|	ТоварыПриборы.PARENTID,
		|	ТоварыПриборы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварыПриборы КАК ТоварыПриборы";
	Запрос.Текст = Запрос.Текст + " ГДЕ ТоварыПриборы.флИзменение = 1";	
	КонецЕсли; 
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НайденныйЭлемент = Справочники.Товары.НайтиПоКоду(Число(ВыборкаДетальныеЗаписи.КодТовара));
			Если Не НайденныйЭлемент.Пустая() Тогда
			//СписокГрупп = Новый СписокЗначений;

			//СоставГруппТовара(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
			//НайденнаяГруппа = ПроверкаГруппТоваров(СписокГрупп);					
			Товар = НайденныйЭлемент.ПолучитьОбъект();
			Товар.Код = Число(ВыборкаДетальныеЗаписи.КодТовара);
			//Товар.Родитель = НайденнаяГруппа;
			Товар.Наименование = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
				Если Не Товар.ЭтоГруппа Тогда
				Товар.ПолнНаименование = ВыборкаДетальныеЗаписи.ПолнНаименование;
				Товар.Исполнение = ВыборкаДетальныеЗаписи.Исполнение;
				Товар.КодДанфосс = ВыборкаДетальныеЗаписи.КодДанфосс;
				Товар.ТоварнаяГруппа = СозданиеТоварнойГруппы(ВыборкаДетальныеЗаписи.ТоварнаяГруппа_ID);
				Товар.Стандартный = ?(ВыборкаДетальныеЗаписи.Стандартный = 1,Истина,Ложь);
				Товар.Записать();
				СозданиеДХН(ВыборкаДетальныеЗаписи.ID,Товар.Ссылка);
				Иначе
				Товар.Записать();
				КонецЕсли;							
			Иначе
			Товар = СозданиеТовара(ВыборкаДетальныеЗаписи.КодТовара); 					
			КонецЕсли;
		СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка); 
		Исключение

		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

Функция ПроверитьИзменениеДокументов()
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Документы.ID,
		|	Документы.PARENTID,
		|	Документы.CODE КАК Код,
		|	Документы.DESCR КАК Наименование,
		|	Документы.SP25119 КАК ВидДокумента,
		|	Документы.SP25120 КАК ИмяФайла,
		|	Документы.SP27963 КАК Извещение,
		|	Документы.SP25197 КАК Комментарий,
		|	Документы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Документы КАК Документы";
	Запрос.Текст = Запрос.Текст + " ГДЕ Документы.флИзменение = 1";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Документы.ID,
		|	Документы.PARENTID,
		|	Документы.CODE КАК Код,
		|	Документы.DESCR КАК Наименование,
		|	Документы.SP25119 КАК ВидДокумента,
		|	Документы.SP25120 КАК ИмяФайла,
		|	Документы.SP27793 КАК Извещение,
		|	Документы.SP25197 КАК Комментарий,
		|	Документы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Документы КАК Документы";
	Запрос.Текст = Запрос.Текст + " ГДЕ Документы.флИзменение = 1";	
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НайденныйЭлемент = Справочники.Документация.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			СписокГрупп = Новый СписокЗначений;

			СоставГруппДокумента(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
			НайденнаяГруппа = ПроверкаГруппДокументов(СписокГрупп);					
			Док = НайденныйЭлемент.ПолучитьОбъект();
			Док.Код = ВыборкаДетальныеЗаписи.Код;
			Док.Родитель = НайденнаяГруппа;
			Док.Наименование = ВыборкаДетальныеЗаписи.Наименование;
				Если Не Док.ЭтоГруппа Тогда
				Док.ИмяФайла = ВыборкаДетальныеЗаписи.ИмяФайла;
				Док.Извещение = ВыборкаДетальныеЗаписи.Извещение;
				Док.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;
				КонецЕсли;
			Док.Записать();					
			КонецЕсли;
		СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка);
		Исключение

		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

Функция ПроверитьИзменениеМатериалов()
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Материалы.ID,
		|	Материалы.PARENTID,
		|	Материалы.CODE КАК Код,
		|	Материалы.DESCR КАК Наименование,
		|	Материалы.SP20454 КАК Артикул,
		|	Материалы.SP2824 КАК ЕИ_ID,
		|	Материалы.SP20455 КАК МинОстаток,
		|	Материалы.SP18976 КАК ОснЕИ_ID,
		|	Материалы.SP27971 КАК ЦенаПлановая,
		|	Материалы.SP25242 КАК ИмяФайла_ID,
		|	Материалы.SP25313 КАК Статус,
		|	Материалы.SP28808 КАК ПроблеммыЛогистики,
		|	Материалы.SP25600 КАК СрокПоставки,
		|	Материалы.SP14756 КАК ПолнНаименование,
		|	Материалы.SP20456 КАК Комментарий,
		|	Материалы.SP28618 КАК КратностьУпаковки,
		|	Материалы.SP28874 КАК ПричинаВнесения,
		|	Материалы.SP28870 КАК Проект_ID,
		|	Материалы.SP28871 КАК PartNumber,
		|	Материалы.SP28872 КАК Производитель_ID,
		|	Материалы.SP28873 КАК Сотрудник_ID,
		|	Материалы.Ссылка,
		|	Материалы.ISFOLDER
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Материалы КАК Материалы";
	Запрос.Текст = Запрос.Текст + " ГДЕ Материалы.флИзменение = 1";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Материалы.ID,
		|	Материалы.PARENTID,
		|	Материалы.CODE КАК Код,
		|	Материалы.DESCR КАК Наименование,
		|	Материалы.SP20454 КАК Артикул,
		|	Материалы.SP2824 КАК ЕИ_ID,
		|	Материалы.SP20455 КАК МинОстаток,
		|	Материалы.SP18976 КАК ОснЕИ_ID,
		|	Материалы.SP27801 КАК ЦенаПлановая,
		|	Материалы.SP25242 КАК ИмяФайла_ID,
		|	Материалы.SP25313 КАК Статус,
		|	Материалы.SP28564 КАК ПроблеммыЛогистики,
		|	Материалы.SP25600 КАК СрокПоставки,
		|	Материалы.SP14756 КАК ПолнНаименование,
		|	Материалы.SP20456 КАК Комментарий,
		|	Материалы.SP28409 КАК КратностьУпаковки,
		|	Материалы.SP28617 КАК ПричинаВнесения,
		|	Материалы.SP28613 КАК Проект_ID,
		|	Материалы.SP28614 КАК PartNumber,
		|	Материалы.SP28615 КАК Производитель_ID,
		|	Материалы.SP28616 КАК Сотрудник_ID,
		|	Материалы.Ссылка,
		|	Материалы.ISFOLDER
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Материалы КАК Материалы";
	Запрос.Текст = Запрос.Текст + " ГДЕ Материалы.флИзменение = 1";
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НайденныйЭлемент = Справочники.Материалы.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			СписокГрупп = Новый СписокЗначений;

			СоставГруппМатериала(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
			НайденнаяГруппа = ПроверкаГруппМатериалов(СписокГрупп);					
			Мат = НайденныйЭлемент.ПолучитьОбъект();
			Мат.Родитель = НайденнаяГруппа;
			Мат.Код = ВыборкаДетальныеЗаписи.Код;
			Мат.Наименование = ВыборкаДетальныеЗаписи.Наименование;
				Если Не Мат.ЭтоГруппа Тогда
				Мат.ПолнНаименование = ВыборкаДетальныеЗаписи.ПолнНаименование;
				Мат.ЕдиницаИзмерения = СозданиеЕИ(ВыборкаДетальныеЗаписи.ЕИ_ID);
				Мат.ИмяФайла = СозданиеДокумента(ВыборкаДетальныеЗаписи.ИмяФайла_ID);
					Если СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "A" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.A;
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "B" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.B;	
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "C" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.C;
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "D" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.D;
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "А" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.A;
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "В" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.B;	
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "С" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.C;
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "S" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.S;
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "Z" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.Z;
					Иначе
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.ПустаяСсылка();			
					КонецЕсли;
				Мат.МинОстаток = ВыборкаДетальныеЗаписи.МинОстаток;
				Мат.Производитель = СозданиеПроизводителя(ВыборкаДетальныеЗаписи.Производитель_ID);
				Мат.PartNumber = ВыборкаДетальныеЗаписи.PartNumber;
				Мат.СрокПоставки = ВыборкаДетальныеЗаписи.СрокПоставки;
				Мат.ПричинаВнесения = ВыборкаДетальныеЗаписи.ПричинаВнесения;
				Мат.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;
				Мат.КратностьУпаковки = ВыборкаДетальныеЗаписи.КратностьУпаковки;
				//Мат.Проект = СозданиеПроекта(ВыборкаДетальныеЗаписи.Проект_ID);
				Мат.ИнициаторВнесения = СозданиеСотрудника(ВыборкаДетальныеЗаписи.Сотрудник_ID);
				    Если ВыборкаДетальныеЗаписи.ПроблеммыЛогистики = 1 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.ПроблеммыЛогистики;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 0 Тогда
		            ТекущийСтатус = Перечисления.СтатусыМПЗ.ПустаяСсылка();
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 1 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Основная;	
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 2 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Основная;	
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 3 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.ОНР;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 4 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.ДоИсчерпанияЗапасов;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 5 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Запрещённая;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 6 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Основная;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 7 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Основная;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 8 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Неликвид;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 9 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Основная;
					Иначе
					ТекущийСтатус = Перечисления.СтатусыМПЗ.ПустаяСсылка();
					КонецЕсли;
				Отбор = Новый Структура("МПЗ",НайденныйЭлемент.Ссылка); 
				НовыйСтатус = РегистрыСведений.СтатусыМПЗ.ПолучитьПоследнее(ТекущаяДата(),Отбор);
					Если НовыйСтатус.Статус <> ТекущийСтатус Тогда
					НовыйСтатус = РегистрыСведений.СтатусыМПЗ.СоздатьМенеджерЗаписи();
					НовыйСтатус.Период = ТекущаяДата();
					НовыйСтатус.МПЗ = НайденныйЭлемент.Ссылка;
					НовыйСтатус.Статус = ТекущийСтатус;
					НовыйСтатус.Записать();		
					КонецЕсли;
				Мат.ОсновнаяЕдиницаИзмерения = СозданиеОснЕИМатериалов(ВыборкаДетальныеЗаписи.ОснЕИ_ID,НайденныйЭлемент);
				КонецЕсли;
			Мат.Записать(); 		
			Иначе
				Если ВыборкаДетальныеЗаписи.ISFOLDER <> 1 Тогда
				Мат = СозданиеМатериала(ВыборкаДетальныеЗаписи.ID);
				КонецЕсли;
			КонецЕсли;
		СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка);
		Исключение

		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

Функция ПроверитьИзменениеТехОпераций()
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОперации.ID,
		|	ТехОперации.PARENTID,
		|	ТехОперации.CODE КАК Код,
		|	ТехОперации.DESCR КАК Наименование,
		|	ТехОперации.SP28057 КАК Р,
		|	ТехОперации.SP28254 КАК ВидРабот_ID,
		|	ТехОперации.SP28415 КАК БК,
		|	ТехОперации.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТехОперации КАК ТехОперации";
	Запрос.Текст = Запрос.Текст + " ГДЕ ТехОперации.флИзменение = 1";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОперации.ID,
		|	ТехОперации.PARENTID,
		|	ТехОперации.CODE КАК Код,
		|	ТехОперации.DESCR КАК Наименование,
		|	ТехОперации.SP27895 КАК Р,
		|	ТехОперации.SP28051 КАК ВидРабот_ID,
		|	ТехОперации.SP28208 КАК БК,
		|	ТехОперации.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТехОперации КАК ТехОперации";
	Запрос.Текст = Запрос.Текст + " ГДЕ ТехОперации.флИзменение = 1";	
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НайденныйЭлемент = Справочники.ТехОперации.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			СписокГрупп = Новый СписокЗначений;

			СоставГруппТехОперации(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
			НайденнаяГруппа = ПроверкаГруппТехОпераций(СписокГрупп);
			ТО = НайденныйЭлемент.ПолучитьОбъект();
			ТО.Код = ВыборкаДетальныеЗаписи.Код;
			ТО.Родитель = НайденнаяГруппа;
			ТО.Наименование = ВыборкаДетальныеЗаписи.Наименование;
				Если Не ТО.ЭтоГруппа Тогда
				ТО.Разовая = ВыборкаДетальныеЗаписи.Р;
				ТО.БК = ВыборкаДетальныеЗаписи.БК;
				ТО.ВидРабот = СозданиеВидаРабот(ВыборкаДетальныеЗаписи.ВидРабот_ID);
				КонецЕсли;
			ТО.Записать();
			//ТаблицаПД = ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписи.ID,3994);//стоимость
			//	Для каждого ТЧ Из ТаблицаПД Цикл
			//	НоваяНормаТО = РегистрыСведений.НормыТО.СоздатьМенеджерЗаписи();
			//	НоваяНормаТО.Период = ТЧ.Дата;
			//	НоваяНормаТО.ТехОперация = ТО.Ссылка;
			//	НоваяНормаТО.Стоимость = ТЧ.Данные;			
			//	НоваяНормаТО.Записать(Истина);
			//	КонецЦикла;
			//ТаблицаПД = ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписи.ID,3995);//норма
			//	Для каждого ТЧ Из ТаблицаПД Цикл
			//	НоваяНормаТО = РегистрыСведений.НормыТО.СоздатьМенеджерЗаписи();
			//	НоваяНормаТО.Период = ТЧ.Дата;
			//	НоваяНормаТО.ТехОперация = ТО.Ссылка;
			//	НоваяНормаТО.Норма = ТЧ.Данные;			
			//	НоваяНормаТО.Записать(Истина);
			//	КонецЦикла;		
			КонецЕсли; 
		СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка);
		Исключение

		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

Функция ПроверитьИзменениеТехОснастки()
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОснастка.ID,
		|	ТехОснастка.PARENTID,
		|	ТехОснастка.DESCR КАК Наименование,
		|	ТехОснастка.SP25473 КАК Документ_ID,
		|	ТехОснастка.SP25653 КАК Комментарий,
		|	ТехОснастка.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТехОснастка КАК ТехОснастка";
	Запрос.Текст = Запрос.Текст + " ГДЕ ТехОснастка.флИзменение = 1";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОснастка.ID,
		|	ТехОснастка.PARENTID,
		|	ТехОснастка.DESCR КАК Наименование,
		|	ТехОснастка.SP25473 КАК Документ_ID,
		|	ТехОснастка.SP25653 КАК Комментарий,
		|	ТехОснастка.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТехОснастка КАК ТехОснастка";
	Запрос.Текст = Запрос.Текст + " ГДЕ ТехОснастка.флИзменение = 1";
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НайденныйЭлемент = Справочники.ТехОснастка.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			СписокГрупп = Новый СписокЗначений;

			СоставГруппТехОснастки(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
			НайденнаяГруппа = ПроверкаГруппТехОснастки(СписокГрупп);					
			ТО = НайденныйЭлемент.ПолучитьОбъект();
			ТО.Родитель = НайденнаяГруппа;
			ТО.Наименование = ВыборкаДетальныеЗаписи.Наименование;
				Если Не ТО.ЭтоГруппа Тогда
				ТО.ИмяФайла = СозданиеДокумента(ВыборкаДетальныеЗаписи.Документ_ID);
				ТО.Комментарий = ВыборкаДетальныеЗаписи.Комментарий; 
				КонецЕсли;
			ТО.Записать();		
			КонецЕсли;
		СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка);
		Исключение

		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

Функция ПроверитьИзменениеНоменклатуры()
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Номенклатура.ID,
		|	Номенклатура.DESCR КАК Наименование,
		|	Номенклатура.ISMARK,
		|	Номенклатура.PARENTID,
		|	Номенклатура.SP25384 КАК Статус,
		|	Номенклатура.SP4090 КАК ПолнНаименование,
		|	Номенклатура.SP28876 КАК Проект_ID,
		|	Номенклатура.SP28516 КАК Линейка_ID,
		|	Номенклатура.SP4093 КАК ЕИ_ID,
		|	Номенклатура.SP27332 КАК ГМ_ID,
		|	Номенклатура.SP27132 КАК Канбан_ID,
		|	Номенклатура.SP27133 КАК КолКанбан,
		|	Номенклатура.SP27134 КАК КолВКанбане,
		|	Номенклатура.SP18978 КАК ОсновнаяСпецификация,
		|	Номенклатура.SP18977 КАК ОснЕИ_ID,
		|	Номенклатура.SP20469 КАК Комментарий,
		|	Номенклатура.SP27836 КАК ДатаПрисвоения,
		|	Номенклатура.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Номенклатура КАК Номенклатура";
	Запрос.Текст = Запрос.Текст + " ГДЕ Номенклатура.флИзменение = 1";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Номенклатура.ID,
		|	Номенклатура.DESCR КАК Наименование,
		|	Номенклатура.ISMARK,
		|	Номенклатура.PARENTID,
		|	Номенклатура.SP25384 КАК Статус,
		|	Номенклатура.SP4090 КАК ПолнНаименование,
		|	Номенклатура.SP28621 КАК Проект_ID,
		|	Номенклатура.SP28307 КАК Линейка_ID,
		|	Номенклатура.SP4093 КАК ЕИ_ID,
		|	Номенклатура.SP27151 КАК ГМ_ID,
		|	Номенклатура.SP27031 КАК Канбан_ID,
		|	Номенклатура.SP27032 КАК КолКанбан,
		|	Номенклатура.SP27033 КАК КолВКанбане,
		|	Номенклатура.SP18978 КАК ОсновнаяСпецификация,
		|	Номенклатура.SP18977 КАК ОснЕИ_ID,
		|	Номенклатура.SP20469 КАК Комментарий,
		|	Номенклатура.SP27667 КАК ДатаПрисвоения,
		|	Номенклатура.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Номенклатура КАК Номенклатура";
	Запрос.Текст = Запрос.Текст + " ГДЕ Номенклатура.флИзменение = 1";	
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НайденныйЭлемент = Справочники.Номенклатура.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			СписокГрупп = Новый СписокЗначений;

			СоставГруппНоменклатуры(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
			НайденнаяГруппа = ПроверкаГруппНоменклатуры(СписокГрупп);
			Спецификация = НайденныйЭлемент.ПолучитьОбъект();				
			Спецификация.Наименование = ВыборкаДетальныеЗаписи.Наименование;
			Спецификация.Родитель = НайденнаяГруппа;
				Если Не Спецификация.ЭтоГруппа Тогда
				Спецификация.ПолнНаименование = ВыборкаДетальныеЗаписи.ПолнНаименование;
				//Спецификация.УсловныеПриборы = ВыборкаДетальныеЗаписи.УсловныеПриборы;
				Спецификация.Линейка = СозданиеЛинейки(ВыборкаДетальныеЗаписи.Линейка_ID);;
				Спецификация.КолКанбан = ВыборкаДетальныеЗаписи.КолКанбан;
				Спецификация.КолВКанбане = ВыборкаДетальныеЗаписи.КолВКанбане;
				Спецификация.ЕдиницаИзмерения = СозданиеЕИ(ВыборкаДетальныеЗаписи.ЕИ_ID);
				Спецификация.ГруппаПоМощности = СозданиеГМ(ВыборкаДетальныеЗаписи.ГМ_ID);
				Спецификация.Канбан = СозданиеКанбана(ВыборкаДетальныеЗаписи.Канбан_ID);
				Спецификация.Проект = СозданиеПроекта(ВыборкаДетальныеЗаписи.Проект_ID);
				Спецификация.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;
	                Если ВыборкаДетальныеЗаписи.Статус = 0 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.ПустаяСсылка();
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 1 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.Серийная;	
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 2 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.Серийная;	
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 3 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.ОНР;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 4 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.ДоИсчерпанияЗапасов;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 5 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.Запрещённая;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 6 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.Опытная;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 7 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.Опытная1;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 9 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.Предсерийная;
					Иначе
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.ПустаяСсылка();	
					КонецЕсли;
						Если ВыборкаДетальныеЗаписи.ДатаПрисвоения <> Дата(1,1,1) Тогда
						ДатаПрисвоения = ВыборкаДетальныеЗаписи.ДатаПрисвоения;
						Иначе
						ДатаПрисвоения = ТекущаяДата();
						КонецЕсли;   
				Отбор = Новый Структура("МПЗ",НайденныйЭлемент);
				НовыйСтатус = РегистрыСведений.СтатусыМПЗ.ПолучитьПоследнее(ТекущаяДата(),Отбор);
					Если НовыйСтатус.Статус <> ТекущийСтатус Тогда
					НовыйСтатус = РегистрыСведений.СтатусыМПЗ.СоздатьМенеджерЗаписи();
					НовыйСтатус.Период = ДатаПрисвоения;
					НовыйСтатус.МПЗ = НайденныйЭлемент;
					НовыйСтатус.Статус = ТекущийСтатус;
					НовыйСтатус.Записать();		
					КонецЕсли;
				Спецификация.ОсновнаяЕдиницаИзмерения = СозданиеОснЕИ(ВыборкаДетальныеЗаписи.ОснЕИ_ID,НайденныйЭлемент);	
				КонецЕсли;
			Спецификация.Записать();	 		
			КонецЕсли; 
		СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка);
		Исключение

		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

Функция ПроверитьИзменениеНормРасходов()
ЗапросНР = Новый Запрос;
ЗапросАНР = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	ЗапросНР.Текст =
		"ВЫБРАТЬ
		|	НормыРасходов.ID,
		|	НормыРасходов.PARENTID,
		|	НормыРасходов.PARENTEXT,
		|	НормыРасходов.CODE,
		|	НормыРасходов.DESCR КАК Наименование,
		|	НормыРасходов.SP4116 КАК ВидЭлемента,
		|	НормыРасходов.SP4110 КАК Элемент_ID,
		|	НормыРасходов.SP20473,
		|	НормыРасходов.SP24886 КАК Позиция,
		|	НормыРасходов.SP24887 КАК Примечание,
		|	НормыРасходов.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.НормыРасходов КАК НормыРасходов";
	ЗапросНР.Текст = ЗапросНР.Текст + " ГДЕ НормыРасходов.флИзменение = 1"; 	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	ЗапросНР.Текст =
		"ВЫБРАТЬ
		|	НормыРасходов.ID,
		|	НормыРасходов.PARENTID,
		|	НормыРасходов.PARENTEXT,
		|	НормыРасходов.CODE,
		|	НормыРасходов.DESCR КАК Наименование,
		|	НормыРасходов.SP4116 КАК ВидЭлемента,
		|	НормыРасходов.SP4110 КАК Элемент_ID,
		|	НормыРасходов.SP20473,
		|	НормыРасходов.SP24886 КАК Позиция,
		|	НормыРасходов.SP24887 КАК Примечание,
		|	НормыРасходов.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.НормыРасходов КАК НормыРасходов";
	ЗапросНР.Текст = ЗапросНР.Текст + " ГДЕ НормыРасходов.флИзменение = 1"; 	
	КонецЕсли;
Результат = ЗапросНР.Выполнить();
ВыборкаДетальныеЗаписиНР = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписиНР.Следующий() Цикл
		Если СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIZ" Тогда		
		Продолжить;
		КонецЕсли; 
		Попытка
		НайденныйЭлемент = Справочники.НормыРасходов.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписиНР.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			НР = НайденныйЭлемент.ПолучитьОбъект();				
			НР.Позиция  = ВыборкаДетальныеЗаписиНР.Позиция;
			НР.Наименование = ВыборкаДетальныеЗаписиНР.Наименование;
			НР.Примечание = ВыборкаДетальныеЗаписиНР.Примечание;
			Элемент_ID = СокрЛП(ВыборкаДетальныеЗаписиНР.Элемент_ID);
			Элемент_ID = Сред(Элемент_ID,Найти(Элемент_ID," "));	
				Если СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JSW" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Деталь;
				НР.Элемент = СозданиеНоменклатуры(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AJ0" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Узел;
				НР.Элемент = СозданиеНоменклатуры(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "J8Z" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа;
				НР.Элемент = СозданиеНоменклатуры(Элемент_ID);				
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JD0" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор;
				НР.Элемент = СозданиеНоменклатуры(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIY" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Материал;
				НР.Элемент = СозданиеМатериала(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JEL" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Документ;						
				НР.Элемент = СозданиеДокумента(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JEM" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Программа;
				НР.Элемент = СозданиеДокумента(Элемент_ID);
				//ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIZ" Тогда
				//НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.ТехОперация;
				//НР.Элемент = СозданиеТехОперации(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JK6" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.ТехОснастка;				
				НР.Элемент = СозданиеТехОснастки(Элемент_ID);
				КонецЕсли;	
			НР.Записать();
			ТаблицаПД = ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписиНР.ID,4111);//норма
				Для каждого ТЧ Из ТаблицаПД Цикл
				НоваяНорма = РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
				НоваяНорма.Период = ТЧ.Дата;
				НоваяНорма.НормаРасходов = НР.Ссылка;
				НоваяНорма.Норма = ТЧ.Данные;		
				НоваяНорма.Записать(Истина);
				КонецЦикла;
			Иначе
 	 		Спецификация = Справочники.Номенклатура.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписиНР.PARENTEXT);
				Если Не Спецификация.Пустая() Тогда
				НР = Справочники.НормыРасходов.СоздатьЭлемент();
				НР.ID = ВыборкаДетальныеЗаписиНР.ID;
				НР.Владелец = Спецификация;
				НР.Позиция  = ВыборкаДетальныеЗаписиНР.Позиция;
				НР.Наименование = ВыборкаДетальныеЗаписиНР.Наименование;
				НР.Примечание = ВыборкаДетальныеЗаписиНР.Примечание;
				Элемент_ID = СокрЛП(ВыборкаДетальныеЗаписиНР.Элемент_ID);
				Элемент_ID = Сред(Элемент_ID,Найти(Элемент_ID," "));	
					Если СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JSW" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Деталь;
					НР.Элемент = СозданиеНоменклатуры(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AJ0" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Узел;
					НР.Элемент = СозданиеНоменклатуры(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "J8Z" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа;
					НР.Элемент = СозданиеНоменклатуры(Элемент_ID);				
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JD0" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор;
					НР.Элемент = СозданиеНоменклатуры(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIY" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Материал;
					НР.Элемент = СозданиеМатериала(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JEL" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Документ;						
					НР.Элемент = СозданиеДокумента(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JEM" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Программа;
					НР.Элемент = СозданиеДокумента(Элемент_ID);
					//ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIZ" Тогда
					//НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.ТехОперация;
					//НР.Элемент = СозданиеТехОперации(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JK6" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.ТехОснастка;				
					НР.Элемент = СозданиеТехОснастки(Элемент_ID);
					КонецЕсли;	
				НР.Записать();
				ТаблицаПД = ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписиНР.ID,4111);//норма
					Для каждого ТЧ Из ТаблицаПД Цикл
					НоваяНорма = РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
					НоваяНорма.Период = ТЧ.Дата;
					НоваяНорма.НормаРасходов = НР.Ссылка;
					НоваяНорма.Норма = ТЧ.Данные;			
					НоваяНорма.Записать(Истина);
					КонецЦикла;
						Если Константы.КодБазы.Получить() = "БГР" Тогда
						ЗапросАНР.Текст = 
							"ВЫБРАТЬ
							|	АналогиНормРасходов.CODE КАК Код,
							|	АналогиНормРасходов.DESCR КАК Наименование,
							|	АналогиНормРасходов.PARENTEXT,
							|	АналогиНормРасходов.SP20526 КАК Приоритет,
							|	АналогиНормРасходов.SP20527 КАК ВидЭлемента,
							|	АналогиНормРасходов.SP20528 КАК Элемент_ID,
							|	АналогиНормРасходов.ID,
							|	АналогиНормРасходов.Ссылка
							|ИЗ
							|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.АналогиНормРасходов КАК АналогиНормРасходов
							|ГДЕ
							|	АналогиНормРасходов.PARENTEXT = &PARENTEXT";
						ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
						ЗапросАНР.Текст = 
							"ВЫБРАТЬ
							|	АналогиНормРасходов.CODE КАК Код,
							|	АналогиНормРасходов.DESCR КАК Наименование,
							|	АналогиНормРасходов.PARENTEXT,
							|	АналогиНормРасходов.SP20526 КАК Приоритет,
							|	АналогиНормРасходов.SP20527 КАК ВидЭлемента,
							|	АналогиНормРасходов.SP20528 КАК Элемент_ID,
							|	АналогиНормРасходов.ID,
							|	АналогиНормРасходов.Ссылка
							|ИЗ
							|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.АналогиНормРасходов КАК АналогиНормРасходов
							|ГДЕ
							|	АналогиНормРасходов.PARENTEXT = &PARENTEXT";
						КонецЕсли;
				ЗапросАНР.УстановитьПараметр("PARENTEXT",ВыборкаДетальныеЗаписиНР.ID);
				Результат = ЗапросАНР.Выполнить();
				ВыборкаДетальныеЗаписиАНР = Результат.Выбрать();
					Пока ВыборкаДетальныеЗаписиАНР.Следующий() Цикл			
					АНР = Справочники.АналогиНормРасходов.СоздатьЭлемент();
					АНР.ID = ВыборкаДетальныеЗаписиАНР.ID;
					АНР.Владелец = НР.Ссылка;
					АНР.Наименование = ВыборкаДетальныеЗаписиАНР.Наименование;
					АНР.Приоритет = ВыборкаДетальныеЗаписиАНР.Приоритет;
					Элемент_ID = СокрЛП(ВыборкаДетальныеЗаписиАНР.Элемент_ID);
					Элемент_ID = Сред(Элемент_ID,Найти(Элемент_ID," "));	
						Если СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JSW" Тогда
						АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Деталь;
						АНР.Элемент = СозданиеНоменклатуры(Элемент_ID);
						ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AJ0" Тогда
						АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Узел;
						АНР.Элемент = СозданиеНоменклатуры(Элемент_ID);				
						ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JD0" Тогда
						АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор;
						АНР.Элемент = СозданиеНоменклатуры(Элемент_ID);
						ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AIY" Тогда
						АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Материал;
						АНР.Элемент = СозданиеМатериала(Элемент_ID);
						КонецЕсли;	
					АНР.Записать();
					ТаблицаПД = ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписиАНР.ID,20529);//норма
						Для каждого ТЧ Из ТаблицаПД Цикл
						НоваяНорма = РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
						НоваяНорма.Период = ТЧ.Дата;
						НоваяНорма.НормаРасходов = АНР.Ссылка;
						НоваяНорма.Норма = ТЧ.Данные/АНР.Элемент.ОсновнаяЕдиницаИзмерения.Коэффициент;			
						НоваяНорма.Записать(Истина);
						КонецЦикла; 			
					КонецЦикла;	
				КонецЕсли; 
			КонецЕсли;
		СброситьИзменение(ВыборкаДетальныеЗаписиНР.Ссылка); 
		Исключение

		КонецПопытки; 
	КонецЦикла;
Возврат Истина;
КонецФункции

Функция ПроверитьИзменениеАналоговНормРасходов()
ЗапросАНР = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	ЗапросАНР.Текст =
		"ВЫБРАТЬ
		|	АналогиНормРасходов.CODE КАК Код,
		|	АналогиНормРасходов.DESCR КАК Наименование,
		|	АналогиНормРасходов.PARENTEXT,
		|	АналогиНормРасходов.SP20526 КАК Приоритет,
		|	АналогиНормРасходов.SP20527 КАК ВидЭлемента,
		|	АналогиНормРасходов.SP20528 КАК Элемент_ID,
		|	АналогиНормРасходов.ID,
		|	АналогиНормРасходов.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.АналогиНормРасходов КАК АналогиНормРасходов";
	ЗапросАНР.Текст = ЗапросАНР.Текст + " ГДЕ АналогиНормРасходов.флИзменение = 1";	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	ЗапросАНР.Текст =
		"ВЫБРАТЬ
		|	АналогиНормРасходов.CODE КАК Код,
		|	АналогиНормРасходов.DESCR КАК Наименование,
		|	АналогиНормРасходов.PARENTEXT,
		|	АналогиНормРасходов.SP20526 КАК Приоритет,
		|	АналогиНормРасходов.SP20527 КАК ВидЭлемента,
		|	АналогиНормРасходов.SP20528 КАК Элемент_ID,
		|	АналогиНормРасходов.ID,
		|	АналогиНормРасходов.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.АналогиНормРасходов КАК АналогиНормРасходов";
	ЗапросАНР.Текст = ЗапросАНР.Текст + " ГДЕ АналогиНормРасходов.флИзменение = 1";  	
	КонецЕсли;
Результат = ЗапросАНР.Выполнить();
ВыборкаДетальныеЗаписиАНР = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписиАНР.Следующий() Цикл
		Попытка
		НайденныйЭлемент = Справочники.АналогиНормРасходов.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписиАНР.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			АНР = НайденныйЭлемент.ПолучитьОбъект();				
			АНР.Наименование = ВыборкаДетальныеЗаписиАНР.Наименование;
			АНР.Приоритет = ВыборкаДетальныеЗаписиАНР.Приоритет;
			Элемент_ID = СокрЛП(ВыборкаДетальныеЗаписиАНР.Элемент_ID);
			Элемент_ID = Сред(Элемент_ID,Найти(Элемент_ID," "));	
				Если СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JSW" Тогда
				АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Деталь;
				АНР.Элемент = СозданиеНоменклатуры(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AJ0" Тогда
				АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Узел;
				АНР.Элемент = СозданиеНоменклатуры(Элемент_ID);				
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JD0" Тогда
				АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор;
				АНР.Элемент = СозданиеНоменклатуры(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AIY" Тогда
				АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Материал;
				АНР.Элемент = СозданиеМатериала(Элемент_ID);
				КонецЕсли;
			АНР.Записать();
			ТаблицаПД = ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписиАНР.ID,20529);//норма
				Для каждого ТЧ Из ТаблицаПД Цикл
				НоваяНорма = РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
				НоваяНорма.Период = ТЧ.Дата;
				НоваяНорма.НормаРасходов = АНР.Ссылка;
				НоваяНорма.Норма = ТЧ.Данные/АНР.Элемент.ОсновнаяЕдиницаИзмерения.Коэффициент;			
				НоваяНорма.Записать(Истина);
				КонецЦикла;
			Иначе
 	 		НР = Справочники.НормыРасходов.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписиАНР.PARENTEXT);
				Если Не НР.Пустая() Тогда
				АНР = Справочники.АналогиНормРасходов.СоздатьЭлемент();
				АНР.ID = ВыборкаДетальныеЗаписиАНР.ID;
				АНР.Владелец = НР.Ссылка;
				АНР.Наименование = ВыборкаДетальныеЗаписиАНР.Наименование;
				АНР.Приоритет = ВыборкаДетальныеЗаписиАНР.Приоритет;
				Элемент_ID = СокрЛП(ВыборкаДетальныеЗаписиАНР.Элемент_ID);
				Элемент_ID = Сред(Элемент_ID,Найти(Элемент_ID," "));	
					Если СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JSW" Тогда
					АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Деталь;
					АНР.Элемент = СозданиеНоменклатуры(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AJ0" Тогда
					АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Узел;
					АНР.Элемент = СозданиеНоменклатуры(Элемент_ID);				
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JD0" Тогда
					АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор;
					АНР.Элемент = СозданиеНоменклатуры(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AIY" Тогда
					АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Материал;
					АНР.Элемент = СозданиеМатериала(Элемент_ID);
					КонецЕсли;	
				АНР.Записать();
				ТаблицаПД = ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписиАНР.ID,20529);//норма
					Для каждого ТЧ Из ТаблицаПД Цикл
					НоваяНорма = РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
					НоваяНорма.Период = ТЧ.Дата;
					НоваяНорма.НормаРасходов = АНР.Ссылка;
					НоваяНорма.Норма = ТЧ.Данные/АНР.Элемент.ОсновнаяЕдиницаИзмерения.Коэффициент;			
					НоваяНорма.Записать(Истина);
					КонецЦикла;						 			
				КонецЕсли; 
			КонецЕсли; 
		СброситьИзменение(ВыборкаДетальныеЗаписиАНР.Ссылка); 
		Исключение

		КонецПопытки; 
	КонецЦикла;
Возврат Истина;
КонецФункции 	

Функция ПроверитьИзменениеИзготовленияПП()
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ИзготовлениеПП.ID,
		|	ИзготовлениеПП.DESCR КАК Наименование,
		|	ИзготовлениеПП.PARENTEXT,
		|	ИзготовлениеПП.SP26403 КАК Документ_ID,
		|	ИзготовлениеПП.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ИзготовлениеПП КАК ИзготовлениеПП";
	Запрос.Текст = Запрос.Текст + " ГДЕ ИзготовлениеПП.флИзменение = 1";
	КодПеременныхДанных = 26404;	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзготовлениеПП.ID,
		|	ИзготовлениеПП.DESCR КАК Наименование,
		|	ИзготовлениеПП.PARENTEXT,
		|	ИзготовлениеПП.SP26394 КАК Документ_ID,
		|	ИзготовлениеПП.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ИзготовлениеПП КАК ИзготовлениеПП";
	Запрос.Текст = Запрос.Текст + " ГДЕ ИзготовлениеПП.флИзменение = 1";
	КодПеременныхДанных = 26395;	
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		Материал = Справочники.Материалы.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.PARENTEXT);
			Если Не Материал.Пустая() Тогда
			ФайлИзготовления = СозданиеДокумента(ВыборкаДетальныеЗаписи.Документ_ID);
			ТаблицаПД = ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписи.ID,КодПеременныхДанных);
				Для каждого ТЧ Из ТаблицаПД Цикл
				НаборЗаписей = РегистрыСведений.ИзготовлениеПечатныхПлат.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.МПЗ.Установить(Материал.Ссылка);
				НаборЗаписей.Отбор.ФайлИзготовления.Установить(ФайлИзготовления);
				НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() > 0 Тогда
					    Для Каждого Запись Из НаборЗаписей Цикл 
					   	Запись.Действующий = ?(ТЧ.Данные > 0,Истина,Ложь);  
					    КонецЦикла;
					НаборЗаписей.Записать(Истина);
					Иначе
					ИзготовлениеПП = РегистрыСведений.ИзготовлениеПечатныхПлат.СоздатьМенеджерЗаписи();
					ИзготовлениеПП.Период = ТЧ.Дата;
					ИзготовлениеПП.МПЗ = Материал.Ссылка;
					ИзготовлениеПП.ФайлИзготовления = ФайлИзготовления;
					ИзготовлениеПП.Действующий = ?(ТЧ.Данные > 0,Истина,Ложь);
					ИзготовлениеПП.Записать(Истина);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка); 
		Исключение

		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

Процедура Синхронизировать() Экспорт
УстановитьПривилегированныйРежим(Истина);
	Если Не ЗначениеЗаполнено(Константы.КодБазы.Получить()) Тогда
	ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
	УровеньЖурналаРегистрации.Ошибка, , ,"Не заполнена константа Код базы!");
	Возврат;	
	КонецЕсли;
		Если Константы.КодБазы.Получить() = "БГР" Тогда	
		ВнешниеИсточникиДанных.Номенклатура1С77.УстановитьСоединение();
			Если ВнешниеИсточникиДанных.Номенклатура1С77.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Отключен Тогда
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
			УровеньЖурналаРегистрации.Ошибка, , ,"Не открыто соединение с базой 1С7.7!");
			Возврат;
			КонецЕсли; 
		ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
		ВнешниеИсточникиДанных.Номенклатура1С77_Харьков.УстановитьСоединение();
			Если ВнешниеИсточникиДанных.Номенклатура1С77_Харьков.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Отключен Тогда
			ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
			УровеньЖурналаРегистрации.Ошибка, , ,"Не открыто соединение с базой 1С7.7!");
			Возврат;
			КонецЕсли;
		КонецЕсли;
			Если Не ПроверитьИзменениеТоварныхГрупп() Тогда
		    ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
		    УровеньЖурналаРегистрации.Ошибка, , ,"Ошибка синхронизации справочника товарных групп");
			Возврат;
			КонецЕсли;
			Если Не ПроверитьИзменениеТоваров() Тогда
		    ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
		    УровеньЖурналаРегистрации.Ошибка, , ,"Ошибка синхронизации справочника товаров");
			Возврат;
			КонецЕсли;
			Если Не ПроверитьИзменениеДокументов() Тогда
		    ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
		    УровеньЖурналаРегистрации.Ошибка, , ,"Ошибка синхронизации справочника документов");
			Возврат;
			КонецЕсли; 
			Если Не ПроверитьИзменениеМатериалов() Тогда
		    ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
		    УровеньЖурналаРегистрации.Ошибка, , ,"Ошибка синхронизации справочника матриалов");
			Возврат;
			КонецЕсли;
			Если Не ПроверитьИзменениеНоменклатуры() Тогда
		    ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
		    УровеньЖурналаРегистрации.Ошибка, , ,"Ошибка синхронизации справочника номенклатуры");
			Возврат;
			КонецЕсли;
			//Если Не ПроверитьИзменениеТехОпераций() Тогда
			//ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
			//УровеньЖурналаРегистрации.Ошибка, , ,"Ошибка синхронизации справочника тех. операций");
			//Возврат;
			//КонецЕсли;
			Если Не ПроверитьИзменениеТехОснастки() Тогда
		    ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
		    УровеньЖурналаРегистрации.Ошибка, , ,"Ошибка синхронизации справочника тех. оснастки");
			Возврат;
			КонецЕсли;
			Если Не ПроверитьИзменениеАналоговНормРасходов() Тогда
		    ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
		    УровеньЖурналаРегистрации.Ошибка, , ,"Ошибка синхронизации справочника аналогов норм расходов");
			Возврат;
			КонецЕсли;
			Если Не ПроверитьИзменениеНормРасходов() Тогда
		    ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
		    УровеньЖурналаРегистрации.Ошибка, , ,"Ошибка синхронизации справочника норм расходов");
			Возврат;
			КонецЕсли;
			Если Не ПроверитьИзменениеИзготовленияПП() Тогда
		    ЗаписьЖурналаРегистрации("ИнформационнаяБаза.Синхронизация", 
		    УровеньЖурналаРегистрации.Ошибка, , ,"Ошибка синхронизации изготовления печатных плат");
			Возврат;
			КонецЕсли;
Константы.ДатаПоследнейСинхронизации.Установить(ТекущаяДата());
   Если ПривилегированныйРежим() Тогда 
   УстановитьПривилегированныйРежим(Ложь);
   КонецЕсли;  
КонецПроцедуры
