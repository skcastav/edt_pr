
&НаСервере
Функция ПроверитьИзменениеТоварныхГрупп(ID = Неопределено)
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварныеГруппы.ID,
		|	ТоварныеГруппы.DESCR КАК Наименование,
		|	ТоварныеГруппы.SP26487 КАК Параметр1,
		|	ТоварныеГруппы.SP26488 КАК Параметр2,
		|	ТоварныеГруппы.SP26489 КАК Параметр3,
		|	ТоварныеГруппы.SP26490 КАК Параметр4,
		|	ТоварныеГруппы.SP26491 КАК Параметр5,
		|	ТоварныеГруппы.SP26492 КАК Параметр6,
		|	ТоварныеГруппы.SP26493 КАК Параметр7,
		|	ТоварныеГруппы.SP26494 КАК Параметр8,
		|	ТоварныеГруппы.SP26495 КАК Параметр9,
		|	ТоварныеГруппы.SP26496 КАК Параметр10,
		|	ТоварныеГруппы.SP26497 КАК Параметр11,
		|	ТоварныеГруппы.SP26498 КАК Параметр12,
		|	ТоварныеГруппы.SP26499 КАК Параметр13,
		|	ТоварныеГруппы.SP27127 КАК Параметр14,
		|	ТоварныеГруппы.SP27128 КАК Параметр15,
		|	ТоварныеГруппы.SP27232 КАК Параметр16,
		|	ТоварныеГруппы.SP27596 КАК Параметр17,
		|	ТоварныеГруппы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварныеГруппы КАК ТоварныеГруппы";
		Если ID <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ТоварныеГруппы.ID = &ID И ТоварныеГруппы.флИзменение = 1";	
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ ТоварныеГруппы.флИзменение = 1";
		КонецЕсли;
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварныеГруппы.ID,
		|	ТоварныеГруппы.DESCR КАК Наименование,
		|	ТоварныеГруппы.SP26460 КАК Параметр1,
		|	ТоварныеГруппы.SP26461 КАК Параметр2,
		|	ТоварныеГруппы.SP26462 КАК Параметр3,
		|	ТоварныеГруппы.SP26463 КАК Параметр4,
		|	ТоварныеГруппы.SP26464 КАК Параметр5,
		|	ТоварныеГруппы.SP26465 КАК Параметр6,
		|	ТоварныеГруппы.SP26466 КАК Параметр7,
		|	ТоварныеГруппы.SP26467 КАК Параметр8,
		|	ТоварныеГруппы.SP26468 КАК Параметр9,
		|	ТоварныеГруппы.SP26469 КАК Параметр10,
		|	ТоварныеГруппы.SP26470 КАК Параметр11,
		|	ТоварныеГруппы.SP26471 КАК Параметр12,
		|	ТоварныеГруппы.SP26472 КАК Параметр13,
		|	ТоварныеГруппы.SP27023 КАК Параметр14,
		|	ТоварныеГруппы.SP27024 КАК Параметр15,
		|	ТоварныеГруппы.SP27103 КАК Параметр16,
		|	ТоварныеГруппы.SP27430 КАК Параметр17,
		|	ТоварныеГруппы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварныеГруппы КАК ТоварныеГруппы";
		Если ID <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ТоварныеГруппы.ID = &ID И ТоварныеГруппы.флИзменение = 1";	
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ ТоварныеГруппы.флИзменение = 1";
		КонецЕсли;
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = Объект.Изменения.Добавить();
	ТЧ.Справочник = "Товарные группы";
	ТЧ.ID = ВыборкаДетальныеЗаписи.ID;
		Попытка
		НайденныйЭлемент = Справочники.ТоварныеГруппы.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда					
			ТоварнаяГруппа = НайденныйЭлемент.ПолучитьОбъект();
			ТоварнаяГруппа.Наименование = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			ТоварнаяГруппа.Записать();
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр1",ВыборкаДетальныеЗаписи.Параметр1);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр2",ВыборкаДетальныеЗаписи.Параметр2);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр3",ВыборкаДетальныеЗаписи.Параметр3);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр4",ВыборкаДетальныеЗаписи.Параметр4);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр5",ВыборкаДетальныеЗаписи.Параметр5);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр6",ВыборкаДетальныеЗаписи.Параметр6);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр7",ВыборкаДетальныеЗаписи.Параметр7);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр8",ВыборкаДетальныеЗаписи.Параметр8);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр9",ВыборкаДетальныеЗаписи.Параметр9);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр10",ВыборкаДетальныеЗаписи.Параметр10);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр11",ВыборкаДетальныеЗаписи.Параметр11);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр12",ВыборкаДетальныеЗаписи.Параметр12);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр13",ВыборкаДетальныеЗаписи.Параметр13);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр14",ВыборкаДетальныеЗаписи.Параметр14);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр15",ВыборкаДетальныеЗаписи.Параметр15);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр16",ВыборкаДетальныеЗаписи.Параметр16);
			ОбщийМодульСинхронизации.СоздатьПараметрТоварнойГруппы(ТоварнаяГруппа.Ссылка,"Параметр17",ВыборкаДетальныеЗаписи.Параметр17); 
			ТЧ.Элемент = ТоварнаяГруппа.Ссылка;
			ТЧ.Статус = Истина;
			Иначе
			ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			ТЧ.Комментарий = "нет в справочнике";					
			КонецЕсли;
		ОбщийМодульСинхронизации.СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка);
		Исключение
		ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
		ТЧ.Ошибка = ОписаниеОшибки();
		КонецПопытки; 
	КонецЦикла;	
Возврат Истина;	
КонецФункции

&НаСервере
Функция ПроверитьИзменениеТоваров(Код = Неопределено)
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТоварыПриборы.ID,
		|	ТоварыПриборы.DESCR КАК Наименование,
		|	ТоварыПриборы.SP25097 КАК КодТовара,
		|	ТоварыПриборы.SP25482 КАК ПолнНаименование,
		|	ТоварыПриборы.SP26485 КАК ТоварнаяГруппа_ID,
		|	ТоварыПриборы.SP28396 КАК КодДанфосс,
		|	ТоварыПриборы.SP28690 КАК Исполнение,
		|	ТоварыПриборы.SP28708 КАК Стандартный,
		|	ТоварыПриборы.PARENTID,
		|	ТоварыПриборы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварыПриборы КАК ТоварыПриборы";
		Если Код <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ТоварыПриборы.SP25097 = &Код И ТоварыПриборы.флИзменение = 1";	
		Запрос.УстановитьПараметр("Код",Код);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ ТоварыПриборы.флИзменение = 1";
		КонецЕсли;	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТоварыПриборы.ID,
		|	ТоварыПриборы.DESCR КАК Наименование,
		|	ТоварыПриборы.SP25097 КАК КодТовара,
		|	ТоварыПриборы.SP25482 КАК ПолнНаименование,
		|	ТоварыПриборы.SP26491 КАК ТоварнаяГруппа_ID,
		|	ТоварыПриборы.SP28190 КАК КодДанфосс,
		|	ТоварыПриборы.SP28480 КАК Исполнение,
		|	ТоварыПриборы.SP28497 КАК Стандартный,
		|	ТоварыПриборы.PARENTID,
		|	ТоварыПриборы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварыПриборы КАК ТоварыПриборы";
		Если Код <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ТоварыПриборы.SP25097 = &Код И ТоварыПриборы.флИзменение = 1";	
		Запрос.УстановитьПараметр("Код",Код);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ ТоварыПриборы.флИзменение = 1";
		КонецЕсли;	
	КонецЕсли; 
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = Объект.Изменения.Добавить();
	ТЧ.Справочник = "Товары";
	ТЧ.ID = ВыборкаДетальныеЗаписи.ID;
		Попытка
		НайденныйЭлемент = Справочники.Товары.НайтиПоКоду(Число(ВыборкаДетальныеЗаписи.КодТовара));
			Если Не НайденныйЭлемент.Пустая() Тогда
			//СписокГрупп = Новый СписокЗначений;

			//ОбщийМодульСинхронизации.СоставГруппТовара(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
			//НайденнаяГруппа = ОбщийМодульСинхронизации.ПроверкаГруппТоваров(СписокГрупп);					
			Товар = НайденныйЭлемент.ПолучитьОбъект();
			Товар.Код = Число(ВыборкаДетальныеЗаписи.КодТовара);
			//Товар.Родитель = НайденнаяГруппа;
			Товар.Наименование = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
				Если Не Товар.ЭтоГруппа Тогда
				Товар.ПолнНаименование = ВыборкаДетальныеЗаписи.ПолнНаименование;
				Товар.Исполнение = ВыборкаДетальныеЗаписи.Исполнение;
				Товар.КодДанфосс = ВыборкаДетальныеЗаписи.КодДанфосс;
				Товар.ТоварнаяГруппа = ОбщийМодульСинхронизации.СозданиеТоварнойГруппы(ВыборкаДетальныеЗаписи.ТоварнаяГруппа_ID);
				Товар.Стандартный = ?(ВыборкаДетальныеЗаписи.Стандартный = 1,Истина,Ложь);
				Товар.Записать();
				ОбщийМодульСинхронизации.СозданиеДХН(ВыборкаДетальныеЗаписи.ID,Товар.Ссылка); 
				Иначе
				Товар.Записать();
				КонецЕсли;
			ТЧ.Элемент = Товар.Ссылка;
			ТЧ.Статус = Истина;
			Иначе
			Товар = ОбщийМодульСинхронизации.СозданиеТовара(ВыборкаДетальныеЗаписи.КодТовара);
			ТЧ.Элемент = Товар.Ссылка;
			ТЧ.Статус = Истина; 					
			КонецЕсли;
		ОбщийМодульСинхронизации.СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка); 
		Исключение
		ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
		ТЧ.Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьИзменениеДокументов(ID = Неопределено)
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Документы.ID,
		|	Документы.PARENTID,
		|	Документы.CODE КАК Код,
		|	Документы.DESCR КАК Наименование,
		|	Документы.SP25119 КАК ВидДокумента,
		|	Документы.SP25120 КАК ИмяФайла,
		|	Документы.SP27963 КАК Извещение,
		|	Документы.SP25197 КАК Комментарий,
		|	Документы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Документы КАК Документы";
		Если ID <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ Документы.ID = &ID И Документы.флИзменение = 1";	
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ Документы.флИзменение = 1";
		КонецЕсли;	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Документы.ID,
		|	Документы.PARENTID,
		|	Документы.CODE КАК Код,
		|	Документы.DESCR КАК Наименование,
		|	Документы.SP25119 КАК ВидДокумента,
		|	Документы.SP25120 КАК ИмяФайла,
		|	Документы.SP27793 КАК Извещение,
		|	Документы.SP25197 КАК Комментарий,
		|	Документы.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Документы КАК Документы";
		Если ID <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ Документы.ID = &ID И Документы.флИзменение = 1";	
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ Документы.флИзменение = 1";
		КонецЕсли;	
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = Объект.Изменения.Добавить();
	ТЧ.Справочник = "Документация";
	ТЧ.ID = ВыборкаДетальныеЗаписи.ID;
		Попытка
		НайденныйЭлемент = Справочники.Документация.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			СписокГрупп = Новый СписокЗначений;

			ОбщийМодульСинхронизации.СоставГруппДокумента(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
			НайденнаяГруппа = ОбщийМодульСинхронизации.ПроверкаГруппДокументов(СписокГрупп);					
			Док = НайденныйЭлемент.ПолучитьОбъект();
			Док.Код = ВыборкаДетальныеЗаписи.Код;
			Док.Родитель = НайденнаяГруппа;
			Док.Наименование = ВыборкаДетальныеЗаписи.Наименование;
				Если Не Док.ЭтоГруппа Тогда
				Док.ИмяФайла = ВыборкаДетальныеЗаписи.ИмяФайла;
				Док.Извещение = ВыборкаДетальныеЗаписи.Извещение;
				Док.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;
				КонецЕсли;
			Док.Записать();
			ТЧ.Элемент = Док.Ссылка;
			ТЧ.Статус = Истина;
			Иначе
			ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			ТЧ.Комментарий = "нет в справочнике; ";					
			КонецЕсли;
		ОбщийМодульСинхронизации.СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка);
		Исключение
		ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
		ТЧ.Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьИзменениеМатериалов(ID = Неопределено, ПроверкаРеквизитов = Ложь)
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Материалы.ID,
		|	Материалы.PARENTID,
		|	Материалы.CODE КАК Код,
		|	Материалы.DESCR КАК Наименование,
		|	Материалы.SP20454 КАК Артикул,
		|	Материалы.SP2824 КАК ЕИ_ID,
		|	Материалы.SP20455 КАК МинОстаток,
		|	Материалы.SP18976 КАК ОснЕИ_ID,
		|	Материалы.SP27971 КАК ЦенаПлановая,
		|	Материалы.SP25242 КАК ИмяФайла_ID,
		|	Материалы.SP25313 КАК Статус,
		|	Материалы.SP28808 КАК ПроблеммыЛогистики,
		|	Материалы.SP25600 КАК СрокПоставки,
		|	Материалы.SP14756 КАК ПолнНаименование,
		|	Материалы.SP20456 КАК Комментарий,
		|	Материалы.SP28618 КАК КратностьУпаковки,
		|	Материалы.SP28874 КАК ПричинаВнесения,
		|	Материалы.SP28870 КАК Проект_ID,
		|	Материалы.SP28871 КАК PartNumber,
		|	Материалы.SP28872 КАК Производитель_ID,
		|	Материалы.SP28873 КАК Сотрудник_ID,
		|	Материалы.Ссылка,
		|	Материалы.ISFOLDER
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Материалы КАК Материалы";
		Если ID <> Неопределено Тогда
			Если ПроверкаРеквизитов Тогда
			Запрос.Текст = Запрос.Текст + " ГДЕ Материалы.ID = &ID";			
			Иначе	
			Запрос.Текст = Запрос.Текст + " ГДЕ Материалы.ID = &ID И Материалы.флИзменение = 1";
			КонецЕсли;
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ Материалы.флИзменение = 1";
		КонецЕсли;	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Материалы.ID,
		|	Материалы.PARENTID,
		|	Материалы.CODE КАК Код,
		|	Материалы.DESCR КАК Наименование,
		|	Материалы.SP20454 КАК Артикул,
		|	Материалы.SP2824 КАК ЕИ_ID,
		|	Материалы.SP20455 КАК МинОстаток,
		|	Материалы.SP18976 КАК ОснЕИ_ID,
		|	Материалы.SP27801 КАК ЦенаПлановая,
		|	Материалы.SP25242 КАК ИмяФайла_ID,
		|	Материалы.SP25313 КАК Статус,
		|	Материалы.SP28564 КАК ПроблеммыЛогистики,
		|	Материалы.SP25600 КАК СрокПоставки,
		|	Материалы.SP14756 КАК ПолнНаименование,
		|	Материалы.SP20456 КАК Комментарий,
		|	Материалы.SP28409 КАК КратностьУпаковки,
		|	Материалы.SP28617 КАК ПричинаВнесения,
		|	Материалы.SP28613 КАК Проект_ID,
		|	Материалы.SP28614 КАК PartNumber,
		|	Материалы.SP28615 КАК Производитель_ID,
		|	Материалы.SP28616 КАК Сотрудник_ID,
		|	Материалы.Ссылка,
		|	Материалы.ISFOLDER
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Материалы КАК Материалы";
		Если ID <> Неопределено Тогда
			Если ПроверкаРеквизитов Тогда
			Запрос.Текст = Запрос.Текст + " ГДЕ Материалы.ID = &ID";			
			Иначе	
			Запрос.Текст = Запрос.Текст + " ГДЕ Материалы.ID = &ID И Материалы.флИзменение = 1";
			КонецЕсли;
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ Материалы.флИзменение = 1";
		КонецЕсли;	
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = Объект.Изменения.Добавить();
	ТЧ.Справочник = "Материалы";
	ТЧ.ID = ВыборкаДетальныеЗаписи.ID;
	ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
		Попытка
		НайденныйЭлемент = Справочники.Материалы.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			СписокГрупп = Новый СписокЗначений;

			ОбщийМодульСинхронизации.СоставГруппМатериала(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
			НайденнаяГруппа = ОбщийМодульСинхронизации.ПроверкаГруппМатериалов(СписокГрупп);					
			Мат = НайденныйЭлемент.ПолучитьОбъект();
			Мат.Родитель = НайденнаяГруппа;
			Мат.Код = ВыборкаДетальныеЗаписи.Код;
			Мат.Наименование = ВыборкаДетальныеЗаписи.Наименование;
				Если Не Мат.ЭтоГруппа Тогда
				Мат.ПолнНаименование = ВыборкаДетальныеЗаписи.ПолнНаименование;
				Мат.ЕдиницаИзмерения = ОбщийМодульСинхронизации.СозданиеЕИ(ВыборкаДетальныеЗаписи.ЕИ_ID);
				Мат.ИмяФайла = ОбщийМодульСинхронизации.СозданиеДокумента(ВыборкаДетальныеЗаписи.ИмяФайла_ID);
					Если СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "A" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.A;
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "B" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.B;	
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "C" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.C;
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "D" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.D;
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "А" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.A;
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "В" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.B;	
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "С" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.C;
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "S" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.S;
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписи.Артикул) = "Z" Тогда
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.Z;
					Иначе
					Мат.ГруппаПоЗакупкам = Перечисления.ГруппыПоЗакупкам.ПустаяСсылка();		
					КонецЕсли;
				Мат.МинОстаток = ВыборкаДетальныеЗаписи.МинОстаток;
				Мат.Производитель = ОбщийМодульСинхронизации.СозданиеПроизводителя(ВыборкаДетальныеЗаписи.Производитель_ID);
				Мат.PartNumber = ВыборкаДетальныеЗаписи.PartNumber;
				Мат.СрокПоставки = ВыборкаДетальныеЗаписи.СрокПоставки;
				Мат.ПричинаВнесения = ВыборкаДетальныеЗаписи.ПричинаВнесения;
				Мат.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;
				Мат.КратностьУпаковки = ВыборкаДетальныеЗаписи.КратностьУпаковки;
				//Мат.Проект = ОбщийМодульСинхронизации.СозданиеПроекта(ВыборкаДетальныеЗаписи.Проект_ID);
				Мат.ИнициаторВнесения = ОбщийМодульСинхронизации.СозданиеСотрудника(ВыборкаДетальныеЗаписи.Сотрудник_ID);
				    Если ВыборкаДетальныеЗаписи.ПроблеммыЛогистики = 1 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.ПроблеммыЛогистики;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 0 Тогда
		            ТекущийСтатус = Перечисления.СтатусыМПЗ.ПустаяСсылка();
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 1 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Основная;	
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 2 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Основная;	
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 3 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.ОНР;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 4 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.ДоИсчерпанияЗапасов;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 5 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Запрещённая;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 6 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Основная;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 7 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Основная;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 8 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Неликвид;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 9 Тогда
					ТекущийСтатус = Перечисления.СтатусыМПЗ.Основная;
					Иначе
					ТекущийСтатус = Перечисления.СтатусыМПЗ.ПустаяСсылка();
					КонецЕсли;
				Отбор = Новый Структура("МПЗ",НайденныйЭлемент.Ссылка); 
				НовыйСтатус = РегистрыСведений.СтатусыМПЗ.ПолучитьПоследнее(ТекущаяДата(),Отбор);
					Если НовыйСтатус.Статус <> ТекущийСтатус Тогда
					НовыйСтатус = РегистрыСведений.СтатусыМПЗ.СоздатьМенеджерЗаписи();
					НовыйСтатус.Период = ТекущаяДата();
					НовыйСтатус.МПЗ = НайденныйЭлемент.Ссылка;
					НовыйСтатус.Статус = ТекущийСтатус;
					НовыйСтатус.Записать();		
					КонецЕсли;
				Мат.ОсновнаяЕдиницаИзмерения = ОбщийМодульСинхронизации.СозданиеОснЕИМатериалов(ВыборкаДетальныеЗаписи.ОснЕИ_ID,НайденныйЭлемент);
				КонецЕсли;
			Мат.Записать();
			ТЧ.Элемент = Мат.Ссылка;
			ТЧ.Статус = Истина;	
			Иначе
				Если ВыборкаДетальныеЗаписи.ISFOLDER <> 1 Тогда
				Мат = ОбщийМодульСинхронизации.СозданиеМатериала(ВыборкаДетальныеЗаписи.ID);
				ТЧ.Элемент = Мат.Ссылка;
				ТЧ.Статус = Истина;
				КонецЕсли; 		
			КонецЕсли;
		ОбщийМодульСинхронизации.СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка);
		Исключение
		ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
		ТЧ.Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьИзменениеТехОпераций(ID = Неопределено)
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОперации.ID,
		|	ТехОперации.PARENTID,
		|	ТехОперации.CODE КАК Код,
		|	ТехОперации.DESCR КАК Наименование,
		|	ТехОперации.SP28057 КАК Р,
		|	ТехОперации.SP28254 КАК ВидРабот_ID,
		|	ТехОперации.SP28415 КАК БК,
		|	ТехОперации.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТехОперации КАК ТехОперации";
		Если ID <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ТехОперации.ID = &ID И ТехОперации.флИзменение = 1";	
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ ТехОперации.флИзменение = 1";
		КонецЕсли;	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОперации.ID,
		|	ТехОперации.PARENTID,
		|	ТехОперации.CODE КАК Код,
		|	ТехОперации.DESCR КАК Наименование,
		|	ТехОперации.SP27895 КАК Р,
		|	ТехОперации.SP28051 КАК ВидРабот_ID,
		|	ТехОперации.SP28208 КАК БК,
		|	ТехОперации.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТехОперации КАК ТехОперации";
		Если ID <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ТехОперации.ID = &ID И ТехОперации.флИзменение = 1";	
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ ТехОперации.флИзменение = 1";
		КонецЕсли;	
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = Объект.Изменения.Добавить();
	ТЧ.Справочник = "ТехОперации";
	ТЧ.ID = ВыборкаДетальныеЗаписи.ID;
		Попытка
		НайденныйЭлемент = Справочники.ТехОперации.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			СписокГрупп = Новый СписокЗначений;

			ОбщийМодульСинхронизации.СоставГруппТехОперации(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
			НайденнаяГруппа = ОбщийМодульСинхронизации.ПроверкаГруппТехОпераций(СписокГрупп);
			ТО = НайденныйЭлемент.ПолучитьОбъект();
			ТО.Код = ВыборкаДетальныеЗаписи.Код;
			ТО.Родитель = НайденнаяГруппа;
			ТО.Наименование = ВыборкаДетальныеЗаписи.Наименование;
				Если Не ТО.ЭтоГруппа Тогда
				ТО.Разовая = ВыборкаДетальныеЗаписи.Р;
				ТО.БК = ВыборкаДетальныеЗаписи.БК;
				ТО.ВидРабот = ОбщийМодульСинхронизации.СозданиеВидаРабот(ВыборкаДетальныеЗаписи.ВидРабот_ID);
				КонецЕсли;
			ТО.Записать();
			ТЧ.Элемент = ТО.Ссылка;
			ТЧ.Статус = Истина; 
			Иначе
			ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			ТЧ.Комментарий = "нет в справочнике; ";		
			КонецЕсли; 
		ОбщийМодульСинхронизации.СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка);
		Исключение
		ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
		ТЧ.Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьИзменениеТехОснастки(ID = Неопределено)
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОснастка.ID,
		|	ТехОснастка.PARENTID,
		|	ТехОснастка.DESCR КАК Наименование,
		|	ТехОснастка.SP25473 КАК Документ_ID,
		|	ТехОснастка.SP25653 КАК Комментарий,
		|	ТехОснастка.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТехОснастка КАК ТехОснастка";
		Если ID <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ТехОснастка.ID = &ID И ТехОснастка.флИзменение = 1";	
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ ТехОснастка.флИзменение = 1";
		КонецЕсли;	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ТехОснастка.ID,
		|	ТехОснастка.PARENTID,
		|	ТехОснастка.DESCR КАК Наименование,
		|	ТехОснастка.SP25473 КАК Документ_ID,
		|	ТехОснастка.SP25653 КАК Комментарий,
		|	ТехОснастка.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТехОснастка КАК ТехОснастка";
		Если ID <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ТехОснастка.ID = &ID И ТехОснастка.флИзменение = 1";	
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ ТехОснастка.флИзменение = 1";
		КонецЕсли;	
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = Объект.Изменения.Добавить();
	ТЧ.Справочник = "ТехОснастка";
	ТЧ.ID = ВыборкаДетальныеЗаписи.ID;
		Попытка
		НайденныйЭлемент = Справочники.ТехОснастка.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			СписокГрупп = Новый СписокЗначений;

			ОбщийМодульСинхронизации.СоставГруппТехОснастки(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
			НайденнаяГруппа = ОбщийМодульСинхронизации.ПроверкаГруппТехОснастки(СписокГрупп);					
			ТО = НайденныйЭлемент.ПолучитьОбъект();
			ТО.Родитель = НайденнаяГруппа;
			ТО.Наименование = ВыборкаДетальныеЗаписи.Наименование;
				Если Не ТО.ЭтоГруппа Тогда
				ТО.ИмяФайла = ОбщийМодульСинхронизации.СозданиеДокумента(ВыборкаДетальныеЗаписи.Документ_ID);
				ТО.Комментарий = ВыборкаДетальныеЗаписи.Комментарий; 
				КонецЕсли;
			ТО.Записать();
			ТЧ.Элемент = ТО.Ссылка;
			ТЧ.Статус = Истина; 
			Иначе
			ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			ТЧ.Комментарий = "нет в справочнике; "; 		
			КонецЕсли;
		ОбщийМодульСинхронизации.СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка);
		Исключение
		ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
		ТЧ.Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьИзменениеНоменклатуры(ID = Неопределено)
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Номенклатура.ID,
		|	Номенклатура.DESCR КАК Наименование,
		|	Номенклатура.ISMARK,
		|	Номенклатура.PARENTID,
		|	Номенклатура.SP25384 КАК Статус,
		|	Номенклатура.SP4090 КАК ПолнНаименование,
		|	Номенклатура.SP28876 КАК Проект_ID,
		|	Номенклатура.SP28516 КАК Линейка_ID,
		|	Номенклатура.SP4093 КАК ЕИ_ID,
		|	Номенклатура.SP27332 КАК ГМ_ID,
		|	Номенклатура.SP27132 КАК Канбан_ID,
		|	Номенклатура.SP27133 КАК КолКанбан,
		|	Номенклатура.SP27134 КАК КолВКанбане,
		|	Номенклатура.SP18978 КАК ОсновнаяСпецификация,
		|	Номенклатура.SP18977 КАК ОснЕИ_ID,
		|	Номенклатура.SP20469 КАК Комментарий,
		|	Номенклатура.SP27836 КАК ДатаПрисвоения,
		|	Номенклатура.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Номенклатура КАК Номенклатура";
		Если ID <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ Номенклатура.ID = &ID И Номенклатура.флИзменение = 1";	
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ Номенклатура.флИзменение = 1";
		КонецЕсли; 	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	Номенклатура.ID,
		|	Номенклатура.DESCR КАК Наименование,
		|	Номенклатура.ISMARK,
		|	Номенклатура.PARENTID,
		|	Номенклатура.SP25384 КАК Статус,
		|	Номенклатура.SP4090 КАК ПолнНаименование,
		|	Номенклатура.SP28621 КАК Проект_ID,
		|	Номенклатура.SP28307 КАК Линейка_ID,
		|	Номенклатура.SP4093 КАК ЕИ_ID,
		|	Номенклатура.SP27151 КАК ГМ_ID,
		|	Номенклатура.SP27031 КАК Канбан_ID,
		|	Номенклатура.SP27032 КАК КолКанбан,
		|	Номенклатура.SP27033 КАК КолВКанбане,
		|	Номенклатура.SP18978 КАК ОсновнаяСпецификация,
		|	Номенклатура.SP18977 КАК ОснЕИ_ID,
		|	Номенклатура.SP20469 КАК Комментарий,
		|	Номенклатура.SP27667 КАК ДатаПрисвоения,
		|	Номенклатура.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Номенклатура КАК Номенклатура";
		Если ID <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ Номенклатура.ID = &ID И Номенклатура.флИзменение = 1";	
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ Номенклатура.флИзменение = 1";
		КонецЕсли; 	
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = Объект.Изменения.Добавить();
	ТЧ.Справочник = "Номенклатура";
	ТЧ.ID = ВыборкаДетальныеЗаписи.ID;
		Попытка
		НайденныйЭлемент = Справочники.Номенклатура.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			СписокГрупп = Новый СписокЗначений;

			ОбщийМодульСинхронизации.СоставГруппНоменклатуры(СписокГрупп,ВыборкаДетальныеЗаписи.PARENTID);
			НайденнаяГруппа = ОбщийМодульСинхронизации.ПроверкаГруппНоменклатуры(СписокГрупп);
			Спецификация = НайденныйЭлемент.ПолучитьОбъект();				
			Спецификация.Наименование = ВыборкаДетальныеЗаписи.Наименование;
			Спецификация.Родитель = НайденнаяГруппа;
				Если Не Спецификация.ЭтоГруппа Тогда
				Спецификация.ПолнНаименование = ВыборкаДетальныеЗаписи.ПолнНаименование;
				//Спецификация.УсловныеПриборы = ВыборкаДетальныеЗаписи.УсловныеПриборы;
				Спецификация.Линейка = ОбщийМодульСинхронизации.СозданиеЛинейки(ВыборкаДетальныеЗаписи.Линейка_ID);
				Спецификация.КолКанбан = ВыборкаДетальныеЗаписи.КолКанбан;
				Спецификация.КолВКанбане = ВыборкаДетальныеЗаписи.КолВКанбане;
				Спецификация.ЕдиницаИзмерения = ОбщийМодульСинхронизации.СозданиеЕИ(ВыборкаДетальныеЗаписи.ЕИ_ID);
				Спецификация.ГруппаПоМощности = ОбщийМодульСинхронизации.СозданиеГМ(ВыборкаДетальныеЗаписи.ГМ_ID);
				Спецификация.Канбан = ОбщийМодульСинхронизации.СозданиеКанбана(ВыборкаДетальныеЗаписи.Канбан_ID);
				Спецификация.Проект = ОбщийМодульСинхронизации.СозданиеПроекта(ВыборкаДетальныеЗаписи.Проект_ID);
				Спецификация.Комментарий = ВыборкаДетальныеЗаписи.Комментарий;
	                Если ВыборкаДетальныеЗаписи.Статус = 0 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.ПустаяСсылка();
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 1 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.Серийная;	
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 2 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.Серийная;	
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 3 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.ОНР;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 4 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.ДоИсчерпанияЗапасов;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 5 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.Запрещённая;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 6 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.Опытная;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 7 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.Опытная1;
					ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 9 Тогда
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.Предсерийная;
					Иначе
					ТекущийСтатус = Перечисления.СтатусыСпецификаций.ПустаяСсылка();	
					КонецЕсли;
						Если ВыборкаДетальныеЗаписи.ДатаПрисвоения <> Дата(1,1,1) Тогда
						ДатаПрисвоения = ВыборкаДетальныеЗаписи.ДатаПрисвоения;
						Иначе
						ДатаПрисвоения = ТекущаяДата();
						КонецЕсли;   
				Отбор = Новый Структура("МПЗ",НайденныйЭлемент);
				НовыйСтатус = РегистрыСведений.СтатусыМПЗ.ПолучитьПоследнее(ТекущаяДата(),Отбор);
					Если НовыйСтатус.Статус <> ТекущийСтатус Тогда
					НовыйСтатус = РегистрыСведений.СтатусыМПЗ.СоздатьМенеджерЗаписи();
					НовыйСтатус.Период = ДатаПрисвоения;
					НовыйСтатус.МПЗ = НайденныйЭлемент;
					НовыйСтатус.Статус = ТекущийСтатус;
					НовыйСтатус.Записать();		
					КонецЕсли;
				Спецификация.ОсновнаяЕдиницаИзмерения = ОбщийМодульСинхронизации.СозданиеОснЕИ(ВыборкаДетальныеЗаписи.ОснЕИ_ID,НайденныйЭлемент);	
				КонецЕсли;
			Спецификация.Записать();
			ТЧ.Элемент = Спецификация.Ссылка;
			ТЧ.Статус = Истина; 
			Иначе
			ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			ТЧ.Комментарий = "нет в справочнике; ";	 		
			КонецЕсли; 
		ОбщийМодульСинхронизации.СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка);
		Исключение
		ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
		ТЧ.Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьИзменениеНормРасходов(ID = Неопределено)
ЗапросНР = Новый Запрос;
ЗапросАНР = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	ЗапросНР.Текст =
		"ВЫБРАТЬ
		|	НормыРасходов.ID,
		|	НормыРасходов.PARENTID,
		|	НормыРасходов.PARENTEXT,
		|	НормыРасходов.CODE,
		|	НормыРасходов.DESCR КАК Наименование,
		|	НормыРасходов.SP4116 КАК ВидЭлемента,
		|	НормыРасходов.SP4110 КАК Элемент_ID,
		|	НормыРасходов.SP20473,
		|	НормыРасходов.SP24886 КАК Позиция,
		|	НормыРасходов.SP24887 КАК Примечание,
		|	НормыРасходов.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.НормыРасходов КАК НормыРасходов";
		Если ID <> Неопределено Тогда
		ЗапросНР.Текст = ЗапросНР.Текст + " ГДЕ НормыРасходов.ID = &ID И НормыРасходов.флИзменение = 1";	
		ЗапросНР.УстановитьПараметр("ID",ID);
		Иначе
		ЗапросНР.Текст = ЗапросНР.Текст + " ГДЕ НормыРасходов.флИзменение = 1";
		КонецЕсли; 	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	ЗапросНР.Текст =
		"ВЫБРАТЬ
		|	НормыРасходов.ID,
		|	НормыРасходов.PARENTID,
		|	НормыРасходов.PARENTEXT,
		|	НормыРасходов.CODE,
		|	НормыРасходов.DESCR КАК Наименование,
		|	НормыРасходов.SP4116 КАК ВидЭлемента,
		|	НормыРасходов.SP4110 КАК Элемент_ID,
		|	НормыРасходов.SP20473,
		|	НормыРасходов.SP24886 КАК Позиция,
		|	НормыРасходов.SP24887 КАК Примечание,
		|	НормыРасходов.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.НормыРасходов КАК НормыРасходов";
		Если ID <> Неопределено Тогда
		ЗапросНР.Текст = ЗапросНР.Текст + " ГДЕ НормыРасходов.ID = &ID И НормыРасходов.флИзменение = 1";	
		ЗапросНР.УстановитьПараметр("ID",ID);
		Иначе
		ЗапросНР.Текст = ЗапросНР.Текст + " ГДЕ НормыРасходов.флИзменение = 1";
		КонецЕсли; 	
	КонецЕсли;
Результат = ЗапросНР.Выполнить();
ВыборкаДетальныеЗаписиНР = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписиНР.Следующий() Цикл
		Если СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIZ" Тогда		
		Продолжить;
		КонецЕсли;
	ТЧ = Объект.Изменения.Добавить();
	ТЧ.Справочник = "НормыРасходов";
	ТЧ.ID = ВыборкаДетальныеЗаписиНР.ID;
		Попытка
		НайденныйЭлемент = Справочники.НормыРасходов.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписиНР.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			НР = НайденныйЭлемент.ПолучитьОбъект();				
			НР.Позиция  = ВыборкаДетальныеЗаписиНР.Позиция;
			НР.Наименование = ВыборкаДетальныеЗаписиНР.Наименование;
			НР.Примечание = ВыборкаДетальныеЗаписиНР.Примечание;
			Элемент_ID = СокрЛП(ВыборкаДетальныеЗаписиНР.Элемент_ID);
			Элемент_ID = Сред(Элемент_ID,Найти(Элемент_ID," "));	
				Если СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JSW" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Деталь;
				НР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AJ0" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Узел;
				НР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "J8Z" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа;
				НР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);				
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JD0" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор;
				НР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIY" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Материал;
				НР.Элемент = ОбщийМодульСинхронизации.СозданиеМатериала(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JEL" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Документ;						
				НР.Элемент = ОбщийМодульСинхронизации.СозданиеДокумента(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JEM" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Программа;
				НР.Элемент = ОбщийМодульСинхронизации.СозданиеДокумента(Элемент_ID);
				//ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIZ" Тогда
				//НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.ТехОперация;
				//НР.Элемент = ОбщийМодульСинхронизации.СозданиеТехОперации(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JK6" Тогда
				НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.ТехОснастка;				
				НР.Элемент = ОбщийМодульСинхронизации.СозданиеТехОснастки(Элемент_ID);
				КонецЕсли;	
			НР.Записать();
			ТаблицаПД = ОбщийМодульСинхронизации.ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписиНР.ID,4111);//норма
				Для каждого ТЧ_ПД Из ТаблицаПД Цикл
				РНР = РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
				РНР.Период = ТЧ_ПД.Дата;
				РНР.Владелец = НР.Владелец;	
				РНР.Элемент = НР.Элемент;	
				РНР.НормаРасходов = НР.Ссылка;
				РНР.Норма = ТЧ_ПД.Данные;			
				РНР.Записать(Истина);
				КонецЦикла;
			ТЧ.Элемент = НР.Ссылка;
			ТЧ.Статус = Истина;
			Иначе
 	 		Спецификация = Справочники.Номенклатура.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписиНР.PARENTEXT);
				Если Не Спецификация.Пустая() Тогда
				НР = Справочники.НормыРасходов.СоздатьЭлемент();
				НР.ID = ВыборкаДетальныеЗаписиНР.ID;
				НР.Владелец = Спецификация;
				НР.Позиция  = ВыборкаДетальныеЗаписиНР.Позиция;
				НР.Наименование = ВыборкаДетальныеЗаписиНР.Наименование;
				НР.Примечание = ВыборкаДетальныеЗаписиНР.Примечание;
				Элемент_ID = СокрЛП(ВыборкаДетальныеЗаписиНР.Элемент_ID);
				Элемент_ID = Сред(Элемент_ID,Найти(Элемент_ID," "));	
					Если СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JSW" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Деталь;
					НР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AJ0" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Узел;
					НР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "J8Z" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа;
					НР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);				
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JD0" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор;
					НР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIY" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Материал;
					НР.Элемент = ОбщийМодульСинхронизации.СозданиеМатериала(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JEL" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Документ;						
					НР.Элемент = ОбщийМодульСинхронизации.СозданиеДокумента(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JEM" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Программа;
					НР.Элемент = ОбщийМодульСинхронизации.СозданиеДокумента(Элемент_ID);
					//ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "AIZ" Тогда
					//НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.ТехОперация;
					//НР.Элемент = ОбщийМодульСинхронизации.СозданиеТехОперации(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиНР.ВидЭлемента) = "JK6" Тогда
					НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.ТехОснастка;				
					НР.Элемент = ОбщийМодульСинхронизации.СозданиеТехОснастки(Элемент_ID);
					КонецЕсли;	
				НР.Записать();
				ТаблицаПД = ОбщийМодульСинхронизации.ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписиНР.ID,4111);//норма
					Для каждого ТЧ_ПД Из ТаблицаПД Цикл
					РНР = РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
					РНР.Период = ТЧ_ПД.Дата;
					РНР.Владелец = НР.Владелец;	
					РНР.Элемент = НР.Элемент;	
					РНР.НормаРасходов = НР.Ссылка;
					РНР.Норма = ТЧ_ПД.Данные;			
					РНР.Записать(Истина);
					КонецЦикла;
						Если Константы.КодБазы.Получить() = "БГР" Тогда
						ЗапросАНР.Текст = 
							"ВЫБРАТЬ
							|	АналогиНормРасходов.CODE КАК Код,
							|	АналогиНормРасходов.DESCR КАК Наименование,
							|	АналогиНормРасходов.PARENTEXT,
							|	АналогиНормРасходов.SP20526 КАК Приоритет,
							|	АналогиНормРасходов.SP20527 КАК ВидЭлемента,
							|	АналогиНормРасходов.SP20528 КАК Элемент_ID,
							|	АналогиНормРасходов.ID,
							|	АналогиНормРасходов.Ссылка
							|ИЗ
							|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.АналогиНормРасходов КАК АналогиНормРасходов
							|ГДЕ
							|	АналогиНормРасходов.PARENTEXT = &PARENTEXT";
						ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
						ЗапросАНР.Текст = 
							"ВЫБРАТЬ
							|	АналогиНормРасходов.CODE КАК Код,
							|	АналогиНормРасходов.DESCR КАК Наименование,
							|	АналогиНормРасходов.PARENTEXT,
							|	АналогиНормРасходов.SP20526 КАК Приоритет,
							|	АналогиНормРасходов.SP20527 КАК ВидЭлемента,
							|	АналогиНормРасходов.SP20528 КАК Элемент_ID,
							|	АналогиНормРасходов.ID,
							|	АналогиНормРасходов.Ссылка
							|ИЗ
							|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.АналогиНормРасходов КАК АналогиНормРасходов
							|ГДЕ
							|	АналогиНормРасходов.PARENTEXT = &PARENTEXT";
						КонецЕсли;
				ЗапросАНР.УстановитьПараметр("PARENTEXT",ВыборкаДетальныеЗаписиНР.ID);
				Результат = ЗапросАНР.Выполнить();
				ВыборкаДетальныеЗаписиАНР = Результат.Выбрать();
					Пока ВыборкаДетальныеЗаписиАНР.Следующий() Цикл			
					АНР = Справочники.АналогиНормРасходов.СоздатьЭлемент();
					АНР.ID = ВыборкаДетальныеЗаписиАНР.ID;
					АНР.Владелец = НР.Ссылка;
					АНР.Наименование = ВыборкаДетальныеЗаписиАНР.Наименование;
					АНР.Приоритет = ВыборкаДетальныеЗаписиАНР.Приоритет;
					Элемент_ID = СокрЛП(ВыборкаДетальныеЗаписиАНР.Элемент_ID);
					Элемент_ID = Сред(Элемент_ID,Найти(Элемент_ID," "));	
						Если СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JSW" Тогда
						АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Деталь;
						АНР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);
						ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AJ0" Тогда
						АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Узел;
						АНР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);				
						ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JD0" Тогда
						АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор;
						АНР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);
						ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AIY" Тогда
						АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Материал;
						АНР.Элемент = ОбщийМодульСинхронизации.СозданиеМатериала(Элемент_ID);
						КонецЕсли;	
					АНР.Записать();
					ТаблицаПД = ОбщийМодульСинхронизации.ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписиАНР.ID,20529);//норма
						Для каждого ТЧ_ПД Из ТаблицаПД Цикл
						РАНР = РегистрыСведений.АналогиНормРасходов.СоздатьМенеджерЗаписи();
						РАНР.Период = ТЧ_ПД.Дата;
						РАНР.Владелец = АНР.Владелец;
						РАНР.АналогНормыРасходов = АНР.Ссылка;
						РАНР.Норма = ТЧ_ПД.Данные/АНР.Элемент.ОсновнаяЕдиницаИзмерения.Коэффициент;		
						РАНР.Записать(Истина);
						КонецЦикла;
					ТЧ.Статус = Истина; 			
					КонецЦикла;
				ТЧ.Элемент = НР.Ссылка;	
				ТЧ.Статус = Истина;		
				Иначе
				ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписиНР.Наименование);
				ТЧ.Комментарий = "не принадлежит созданным спецификациям; ";
				КонецЕсли; 
			КонецЕсли;
		ОбщийМодульСинхронизации.СброситьИзменение(ВыборкаДетальныеЗаписиНР.Ссылка); 
		Исключение
		ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписиНР.Наименование);
		ТЧ.Ошибка = ОписаниеОшибки();
		КонецПопытки; 
	КонецЦикла;
Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьИзменениеАналоговНормРасходов(ID = Неопределено)
ЗапросАНР = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	ЗапросАНР.Текст =
		"ВЫБРАТЬ
		|	АналогиНормРасходов.CODE КАК Код,
		|	АналогиНормРасходов.DESCR КАК Наименование,
		|	АналогиНормРасходов.PARENTEXT,
		|	АналогиНормРасходов.SP20526 КАК Приоритет,
		|	АналогиНормРасходов.SP20527 КАК ВидЭлемента,
		|	АналогиНормРасходов.SP20528 КАК Элемент_ID,
		|	АналогиНормРасходов.ID,
		|	АналогиНормРасходов.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.АналогиНормРасходов КАК АналогиНормРасходов";
		Если ID <> Неопределено Тогда
		ЗапросАНР.Текст = ЗапросАНР.Текст + " ГДЕ АналогиНормРасходов.ID = &ID И АналогиНормРасходов.флИзменение = 1";	
		ЗапросАНР.УстановитьПараметр("ID",ID);
		Иначе
		ЗапросАНР.Текст = ЗапросАНР.Текст + " ГДЕ АналогиНормРасходов.флИзменение = 1";
		КонецЕсли; 	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда	
	ЗапросАНР.Текст =
		"ВЫБРАТЬ
		|	АналогиНормРасходов.CODE КАК Код,
		|	АналогиНормРасходов.DESCR КАК Наименование,
		|	АналогиНормРасходов.PARENTEXT,
		|	АналогиНормРасходов.SP20526 КАК Приоритет,
		|	АналогиНормРасходов.SP20527 КАК ВидЭлемента,
		|	АналогиНормРасходов.SP20528 КАК Элемент_ID,
		|	АналогиНормРасходов.ID,
		|	АналогиНормРасходов.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.АналогиНормРасходов КАК АналогиНормРасходов";
		Если ID <> Неопределено Тогда
		ЗапросАНР.Текст = ЗапросАНР.Текст + " ГДЕ АналогиНормРасходов.ID = &ID И АналогиНормРасходов.флИзменение = 1";	
		ЗапросАНР.УстановитьПараметр("ID",ID);
		Иначе
		ЗапросАНР.Текст = ЗапросАНР.Текст + " ГДЕ АналогиНормРасходов.флИзменение = 1";
		КонецЕсли;  	
	КонецЕсли;
Результат = ЗапросАНР.Выполнить();
ВыборкаДетальныеЗаписиАНР = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписиАНР.Следующий() Цикл
	ТЧ = Объект.Изменения.Добавить();
	ТЧ.Справочник = "АналогиНормРасходов";
	ТЧ.ID = ВыборкаДетальныеЗаписиАНР.ID;
		Попытка
		НайденныйЭлемент = Справочники.АналогиНормРасходов.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписиАНР.ID);
			Если Не НайденныйЭлемент.Пустая() Тогда
			АНР = НайденныйЭлемент.ПолучитьОбъект();				
			АНР.Наименование = ВыборкаДетальныеЗаписиАНР.Наименование;
			АНР.Приоритет = ВыборкаДетальныеЗаписиАНР.Приоритет;
			Элемент_ID = СокрЛП(ВыборкаДетальныеЗаписиАНР.Элемент_ID);
			Элемент_ID = Сред(Элемент_ID,Найти(Элемент_ID," "));	
				Если СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JSW" Тогда
				АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Деталь;
				АНР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AJ0" Тогда
				АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Узел;
				АНР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);				
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JD0" Тогда
				АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор;
				АНР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);
				ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AIY" Тогда
				АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Материал;
				АНР.Элемент = ОбщийМодульСинхронизации.СозданиеМатериала(Элемент_ID);
				КонецЕсли;
			АНР.Записать();
			ТаблицаПД = ОбщийМодульСинхронизации.ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписиАНР.ID,20529);//норма
				Для каждого ТЧ_ПД Из ТаблицаПД Цикл
				РАНР = РегистрыСведений.АналогиНормРасходов.СоздатьМенеджерЗаписи();
				РАНР.Период = ТЧ_ПД.Дата;
				РАНР.Владелец = АНР.Владелец;
				РАНР.АналогНормыРасходов = АНР.Ссылка;
				РАНР.Норма = ТЧ_ПД.Данные/АНР.Элемент.ОсновнаяЕдиницаИзмерения.Коэффициент;		
				РАНР.Записать(Истина);
				КонецЦикла;
			ТЧ.Элемент = АНР.Ссылка;
			ТЧ.Статус = Истина;
			Иначе
 	 		НР = Справочники.НормыРасходов.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписиАНР.PARENTEXT);
				Если Не НР.Пустая() Тогда
				АНР = Справочники.АналогиНормРасходов.СоздатьЭлемент();
				АНР.ID = ВыборкаДетальныеЗаписиАНР.ID;
				АНР.Владелец = НР.Ссылка;
				АНР.Наименование = ВыборкаДетальныеЗаписиАНР.Наименование;
				АНР.Приоритет = ВыборкаДетальныеЗаписиАНР.Приоритет;
				Элемент_ID = СокрЛП(ВыборкаДетальныеЗаписиАНР.Элемент_ID);
				Элемент_ID = Сред(Элемент_ID,Найти(Элемент_ID," "));	
					Если СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JSW" Тогда
					АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Деталь;
					АНР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AJ0" Тогда
					АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Узел;
					АНР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);				
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "JD0" Тогда
					АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор;
					АНР.Элемент = ОбщийМодульСинхронизации.СозданиеНоменклатуры(Элемент_ID);
					ИначеЕсли СокрЛП(ВыборкаДетальныеЗаписиАНР.ВидЭлемента) = "AIY" Тогда
					АНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Материал;
					АНР.Элемент = ОбщийМодульСинхронизации.СозданиеМатериала(Элемент_ID);
					КонецЕсли;	
				АНР.Записать();
				ТаблицаПД = ОбщийМодульСинхронизации.ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписиАНР.ID,20529);//норма
					Для каждого ТЧ_ПД Из ТаблицаПД Цикл
					РАНР = РегистрыСведений.АналогиНормРасходов.СоздатьМенеджерЗаписи();
					РАНР.Период = ТЧ_ПД.Дата;
					РАНР.Владелец = АНР.Владелец;
					РАНР.АналогНормыРасходов = АНР.Ссылка;
					РАНР.Норма = ТЧ_ПД.Данные/АНР.Элемент.ОсновнаяЕдиницаИзмерения.Коэффициент;		
					РАНР.Записать(Истина);
					КонецЦикла;
				ТЧ.Элемент = АНР.Ссылка;
				ТЧ.Статус = Истина;						 			
				Иначе
				ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписиАНР.Наименование);
				ТЧ.Комментарий = "не принадлежит созданным нормам расходов; ";
				КонецЕсли; 
			КонецЕсли; 
		ОбщийМодульСинхронизации.СброситьИзменение(ВыборкаДетальныеЗаписиАНР.Ссылка); 
		Исключение
		ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписиАНР.Наименование);
		ТЧ.Ошибка = ОписаниеОшибки();
		КонецПопытки; 
	КонецЦикла;
Возврат Истина;
КонецФункции

&НаСервере
Функция ПроверитьИзменениеИзготовленияПП(ID = Неопределено)
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст =		
		"ВЫБРАТЬ
		|	ИзготовлениеПП.ID,
		|	ИзготовлениеПП.DESCR КАК Наименование,
		|	ИзготовлениеПП.PARENTEXT,
		|	ИзготовлениеПП.SP26403 КАК Документ_ID,
		|	ИзготовлениеПП.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ИзготовлениеПП КАК ИзготовлениеПП";
		Если ID <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ИзготовлениеПП.ID = &ID И ИзготовлениеПП.флИзменение = 1";	
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ ИзготовлениеПП.флИзменение = 1";
		КонецЕсли;
	КодПеременныхДанных = 26404;	
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ИзготовлениеПП.ID,
		|	ИзготовлениеПП.DESCR КАК Наименование,
		|	ИзготовлениеПП.PARENTEXT,
		|	ИзготовлениеПП.SP26394 КАК Документ_ID,
		|	ИзготовлениеПП.Ссылка
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ИзготовлениеПП КАК ИзготовлениеПП";
		Если ID <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " ГДЕ ИзготовлениеПП.ID = &ID И ИзготовлениеПП.флИзменение = 1";	
		Запрос.УстановитьПараметр("ID",ID);
		Иначе
		Запрос.Текст = Запрос.Текст + " ГДЕ ИзготовлениеПП.флИзменение = 1";
		КонецЕсли;
	КодПеременныхДанных = 26395;	
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		ТЧ = Объект.Изменения.Добавить();
		ТЧ.Справочник = "ИзготовлениеПП";
		ТЧ.ID = ВыборкаДетальныеЗаписи.ID;
		Материал = Справочники.Материалы.НайтиПоРеквизиту("ID",ВыборкаДетальныеЗаписи.PARENTEXT);
			Если Не Материал.Пустая() Тогда
			ФайлИзготовления = ОбщийМодульСинхронизации.СозданиеДокумента(ВыборкаДетальныеЗаписи.Документ_ID);
			ТаблицаПД = ОбщийМодульСинхронизации.ПолучитьПеременныеДанные(ВыборкаДетальныеЗаписи.ID,КодПеременныхДанных);
				Для каждого ТЧ_ПД Из ТаблицаПД Цикл
				НаборЗаписей = РегистрыСведений.ИзготовлениеПечатныхПлат.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.МПЗ.Установить(Материал.Ссылка);
				НаборЗаписей.Отбор.ФайлИзготовления.Установить(ФайлИзготовления);
				НаборЗаписей.Прочитать();
					Если НаборЗаписей.Количество() > 0 Тогда
					    Для Каждого Запись Из НаборЗаписей Цикл 
					   	Запись.Действующий = ?(ТЧ_ПД.Данные > 0,Истина,Ложь);  
					    КонецЦикла;
					НаборЗаписей.Записать(Истина);
					Иначе
					ИзготовлениеПП = РегистрыСведений.ИзготовлениеПечатныхПлат.СоздатьМенеджерЗаписи();
					ИзготовлениеПП.Период = ТЧ_ПД.Дата;
					ИзготовлениеПП.МПЗ = Материал.Ссылка;
					ИзготовлениеПП.ФайлИзготовления = ФайлИзготовления;
					ИзготовлениеПП.Действующий = ?(ТЧ_ПД.Данные > 0,Истина,Ложь);
					ИзготовлениеПП.Записать(Истина);
					ТЧ.Элемент = ИзготовлениеПП.ФайлИзготовления;
					ТЧ.Статус = Истина;
					КонецЕсли;
				КонецЦикла;
			Иначе
			ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
			ТЧ.Комментарий = "не принадлежит созданным материалам; ";
			КонецЕсли;
		ОбщийМодульСинхронизации.СброситьИзменение(ВыборкаДетальныеЗаписи.Ссылка); 
		Исключение
		ТЧ.Элемент = СокрЛП(ВыборкаДетальныеЗаписи.Наименование);
		ТЧ.Ошибка = ОписаниеОшибки();
		КонецПопытки;
	КонецЦикла;
Возврат Истина;
КонецФункции

&НаСервере
Процедура УстановитьДатуПоследнейСинхронизации()
ДатаПоследнейСинхронизации = ТекущаяДата();
Константы.ДатаПоследнейСинхронизации.Установить(ДатаПоследнейСинхронизации);
КонецПроцедуры

&НаСервере
Функция БазаУкраины()
Возврат(?(Константы.КодБазы.Получить() = "ХРК",Истина,Ложь));
КонецФункции

&НаКлиенте
Процедура Синхронизировать(Команда)
	Если Не БазаУкраины() Тогда	
	Сообщить("Синхронизация запрещена!");
	Возврат;
	КонецЕсли; 
ФИО = ОбщийМодульВызовСервера.ИдётСинхронизация();
	Если ФИО.Пустая() Тогда
	ОбщийМодульВызовСервера.ЗаблокироватьСинхронизацию();
	Иначе
	Сообщить(ФИО);
	Возврат;
	КонецЕсли; 
Объект.Изменения.Очистить();
Состояние("Обработка...",,"Синхронизация справочника товарных групп...",БиблиотекаКартинок.ДлительнаяОперация);
	Если Не ПроверитьИзменениеТоварныхГрупп() Тогда
	Возврат;
	КонецЕсли;
Состояние("Обработка...",,"Синхронизация справочника товаров...",БиблиотекаКартинок.ДлительнаяОперация);
	Если Не ПроверитьИзменениеТоваров() Тогда
	Возврат;
	КонецЕсли;
Состояние("Обработка...",,"Синхронизация справочника документов и программ...",БиблиотекаКартинок.ДлительнаяОперация);
	Если Не ПроверитьИзменениеДокументов() Тогда
	Возврат;
	КонецЕсли; 
Состояние("Обработка...",,"Синхронизация справочника материалов...",БиблиотекаКартинок.ДлительнаяОперация);
	Если Не ПроверитьИзменениеМатериалов() Тогда
	Возврат;
	КонецЕсли;
Состояние("Обработка...",,"Синхронизация справочника номенклатуры...",БиблиотекаКартинок.ДлительнаяОперация); 
	Если Не ПроверитьИзменениеНоменклатуры() Тогда
	Возврат;
	КонецЕсли;
//Состояние("Обработка...",,"Синхронизация справочника тех. операций...",БиблиотекаКартинок.ДлительнаяОперация);
//	Если Не ПроверитьИзменениеТехОпераций() Тогда
//	Возврат;
//	КонецЕсли;
Состояние("Обработка...",,"Синхронизация справочника тех. оснастки...",БиблиотекаКартинок.ДлительнаяОперация);
	Если Не ПроверитьИзменениеТехОснастки() Тогда
	Возврат;
	КонецЕсли;
Состояние("Обработка...",,"Синхронизация справочника аналогов норм расходов...",БиблиотекаКартинок.ДлительнаяОперация);
	Если Не ПроверитьИзменениеАналоговНормРасходов() Тогда
	Возврат;
	КонецЕсли;
Состояние("Обработка...",,"Синхронизация справочника норм расходов...",БиблиотекаКартинок.ДлительнаяОперация);
	Если Не ПроверитьИзменениеНормРасходов() Тогда
	Возврат;
	КонецЕсли;
Состояние("Обработка...",,"Синхронизация регистра изготовление печатных плат...",БиблиотекаКартинок.ДлительнаяОперация);
	Если Не ПроверитьИзменениеИзготовленияПП() Тогда
	Возврат;
	КонецЕсли;				
Объект.Изменения.Сортировать("Статус,Справочник,Элемент");
УстановитьДатуПоследнейСинхронизации();
ОбщийМодульВызовСервера.РазблокироватьСинхронизацию(); 
КонецПроцедуры

&НаСервере
Функция КопироватьНоменклатуруНаСервере(СозданыйТовар)
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.ID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.DESCR = &DESCR";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.ID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.DESCR = &DESCR";
	КонецЕсли;
Запрос.УстановитьПараметр("DESCR",СокрЛП(Объект.ВыбНаименование));
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		СозданнаяСпецификация = ОбщийМодульСинхронизации.СозданиеНоменклатуры(ВыборкаДетальныеЗаписи.ID);
		Спец = СозданнаяСпецификация.ПолучитьОбъект();
		Спец.Товар = СозданыйТовар;
		Спец.Записать();
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		Сообщить("Произошла исключительная ситуация! Копирование не выполнено!");
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		СозданнаяСпецификация = Справочники.Номенклатура.ПустаяСсылка();
		КонецПопытки;
	Возврат(СозданнаяСпецификация);
	КонецЦикла;
КонецФункции

&НаСервере
Функция ПолучитьНаименованиеТовара()
Возврат(глНаименованиеВСкобкахБезЭтапа(Объект.ВыбНаименование));
КонецФункции

&НаСервере
Функция ПолучитьТовар(Наименование)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Товары.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Товары КАК Товары
	|ГДЕ
	|	Товары.Наименование = &Наименование";
Запрос.УстановитьПараметр("Наименование", Наименование);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
Возврат(Справочники.Товары.ПустаяСсылка());
КонецФункции

&НаКлиенте
Процедура КопироватьНоменклатуру(Команда)
ФИО = ОбщийМодульВызовСервера.ИдётСинхронизация();
	Если ФИО.Пустая() Тогда
	ОбщийМодульВызовСервера.ЗаблокироватьСинхронизацию();
	Иначе
	Сообщить(ФИО);
	Возврат;
	КонецЕсли;
НаименованиеТовара = ПолучитьНаименованиеТовара();
Товар = ПолучитьТовар(НаименованиеТовара);
	Если Товар.Пустая() Тогда
	Состояние("Обработка...",,"Копирование товара...",БиблиотекаКартинок.ДлительнаяОперация);
		Если ТипТовара = 2 Тогда
		Товар = КопироватьТоварДатчикНаСервере(НаименованиеТовара);	
		Иначе	
		Товар = КопироватьТоварНаСервере(НаименованиеТовара);	
		КонецЕсли; 
			Если Товар.Пустая() Тогда
				Если Вопрос("Товар не создан. Скопировать спецификацию?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				ОбщийМодульВызовСервера.РазблокироватьСинхронизацию();
				Возврат;		
				КонецЕсли; 
			КонецЕсли;
	КонецЕсли;
Состояние("Обработка...",,"Копирование спецификации...",БиблиотекаКартинок.ДлительнаяОперация);
	Если КопироватьНоменклатуруНаСервере(Товар).Пустая() Тогда
	Сообщить("Спецификация не создана!");
	КонецЕсли; 
ОбщийМодульВызовСервера.РазблокироватьСинхронизацию();
КонецПроцедуры

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка) 
ТипТовара = 1;
ВидЭлемента = 2;
	Если Не ЗначениеЗаполнено(Константы.КодБазы.Получить()) Тогда
	Сообщить("Не заполнена константа Код базы!");
	ЭтаФорма.ТолькоПросмотр = Истина;
	Возврат;	
	КонецЕсли; 
ДатаПоследнейСинхронизации = Константы.ДатаПоследнейСинхронизации.Получить();
	Если Константы.КодБазы.Получить() = "БГР" Тогда	
	ВнешниеИсточникиДанных.Номенклатура1С77.УстановитьСоединение();
		Если ВнешниеИсточникиДанных.Номенклатура1С77.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Отключен Тогда
    	Сообщить("Не открыто соединение с базой 1С7.7!");
		ЭтаФорма.ТолькоПросмотр = Истина;
		Возврат;
		КонецЕсли; 
	пСеанс = ВнешниеИсточникиДанных.Номенклатура1С77.ПолучитьОбщиеПараметрыСоединения();
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	ВнешниеИсточникиДанных.Номенклатура1С77_Харьков.УстановитьСоединение();
		Если ВнешниеИсточникиДанных.Номенклатура1С77_Харьков.ПолучитьСостояние() = СостояниеВнешнегоИсточникаДанных.Отключен Тогда
    	Сообщить("Не открыто соединение с базой 1С7.7!");
		ЭтаФорма.ТолькоПросмотр = Истина;
		Возврат;
		КонецЕсли;
	пСеанс = ВнешниеИсточникиДанных.Номенклатура1С77_Харьков.ПолучитьОбщиеПараметрыСоединения();
	КонецЕсли;
Connection  = Новый COMОбъект("ADODB.Connection");
Command  = Новый COMОбъект("ADODB.Command");

	Попытка
	Connection.Open(СокрЛП(пСеанс.СтрокаСоединения));
  	Command.ActiveConnection = Connection;
	Структура = Новый Структура("Объект", Command);
	ADODB_Command = ПоместитьВоВременноеХранилище(Структура, ЭтаФорма.УникальныйИдентификатор);
 	Исключение
	Сообщить(ОписаниеОшибки());
    Сообщить("Не открыто соединение с базой 1С7.7!");
	ЭтаФорма.ТолькоПросмотр = Истина;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ПолучитьМетаданные(ВыбТип)
Возврат(Метаданные.НайтиПоТипу(ВыбТип).ПолноеИмя());
КонецФункции

&НаКлиенте
Процедура ИзмененияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(Элементы.Изменения.ТекущиеДанные.Элемент) <> Тип("Строка") Тогда
	ТекФорма = ПолучитьФорму(ПолучитьМетаданные(ТипЗнч(Элементы.Изменения.ТекущиеДанные.Элемент))+".ФормаСписка");
	ТекФорма.Открыть();
	ТекФорма.Элементы.Список.ТекущаяСтрока = Элементы.Изменения.ТекущиеДанные.Элемент;	
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция КопироватьТоварНаСервере(НаименованиеТовара)
СозданыйТовар = Справочники.Товары.ПустаяСсылка();
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыПриборы.ID,
		|	ТоварыПриборы.SP25097 КАК КодТовара,
		|	ТоварыПриборы.ISMARK,
		|	ТоварыПриборы.DESCR
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварыПриборы КАК ТоварыПриборы
		|ГДЕ
		|	ТоварыПриборы.DESCR = &DESCR";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыПриборы.ID,
		|	ТоварыПриборы.SP25097 КАК КодТовара,
		|	ТоварыПриборы.ISMARK,
		|	ТоварыПриборы.DESCR
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварыПриборы КАК ТоварыПриборы
		|ГДЕ
		|	ТоварыПриборы.DESCR = &DESCR";
	КонецЕсли;
Запрос.УстановитьПараметр("DESCR",НаименованиеТовара);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		СозданыйТовар = ОбщийМодульСинхронизации.СозданиеТовара(ВыборкаДетальныеЗаписи.КодТовара);
		ВерхнийРодитель = ПолучитьВерхнегоРодителя(СозданыйТовар);
		Наимен = СокрЛП(ВерхнийРодитель.Наименование);
			Если (Наимен <> "Товары УПЭА")и(Наимен <> "Товары УД")и(Наимен <> "Товары ТНП") Тогда
				Если ТипТовара = 1 Тогда
				ВерхняяГруппаТовара = Справочники.Товары.НайтиПоНаименованию("Товары УПЭА",Истина);
				ИначеЕсли ТипТовара = 2 Тогда
				ВерхняяГруппаТовара = Справочники.Товары.НайтиПоНаименованию("Товары УД",Истина);					
				ИначеЕсли ТипТовара = 3 Тогда
				ВерхняяГруппаТовара = Справочники.Товары.НайтиПоНаименованию("Товары ТНП",Истина);				
				КонецЕсли;
			НоваяГруппа = ВерхнийРодитель.ПолучитьОбъект();
			НоваяГруппа.Родитель = ВерхняяГруппаТовара;
			НоваяГруппа.Записать();
			КонецЕсли;		
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		Сообщить("Произошла исключительная ситуация! Копирование не выполнено!");
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		СозданыйТовар = Справочники.Товары.ПустаяСсылка();
		КонецПопытки;
	КонецЦикла;
Возврат(СозданыйТовар);
КонецФункции

&НаСервере
Функция КопироватьТоварДатчикНаСервере(НаименованиеТовара)
СозданыйТовар = Справочники.Товары.ПустаяСсылка();
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыДатчики.ID,
		|	ТоварыДатчики.ISMARK,
		|	ТоварыДатчики.CODE КАК КодТовара,
		|	ТоварыДатчики.DESCR
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварыДатчики КАК ТоварыДатчики
		|ГДЕ
		|	ТоварыДатчики.DESCR = &DESCR";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТоварыДатчики.ID,
		|	ТоварыДатчики.ISMARK,
		|	ТоварыДатчики.CODE КАК КодТовара,
		|	ТоварыДатчики.DESCR
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварыДатчики КАК ТоварыДатчики
		|ГДЕ
		|	ТоварыДатчики.DESCR = &DESCR";
	КонецЕсли;
Запрос.УстановитьПараметр("DESCR",НаименованиеТовара);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		СозданыйТовар = ОбщийМодульСинхронизации.СозданиеТовараДатчика(ВыборкаДетальныеЗаписи.КодТовара);
		ВерхнийРодитель = ПолучитьВерхнегоРодителя(СозданыйТовар);
		Наимен = СокрЛП(ВерхнийРодитель.Наименование);
			Если (Наимен <> "Товары УПЭА")и(Наимен <> "Товары УД")и(Наимен <> "Товары ТНП") Тогда
				Если ТипТовара = 1 Тогда
				ВерхняяГруппаТовара = Справочники.Товары.НайтиПоНаименованию("Товары УПЭА",Истина);
				ИначеЕсли ТипТовара = 2 Тогда
				ВерхняяГруппаТовара = Справочники.Товары.НайтиПоНаименованию("Товары УД",Истина);					
				ИначеЕсли ТипТовара = 3 Тогда
				ВерхняяГруппаТовара = Справочники.Товары.НайтиПоНаименованию("Товары ТНП",Истина);				
				КонецЕсли;
			НоваяГруппа = ВерхнийРодитель.ПолучитьОбъект();
			НоваяГруппа.Родитель = ВерхняяГруппаТовара;
			НоваяГруппа.Записать();
			КонецЕсли;		 
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		Сообщить("Произошла исключительная ситуация! Копирование не выполнено!");
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		СозданыйТовар = Справочники.Товары.ПустаяСсылка();
		КонецПопытки;
	КонецЦикла;
Возврат(СозданыйТовар);
КонецФункции

&НаКлиенте
Процедура КопироватьТовар(Команда)
ФИО = ОбщийМодульВызовСервера.ИдётСинхронизация();
	Если ФИО.Пустая() Тогда
	ОбщийМодульВызовСервера.ЗаблокироватьСинхронизацию();
	Иначе
	Сообщить(ФИО);
	Возврат;
	КонецЕсли;
Состояние("Обработка...",,"Копирование товара...",БиблиотекаКартинок.ДлительнаяОперация);
	Если ТипТовара = 2 Тогда
	Товар = КопироватьТоварДатчикНаСервере(СокрЛП(Объект.НаименованиеТовара));	
	Иначе
	Товар = КопироватьТоварНаСервере(СокрЛП(Объект.НаименованиеТовара));
	КонецЕсли; 
		Если Товар.Пустая() Тогда
		Сообщить("Товар не создан!");
		КонецЕсли;
ОбщийМодульВызовСервера.РазблокироватьСинхронизацию(); 
КонецПроцедуры

&НаСервере
Функция КопироватьМатериалНаСервере(Наименование)
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Материалы.ID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Материалы КАК Материалы
		|ГДЕ
		|	Материалы.DESCR = &DESCR";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Материалы.ID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Материалы КАК Материалы
		|ГДЕ
		|	Материалы.DESCR = &DESCR";
	КонецЕсли;
Запрос.УстановитьПараметр("DESCR",СокрЛП(Наименование));
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Попытка
			НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
			Материал = ОбщийМодульСинхронизации.СозданиеМатериала(ВыборкаДетальныеЗаписи.ID);
			ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
			Исключение
			Сообщить("Произошла исключительная ситуация! Копирование не выполнено!");
			Сообщить(ОписаниеОшибки());
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Материал = Справочники.Материалы.ПустаяСсылка();
			КонецПопытки;
		Возврат(Материал);
		КонецЦикла;
	Иначе
	Возврат(Справочники.Материалы.ПустаяСсылка());
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьМатериалыИзФайла(Команда)
ФИО = ОбщийМодульВызовСервера.ИдётСинхронизация();
	Если ФИО.Пустая() Тогда
	ОбщийМодульВызовСервера.ЗаблокироватьСинхронизацию();
	Иначе
	Сообщить(ФИО);
	Возврат;
	КонецЕсли;
Результат = ОбщийМодульКлиент.ОткрытьФайлExcel("Выберите файл c материалами");
	Если Результат <> Неопределено Тогда
	ExcelЛист = Результат.ExcelЛист;
	КолСтрок = Результат.КоличествоСтрок; 
	    Для к = 2 по КолСтрок Цикл
		Состояние("Обработка...",к*100/КолСтрок,"Загрузка материалов из файла...");
		Результат = КопироватьМатериалНаСервере(СокрЛП(ExcelЛист.Cells(к,1).Value));
			Если Результат.Пустая() Тогда
			Сообщить(СокрЛП(ExcelЛист.Cells(к,1).Value) + " - не загружен");
			КонецЕсли;  
	    КонецЦикла;
	Результат.Excel.Quit();
	КонецЕсли;
ОбщийМодульВызовСервера.РазблокироватьСинхронизацию();
КонецПроцедуры

&НаСервере
Функция КопироватьСпецификациюНаСервере(Наименование)
Запрос = Новый Запрос;

	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.ID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.DESCR = &DESCR";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.ID
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.DESCR = &DESCR";
	КонецЕсли;
Запрос.УстановитьПараметр("DESCR",Наименование);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		СозданнаяСпецификация = ОбщийМодульСинхронизации.СозданиеНоменклатуры(ВыборкаДетальныеЗаписи.ID);
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		Сообщить("Произошла исключительная ситуация! Копирование не выполнено!");
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		СозданнаяСпецификация = Справочники.Номенклатура.ПустаяСсылка();
		КонецПопытки;
	Возврат(СозданнаяСпецификация);
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура ЗагрузитьНоменклатуруИзФайла(Команда)
ФИО = ОбщийМодульВызовСервера.ИдётСинхронизация();
	Если ФИО.Пустая() Тогда
	ОбщийМодульВызовСервера.ЗаблокироватьСинхронизацию();
	Иначе
	Сообщить(ФИО);
	Возврат;
	КонецЕсли; 
Результат = ОбщийМодульКлиент.ОткрытьФайлExcel("Выберите файл c номенклатурой");
	Если Результат <> Неопределено Тогда
	ExcelЛист = Результат.ExcelЛист;
	КолСтрок = Результат.КоличествоСтрок; 
	    Для к = 2 по КолСтрок Цикл
		Состояние("Обработка...",к*100/КолСтрок,"Загрузка "+СокрЛП(ExcelЛист.Cells(к,1).Value)+"..."); 
		КопироватьСпецификациюНаСервере(СокрЛП(ExcelЛист.Cells(к,1).Value));
	    КонецЦикла;
	Результат.Excel.Quit();
	КонецЕсли;
ОбщийМодульВызовСервера.РазблокироватьСинхронизацию();
КонецПроцедуры

&НаКлиенте
Процедура КопироватьМатериал(Команда)
ФИО = ОбщийМодульВызовСервера.ИдётСинхронизация();
	Если ФИО.Пустая() Тогда
	ОбщийМодульВызовСервера.ЗаблокироватьСинхронизацию();
	Иначе
	Сообщить(ФИО);
	Возврат;
	КонецЕсли;
		Если КопироватьМатериалНаСервере(Объект.НаименованиеМатериала).Пустая() Тогда
		Сообщить("Материал не создан!");
		КонецЕсли;
ОбщийМодульВызовСервера.РазблокироватьСинхронизацию();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьСпецификациюНаКириллицу(Команда)
РезультатКириллица = СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Объект.ВыбНаименование,Истина,"1234567890()[]_-.,%!:; ");
РезультатЛатиница = СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Объект.ВыбНаименование,Истина,"1234567890()[]_-.,%!:; ");
	Если РезультатКириллица Тогда
	Сообщить(СокрЛП(Объект.ВыбНаименование)+" - содержит только кириллические символы!");
	ИначеЕсли РезультатЛатиница Тогда
	Сообщить(СокрЛП(Объект.ВыбНаименование)+" - содержит только латинские символы!");
	Иначе
	Сообщить(СокрЛП(Объект.ВыбНаименование)+" - содержит кириллические и латинские символы!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьТоварНаКириллицу(Команда)
РезультатКириллица = СтроковыеФункцииКлиентСервер.ТолькоКириллицаВСтроке(Объект.НаименованиеТовара,Истина,"1234567890()[]_-.,%!:; ");
РезультатЛатиница = СтроковыеФункцииКлиентСервер.ТолькоЛатиницаВСтроке(Объект.НаименованиеТовара,Истина,"1234567890()[]_-.,%!:; ");
	Если РезультатКириллица Тогда
	Сообщить(СокрЛП(Объект.НаименованиеТовара)+" - содержит только кириллические символы!");
	ИначеЕсли РезультатЛатиница Тогда
	Сообщить(СокрЛП(Объект.НаименованиеТовара)+" - содержит только латинские символы!");
	Иначе
	Сообщить(СокрЛП(Объект.НаименованиеТовара)+" - содержит кириллические и латинские символы!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПрисвоитьТоварыНаСервере(ГруппаМПЗ)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Материалы.Ссылка,
	|	Материалы.Наименование
	|ИЗ
	|	Справочник.Материалы КАК Материалы
	|ГДЕ
	|	Материалы.ПометкаУдаления = ЛОЖЬ
	|	И Материалы.ЭтоГруппа = ЛОЖЬ
	|	И Материалы.Родитель В ИЕРАРХИИ(&Родитель)
	|	И Материалы.Товар = &ПустойТовар";
Запрос.УстановитьПараметр("ПустойТовар", Справочники.Товары.ПустаяСсылка());
Запрос.УстановитьПараметр("Родитель", ГруппаМПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Товар = ОбщийМодульСинхронизации.ПрисвоитьТовар(СокрЛП(ВыборкаДетальныеЗаписи.Наименование));
		Если Не Товар.Пустая() Тогда
		Мат = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
		Мат.Товар = Товар;
		Мат.Записать();
		Иначе
		Сообщить(СокрЛП(ВыборкаДетальныеЗаписи.Наименование) + " - товар не найден!");	
		КонецЕсли;	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПрисвоитьТовары(Команда)
Ф = ПолучитьФорму("Справочник.Материалы.ФормаВыбораГруппы"); 
Результат = Ф.ОткрытьМодально();
	Если Результат <> Неопределено Тогда
	Состояние("Обработка...",,"Обработка выбранной группы материалов...");	
	ПрисвоитьТоварыНаСервере(Результат);
	КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция НайтиНоменклатуруНаСервере()
Возврат(Справочники.Номенклатура.НайтиПоНаименованию(СокрЛП(Объект.ВыбНаименование)));
КонецФункции

&НаКлиенте
Процедура НайтиНоменклатуру(Команда)
Номен = НайтиНоменклатуруНаСервере();
	Если Не Номен.Пустая() Тогда
	ТекФорма = ПолучитьФорму("Справочник.Номенклатура.ФормаСписка");
	ТекФорма.Открыть();
	ТекФорма.Элементы.Список.ТекущаяСтрока = Номен;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиТоварНаСервере()
Возврат(Справочники.Товары.НайтиПоНаименованию(СокрЛП(Объект.НаименованиеТовара)));
КонецФункции

&НаКлиенте
Процедура НайтиТовар(Команда)
Товар = НайтиТоварНаСервере();
	Если Не Товар.Пустая() Тогда
	ТекФорма = ПолучитьФорму("Справочник.Товары.ФормаСписка");
	ТекФорма.Открыть();
	ТекФорма.Элементы.Список.ТекущаяСтрока = Товар;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиМатериалНаСервере()
Возврат(Справочники.Материалы.НайтиПоНаименованию(СокрЛП(Объект.НаименованиеМатериала)));
КонецФункции

&НаКлиенте
Процедура НайтиМатериал(Команда)
Материал = НайтиМатериалНаСервере();
	Если Не Материал.Пустая() Тогда
	ТекФорма = ПолучитьФорму("Справочник.Материалы.ФормаСписка");
	ТекФорма.Открыть();
	ТекФорма.Элементы.Список.ТекущаяСтрока = Материал;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НайтиСоответствиеНаСервере(Наименование)
Запрос = Новый Запрос;

	Если ВидЭлемента = 1 Тогда
		Если Константы.КодБазы.Получить() = "БГР" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Материалы.ID,
			|	Материалы.DESCR,
			|	Материалы.SP25313 КАК Статус,
			|	Материалы.SP28808 КАК ПроблеммыЛогистики
			|ИЗ
			|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Материалы КАК Материалы
			|ГДЕ
			|	Материалы.DESCR = &DESCR
			|	И Материалы.ISFOLDER = 2";
		ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Материалы.ID,
			|	Материалы.DESCR,
			|	Материалы.SP25313 КАК Статус,
			|	Материалы.SP28564 КАК ПроблеммыЛогистики
			|ИЗ
			|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Материалы КАК Материалы
			|ГДЕ
			|	Материалы.DESCR = &DESCR
			|	И Материалы.ISFOLDER = 2";
		КонецЕсли;
	Запрос.УстановитьПараметр("DESCR",Наименование);	
	Иначе	
		Если Константы.КодБазы.Получить() = "БГР" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.ID,
			|	Номенклатура.DESCR,
			|	Номенклатура.SP25384 КАК Статус
			|ИЗ
			|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.DESCR ПОДОБНО &DESCR
			|	И Номенклатура.ISFOLDER = 2";
		ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Номенклатура.ID,
			|	Номенклатура.DESCR,
			|	Номенклатура.SP25384 КАК Статус
			|ИЗ
			|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.DESCR ПОДОБНО &DESCR
			|	И Номенклатура.ISFOLDER = 2";
		КонецЕсли;
			Если Найти(Наименование,"[") > 0 Тогда
			Запрос.УстановитьПараметр("DESCR","%УП-"+Лев(Наименование,Найти(Наименование,"[")-1)+"%");
			Иначе
			Запрос.УстановитьПараметр("DESCR","%УП-"+Наименование+")%");
			КонецЕсли; 	
	КонецЕсли;
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если СокрЛП(Сред(ВыборкаДетальныеЗаписи.DESCR,Найти(ВыборкаДетальныеЗаписи.DESCR,"УП-")+3)) <> Наименование+")" Тогда
			Продолжить;
			КонецЕсли; 
		ТЧ = ТаблицаЗагрузки.Добавить();
		ТЧ.Наименование = Наименование;
		ТЧ.Наименование1С7 = ВыборкаДетальныеЗаписи.DESCR;
		ТЧ.ID = ВыборкаДетальныеЗаписи.ID;
			Если ВидЭлемента = 1 Тогда
			    Если ВыборкаДетальныеЗаписи.ПроблеммыЛогистики = 1 Тогда
				ТЧ.Статус = Перечисления.СтатусыМПЗ.ПроблеммыЛогистики;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 0 Тогда
		        ТЧ.Статус = Перечисления.СтатусыМПЗ.ПустаяСсылка();
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 1 Тогда
				ТЧ.Статус = Перечисления.СтатусыМПЗ.Основная;	
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 2 Тогда
				ТЧ.Статус = Перечисления.СтатусыМПЗ.Основная;	
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 3 Тогда
				ТЧ.Статус = Перечисления.СтатусыМПЗ.ОНР;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 4 Тогда
				ТЧ.Статус = Перечисления.СтатусыМПЗ.ДоИсчерпанияЗапасов;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 5 Тогда
				ТЧ.Статус = Перечисления.СтатусыМПЗ.Запрещённая;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 6 Тогда
				ТЧ.Статус = Перечисления.СтатусыМПЗ.Основная;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 7 Тогда
				ТЧ.Статус = Перечисления.СтатусыМПЗ.Основная;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 8 Тогда
				ТЧ.Статус = Перечисления.СтатусыМПЗ.Неликвид;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 9 Тогда
				ТЧ.Статус = Перечисления.СтатусыМПЗ.Основная;
				Иначе
				ТЧ.Статус = Перечисления.СтатусыМПЗ.ПустаяСсылка();
				КонецЕсли;
			Иначе
                Если ВыборкаДетальныеЗаписи.Статус = 0 Тогда
				ТЧ.Статус = Перечисления.СтатусыСпецификаций.ПустаяСсылка();
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 1 Тогда
				ТЧ.Статус = Перечисления.СтатусыСпецификаций.Серийная;	
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 2 Тогда
				ТЧ.Статус = Перечисления.СтатусыСпецификаций.Серийная;	
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 3 Тогда
				ТЧ.Статус = Перечисления.СтатусыСпецификаций.ОНР;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 4 Тогда
				ТЧ.Статус = Перечисления.СтатусыСпецификаций.ДоИсчерпанияЗапасов;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 5 Тогда
				ТЧ.Статус = Перечисления.СтатусыСпецификаций.Запрещённая;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 6 Тогда
				ТЧ.Статус = Перечисления.СтатусыСпецификаций.Опытная;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 7 Тогда
				ТЧ.Статус = Перечисления.СтатусыСпецификаций.Опытная1;
				ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 9 Тогда
				ТЧ.Статус = Перечисления.СтатусыСпецификаций.Предсерийная;
				Иначе
	            ТЧ.Статус = Перечисления.СтатусыСпецификаций.ПустаяСсылка();
				КонецЕсли; 
			КонецЕсли;
				Если ЗначениеЗаполнено(ТЧ.ID) Тогда
					Если ВыборкаДетальныеЗаписи.Статус <> 5 Тогда
					ТЧ.Пометка = Истина;
					КонецЕсли;		
				КонецЕсли; 
		КонецЦикла;
	Иначе 
	ТЧ = ТаблицаЗагрузки.Добавить();
	ТЧ.Наименование = Наименование;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИНайтиСоответствие(Команда)
ТаблицаЗагрузки.Очистить();
Результат = ОбщийМодульКлиент.ОткрытьФайлExcel("Выберите файл со списком загрузки");
	Если Результат <> Неопределено Тогда
	ExcelЛист = Результат.ExcelЛист;
	КолСтрок = Результат.КоличествоСтрок; 
	    Для к = 2 по КолСтрок Цикл
		Состояние("Обработка...",к*100/КолСтрок,"Загрузка из файла...");
		Наимен = СокрЛП(ExcelЛист.Cells(к,1).Value);
			Если ЗначениеЗаполнено(Наимен) Тогда
			НайтиСоответствиеНаСервере(Наимен);
			КонецЕсли;  
	    КонецЦикла;
	Результат.Excel.Quit();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КопироватьМатериалИзСпискаНаСервере(ID)
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	СозданныйМатериал = ОбщийМодульСинхронизации.СозданиеМатериала(ID);
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить("Произошла исключительная ситуация! Копирование не выполнено!");
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	СозданныйМатериал = Справочники.Материалы.ПустаяСсылка();
	КонецПопытки;
Возврат(СозданныйМатериал);
КонецФункции 

&НаСервере
Функция КопироватьСпецификациюИзСпискаНаСервере(ID)
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	СозданнаяСпецификация = ОбщийМодульСинхронизации.СозданиеНоменклатуры(ID);
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить("Произошла исключительная ситуация! Копирование не выполнено!");
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	СозданнаяСпецификация = Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
Возврат(СозданнаяСпецификация);
КонецФункции 

&НаСервере
Процедура ПрисвоитьТовар(Изделие,Товар)
ИзделиеОбъект = Изделие.ПолучитьОбъект();
ИзделиеОбъект.Товар = Товар;
ИзделиеОбъект.Записать();
КонецПроцедуры

&НаКлиенте
Процедура КопироватьВыбранные(Команда)
ФИО = ОбщийМодульВызовСервера.ИдётСинхронизация();
	Если ФИО.Пустая() Тогда
	ОбщийМодульВызовСервера.ЗаблокироватьСинхронизацию();
	Иначе
	Сообщить(ФИО);
	Возврат;
	КонецЕсли;
к = 1;
	Для каждого ТЧ Из ТаблицаЗагрузки Цикл
	Состояние("Обработка...",к*100/ТаблицаЗагрузки.Количество(),"Синхронизация справочника товарных групп...",БиблиотекаКартинок.ДлительнаяОперация);
		Если ТЧ.Пометка Тогда
			Если ВидЭлемента = 1  Тогда
			ТЧ.Элементв1С8 = КопироватьМатериалИзСпискаНаСервере(ТЧ.ID);
			Иначе
			ТЧ.Элементв1С8 = КопироватьСпецификациюИзСпискаНаСервере(ТЧ.ID);
			КонецЕсли;
				Если ТипТовара = 2 Тогда
				ТЧ.Товар = КопироватьТоварДатчикНаСервере(ТЧ.Наименование);	
				Иначе
				ТЧ.Товар = КопироватьТоварНаСервере(ТЧ.Наименование);
				КонецЕсли; 
					Если Не ТЧ.Товар.Пустая() Тогда
					ПрисвоитьТовар(ТЧ.Элементв1С8,ТЧ.Товар);
					КонецЕсли; 
		КонецЕсли;
	к = к + 1;
	КонецЦикла;
ОбщийМодульВызовСервера.РазблокироватьСинхронизацию();
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	Для каждого ТЧ Из ТаблицаЗагрузки Цикл
		Если ЗначениеЗаполнено(ТЧ.ID) Тогда
		ТЧ.Пометка = Истина;
		Иначе	
		ТЧ.Пометка = Ложь;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсе(Команда)
	Для каждого ТЧ Из ТаблицаЗагрузки Цикл
	ТЧ.Пометка = Ложь;
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗагрузкиПометкаПриИзменении(Элемент)
	Если Элементы.ТаблицаЗагрузки.ТекущиеДанные.Пометка Тогда
		Если Не ЗначениеЗаполнено(Элементы.ТаблицаЗагрузки.ТекущиеДанные.ID) Тогда
		Элементы.ТаблицаЗагрузки.ТекущиеДанные.Пометка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиПоСтрокеНаСервере(Подстрока)
СписокНайденных = Новый СписокЗначений;
Запрос = Новый Запрос;
	
	Если Константы.КодБазы.Получить() = "БГР" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.DESCR,
		|	Номенклатура.SP25384 КАК Статус
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.DESCR ПОДОБНО &DESCR
		|	И Номенклатура.ISFOLDER = 2";
	ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	Номенклатура.DESCR,
		|	Номенклатура.SP25384 КАК Статус
		|ИЗ
		|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.DESCR ПОДОБНО &DESCR
		|	И Номенклатура.ISFOLDER = 2";
	КонецЕсли;
Запрос.УстановитьПараметр("DESCR","%"+Подстрока+"%");
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
       	Если ВыборкаДетальныеЗаписи.Статус = 0 Тогда
		Статус = Перечисления.СтатусыСпецификаций.ПустаяСсылка();
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 1 Тогда
		Статус = Перечисления.СтатусыСпецификаций.Серийная;	
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 2 Тогда
		Статус = Перечисления.СтатусыСпецификаций.Серийная;	
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 3 Тогда
		Статус = Перечисления.СтатусыСпецификаций.ОНР;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 4 Тогда
		Статус = Перечисления.СтатусыСпецификаций.ДоИсчерпанияЗапасов;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 5 Тогда
		Статус = Перечисления.СтатусыСпецификаций.Запрещённая;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 6 Тогда
		Статус = Перечисления.СтатусыСпецификаций.Опытная;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 7 Тогда
		Статус = Перечисления.СтатусыСпецификаций.Опытная1;
		ИначеЕсли ВыборкаДетальныеЗаписи.Статус = 9 Тогда
		Статус = Перечисления.СтатусыСпецификаций.Предсерийная;
		Иначе
        Статус = Перечисления.СтатусыСпецификаций.ПустаяСсылка();
		КонецЕсли;
	СписокНайденных.Добавить(ВыборкаДетальныеЗаписи.DESCR,СокрЛП(ВыборкаДетальныеЗаписи.DESCR)+" ("+Статус+")");
	КонецЦикла;
Возврат(СписокНайденных);
КонецФункции

&НаКлиенте
Процедура НайтиПоСтроке(Команда)
Подстрока = "";
	Если ВвестиСтроку(Подстрока,"Введите подстроку для поиска",100,Ложь) Тогда
	СписокНайденных = НайтиПоСтрокеНаСервере(Подстрока);
	ВыбЭлемент = СписокНайденных.ВыбратьЭлемент("Выберите спецификацию",ВыбЭлемент);
		Если ВыбЭлемент <> Неопределено Тогда
		Объект.ВыбНаименование = ВыбЭлемент.Значение;
		КонецЕсли; 	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиПоСтрокеТоварНаСервере(Подстрока)
СписокНайденных = Новый СписокЗначений;
Запрос = Новый Запрос;
	Если ТипТовара <> 2 Тогда
		Если Константы.КодБазы.Получить() = "БГР" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Товары.DESCR
			|ИЗ
			|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварыПриборы КАК Товары
			|ГДЕ
			|	Товары.DESCR ПОДОБНО &DESCR
			|	И Товары.ISFOLDER = 2";
		ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Товары.DESCR
			|ИЗ
			|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварыПриборы КАК Товары
			|ГДЕ
			|	Товары.DESCR ПОДОБНО &DESCR
			|	И Товары.ISFOLDER = 2";
		КонецЕсли;	
	Иначе	
		Если Константы.КодБазы.Получить() = "БГР" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Товары.DESCR
			|ИЗ
			|	ВнешнийИсточникДанных.Номенклатура1С77.Таблица.ТоварыДатчики КАК Товары
			|ГДЕ
			|	Товары.DESCR ПОДОБНО &DESCR
			|	И Товары.ISFOLDER = 2";
		ИначеЕсли Константы.КодБазы.Получить() = "ХРК" Тогда
		Запрос.Текст = 
			"ВЫБРАТЬ
			|	Товары.DESCR
			|ИЗ
			|	ВнешнийИсточникДанных.Номенклатура1С77_Харьков.Таблица.ТоварыДатчики КАК Товары
			|ГДЕ
			|	Товары.DESCR ПОДОБНО &DESCR
			|	И Товары.ISFOLDER = 2";
		КонецЕсли;	
	КонецЕсли; 	
Запрос.УстановитьПараметр("DESCR","%"+Подстрока+"%");
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокНайденных.Добавить(ВыборкаДетальныеЗаписи.DESCR);
	КонецЦикла;
Возврат(СписокНайденных);
КонецФункции

&НаКлиенте
Процедура НайтиПоСтрокеТовар(Команда)
Подстрока = "";
	Если ВвестиСтроку(Подстрока,"Введите подстроку для поиска",100,Ложь) Тогда
	СписокНайденных = НайтиПоСтрокеТоварНаСервере(Подстрока);
	ВыбЭлемент = СписокНайденных.ВыбратьЭлемент("Выберите товар",ВыбЭлемент);
		Если ВыбЭлемент <> Неопределено Тогда
		Объект.НаименованиеТовара = ВыбЭлемент.Значение;
		КонецЕсли; 	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьГруппуМатериаловНаСервере(ГруппаМатериалов)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Материалы.ID
	|ИЗ
	|	Справочник.Материалы КАК Материалы
	|ГДЕ
	|	Материалы.Родитель В ИЕРАРХИИ(&Родитель)
	|	И Материалы.ЭтоГруппа = ЛОЖЬ";
Запрос.УстановитьПараметр("Родитель",ГруппаМатериалов);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ПроверитьИзменениеМатериалов(ВыборкаДетальныеЗаписи.ID,Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьГруппуМатериалов(Команда)
Результат = ОткрытьФормуМодально("Справочник.Материалы.ФормаВыбораГруппы");
	Если Результат <> Неопределено Тогда
	Объект.Изменения.Очистить();
	ПроверитьГруппуМатериаловНаСервере(Результат);
	КонецЕсли;
КонецПроцедуры
