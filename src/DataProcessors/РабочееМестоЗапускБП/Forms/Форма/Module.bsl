
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Объект.Исполнитель = ПараметрыСеанса.Пользователь;
	Если Объект.Исполнитель.Пустая() Тогда
	Элементы.РабочееМесто.Доступность = Ложь;
	Сообщить("Вы не внесены в справочник Сотрудников! Работа невозможна!");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
      ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры

&НаКлиенте
Процедура РабочееМестоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не Объект.ПроизводственноеЗадание.Пустая() Тогда
		Если Вопрос("Задание не завершено. Вы действительно хотите авторизоваться?",РежимДиалогаВопрос.ДаНет,,,"ВНИМАНИЕ!") = КодВозвратаДиалога.Нет Тогда
		СтандартнаяОбработка = Ложь;
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(ЭтапСпецификации)
Объект.Спецификация.Сортировать("ТипСправочника Убыв,ВидМПЗ,Позиция,МПЗ");
тДерево = РеквизитФормыВЗначение("ДеревоСпецификации");
тДерево.Строки.Очистить();
ТипСпр = "";
	Для каждого ТЧ Из Объект.Спецификация Цикл
		Если ТЧ.ЭтапСпецификации <> ЭтапСпецификации Тогда
		Продолжить;		
		КонецЕсли; 
			Если ТипСпр <> ТЧ.ТипСправочника Тогда
			Стр = тДерево.Строки.Добавить();
			Стр.ТипСправочника = ТЧ.ТипСправочника;
			ТипСпр = ТЧ.ТипСправочника;
			КонецЕсли; 
	СтрЗнч = Стр.Строки.Добавить();
	СтрЗнч.Позиция = ТЧ.Позиция;
	СтрЗнч.ВидЭлемента = ТЧ.ВидМПЗ;
	СтрЗнч.МПЗ = ТЧ.МПЗ;
	СтрЗнч.Количество = ТЧ.Количество;
	СтрЗнч.ЕдиницаИзмерения = ТЧ.ЕдиницаИзмерения;
	СтрЗнч.Аналог = ТЧ.Аналог;
	СтрЗнч.Примечание = ТЧ.Примечание;
		Если ТЧ.Владелец <> Неопределено Тогда
		СтрЗнч.Владелец = ТЧ.Владелец.Элемент;
		КонецЕсли;		 
	КонецЦикла;
ЗначениеВРеквизитФормы(тДерево, "ДеревоСпецификации");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомплектацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
ЗаполнитьДерево(Элемент.ТекущиеДанные.ЭтапСпецификации);
РазвернутьДерево(Неопределено);
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаданиеНаСервере(ПризнакПриПолученииЗадания)
Результат = ОбщийМодульАРМ.ПолучитьНезавершенноеЗадание(Этапы,ЭтапыАРМ,Объект.РабочееМесто,Объект.Исполнитель);
	Если Результат <> Неопределено Тогда 
	Объект.ПроизводственноеЗадание = Результат.ПЗ;
	Возврат(1);
	КонецЕсли;
НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
КолПЗ = 0;

СписокИзделийЛО = Новый СписокЗначений;
Запрос = Новый Запрос;

	Если Объект.РабочееМесто.ОбработкаЗаданийПоВремениПоступления Тогда
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ КАК ПЗ,
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала КАК ДатаНачала,
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто КАК РабочееМесто
		|ИЗ
		|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних(, РабочееМесто = &РабочееМесто) КАК ЭтапыПроизводственныхЗаданийСрезПоследних
		|ГДЕ
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
		|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.Период
		|ИТОГИ ПО
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование";
	Иначе
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ КАК ПЗ,
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала КАК ДатаНачала,
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто КАК РабочееМесто
		|ИЗ
		|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних(, РабочееМесто = &РабочееМесто) КАК ЭтапыПроизводственныхЗаданийСрезПоследних
		|ГДЕ
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
		|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
		|	И (ЭтапыПроизводственныхЗаданийСрезПоследних.Изделие.Товар.ПризнакПриПолученииЗадания = &ПризнакПриПолученииЗадания
		|			ИЛИ ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Ремонт = ИСТИНА)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.НомерОчереди,
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.ДатаОтгрузки,
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.Номер
		|ИТОГИ ПО
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование";	
	КонецЕсли; 
Запрос.УстановитьПараметр("РабочееМесто",Объект.РабочееМесто);
Запрос.УстановитьПараметр("ПризнакПриПолученииЗадания",ПризнакПриПолученииЗадания);
Результат = Запрос.Выполнить();

ВыборкаМТК = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМТК.Следующий() Цикл
	ВыборкаДетальныеЗаписи = ВыборкаМТК.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		КолПЗ = КолПЗ + 1;
			Если СписокИзделийЛО.НайтиПоЗначению(ВыборкаДетальныеЗаписи.ПЗ.Изделие) <> Неопределено Тогда
			Прервать; //Переходим к следующей МТК
			КонецЕсли;
				Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ВыборкаДетальныеЗаписи.ПЗ,Этапы,ЭтапыАРМ,Объект.РабочееМесто,Объект.Исполнитель) Тогда	
				Прервать; //Переходим к следующей МТК			
				КонецЕсли;
					Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПЗ.ДатаЗапуска) Тогда
					Результат = ОбщийМодульВызовСервера.ЗапуститьВПроизводство(ВыборкаДетальныеЗаписи.ПЗ,Объект.РабочееМесто,Этапы);
						Если Результат = 0 Тогда
						СписокИзделийЛО.Добавить(ВыборкаДетальныеЗаписи.ПЗ.Изделие);
						Прервать; //Переходим к следующей МТК
						ИначеЕсли Результат = -1 Тогда
						Возврат(-1);
						КонецЕсли; 
					КонецЕсли; 
		Парам = Новый Структура("РабочееМесто,Исполнитель,ДатаНачала",Объект.РабочееМесто,Объект.Исполнитель,ТекущаяДата());
		ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(ВыборкаДетальныеЗаписи.ПЗ,Парам); 
		Объект.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
		ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,Объект.РабочееМесто,Объект.ПроизводственноеЗадание.Изделие,КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
		Возврат(1);
		КонецЦикла;
	КонецЦикла;
ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,Объект.РабочееМесто,Справочники.Номенклатура.ПустаяСсылка(),КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
Возврат(0);
КонецФункции

&НаСервере
Функция ПолучитьСпецификациюЭтапов()
Возврат(ОбщийМодульАРМ.ПолучитьСпецификациюЭтапов(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,Этапы,Объект.Спецификация,ТаблицаКомплектации)); 
КонецФункции
 
&НаСервере
Процедура ПолучитьДополнительныеКоды()
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БарКоды.MAC,
	|	БарКоды.БарКод,
	|	БарКоды.КодDanfoss
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.БарКод = &БарКод";
Запрос.УстановитьПараметр("БарКод", Объект.ПроизводственноеЗадание.БарКод);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	MAC = ВыборкаДетальныеЗаписи.MAC;
	КодDanfoss = ВыборкаДетальныеЗаписи.КодDanfoss;
	КонецЦикла;
Элементы.MAC.Видимость = ЗначениеЗаполнено(MAC);
Элементы.КодDanfoss.Видимость = ОбщийМодульВызовСервера.ТребуетсяКодDanfoss(Объект.ПроизводственноеЗадание);
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьЗадание(ПризнакПриПолученииЗадания)
	Если ОбщийМодульВызовСервера.ОстановкаЛинейки(Объект.РабочееМесто) Тогда
		Если ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.РабочееМесто,"Код") = 1 Тогда
			Если Вопрос("Линейка остановлена! Снять остановку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Если Не ОбщийМодульРаботаСРегистрами.СнятьОстановкуЛинейки(ОбщийМодульВызовСервера.ПолучитьЛинейкуПоРабочемуМесту(Объект.РабочееМесто)) Тогда	
				Возврат;
				КонецЕсли;
			Иначе
			Возврат;			
			КонецЕсли;
		Иначе
		Возврат; 
		КонецЕсли;
	КонецЕсли; 
Состояние("Обработка...",,"Получение задания...");
Результат = ПолучитьЗаданиеНаСервере(ПризнакПриПолученииЗадания); 
	Если Результат = 1 Тогда
	НомерВТ = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ПроизводственноеЗадание,"ВозвратнаяТара");
		Если ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.РабочееМесто,"ВозвратнаяТара") Тогда
			Если Не ЗначениеЗаполнено(НомерВТ) Тогда			
				Если ВвестиСтроку(НомерВТ,"Введите номер возвратной тары",4) Тогда
					Если Не ОбщийМодульВызовСервера.СохранитьНомерВозвратнойТары(Объект.ПроизводственноеЗадание,НомерВТ) Тогда
					Сообщить("Номер возвратной тары не введён!");
					ОчиститьСсылкуНаПЗ();
					Возврат;
					КонецЕсли;
				Иначе
				Сообщить("Номер возвратной тары не введён!");
				ОчиститьСсылкуНаПЗ();
				Возврат;
				КонецЕсли;			
			КонецЕсли; 		
		КонецЕсли;
	Иначе
	Сообщить("Нет производственных заданий!");
	Возврат;
	КонецЕсли;
ПолучитьСпецификациюЭтапов();	
ПолучитьДополнительныеКоды();
	Если ТипЗнч(ТаблицаКомплектации[0].Комплектация) = Тип("СправочникСсылка.Номенклатура") Тогда
	Элементы.ТаблицаКомплектации.ТекущаяСтрока = ТаблицаКомплектации[0].ПолучитьИдентификатор();
	ТаблицаКомплектацииВыборЗначения(Элементы.ТаблицаКомплектации,Элементы.ТаблицаКомплектации.ТекущаяСтрока,Истина);
	КонецЕсли;
Элементы.Завершить.КнопкаПоУмолчанию = Истина;
Элементы.ПолучитьЗаданиеМногоканальный.Доступность = Ложь;
Элементы.ПолучитьЗаданиеОдноканальный.Доступность = Ложь;
Элементы.ПростойЛинейки.Доступность = Ложь;
Элементы.Гравировка.Доступность = Истина;
Элементы.ПечатьБарКода.Доступность = Истина;
Элементы.Завершить.Доступность = Истина;
Элементы.Ремонт.Доступность = Истина;	
Элементы.Прошивка.Доступность = Истина;
Элементы.ВвестиКодDanfoss.Доступность = ОбщийМодульВызовСервера.ТребуетсяКодDanfoss(Объект.ПроизводственноеЗадание);  
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗаданиеОдноканальный(Команда)
ПолучитьЗадание(1);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗаданиеМногоканальный(Команда)
ПолучитьЗадание(2);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗаданиеПрогревЯчейки(Команда)
ПолучитьЗадание(3);
КонецПроцедуры

&НаСервере
Процедура ОчиститьСсылкуНаПЗ()
Объект.ПроизводственноеЗадание = Документы.ПроизводственноеЗадание.ПустаяСсылка();
КодDanfoss = "";
MAC = "";
НомерВТ = "";
Этапы.Очистить();
ЭтапыАРМ.Очистить();
ТаблицаКомплектации.Очистить();
Объект.Спецификация.Очистить();
тДерево = РеквизитФормыВЗначение("ДеревоСпецификации");
тДерево.Строки.Очистить();
ЗначениеВРеквизитФормы(тДерево,"ДеревоСпецификации");
Элементы.ПолучитьЗаданиеМногоканальный.КнопкаПоУмолчанию = Истина;
Элементы.ПолучитьЗаданиеМногоканальный.Доступность = Истина;
Элементы.ПолучитьЗаданиеОдноканальный.Доступность = Истина;
Элементы.ПростойЛинейки.Доступность = Истина;
Элементы.Гравировка.Доступность = Ложь;
Элементы.ПечатьБарКода.Доступность = Ложь;
Элементы.Завершить.Доступность = Ложь;
Элементы.Ремонт.Доступность = Ложь;
Элементы.Прошивка.Доступность = Ложь;
Элементы.ВвестиКодDanfoss.Доступность = Ложь;
КонецПроцедуры  

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(Объект.РабочееМесто.Линейка) Тогда	
	Возврат(Истина);
	Иначе
	Объект.РабочееМесто = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции 

&НаКлиенте
Процедура РабочееМестоПриИзменении(Элемент)
	Если Не МожноРаботатьВАРМ() Тогда
	Возврат;
	КонецЕсли;
Элементы.ПростойЛинейки.Видимость = ?(ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.РабочееМесто,"Код") = 1,Истина,Ложь);
ПрефиксРМ = ОбщийМодульВызовСервера.ПолучитьПрефиксРабочегоМеста(Объект.РабочееМесто);
	Если ПрефиксРМ = "СБ" Тогда
	Элементы.Прошивка.Видимость = Ложь;
	Элементы.Гравировка.Видимость = Истина;
	Элементы.ПечатьБарКода.Видимость = Истина;
	Элементы.ВвестиКодDanfoss.Видимость = Истина;
	ИначеЕсли ПрефиксРМ = "НЛ" Тогда
	Элементы.Прошивка.Видимость = Истина;
	Элементы.Гравировка.Видимость = Ложь;
	Элементы.ПечатьБарКода.Видимость = Ложь;
	Элементы.ВвестиКодDanfoss.Видимость = Ложь;
	Иначе
	Элементы.Прошивка.Видимость = Ложь;
	Элементы.Гравировка.Видимость = Ложь;
	Элементы.ПечатьБарКода.Видимость = Ложь;
	Элементы.ВвестиКодDanfoss.Видимость = Ложь;
	КонецЕсли;
ОчиститьСсылкуНаПЗ();
КонецПроцедуры

&НаСервере
Функция ЗавершитьЗаданиеНаСервере()
	Попытка
	ДатаЗавершения = ТекущаяДата();
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	НовоеРабочееМесто = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
	флТекущийЭтапПоследний = Ложь;
	ТекРМ = ЭтапыАРМ.НайтиПоЗначению(Объект.РабочееМесто);
		Если ТекРМ <> Неопределено Тогда
		НомСтр = ЭтапыАРМ.Индекс(ТекРМ)+1;
			Если НомСтр <> ЭтапыАРМ.Количество() Тогда
				Для к = НомСтр По ЭтапыАРМ.Количество()-1 Цикл
					Если ЭтапыАРМ[к].Значение.Авторизовано Тогда
					НовоеРабочееМесто = ЭтапыАРМ[к].Значение;
					Прервать;
					КонецЕсли; 
				КонецЦикла; 	
			Иначе
			флТекущийЭтапПоследний = Истина;			
			КонецЕсли; 
		Иначе
		Сообщить("В списке этапов рабочих мест этого изделия не найдено текущее рабочее место!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат("");		
		КонецЕсли;
			Если НовоеРабочееМесто.Пустая() Тогда
				Если Не флТекущийЭтапПоследний Тогда
				Сообщить("Нет авторизованных рабочих мест!");
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат("");
				КонецЕсли; 
			КонецЕсли;
	НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПЗ.Установить(Объект.ПроизводственноеЗадание);
	НаборЗаписей.Прочитать();
	    Для Каждого Запись Из НаборЗаписей Цикл 
	    	Если Запись.РабочееМесто = Объект.РабочееМесто Тогда
			Запись.ДатаОкончания = ДатаЗавершения;
			Прервать;
			КонецЕсли;  
	    КонецЦикла;
			Если Не флТекущийЭтапПоследний Тогда
			МестоПередачи = "на "+СокрЛП(НовоеРабочееМесто.Наименование);
			ЭПЗ = НаборЗаписей.Добавить();
			ЭПЗ.Период = ДатаЗавершения;
			ЭПЗ.ПЗ = Объект.ПроизводственноеЗадание; 
			ЭПЗ.Линейка = Объект.ПроизводственноеЗадание.Линейка;
			ЭПЗ.Изделие = Объект.ПроизводственноеЗадание.Изделие;
			ЭПЗ.Количество = 1;
			ЭПЗ.БарКод = Объект.ПроизводственноеЗадание.БарКод;
			ЭПЗ.РабочееМесто = НовоеРабочееМесто;
				Если СокрЛП(НовоеРабочееМесто.ГруппаРабочихМест.Префикс) = "СТ" Тогда
				ЭПЗ.ДатаНачала = ДатаЗавершения;	
				ЭПЗ.Исполнитель = НовоеРабочееМесто.Стенд.Исполнитель;	
				СП = РегистрыСведений.СтендовыйПрогон.СоздатьМенеджерЗаписи();
				СП.Период = ДатаЗавершения;
				СП.ПЗ = Объект.ПроизводственноеЗадание;
				СП.Изделие = Объект.ПроизводственноеЗадание.Изделие;
				СП.БарКод = Объект.ПроизводственноеЗадание.БарКод;
				СП.Стенд = НовоеРабочееМесто.Стенд;
				СП.Прогон = 1;
				СП.ИсполнительПоступление = НовоеРабочееМесто.Стенд.Исполнитель;
				СП.ДатаПоступления = ДатаЗавершения;
				СП.ИсполнительПостановка = НовоеРабочееМесто.Стенд.Исполнитель;
				СП.ДатаПостановки = ДатаЗавершения;
				СП.Записать();		
				КонецЕсли;
					Если НовоеРабочееМесто.ГруппаРабочихМест <> Объект.РабочееМесто.ГруппаРабочихМест Тогда
						Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,Объект.Спецификация,Этапы,ДатаЗавершения) Тогда
						Сообщить("Документ выпуска не создан!");
						ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
						Возврат("");
						КонецЕсли; 		
					КонецЕсли;
						Если Не НовоеРабочееМесто.ВозвратнаяТара Тогда					
							Если ЗначениеЗаполнено(НомерВТ) Тогда
							ОбщийМодульВызовСервера.ОчиститьНомерВозвратнойТары(Объект.ПроизводственноеЗадание);					
							КонецЕсли;					
						КонецЕсли;
			Иначе
				Если Объект.ПроизводственноеЗадание.ДокументОснование.Ремонт Тогда
					Если Найти(Объект.ПроизводственноеЗадание.ДокументОснование.СтандартныйКомментарий.Наименование,"Полуфабрикаты для СЦ") > 0 Тогда
					МестоПередачи = "на склад сервис-центров";
					Иначе	
					МестоПередачи = "ремонтнику";
					КонецЕсли;	
				Иначе
				МестоПередачи = "на склад линейки";
				КонецЕсли; 
					Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,Объект.Спецификация,Этапы,ДатаЗавершения) Тогда
					Сообщить("Документ выпуска не создан!"); 
					ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
					Возврат("");
					КонецЕсли;			
			КонецЕсли;
	НаборЗаписей.Записать();
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Объект.ПроизводственноеЗадание = Документы.ПроизводственноеЗадание.ПустаяСсылка();
	Возврат(МестоПередачи);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат("");
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ЗавершитьЗадание(Команда)
	Если ОбщийМодульВызовСервера.ЛинейкаОстановлена(ОбщийМодульВызовСервера.ПолучитьЛинейкуПоРабочемуМесту(Объект.РабочееМесто)) Тогда
	Возврат;
	КонецЕсли;
		Если ОбщийМодульВызовСервера.ТребуетсяКодDanfoss(Объект.ПроизводственноеЗадание) Тогда
			Если Не ЗначениеЗаполнено(ОбщийМодульВызовСервера.ПолучитьКодDanfoss(ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ПроизводственноеЗадание,"БарКод"))) Тогда
			Сообщить("Введите код Danfoss!");
			Возврат;
			КонецЕсли; 
		КонецЕсли;
МестоПередачи = ЗавершитьЗаданиеНаСервере();
	Если МестоПередачи <> "" Тогда
	ОчиститьСсылкуНаПЗ();
	ПоказатьОповещениеПользователя("ВНИМАНИЕ!",,"Передайте изделие "+МестоПередачи,БиблиотекаКартинок.Пользователь);
		Если (МестоПередачи = "ремонтнику")или(МестоПередачи = "на склад сервис-центров") Тогда
		Предупреждение("Передайте изделие "+МестоПередачи+"!",5,"ВНИМАНИЕ!");
		КонецЕсли; 
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЭтапов()
СписокЭтапов = Новый СписокЗначений;
	Для каждого ТЧ Из ТаблицаКомплектации Цикл
		Если СписокЭтапов.НайтиПоЗначению(ТЧ.ЭтапСпецификации) = Неопределено Тогда
		СписокЭтапов.Добавить(ТЧ.ЭтапСпецификации);
		КонецЕсли; 
	КонецЦикла;
Возврат(СписокЭтапов);
КонецФункции 

&НаСервере
Функция ПолучитьВидРемонтаОбщий()
Возврат(Перечисления.ВидыРемонта.Общий);	
КонецФункции

&НаСервере
Функция ПолучитьИзделиеРемонта()
	Для каждого ТЧ_Этап Из Этапы Цикл
	ЭтапАРМ = Объект.РабочееМесто.ТабличнаяЧасть.Найти(ТЧ_Этап.ГруппаНоменклатуры,"ГруппаНоменклатуры");
		Если ЭтапАРМ = Неопределено Тогда
		Продолжить;
		ИначеЕсли ЭтапАРМ.Комплектация Тогда
	    Продолжить;
		КонецЕсли;
			Если ТЧ_Этап.ЭтапСпецификации.Виртуальный Тогда
			Продолжить;
			КонецЕсли;
	Возврат(Новый Структура("Изделие,Количество",ТЧ_Этап.ЭтапСпецификации,ТЧ_Этап.Количество));
	КонецЦикла;
КонецФункции 

&НаКлиенте
Процедура Ремонт(Команда)
	Если Не ЗначениеЗаполнено(НомерВТ) Тогда			
		Если Не ВвестиСтроку(НомерВТ,"Введите номер возвратной тары",4) Тогда
		Сообщить("Номер возвратной тары не введён!");
		Возврат;
		КонецЕсли;			
	КонецЕсли; 
Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборПричинРемонта",Новый Структура("РабочееМесто",Объект.РабочееМесто));
	Если Результат <> Неопределено Тогда
		Если ОбщийМодульСозданиеДокументов.СоздатьРемонтнуюКарту(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,ПолучитьИзделиеРемонта(),Объект.Исполнитель,ПолучитьВидРемонтаОбщий(),Результат,,НомерВТ) Тогда
		ОчиститьСсылкуНаПЗ();
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПечатьБарКода(Команда)
ОткрытьФорму("Обработка.СозданныеБарКоды.Форма.Форма",Новый Структура("ПЗ,РабочееМесто",Объект.ПроизводственноеЗадание,Объект.РабочееМесто)); 
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
тЭлементы = ДеревоСпецификации.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
   	Элементы.ДеревоСпецификации.Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
тЭлементы = ДеревоСпецификации.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
   Элементы.ДеревоСпецификации.Свернуть(тСтр.ПолучитьИдентификатор());
   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	Если ТипЗнч(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ) = Тип("СправочникСсылка.Документация") Тогда
	ОбщийМодульКлиент.ОткрытьФайлДокумента(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ) = Тип("СправочникСсылка.Документация") Тогда
	ОбщийМодульКлиент.ОткрытьФайлДокумента(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Прошивка(Команда)
СписокЭтапов = Новый СписокЗначений;

СписокЭтапов = ПолучитьСписокЭтапов();
	Если СписокЭтапов.Количество() > 1 Тогда
	ВыбЭтап = СписокЭтапов.ВыбратьЭлемент("Выберите спецификацию");
	Иначе
	ВыбЭтап = СписокЭтапов[0];
	КонецЕсли;
П = Новый Структура("Спецификация",ВыбЭтап.Значение);
ОткрытьФорму("Обработка.ПрошивкаПриборов.Форма",П);
КонецПроцедуры

&НаСервере
Процедура ВвестиКодDanfossНаСервере(БарКод)
	Попытка				
	НаборЗаписей = РегистрыСведений.БарКоды.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПЗ.Установить(Объект.ПроизводственноеЗадание);
	НаборЗаписей.Прочитать();
	    Для Каждого Запись Из НаборЗаписей Цикл
			Если Не ЗначениеЗаполнено(Запись.КодDanfoss) Тогда
			Запись.КодDanfoss = БарКод;
			Иначе
			Сообщить("Код Danfoss уже присвоен данному изделию.");
			Возврат;
			КонецЕсли;  
	    КонецЦикла;
	НаборЗаписей.Записать(Истина);
	КодDanfoss = БарКод;
	Элементы.КодDanfoss.Видимость = Истина;
	Исключение
	Сообщить(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиКодDanfoss(Команда,БарКод = "")
	Если Не ЗначениеЗаполнено(БарКод) Тогда
		Если Не ВвестиСтроку(БарКод,"Введите код Danfoss",8) Тогда
		Возврат;	
		КонецЕсли; 
	КонецЕсли;
ВвестиКодDanfossНаСервере(БарКод);
КонецПроцедуры
         
&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если ЭтаФорма.ВводДоступен() Тогда
	Массив = ОбщийМодульВызовСервера.РазложитьСтрокуВМассив(Данные,";");
		Если Массив[0] = "3" Тогда
		ЗначениеПараметра1 = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[1]);
			Если ЗначениеПараметра1 = Неопределено Тогда
			Сообщить("Линейка или место хранения не найдена!");
			Возврат;	
			КонецЕсли; 
		МПЗ = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[3]);
			Если МПЗ = Неопределено Тогда
			Сообщить(Массив[3]+" - МПЗ не найдена!");
			Возврат;	
			КонецЕсли;
				Если ТипЗнч(ЗначениеПараметра1) = Тип("СправочникСсылка.Линейки") Тогда
				МестоХранения = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(ЗначениеПараметра1,"МестоХраненияКанбанов");
				Иначе
				МестоХранения = ЗначениеПараметра1;			
				КонецЕсли;
		МестоХраненияОтправитель = ОбщийМодульВызовСервера.ПолучитьМестоХраненияПоКоду(Массив[2]);
		П = Новый Структура("МестоХраненияОтправитель,МестоХраненияКанбанов,МПЗ,НомерЯчейки,Сотрудник",МестоХраненияОтправитель,МестоХранения,МПЗ,Массив[5],Объект.Исполнитель);
		ОткрытьФорму("ОбщаяФорма.ОформлениеПустыхКанбанов",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			Если СтрДлина(Данные) = 8 Тогда
			ВвестиКодDanfoss(Неопределено,СокрЛП(Данные));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомплектацииВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
ЗаполнитьДерево(Элемент.ТекущиеДанные.ЭтапСпецификации);
РазвернутьДерево(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьНедостачу(Команда)
	Если ОбщийМодульАРМКлиент.ОформитьНедостачу(ЭтаФорма,Объект.РабочееМесто,Объект.ПроизводственноеЗадание) Тогда
	ОчиститьСсылкуНаПЗ();
	КонецЕсли;
КонецПроцедуры
