
&НаКлиенте
Процедура ВыравнитьЭПЗ(Команда)
	ВыравнитьЭПЗНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыравнитьЭПЗНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ЭтапыПроизводственныхЗаданий.Период КАК Период_Ключ,
	               |	ЭтапыПроизводственныхЗаданий.ПЗ КАК ПЗ_Ключ,
	               |	ЭтапыПроизводственныхЗаданий.Линейка КАК Линейка_Ключ,
	               |	ЭтапыПроизводственныхЗаданий.Изделие КАК Изделие_Ключ,
	               |	ЭтапыПроизводственныхЗаданий.БарКод КАК БарКод,
	               |	ЭтапыПроизводственныхЗаданий.РабочееМесто КАК РабочееМесто,
	               |	ЭтапыПроизводственныхЗаданий.Спецификация КАК Спецификация,
	               |	ЭтапыПроизводственныхЗаданий.Количество КАК Количество,
	               |	ЭтапыПроизводственныхЗаданий.Исполнитель КАК Исполнитель,
	               |	ЭтапыПроизводственныхЗаданий.ДатаНачала КАК ДатаНачала,
	               |	ЭтапыПроизводственныхЗаданий.ДатаОкончания КАК ДатаОкончания,
	               |	ЭтапыПроизводственныхЗаданий.Ремонт КАК Ремонт
	               |ИЗ
	               |	РегистрСведений.ЭтапыПроизводственныхЗаданий КАК ЭтапыПроизводственныхЗаданий
	               |ГДЕ
	               |	ЭтапыПроизводственныхЗаданий.Период МЕЖДУ &Дата1 И &Дата2";
		Запрос.УстановитьПараметр("Дата1", ДатаНачалаЭтапыПЗ);
		Запрос.УстановитьПараметр("Дата2", ДатаОкончанияЭтапыПЗ);
	тзЭтойБазы = Запрос.Выполнить().Выгрузить();
	
	Колонки = ПолучитьМассивыКолонок(тзЭтойБазы);
	
	ДанныеОтправки = Новый Структура;
	ДанныеОтправки.Вставить("ТекстЗапроса", Запрос.Текст);
	ПараметрыЗапроса = Новый ТаблицаЗначений;
	ПараметрыЗапроса.Колонки.Добавить("ИмяПараметра");
	ПараметрыЗапроса.Колонки.Добавить("ЗначениеПараметра");
	СтрокаПЗ = ПараметрыЗапроса.Добавить();
	СтрокаПЗ.ИмяПараметра = "Дата1";
	СтрокаПЗ.ЗначениеПараметра = ДатаНачалаЭтапыПЗ;
	СтрокаПЗ = ПараметрыЗапроса.Добавить();
	СтрокаПЗ.ИмяПараметра = "Дата2";
	СтрокаПЗ.ЗначениеПараметра = ДатаОкончанияЭтапыПЗ;
	
	ДанныеОтправки.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	Результат = СРМ_ОбменВебСервис.СверкаБаз(ДанныеОтправки);
	
	Если ТипЗнч(Результат) = Тип("Строка") тогда
		Возврат;	
	иначе	
		тзДругойБазы = Результат.Объекты;
	КонецЕсли;
	
	
	//сравнение
	тзЭтойБазы.Колонки.Добавить("СтрокаУчтена");
	тзЭтойБазы.ЗаполнитьЗначения(Ложь, "СтрокаУчтена");
	
	тзДругойБазы.Колонки.Добавить("СтрокаУчтена");
	тзДругойБазы.ЗаполнитьЗначения(Ложь, "СтрокаУчтена");
	
	СтрокаКолонкиДляПоиска = СтрСоединить(Колонки.СтруктураПоиска, ",");
	тзЭтойБазы.Индексы.Добавить(СтрокаКолонкиДляПоиска+",СтрокаУчтена");
	тзДругойБазы.Индексы.Добавить(СтрокаКолонкиДляПоиска+",СтрокаУчтена");
	
	СтрокиТЗ = Новый Структура;
	СтрокиТЗ.Вставить("ТолькоЭтаБаза", Новый Массив);
	СтрокиТЗ.Вставить("ТолькоДругаяБаза", Новый Массив);
	СтрокиТЗ.Вставить("ОтличающиесяЭтаБаза", Новый Массив);
	СтрокиТЗ.Вставить("ОтличающиесяДругаяБаза", Новый Массив);
	СтрокиТЗ.Вставить("СовпадающиеЭтаБаза", Новый Массив);
	
	Для Каждого ЭтаБазаСтрока Из тзЭтойБазы Цикл
		СтруктураПоиска = Новый Структура(СтрокаКолонкиДляПоиска);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭтаБазаСтрока);
		СтруктураПоиска.Вставить("СтрокаУчтена", Ложь);
		
		МассивНайдСтрок = тзДругойБазы.НайтиСтроки(СтруктураПоиска);
		Если МассивНайдСтрок.Количество() = 0 Тогда
			СтрокиТЗ.ТолькоЭтаБаза.Добавить(ЭтаБазаСтрока);
		Иначе
			ЗначенияСовпадают = Истина;
			СтрокаДругойБазы = МассивНайдСтрок[0];
			Для Каждого ОстальнаяКолонка Из Колонки.Остальные Цикл
				ЗначенияСовпадают = ЗначенияСовпадают(ЭтаБазаСтрока, СтрокаДругойБазы, ОстальнаяКолонка, Колонки);
				Если НЕ ЗначенияСовпадают Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначенияСовпадают Тогда
				ЭтаБазаСтрока.СтрокаУчтена = Истина;
				СтрокаДругойБазы.СтрокаУчтена = Истина;
				СтрокиТЗ.СовпадающиеЭтаБаза.Добавить(ЭтаБазаСтрока);
			Иначе
				СтрокиТЗ.ОтличающиесяЭтаБаза.Добавить(ЭтаБазаСтрока);
				СтрокиТЗ.ОтличающиесяДругаяБаза.Добавить(СтрокаДругойБазы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДругаяБазаСтрока Из тзДругойБазы Цикл
		Если ДругаяБазаСтрока.СтрокаУчтена Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиска = Новый Структура(СтрокаКолонкиДляПоиска);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДругаяБазаСтрока);
		СтруктураПоиска.Вставить("СтрокаУчтена", Ложь);
		
		МассивНайдСтрок = тзЭтойБазы.НайтиСтроки(СтруктураПоиска);
		Если МассивНайдСтрок.Количество() = 0 Тогда
			СтрокиТЗ.ТолькоДругаяБаза.Добавить(ДругаяБазаСтрока);
		КонецЕсли;
	КонецЦикла;
	 //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	//отправляем чего надо доотправить   ОСТОРОЖНО!!!!
	//Этапы ПЗ
	
	Набор = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
	Для каждого СтрокаТолькоЭтаБаза из СтрокиТЗ.ОтличающиесяЭтаБаза цикл
		Набор.Отбор.ПЗ.Значение = СтрокаТолькоЭтаБаза.ПЗ_Ключ;
		Набор.Отбор.ПЗ.Использование = Истина;
		Набор.Отбор.Линейка.Значение = СтрокаТолькоЭтаБаза.Линейка_Ключ;
		Набор.Отбор.Линейка.Использование = Истина;
		Набор.Отбор.Изделие.Значение = СтрокаТолькоЭтаБаза.Изделие_Ключ;
		Набор.Отбор.Изделие.Использование = Истина;
		//Набор.Отбор.БарКод.Значение = СтрокаТолькоЭтаБаза.БарКод_Ключ;
		//Набор.Отбор.БарКод.Использование = Истина;
		Набор.Прочитать();
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписатьXML(ЗаписьXML, Набор, НазначениеТипаXML.Явное);
		СтрокаХМЛ = ЗаписьXML.Закрыть();
		СРМ_ОбменВебСервис.СериализоватьОтправитьОбъект(СтрокаХМЛ);
	КонецЦикла;
	
	Для каждого СтрокаТолькоЭтаБаза из СтрокиТЗ.ТолькоЭтаБаза цикл
		Набор.Отбор.ПЗ.Значение = СтрокаТолькоЭтаБаза.ПЗ_Ключ;
		Набор.Отбор.ПЗ.Использование = Истина;
		Набор.Отбор.Линейка.Значение = СтрокаТолькоЭтаБаза.Линейка_Ключ;
		Набор.Отбор.Линейка.Использование = Истина;
		Набор.Отбор.Изделие.Значение = СтрокаТолькоЭтаБаза.Изделие_Ключ;
		Набор.Отбор.Изделие.Использование = Истина;
		//Набор.Отбор.БарКод.Значение = СтрокаТолькоЭтаБаза.БарКод_Ключ;
		//Набор.Отбор.БарКод.Использование = Истина;
		Набор.Прочитать();
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписатьXML(ЗаписьXML, Набор, НазначениеТипаXML.Явное);
		СтрокаХМЛ = ЗаписьXML.Закрыть();
		СРМ_ОбменВебСервис.СериализоватьОтправитьОбъект(СтрокаХМЛ);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивыКолонок(тзЭтойБазы)
	
	ПримитивныеТипы = МассивПримитивныхТипов();
	
	Колонки = Новый Структура;
	Колонки.Вставить("Все", Новый Массив);
	Колонки.Вставить("Ключевые", Новый Массив);
	Колонки.Вставить("КлючевыеДляЗаголовков", Новый Массив);	
	Колонки.Вставить("СтруктураПоиска", Новый Массив);
	Колонки.Вставить("Остальные", Новый Массив);
	Колонки.Вставить("Ссылочные", Новый Массив);
	Колонки.Вставить("Перечисления", Новый Массив);
	
	МенеджерыПеречислений = Новый Соответствие;
	
	Для Каждого КолонкаТЗ Из тзЭтойБазы.Колонки Цикл
		ЕстьСсылки = Ложь;
		ЭтоПеречисление = Ложь;
		ТипыКолонки = КолонкаТЗ.ТипЗначения.Типы();
		Для Каждого ТекТип Из ТипыКолонки Цикл
			Если ПримитивныеТипы.Найти(ТекТип) = Неопределено Тогда
				ПолноеИмяМетаданных = Метаданные.НайтиПоТипу(ТекТип).ПолноеИмя();
				Если Лев(НРег(ПолноеИмяМетаданных), 13) = "перечисление." Тогда
					ЭтоПеречисление = Истина;
					МенеджерыПеречислений.Вставить(Метаданные.НайтиПоПолномуИмени(ПолноеИмяМетаданных));
				КонецЕсли;
				
				ЕстьСсылки = Истина;
				Прервать;
				
			КонецЕсли;
		КонецЦикла;
		Если ЕстьСсылки Тогда
			Колонки.Ссылочные.Добавить(КолонкаТЗ.Имя);
		КонецЕсли;
		Если ЭтоПеречисление Тогда
			Колонки.Перечисления.Добавить(КолонкаТЗ.Имя);
		КонецЕсли;
		
		Если Прав(КолонкаТЗ.Имя, 5) = "_Ключ" Тогда
			Колонки.Ключевые.Добавить(КолонкаТЗ.Имя);
			Колонки.КлючевыеДляЗаголовков.Добавить(СтрЗаменить(КолонкаТЗ.Имя, "_Ключ", ""));
			Колонки.СтруктураПоиска.Добавить(КолонкаТЗ.Имя);
		Иначе
			Колонки.Остальные.Добавить(КолонкаТЗ.Имя);
		КонецЕсли;
		
		
	КонецЦикла;
	
	Колонки.Вставить("СоотвПеречислений", Новый Соответствие);
	Для Каждого КЗ Из МенеджерыПеречислений Цикл
		МенеджерПеречисления = КЗ.Ключ;
		Для Каждого ЗначениеПеречисления Из МенеджерПеречисления.ЗначенияПеречисления Цикл
			Колонки.СоотвПеречислений.Вставить(Перечисления[МенеджерПеречисления.Имя][ЗначениеПеречисления.Имя], ЗначениеПеречисления.Имя);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Колонки;
	
КонецФункции

&НаСервереБезКонтекста
Функция МассивПримитивныхТипов()
	
	ПримитивныеТипы = Новый Массив;
	ПримитивныеТипы.Добавить(Тип("Null"));
	ПримитивныеТипы.Добавить(Тип("Строка"));
	ПримитивныеТипы.Добавить(Тип("Число"));
	ПримитивныеТипы.Добавить(Тип("Дата"));
	ПримитивныеТипы.Добавить(Тип("Булево"));
	
	Возврат ПримитивныеТипы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначенияСовпадают(Строка1, Строка2, ИмяКолонки, Колонки)
	
	Если Колонки.Ссылочные.Найти(ИмяКолонки) = Неопределено Тогда
		Если Строка1[ИмяКолонки] <> Строка2[ИмяКолонки] Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыравнитьМХ(Команда)
	ВыравнитьМХНаСервере();
КонецПроцедуры

&НаСервере
Процедура ВыравнитьМХНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	МестаХранения.МестоХранения КАК МестоХранения_Ключ,
	               |	МестаХранения.ВидМПЗ КАК ВидМПЗ_Ключ,
	               |	МестаХранения.МПЗ КАК МПЗ_Ключ,
	               |	МестаХранения.Регистратор КАК Регистратор_Ключ,
	               |	МестаХранения.Количество КАК Количество
	               |ИЗ
	               |	РегистрНакопления.МестаХранения КАК МестаХранения
	               |ГДЕ
	               |	МестаХранения.Период МЕЖДУ &Дата1 И &Дата2
	               |	И МестаХранения.МестоХранения.Родитель В ИЕРАРХИИ (&ГруппаСкладов1, &ГруппаСкладов2, &ГруппаСкладов3)";
		Запрос.УстановитьПараметр("Дата1", ДатаНачалаМХ);
		Запрос.УстановитьПараметр("Дата2", ДатаОкончанияМХ);
		Запрос.УстановитьПараметр("ГруппаСкладов1", ГС1);
		Запрос.УстановитьПараметр("ГруппаСкладов2", ГС2);
		Запрос.УстановитьПараметр("ГруппаСкладов3", ГС3);
	тзЭтойБазы = Запрос.Выполнить().Выгрузить();
	
	Колонки = ПолучитьМассивыКолонок(тзЭтойБазы);
	
	ДанныеОтправки = Новый Структура;
	ДанныеОтправки.Вставить("ТекстЗапроса", Запрос.Текст);
	ПараметрыЗапроса = Новый ТаблицаЗначений;
	ПараметрыЗапроса.Колонки.Добавить("ИмяПараметра");
	ПараметрыЗапроса.Колонки.Добавить("ЗначениеПараметра");
	СтрокаПЗ = ПараметрыЗапроса.Добавить();
	СтрокаПЗ.ИмяПараметра = "Дата1";
	СтрокаПЗ.ЗначениеПараметра = ДатаНачалаМХ;
	СтрокаПЗ = ПараметрыЗапроса.Добавить();
	СтрокаПЗ.ИмяПараметра = "Дата2";
	СтрокаПЗ.ЗначениеПараметра = ДатаОкончанияМХ;
	СтрокаПЗ = ПараметрыЗапроса.Добавить();
	СтрокаПЗ.ИмяПараметра = "ГруппаСкладов1";
	СтрокаПЗ.ЗначениеПараметра = ГС1;
	СтрокаПЗ = ПараметрыЗапроса.Добавить();
	СтрокаПЗ.ИмяПараметра = "ГруппаСкладов2";
	СтрокаПЗ.ЗначениеПараметра = ГС2;
	СтрокаПЗ = ПараметрыЗапроса.Добавить();
	СтрокаПЗ.ИмяПараметра = "ГруппаСкладов3";
	СтрокаПЗ.ЗначениеПараметра = ГС3;
	ДанныеОтправки.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	
	Результат = СРМ_ОбменВебСервис.СверкаБаз(ДанныеОтправки);
	
	Если ТипЗнч(Результат) = Тип("Строка") тогда
		Возврат;	
	иначе	
		тзДругойБазы = Результат.Объекты;
	КонецЕсли;
	
	
	//сравнение
	тзЭтойБазы.Колонки.Добавить("СтрокаУчтена");
	тзЭтойБазы.ЗаполнитьЗначения(Ложь, "СтрокаУчтена");
	
	тзДругойБазы.Колонки.Добавить("СтрокаУчтена");
	тзДругойБазы.ЗаполнитьЗначения(Ложь, "СтрокаУчтена");
	
	СтрокаКолонкиДляПоиска = СтрСоединить(Колонки.СтруктураПоиска, ",");
	тзЭтойБазы.Индексы.Добавить(СтрокаКолонкиДляПоиска+",СтрокаУчтена");
	тзДругойБазы.Индексы.Добавить(СтрокаКолонкиДляПоиска+",СтрокаУчтена");
	
	СтрокиТЗ = Новый Структура;
	СтрокиТЗ.Вставить("ТолькоЭтаБаза", Новый Массив);
	//временно
	ТаблицаРегистраторов = Новый ТаблицаЗначений;
	ТаблицаРегистраторов.Колонки.Добавить("Регистратор");
	//временно
	СтрокиТЗ.Вставить("ТолькоДругаяБаза", Новый Массив);
	СтрокиТЗ.Вставить("ОтличающиесяЭтаБаза", Новый Массив);
	СтрокиТЗ.Вставить("ОтличающиесяДругаяБаза", Новый Массив);
	СтрокиТЗ.Вставить("СовпадающиеЭтаБаза", Новый Массив);
	
	Для Каждого ЭтаБазаСтрока Из тзЭтойБазы Цикл
		СтруктураПоиска = Новый Структура(СтрокаКолонкиДляПоиска);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭтаБазаСтрока);
		СтруктураПоиска.Вставить("СтрокаУчтена", Ложь);
		
		МассивНайдСтрок = тзДругойБазы.НайтиСтроки(СтруктураПоиска);
		Если МассивНайдСтрок.Количество() = 0 Тогда
			СтрокиТЗ.ТолькоЭтаБаза.Добавить(ЭтаБазаСтрока);
			//временно
			СтрокаТЗ = ТаблицаРегистраторов.Добавить();
			СтрокаТЗ.Регистратор = ЭтаБазаСтрока.Регистратор_Ключ;
			//временно
		Иначе
			ЗначенияСовпадают = Истина;
			СтрокаДругойБазы = МассивНайдСтрок[0];
			Для Каждого ОстальнаяКолонка Из Колонки.Остальные Цикл
				ЗначенияСовпадают = ЗначенияСовпадают(ЭтаБазаСтрока, СтрокаДругойБазы, ОстальнаяКолонка, Колонки);
				Если НЕ ЗначенияСовпадают Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначенияСовпадают Тогда
				ЭтаБазаСтрока.СтрокаУчтена = Истина;
				СтрокаДругойБазы.СтрокаУчтена = Истина;
				СтрокиТЗ.СовпадающиеЭтаБаза.Добавить(ЭтаБазаСтрока);
			Иначе
				СтрокиТЗ.ОтличающиесяЭтаБаза.Добавить(ЭтаБазаСтрока);
				СтрокиТЗ.ОтличающиесяДругаяБаза.Добавить(СтрокаДругойБазы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДругаяБазаСтрока Из тзДругойБазы Цикл
		Если ДругаяБазаСтрока.СтрокаУчтена Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиска = Новый Структура(СтрокаКолонкиДляПоиска);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДругаяБазаСтрока);
		СтруктураПоиска.Вставить("СтрокаУчтена", Ложь);
		
		МассивНайдСтрок = тзЭтойБазы.НайтиСтроки(СтруктураПоиска);
		Если МассивНайдСтрок.Количество() = 0 Тогда
			СтрокиТЗ.ТолькоДругаяБаза.Добавить(ДругаяБазаСтрока);
		КонецЕсли;
	КонецЦикла;
	 //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	//отправляем чего надо доотправить   ОСТОРОЖНО!!!!
	//Регистраторы МестХранения
	ТаблицаРегистраторов.Свернуть("Регистратор");
	Для каждого СтрокаР из ТаблицаРегистраторов цикл
		Источник = СтрокаР.Регистратор.ПолучитьОбъект();
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписатьXML(ЗаписьXML, Источник, НазначениеТипаXML.Явное);
		СтрокаХМЛ = ЗаписьXML.Закрыть();
		СРМ_ОбменВебСервис.СериализоватьОтправитьОбъект(СтрокаХМЛ);
		Для каждого Набор из Источник.Движения цикл
			Набор.Прочитать();
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			ЗаписьXML.ЗаписатьОбъявлениеXML();
			ЗаписатьXML(ЗаписьXML, Набор, НазначениеТипаXML.Явное);
			СтрокаХМЛ = ЗаписьXML.Закрыть();
			СРМ_ОбменВебСервис.СериализоватьОтправитьОбъект(СтрокаХМЛ);
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ВыравнитьЭПЗНачалоКонец(Команда)
	ВыравнитьЭПЗНачалоКонецНаСервере();
	ПоказатьПредупреждение(,"Выравнивание завершено");
КонецПроцедуры

&НаСервере
Процедура ВыравнитьЭПЗНачалоКонецНаСервере()
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	ЭтапыПроизводственныхЗаданий.ПЗ КАК ПЗ
	               |ПОМЕСТИТЬ ПЗНужные
	               |ИЗ
	               |	РегистрСведений.ЭтапыПроизводственныхЗаданий КАК ЭтапыПроизводственныхЗаданий
	               |ГДЕ
	               |	(ЭтапыПроизводственныхЗаданий.ДатаНачала МЕЖДУ &Дата1 И &Дата2
	               |			ИЛИ ЭтапыПроизводственныхЗаданий.ДатаОкончания МЕЖДУ &Дата1 И &Дата2)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	ЭтапыПроизводственныхЗаданий.Период КАК Период_Ключ,
	               |	ЭтапыПроизводственныхЗаданий.ПЗ КАК ПЗ_Ключ,
	               |	ЭтапыПроизводственныхЗаданий.Линейка КАК Линейка_Ключ,
	               |	ЭтапыПроизводственныхЗаданий.Изделие КАК Изделие_Ключ,
	               |	ЭтапыПроизводственныхЗаданий.БарКод КАК БарКод,
	               |	ЭтапыПроизводственныхЗаданий.РабочееМесто КАК РабочееМесто,
	               |	ЭтапыПроизводственныхЗаданий.Спецификация КАК Спецификация,
	               |	ЭтапыПроизводственныхЗаданий.Количество КАК Количество,
	               |	ЭтапыПроизводственныхЗаданий.Исполнитель КАК Исполнитель,
	               |	ЭтапыПроизводственныхЗаданий.ДатаНачала КАК ДатаНачала,
	               |	ЭтапыПроизводственныхЗаданий.ДатаОкончания КАК ДатаОкончания,
	               |	ЭтапыПроизводственныхЗаданий.Ремонт КАК Ремонт
	               |ИЗ
	               |	РегистрСведений.ЭтапыПроизводственныхЗаданий КАК ЭтапыПроизводственныхЗаданий
	               |ГДЕ
	               |	ЭтапыПроизводственныхЗаданий.ПЗ В
	               |			(ВЫБРАТЬ
	               |				ПЗНужные.ПЗ
	               |			ИЗ
	               |				ПЗНужные КАК ПЗНужные)";
		Запрос.УстановитьПараметр("Дата1", ДатаНачалаЭтапыПЗ);
		Запрос.УстановитьПараметр("Дата2", ДатаОкончанияЭтапыПЗ);
	тзЭтойБазы = Запрос.Выполнить().Выгрузить();
	
	Колонки = ПолучитьМассивыКолонок(тзЭтойБазы);
	
	ДанныеОтправки = Новый Структура;
	ДанныеОтправки.Вставить("ТекстЗапроса", Запрос.Текст);
	ПараметрыЗапроса = Новый ТаблицаЗначений;
	ПараметрыЗапроса.Колонки.Добавить("ИмяПараметра");
	ПараметрыЗапроса.Колонки.Добавить("ЗначениеПараметра");
	СтрокаПЗ = ПараметрыЗапроса.Добавить();
	СтрокаПЗ.ИмяПараметра = "Дата1";
	СтрокаПЗ.ЗначениеПараметра = ДатаНачалаЭтапыПЗ;
	СтрокаПЗ = ПараметрыЗапроса.Добавить();
	СтрокаПЗ.ИмяПараметра = "Дата2";
	СтрокаПЗ.ЗначениеПараметра = ДатаОкончанияЭтапыПЗ;
	
	ДанныеОтправки.Вставить("ПараметрыЗапроса", ПараметрыЗапроса);
	Результат = СРМ_ОбменВебСервис.СверкаБаз(ДанныеОтправки);
	
	Если ТипЗнч(Результат) = Тип("Строка") тогда
		Возврат;	
	иначе	
		тзДругойБазы = Результат.Объекты;
	КонецЕсли;
	
	
	//сравнение
	тзЭтойБазы.Колонки.Добавить("СтрокаУчтена");
	тзЭтойБазы.ЗаполнитьЗначения(Ложь, "СтрокаУчтена");
	
	тзДругойБазы.Колонки.Добавить("СтрокаУчтена");
	тзДругойБазы.ЗаполнитьЗначения(Ложь, "СтрокаУчтена");
	//временно
	ТаблицаПЗ = Новый ТаблицаЗначений;
	ТаблицаПЗ.Колонки.Добавить("ПЗ");
	//временно

	
	СтрокаКолонкиДляПоиска = СтрСоединить(Колонки.СтруктураПоиска, ",");
	тзЭтойБазы.Индексы.Добавить(СтрокаКолонкиДляПоиска+",СтрокаУчтена");
	тзДругойБазы.Индексы.Добавить(СтрокаКолонкиДляПоиска+",СтрокаУчтена");
	
	СтрокиТЗ = Новый Структура;
	СтрокиТЗ.Вставить("ТолькоЭтаБаза", Новый Массив);
	СтрокиТЗ.Вставить("ТолькоДругаяБаза", Новый Массив);
	СтрокиТЗ.Вставить("ОтличающиесяЭтаБаза", Новый Массив);
	СтрокиТЗ.Вставить("ОтличающиесяДругаяБаза", Новый Массив);
	СтрокиТЗ.Вставить("СовпадающиеЭтаБаза", Новый Массив);
	
	Для Каждого ЭтаБазаСтрока Из тзЭтойБазы Цикл
		СтруктураПоиска = Новый Структура(СтрокаКолонкиДляПоиска);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭтаБазаСтрока);
		СтруктураПоиска.Вставить("СтрокаУчтена", Ложь);
		
		МассивНайдСтрок = тзДругойБазы.НайтиСтроки(СтруктураПоиска);
		Если МассивНайдСтрок.Количество() = 0 Тогда
			СтрокиТЗ.ТолькоЭтаБаза.Добавить(ЭтаБазаСтрока);
			//временно
			СтрокаТЗ = ТаблицаПЗ.Добавить();
			СтрокаТЗ.ПЗ = ЭтаБазаСтрока.ПЗ_Ключ;
			//временно
		Иначе
			ЗначенияСовпадают = Истина;
			СтрокаДругойБазы = МассивНайдСтрок[0];
			Для Каждого ОстальнаяКолонка Из Колонки.Остальные Цикл
				ЗначенияСовпадают = ЗначенияСовпадают(ЭтаБазаСтрока, СтрокаДругойБазы, ОстальнаяКолонка, Колонки);
				Если НЕ ЗначенияСовпадают Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначенияСовпадают Тогда
				ЭтаБазаСтрока.СтрокаУчтена = Истина;
				СтрокаДругойБазы.СтрокаУчтена = Истина;
				СтрокиТЗ.СовпадающиеЭтаБаза.Добавить(ЭтаБазаСтрока);
			Иначе
				СтрокиТЗ.ОтличающиесяЭтаБаза.Добавить(ЭтаБазаСтрока);
				СтрокиТЗ.ОтличающиесяДругаяБаза.Добавить(СтрокаДругойБазы);
				//временно
				СтрокаТЗ = ТаблицаПЗ.Добавить();
				СтрокаТЗ.ПЗ = ЭтаБазаСтрока.ПЗ_Ключ;
				//временно
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ДругаяБазаСтрока Из тзДругойБазы Цикл
		Если ДругаяБазаСтрока.СтрокаУчтена Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиска = Новый Структура(СтрокаКолонкиДляПоиска);
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДругаяБазаСтрока);
		СтруктураПоиска.Вставить("СтрокаУчтена", Ложь);
		
		МассивНайдСтрок = тзЭтойБазы.НайтиСтроки(СтруктураПоиска);
		Если МассивНайдСтрок.Количество() = 0 Тогда
			СтрокиТЗ.ТолькоДругаяБаза.Добавить(ДругаяБазаСтрока);
		КонецЕсли;
	КонецЦикла;
	 //!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
	//отправляем чего надо доотправить   ОСТОРОЖНО!!!!
	//Этапы ПЗ
	ТаблицаПЗ.Свернуть("ПЗ");
	Набор = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
	Для каждого СтрокаР из ТаблицаПЗ цикл
		Набор.Отбор.ПЗ.Значение = СтрокаР.ПЗ;
		Набор.Отбор.ПЗ.Использование = Истина;
		Набор.Прочитать();
		ЗаписьXML = Новый ЗаписьXML;
		ЗаписьXML.УстановитьСтроку();
		ЗаписьXML.ЗаписатьОбъявлениеXML();
		ЗаписатьXML(ЗаписьXML, Набор, НазначениеТипаXML.Явное);
		СтрокаХМЛ = ЗаписьXML.Закрыть();
		СРМ_ОбменВебСервис.СериализоватьОтправитьОбъект(СтрокаХМЛ);
	КонецЦикла;	
	
КонецПроцедуры
