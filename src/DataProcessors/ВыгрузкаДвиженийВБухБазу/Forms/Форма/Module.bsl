
&НаСервере
Функция ПолучитьЦенуЦена(БазаСД,Н)
ТипЦен=БазаСД.Справочники.ТипыЦенНоменклатуры.НайтиПоКоду("00-000001");
Запрос = БазаСД.NewObject("Запрос"); 

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЦеныНоменклатуры.ТипЦен,
	|	ЦеныНоменклатуры.Номенклатура,
	|	ЦеныНоменклатуры.Цена
	|ИЗ
	|	РегистрСведений.ЦеныНоменклатуры КАК ЦеныНоменклатуры
	|ГДЕ
	|	ЦеныНоменклатуры.Номенклатура = &Н
	|	И ЦеныНоменклатуры.ТипЦен = &ТипЦен
	|АВТОУПОРЯДОЧИВАНИЕ";
Запрос.УстановитьПараметр("Н", Н);
Запрос.УстановитьПараметр("ТипЦен", ТипЦен.Ссылка);	
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Цена=ВыборкаДетальныеЗаписи.Цена;
	КонецЦикла;
Возврат Цена;
КонецФункции

//Поиск номенклатуры по артикулу, если не найдена, добавление в группу "Новые"
&НаСервере
Функция ВыбратьДобавитьНоменклатуру(БазаСД,Товар)
Наименование = Товар.Наименование;	
Артикул = Формат(Товар.Код, "ЧДЦ=; ЧГ=0");
Артикул = СтрЗаменить(Артикул, " ", "");
	Пока СтрДлина(Артикул) < 9 Цикл
	Артикул = "0" + Артикул;
	Конеццикла;
Номенклатура =  БазаСД.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
	// если не найден, то создать новую номенклатуру	
	Если Номенклатура = БазаСД.Справочники.Номенклатура.ПустаяСсылка() Тогда
	РодительНоменклатурыНов = БазаСД.Справочники.Номенклатура.НайтиПоНаименованию("Новые", Истина);
	Справ = БазаСД.Справочники.Номенклатура.СоздатьЭлемент();
	ГруппаНоменклатуры = БазаСД.Справочники.Номенклатура.НайтиПоНаименованию("Новые", Истина);
		Если ГруппаНоменклатуры = БазаСД.Справочники.Номенклатура.ПустаяСсылка() Тогда
		ГруппаНоменклатуры = БазаСД.Справочники.Номенклатура.СоздатьГруппу();
		ГруппаНоменклатуры.Наименование = "Новые";
		ГруппаНоменклатуры.Записать();
		КонецЕсли;
	ЕдиницаИзмерения = БазаСД.Справочники.КлассификаторЕдиницИзмерения.НайтиПоНаименованию("шт");
	Справ.Артикул = 			Артикул;
	Справ.Наименование = 		Наименование;
	Справ.НаименованиеПолное = 	Товар.ПолнНаименование;
	Справ.Родитель = 			ГруппаНоменклатуры;
	Справ.ВидСтавкиНДС = 		БазаСД.Перечисления.ВидыСтавокНДС.Общая;
	Справ.ЕдиницаИзмерения = 	ЕдиницаИзмерения;
	Справ.Записать();
	Сообщить("Создана новая номенклатура  " + Артикул + "   " + Наименование);
	Номенклатура = БазаСД.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
	Иначе
		// если помечен на удаление, то сообщить	
		Если Номенклатура.ПометкаУдаления Тогда
	    Сообщить("Номенклатура помечена на удаление " + Артикул + "   " + Наименование);
		КонецЕсли;	
	КонецЕсли;	
Возврат Номенклатура;
КонецФункции

&НаСервере
Процедура ОбработатьРезультатЗапроса(БазаСД,Запрос)
Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Период.ДатаНачала));
Запрос.УстановитьПараметр("ДатаКон", КонецДня(Период.ДатаОкончания));
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Попытка
		бсНовДок = БазаСД.Документы.ПеремещениеТоваров.СоздатьДокумент();
		бсНовДок.Номер = ВыборкаДетальныеЗаписи.Ссылка.Номер;
		бсНовДок.Дата = НачалоДня(Период.ДатаОкончания)+300;
		бсНовДок.Организация = БазаСД.Справочники.Организации.НайтиПоРеквизиту("ИНН","7112011490");
		бсНовДок.СкладОтправитель = БазаСД.Справочники.Склады.НайтиПоКоду(ВыборкаДетальныеЗаписи.МестоХранения.КодВБухБазе);
		бсНовДок.СкладПолучатель = БазаСД.Справочники.Склады.НайтиПоКоду(ВыборкаДетальныеЗаписи.МестоХраненияВ.КодВБухБазе);
		бсНовДок.НДСвСтоимостиТоваров = БазаСД.Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		бсНовДок.Комментарий = "Выгрузка из производственной базы за "+Формат(Период.ДатаНачала,"ДФ=dd.MM.yyyy");
			Для каждого ТЧ Из ВыборкаДетальныеЗаписи.Ссылка.ТабличнаяЧасть Цикл
				Если ТЧ.МПЗ.Товар.Пустая() Тогда
				Сообщить(""+ТЧ.МПЗ+" - в производственной базе не присвоен Товар!");
				Продолжить; 			
				КонецЕсли; 
			ТЧ_П = бсНовДок.Товары.Добавить();
			ТЧ_П.Номенклатура = ВыбратьДобавитьНоменклатуру(БазаСД,ТЧ.МПЗ.Товар);
			ТЧ_П.ЕдиницаИзмерения = ТЧ_П.Номенклатура.ЕдиницаИзмерения;
			ТЧ_П.Количество = ПолучитьБазовоеКоличество(ТЧ.Количество,ТЧ.ЕдиницаИзмерения);
			//ТЧ_П.Себестоимость=ПолучитьЦенуЦена(БазаСД,ТЧ_П.Номенклатура);
			КонецЦикла; 
		БазаСД.Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(бсНовДок, "Товары");
		бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Запись);
		ДвижениеОбъект = ВыборкаДетальныеЗаписи.Ссылка.ПолучитьОбъект();
	   	ДвижениеОбъект.Выгружено = Истина;
		ДвижениеОбъект.Записать(РежимЗаписиДокумента.Запись);
		Сообщить("Создано перемещение №"+бсНовДок.Номер);
		бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Проведение);
		Исключение
		Сообщить(ОписаниеОшибки());
		Сообщить(бсНовДок.Номер+" - документ не проведен в бух. базе!");
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверитьДвижение(Перепрогон)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДвижениеМПЗ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.ДвижениеМПЗ КАК ДвижениеМПЗ
	|ГДЕ
	|	ДвижениеМПЗ.ДокументОснование = &ДокументОснование";
Запрос.УстановитьПараметр("ДокументОснование", Перепрогон);	
РезультатЗапроса = Запрос.Выполнить();	
Возврат(Не РезультатЗапроса.Пустой());
КонецФункции

&НаСервере
Процедура ВыгрузитьНаСервере()
БазаСД = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Объект.БазаДанных);
	Если БазаСД = Неопределено Тогда
	Сообщить("Нет соединения с бух. базой!");
	Возврат;
	КонецЕсли;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвижениеМПЗ.Ссылка КАК Ссылка,
	|	ДвижениеМПЗ.МестоХранения КАК МестоХранения,
	|	ДвижениеМПЗ.МестоХраненияВ КАК МестоХраненияВ
	|ИЗ
	|	Документ.ДвижениеМПЗ КАК ДвижениеМПЗ
	|ГДЕ
	|	ДвижениеМПЗ.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ДвижениеМПЗ.Проведен = ИСТИНА
	|	И ДвижениеМПЗ.МестоХранения В ИЕРАРХИИ(&СписокМестХранения)
	|	И ДвижениеМПЗ.МестоХраненияВ В ИЕРАРХИИ(&СписокМестоХраненияВ)"; 

СписокМестХранения = Новый СписокЗначений;
СписокМестХраненияВ = Новый СписокЗначений;

СписокМестХранения.Добавить(Константы.МестоХраненияТранзит.Получить());
СписокМестХранения.Добавить(Константы.МестоХраненияНеликвидов.Получить());
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
СписокМестХраненияВ.Добавить(Константы.МестоХраненияПерепрогон.Получить());
СписокМестХраненияВ.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Богородицк Основной",ИСТИНА));
Запрос.УстановитьПараметр("СписокМестоХраненияВ", СписокМестХраненияВ);
ОбработатьРезультатЗапроса(БазаСД,Запрос);

СписокМестХранения.Очистить();
СписокМестХраненияВ.Очистить();
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция УПЭА",ИСТИНА));
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция ДД",ИСТИНА));
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция УД",ИСТИНА));
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
СписокМестХраненияВ.Добавить(Константы.МестоХраненияНеликвидов.Получить());
СписокМестХраненияВ.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Изолятор",Истина));
Запрос.УстановитьПараметр("СписокМестоХраненияВ", СписокМестХраненияВ);
ОбработатьРезультатЗапроса(БазаСД,Запрос);

СписокМестХранения.Очистить();
СписокМестХраненияВ.Очистить();
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Изолятор",ИСТИНА));
СписокМестХранения.Добавить(Константы.МестоХраненияТранзит.Получить());
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
СписокМестХраненияВ.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция УПЭА",ИСТИНА));
СписокМестХраненияВ.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция ДД",ИСТИНА));
СписокМестХраненияВ.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Склады линеек Готовая продукция УД",ИСТИНА));
СписокМестХраненияВ.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Богородицк ГП СД (старые)",ИСТИНА));
СписокМестХраненияВ.Добавить(Константы.МестоХраненияНеликвидов.Получить());
Запрос.УстановитьПараметр("СписокМестоХраненияВ", СписокМестХраненияВ);
ОбработатьРезультатЗапроса(БазаСД,Запрос);

СписокМестХранения.Очистить();
СписокМестХраненияВ.Очистить();
СписокМестХранения.Добавить(Справочники.МестаХранения.НайтиПоНаименованию("Богородицк Основной",ИСТИНА));
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
СписокМестХраненияВ.Добавить(Константы.МестоХраненияНеликвидов.Получить());
Запрос.УстановитьПараметр("СписокМестоХраненияВ", СписокМестХраненияВ);
ОбработатьРезультатЗапроса(БазаСД,Запрос);

ТЗ = Новый ТаблицаЗначений;
СписокДвижений = Новый СписокЗначений;

ТЗ.Колонки.Добавить("Товар");
ТЗ.Колонки.Добавить("Количество");

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДвижениеМПЗТабличнаяЧасть.Ссылка КАК Ссылка,
	|	ДвижениеМПЗТабличнаяЧасть.Ссылка.МестоХраненияВ КАК МестоХраненияВ,
	|	ДвижениеМПЗТабличнаяЧасть.МПЗ КАК МПЗ,
	|	ДвижениеМПЗТабличнаяЧасть.Количество КАК Количество,
	|	ДвижениеМПЗТабличнаяЧасть.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ИЗ
	|	Документ.ДвижениеМПЗ.ТабличнаяЧасть КАК ДвижениеМПЗТабличнаяЧасть
	|ГДЕ
	|	ДвижениеМПЗТабличнаяЧасть.Ссылка.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И ДвижениеМПЗТабличнаяЧасть.Ссылка.Проведен = ИСТИНА
	|	И ДвижениеМПЗТабличнаяЧасть.Ссылка.МестоХранения = &МестоХранения
	|
	|УПОРЯДОЧИТЬ ПО
	|	МестоХраненияВ
	|ИТОГИ ПО
	|	МестоХраненияВ";
Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Период.ДатаНачала));
Запрос.УстановитьПараметр("ДатаКон", КонецДня(Период.ДатаОкончания));
Запрос.УстановитьПараметр("МестоХранения", Константы.МестоХраненияПерепрогон.Получить());
РезультатЗапроса = Запрос.Выполнить();
ВыборкаМестаХраненияВ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМестаХраненияВ.Следующий() Цикл
	ТЗ.Очистить();
	СписокДвижений.Очистить();
	ВыборкаДетальныеЗаписи = ВыборкаМестаХраненияВ.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если Не ВыборкаДетальныеЗаписи.МПЗ.Товар.Пустая() Тогда
				Если СписокДвижений.НайтиПоЗначению(ВыборкаДетальныеЗаписи.Ссылка) = Неопределено Тогда
				СписокДвижений.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
				КонецЕсли; 
			ТЧ = ТЗ.Добавить();
			ТЧ.Товар = ВыборкаДетальныеЗаписи.МПЗ.Товар;
			ТЧ.Количество = ПолучитьБазовоеКоличество(ВыборкаДетальныеЗаписи.Количество,ВыборкаДетальныеЗаписи.ЕдиницаИзмерения);
			Иначе
			Сообщить(""+ВыборкаДетальныеЗаписи.МПЗ+" - в производственной базе не присвоен Товар!");			
			КонецЕсли;
		КонецЦикла;
			Если ТЗ.Количество() > 0 Тогда
			ТЗ.Свернуть("Товар","Количество");
			ТЗ.Сортировать("Товар");
			бсНовДок = БазаСД.Документы.ПеремещениеТоваров.СоздатьДокумент();
			бсНовДок.Дата = НачалоДня(Период.ДатаОкончания)+300;
			бсНовДок.Организация = БазаСД.Справочники.Организации.НайтиПоРеквизиту("ИНН","7112011490");
			бсНовДок.СкладОтправитель = БазаСД.Справочники.Склады.НайтиПоКоду(Константы.МестоХраненияПерепрогон.Получить().КодВБухБазе);
			бсНовДок.СкладПолучатель = БазаСД.Справочники.Склады.НайтиПоКоду(ВыборкаМестаХраненияВ.МестоХраненияВ.КодВБухБазе);
			бсНовДок.НДСвСтоимостиТоваров = БазаСД.Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
			бсНовДок.Комментарий = "Выгрузка из производственной базы за "+Формат(Период.ДатаНачала,"ДФ=dd.MM.yyyy");
				Для каждого ТЧ Из ТЗ Цикл
				ТЧ_П = бсНовДок.Товары.Добавить();
				ТЧ_П.Номенклатура = ВыбратьДобавитьНоменклатуру(БазаСД,ТЧ.Товар);
				ТЧ_П.ЕдиницаИзмерения = ТЧ_П.Номенклатура.ЕдиницаИзмерения;
				ТЧ_П.Количество =ТЧ.Количество;
				//ТЧ_П.Себестоимость=ПолучитьЦенуЦена(БазаСД,ТЧ_П.Номенклатура);
				КонецЦикла;
			БазаСД.Документы.ПеремещениеТоваров.ЗаполнитьСчетаУчетаВТабличнойЧасти(бсНовДок, "Товары");
				Попытка
				бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Запись);
					Для каждого Док Из СписокДвижений Цикл
					ДвижениеОбъект = Док.Значение.ПолучитьОбъект();
				   	ДвижениеОбъект.Выгружено = Истина;
					ДвижениеОбъект.Записать(РежимЗаписиДокумента.Запись);
					КонецЦикла; 
				Сообщить("Создано перемещение №"+бсНовДок.Номер);
				бсНовДок.Записать(БазаСД.РежимЗаписиДокумента.Проведение);		
				Исключение
				Сообщить(ОписаниеОшибки());
				Сообщить(бсНовДок.Номер+" - документ не проведен в бух. базе!");
				КонецПопытки;
			КонецЕсли; 	
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура Выгрузить(Команда)
	Если ЭтаФорма.ПроверитьЗаполнение() Тогда
	Состояние("Обработка...",,"Выгрузка в выбранную базу данных...");	
	ВыгрузитьНаСервере();	
	КонецЕсли;
КонецПроцедуры
