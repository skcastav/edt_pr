 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
ВидОтчёта = 1;
СортироватьПо = 1;
КонецПроцедуры
               
&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
      ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры 

&НаКлиенте
Процедура ВидОтчётаПриИзменении(Элемент)
ПолучитьДанныеНаСервере();
СортироватьПоПриИзменении(Неопределено);
ОтключитьОбработчикОжидания("ПолучитьДанныеПоПустымКанбанам");
	Если Объект.ИнтервалОбновления > 0 Тогда
	ПодключитьОбработчикОжидания("ПолучитьДанныеПоПустымКанбанам", Объект.ИнтервалОбновления*60);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеНаСервере()
Сотрудник = Справочники.Сотрудники.ПустаяСсылка();
ТаблицаПустыхКанбанов.Очистить();
Запрос = Новый Запрос;
ЗапросЛО = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОборотКанбанов.Период КАК Период,              
	|	ОборотКанбанов.МестоХраненияОтправитель КАК МестоХраненияОтправитель,
	|	ОборотКанбанов.МестоХранения КАК МестоХранения,
	|	ОборотКанбанов.Подразделение КАК Подразделение,
	|	ОборотКанбанов.МПЗ КАК МПЗ,
	|	ОборотКанбанов.НомерЯчейки КАК НомерЯчейки,
	|	ОборотКанбанов.ДатаПринятия КАК ДатаПринятия,
	|	ОборотКанбанов.ДатаОкончания КАК ДатаОкончания,
	|	ОборотКанбанов.Принял КАК Принял,
	|	ОборотКанбанов.Оформил КАК Оформил
	|ИЗ
	|	РегистрСведений.ОборотКанбанов КАК ОборотКанбанов";
	Если ВидОтчёта = 1 Тогда
	Запрос.Текст = Запрос.Текст + " ГДЕ ОборотКанбанов.ДатаПринятия = ДАТАВРЕМЯ(1,1,1,0,0,0)";
	Иначе
	Запрос.Текст = Запрос.Текст + " ГДЕ ОборотКанбанов.ДатаОкончания = ДАТАВРЕМЯ(1,1,1,0,0,0)";	
	КонецЕсли; 
		Если СписокПодразделений.Количество() > 0 Тогда
		Запрос.Текст = Запрос.Текст + " И ОборотКанбанов.Подразделение В(&СписокПодразделений)";
		Запрос.УстановитьПараметр("СписокПодразделений",СписокПодразделений);		
		КонецЕсли;
			Если СписокМестХранения.Количество() > 0 Тогда
			Запрос.Текст = Запрос.Текст + " И ОборотКанбанов.МестоХранения В ИЕРАРХИИ(&СписокМестХранения)";
			Запрос.УстановитьПараметр("СписокМестХранения",СписокМестХранения);		
			КонецЕсли; 
				Если Не МестоХраненияОтправитель.Пустая() Тогда
				Запрос.Текст = Запрос.Текст + " И ОборотКанбанов.МестоХраненияОтправитель = &МестоХраненияОтправитель";
				Запрос.УстановитьПараметр("МестоХраненияОтправитель",МестоХраненияОтправитель);		
				КонецЕсли;
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныхЗаписей = РезультатЗапроса.Выбрать(); 
	Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
	ТЧ = ТаблицаПустыхКанбанов.Добавить();                  
	ТЧ.Подразделение = ВыборкаДетальныхЗаписей.Подразделение;
	ТЧ.МестоХраненияОтправитель = ВыборкаДетальныхЗаписей.МестоХраненияОтправитель;
	ТЧ.МестоХранения = ВыборкаДетальныхЗаписей.МестоХранения;
	ТЧ.МПЗ = ВыборкаДетальныхЗаписей.МПЗ;
	ТЧ.НомерЯчейки = ВыборкаДетальныхЗаписей.НомерЯчейки;
	ТЧ.ДатаИсчерпания = ВыборкаДетальныхЗаписей.Период;
	ТЧ.Оформил = ВыборкаДетальныхЗаписей.Оформил;
	ТЧ.ДатаПринятия = ВыборкаДетальныхЗаписей.ДатаПринятия;
	ТЧ.Принял = ВыборкаДетальныхЗаписей.Принял; 
	ЯчейкиКомплектации = ОбщийМодульРаботаСРегистрами.ПолучитьЯчейкуКомплектацииПоМестуХранения(ТЧ.МестоХранения,ТЧ.МПЗ);
	ТЧ.КоличествоЯчеек = ЯчейкиКомплектации.КоличествоЯчеек;
	ТЧ.КоличествоВЯчейке = ЯчейкиКомплектации.КоличествоВЯчейке; 
	ТЧ.КоличествоОстаток = ОбщийМодульВызовСервера.ПолучитьОстатокПоМестуХранения(ВыборкаДетальныхЗаписей.МестоХраненияОтправитель,ТЧ.МПЗ);
		Если Не ЗначениеЗаполнено(ВыборкаДетальныхЗаписей.ДатаОкончания) Тогда
		ЗапросЛО.Текст = 
			"ВЫБРАТЬ
			|	ЛьготнаяОчередь.ПЗ
			|ИЗ
			|	РегистрСведений.ЛьготнаяОчередь КАК ЛьготнаяОчередь
			|ГДЕ
			|	ЛьготнаяОчередь.Линейка.МестоХраненияКанбанов = &МестоХранения
			|	И ЛьготнаяОчередь.НормаРасходов.Элемент = &МПЗ
			|	И ЛьготнаяОчередь.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		ЗапросЛО.УстановитьПараметр("МестоХранения",ВыборкаДетальныхЗаписей.МестоХранения);
		ЗапросЛО.УстановитьПараметр("МПЗ",ВыборкаДетальныхЗаписей.МПЗ);
		РезультатЗапросаЛО = ЗапросЛО.Выполнить();
		ТЧ.ЛьготнаяОчередь = Не РезультатЗапросаЛО.Пустой();		
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанные(Команда)
ПолучитьДанныеНаСервере();
СортироватьПоПриИзменении(Неопределено);
ОтключитьОбработчикОжидания("ПолучитьДанныеПоПустымКанбанам");
	Если Объект.ИнтервалОбновления > 0 Тогда
	ПодключитьОбработчикОжидания("ПолучитьДанныеПоПустымКанбанам", Объект.ИнтервалОбновления*60);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПоПустымКанбанам()
ПолучитьДанныеНаСервере();
СортироватьПоПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоПриИзменении(Элемент)
	Если СортироватьПо = 1 Тогда
	ТаблицаПустыхКанбанов.Сортировать("МестоХранения,ДатаИсчерпания,МПЗ");	
	ИначеЕсли СортироватьПо = 2 Тогда
	ТаблицаПустыхКанбанов.Сортировать("МПЗ,МестоХранения,ДатаИсчерпания");
	ИначеЕсли СортироватьПо = 3 Тогда
	ТаблицаПустыхКанбанов.Сортировать("ДатаИсчерпания,МестоХранения,МПЗ");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОбновленияПриИзменении(Элемент)
ОтключитьОбработчикОжидания("ПолучитьДанныеПоПустымКанбанам");
	Если Объект.ИнтервалОбновления > 0 Тогда
	ПодключитьОбработчикОжидания("ПолучитьДанныеПоПустымКанбанам", Объект.ИнтервалОбновления*60);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПринятьПустойКанбанНаСервере(МестоХранения,МПЗ,НомерЯчейки)
	Если Сотрудник.Пустая() Тогда
	Сообщить("Не заполнено поле Сотрудник!");
	Возврат;		
	КонецЕсли;
		Если ОбщийМодульРаботаСРегистрами.ОформитьПринятиеКанбана(МестоХраненияОтправитель,МестоХранения,МПЗ,НомерЯчейки,Сотрудник,Истина) Тогда	
		ПолучитьДанныеНаСервере();
		Иначе
		Сообщить(СокрЛП(МПЗ.Наименование)+" - не оформлен пустой канбан по месту хранения "+МестоХранения.Наименование);
		КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПолучитьМестоХранения(Линейка)
Возврат(Линейка.МестоХраненияКанбанов);
КонецФункции
   
&НаСервере         
Функция ПолучитьСтрокуТаблицы(МестоХраненияОтправ,МестоХраненияКанбанов,МПЗ,НомерЯчейки)
Выборка = ТаблицаПустыхКанбанов.НайтиСтроки(Новый Структура("МестоХранения,МестоХраненияОтправитель,МПЗ,НомерЯчейки",МестоХраненияКанбанов,МестоХраненияОтправ,МПЗ,НомерЯчейки));
	Если Выборка.Количество() > 0 Тогда
    Возврат(Выборка[0].ПолучитьИдентификатор());	
	Иначе	
	Возврат(Неопределено);	
	КонецЕсли; 
КонецФункции 
 
&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если ЭтаФорма.ВводДоступен() Тогда 
	Массив = ОбщийМодульВызовСервера.РазложитьСтрокуВМассив(Данные,";");
		Если Массив[0] = "3" Тогда
		ЗначениеПараметра1 = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[1]);
			Если ЗначениеПараметра1 = Неопределено Тогда
			Сообщить("Линейка или место хранения не найдена!");
			Возврат;	
			КонецЕсли; 
		МПЗ = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[3]);
			Если МПЗ = Неопределено Тогда
			Сообщить(Массив[3]+" - МПЗ не найдена!");
			Возврат;	
			КонецЕсли;
		МестоХраненияОтправ = ОбщийМодульВызовСервера.ПолучитьМестоХраненияПоКоду(Массив[2]);
			Если ТипЗнч(ЗначениеПараметра1) = Тип("СправочникСсылка.Линейки") Тогда 
			МестоХраненияКанбанов = ПолучитьМестоХранения(ЗначениеПараметра1);
			Иначе
			МестоХраненияКанбанов = ЗначениеПараметра1;		
			КонецЕсли;
		Элементы.ТаблицаПустыхКанбанов.ТекущаяСтрока = ПолучитьСтрокуТаблицы(МестоХраненияОтправ,МестоХраненияКанбанов,МПЗ,Число(Массив[5]));
		Иначе
		Сотрудник = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Данные);	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьПустойКанбан(Команда)
	Если Элементы.ТаблицаПустыхКанбанов.ТекущаяСтрока <> Неопределено Тогда
	ПринятьПустойКанбанНаСервере(Элементы.ТаблицаПустыхКанбанов.ТекущиеДанные.МестоХранения,Элементы.ТаблицаПустыхКанбанов.ТекущиеДанные.МПЗ,Элементы.ТаблицаПустыхКанбанов.ТекущиеДанные.НомерЯчейки);
	СортироватьПоПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УдалитьОборотНаСервере(Стр)
ТЧ = ТаблицаПустыхКанбанов.НайтиПоИдентификатору(Стр);
НаборЗаписей = РегистрыСведений.ОборотКанбанов.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Период.Установить(ТЧ.ДатаИсчерпания);
НаборЗаписей.Отбор.Подразделение.Установить(ТЧ.Подразделение);
НаборЗаписей.Отбор.МестоХранения.Установить(ТЧ.МестоХранения);
НаборЗаписей.Отбор.МПЗ.Установить(ТЧ.МПЗ);
НаборЗаписей.Отбор.НомерЯчейки.Установить(ТЧ.НомерЯчейки);
НаборЗаписей.Записать();
ТаблицаПустыхКанбанов.Удалить(ТЧ);
КонецПроцедуры
         
&НаКлиенте
Процедура УдалитьОборот(Команда)
	Если Вопрос("Вы уверены, что хотите удалить оборот?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
	УдалитьОборотНаСервере(Элементы.ТаблицаПустыхКанбанов.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПечатьНаСервере()
ТабДок = Новый ТабличныйДокумент;

ОбъектЗн = РеквизитФормыВЗначение("Объект");
Макет = ОбъектЗн.ПолучитьМакет("Макет");

ОблШапка = Макет.ПолучитьОбласть("Шапка");
ОблСтрока = Макет.ПолучитьОбласть("Строка");
ОблКонец = Макет.ПолучитьОбласть("Конец");

ОблШапка.Параметры.НаДату = ТекущаяДата();
ТабДок.Вывести(ОблШапка);	
	Для каждого ТЧ Из ТаблицаПустыхКанбанов Цикл
	ОблСтрока.Параметры.МестоХранения = ТЧ.МестоХранения;
	ОблСтрока.Параметры.НаименованиеМПЗ = СокрЛП(ТЧ.МПЗ.Наименование);
	ОблСтрока.Параметры.МПЗ = ТЧ.МПЗ;
	ОблСтрока.Параметры.ДатаПринятия = ТЧ.ДатаПринятия;
	ОблСтрока.Параметры.НомерЯчейки = ТЧ.НомерЯчейки;
	ОблСтрока.Параметры.КолВЯчейке = ТЧ.КоличествоВЯчейке;	
	ТабДок.Вывести(ОблСтрока);
	КонецЦикла;	
ТабДок.Вывести(ОблКонец);
ТабДок.ФиксацияСверху = 3;
Возврат(ТабДок);
КонецФункции

&НаКлиенте
Процедура Печать(Команда)
ТД = ПечатьНаСервере();
ТД.Показать("Отчёт по пустым канбанам на дату");
КонецПроцедуры
            
&НаСервере
Функция ПолучитьСписокАналогов(МПЗ)
СписокАналогов = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст =		
	"ВЫБРАТЬ
  	|	АналогиНормРасходов.Ссылка КАК Ссылка,
  	|	АналогиНормРасходов.Элемент КАК Элемент
  	|ИЗ
  	|	Справочник.АналогиНормРасходов КАК АналогиНормРасходов
  	|ГДЕ
  	|	АналогиНормРасходов.Владелец.Элемент = &Элемент
  	|	И АналогиНормРасходов.ПометкаУдаления = ЛОЖЬ";
Запрос.УстановитьПараметр("Элемент", МПЗ);
РезультатЗапроса = Запрос.Выполнить(); 
ТаблицаАналогов = РезультатЗапроса.Выгрузить();
	Для каждого АналогиНормРасх Из ТаблицаАналогов Цикл
	НормыАНР = ОбщегоНазначенияПовтИсп.АналогиНормРасходов_ПолучитьПоследнее(АналогиНормРасх.Ссылка);
		Если НормыАНР.Норма = 0 Тогда
		Продолжить;
		КонецЕсли;
       		Если СписокАналогов.НайтиПоЗначению(АналогиНормРасх.Элемент) = Неопределено Тогда
			СписокАналогов.Добавить(АналогиНормРасх.Элемент);
			КонецЕсли;
	КонецЦикла;
Возврат(СписокАналогов);
КонецФункции 

&НаСервере
Процедура ЗаменитьНаАналогНаСервере(Стр,Аналог)
ТЧ = ТаблицаПустыхКанбанов.НайтиПоИдентификатору(Стр);
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;	
	НаборЗаписей = РегистрыСведений.ОборотКанбанов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТЧ.ДатаИсчерпания);
	НаборЗаписей.Отбор.Подразделение.Установить(ТЧ.Подразделение);
	НаборЗаписей.Отбор.МестоХранения.Установить(ТЧ.МестоХранения);
	НаборЗаписей.Отбор.МестоХраненияОтправитель.Установить(ТЧ.МестоХраненияОтправитель);
	НаборЗаписей.Отбор.МПЗ.Установить(ТЧ.МПЗ);
	НаборЗаписей.Отбор.НомерЯчейки.Установить(ТЧ.НомерЯчейки);
	НаборЗаписей.Записать();
	РОК = РегистрыСведений.ОборотКанбанов.СоздатьМенеджерЗаписи();
	РОК.Период = ТЧ.ДатаИсчерпания;
	РОК.Оформил = ТЧ.Оформил;
	РОК.Подразделение = ТЧ.Подразделение;
	РОК.МестоХранения = ТЧ.МестоХранения;
	РОК.МестоХраненияОтправитель = ТЧ.МестоХраненияОтправитель;
	РОК.МПЗ = Аналог;
	РОК.НомерЯчейки = ТЧ.НомерЯчейки;
	РОК.Аналог = Истина;
	РОК.ДатаЗамены = ТекущаяДата();
	РОК.ДатаПринятия = ТЧ.ДатаПринятия;
	РОК.Принял = ТЧ.Принял;
	РОК.Записать(); 
	ТЧ.МПЗ = Аналог;
	ЯчейкиКомплектации = ОбщийМодульРаботаСРегистрами.ПолучитьЯчейкуКомплектацииПоМестуХранения(ТЧ.МестоХранения,Аналог);
	ТЧ.КоличествоЯчеек = ЯчейкиКомплектации.КоличествоЯчеек;
	ТЧ.КоличествоВЯчейке = ЯчейкиКомплектации.КоличествоВЯчейке;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ЗаменитьНаАналог(Команда)
СписокАналогов = ПолучитьСписокАналогов(Элементы.ТаблицаПустыхКанбанов.ТекущиеДанные.МПЗ);
ВыбАналог = СписокАналогов.ВыбратьЭлемент("Выберите аналог");
	Если ВыбАналог <> Неопределено Тогда
	ЗаменитьНаАналогНаСервере(Элементы.ТаблицаПустыхКанбанов.ТекущаяСтрока,ВыбАналог.Значение);		
	КонецЕсли;
КонецПроцедуры
