
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Объект.Исполнитель = ПараметрыСеанса.Пользователь;
	Если Объект.Исполнитель.Пустая() Тогда
	Элементы.РабочееМесто.Доступность = Ложь;
	Сообщить("Вы не внесены в справочник Сотрудников! Работа невозможна!");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
   ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
   ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
   Сообщить(ТекстСообщения);
   КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(Объект.РабочееМесто.Линейка) Тогда	
	Возврат(Истина);
	Иначе
	Объект.РабочееМесто = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции 

&НаКлиенте
Процедура РабочееМестоПриИзменении(Элемент)
	Если Не МожноРаботатьВАРМ() Тогда
	Возврат;
	КонецЕсли;
		Если ПолучитьКодРабочегоМеста() = 1 Тогда
		Элементы.ПростойЛинейки.Видимость = Истина;
		Элементы.ПечатьДокументов.Видимость = Ложь;
		Элементы.ПечатьКР.Видимость = Ложь;	
		Иначе
		Элементы.ПростойЛинейки.Видимость = Ложь;
		Элементы.ПечатьДокументов.Видимость = Истина;
		Элементы.ПечатьКР.Видимость = Истина;	
		КонецЕсли;
ОчиститьСсылкуНаПЗ();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(ЭтапСпецификации)
Объект.Спецификация.Сортировать("ТипСправочника Убыв,ВидМПЗ,Позиция,МПЗ");
тДерево = РеквизитФормыВЗначение("ДеревоСпецификации");
тДерево.Строки.Очистить();
ТипСпр = "";
	Для каждого ТЧ Из Объект.Спецификация Цикл
		Если ТЧ.ЭтапСпецификации <> ЭтапСпецификации Тогда
		Продолжить;		
		КонецЕсли; 
			Если ТипСпр <> ТЧ.ТипСправочника Тогда
			Стр = тДерево.Строки.Добавить();
			Стр.ТипСправочника = ТЧ.ТипСправочника;
			ТипСпр = ТЧ.ТипСправочника;
			КонецЕсли; 
	СтрЗнч = Стр.Строки.Добавить();
	СтрЗнч.Позиция = ТЧ.Позиция;
	СтрЗнч.ВидЭлемента = ТЧ.ВидМПЗ;
	СтрЗнч.МПЗ = ТЧ.МПЗ;
	СтрЗнч.Количество = ТЧ.Количество;
	СтрЗнч.ЕдиницаИзмерения = ТЧ.ЕдиницаИзмерения;
	СтрЗнч.Аналог = ТЧ.Аналог;
	СтрЗнч.Примечание = ТЧ.Примечание;
		Если ТЧ.Владелец <> Неопределено Тогда
		СтрЗнч.Владелец = ТЧ.Владелец.Элемент;
		КонецЕсли;		 
	КонецЦикла;
ЗначениеВРеквизитФормы(тДерево, "ДеревоСпецификации");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомплектацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
ЗаполнитьДерево(Элемент.ТекущиеДанные.ЭтапСпецификации);
РазвернутьДерево(Неопределено);
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаданияНаСервере()
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ КАК ПЗ
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних(, ) КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ                                                                                    
	|   ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто = &РабочееМесто
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто); 
	Если Объект.РабочееМесто.ОбработкаЗаданийПоВремениПоступления Тогда
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ЭтапыПроизводственныхЗаданийСрезПоследних.Период
									|ИТОГИ ПО
									|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование";
	Иначе	
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.НомерОчереди,ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.ДатаОтгрузки,ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.Номер
									|ИТОГИ ПО
									|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование";
	КонецЕсли;
Результат = Запрос.Выполнить();
ТехОснастка = Неопределено;
ДатаПринятия = ТекущаяДата();
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	ВыборкаМТК = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМТК.Следующий() Цикл
		ВыборкаДетальныеЗаписи = ВыборкаМТК.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.ПЗ.Изделие.Товар.ТехОснастка.Пустая() Тогда
				Сообщить(СокрЛП(ВыборкаДетальныеЗаписи.ПЗ.Изделие.Товар.Наименование)+" - не привязана тех. оснастка! Обратитесь к мастеру!");
				Прервать; //Переходим к следующей МТК
				КонецЕсли; 
				Если ВыборкаДетальныеЗаписи.ПЗ.Изделие.Товар.ТехОснастка.КоличествоВРаботе < ВыборкаДетальныеЗаписи.ПЗ.Изделие.Товар.ТехОснастка.КоличествоОснасток Тогда
					Если ТехОснастка <> Неопределено Тогда
						Если ВыборкаДетальныеЗаписи.ПЗ.Изделие.Товар.ТехОснастка <> ТехОснастка Тогда
						Прервать; //Переходим к следующей МТК
						КонецЕсли;
					КонецЕсли;	
				Иначе
				Прервать; //Переходим к следующей МТК
				КонецЕсли;
					Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ВыборкаДетальныеЗаписи.ПЗ,Этапы,ЭтапыАРМ,Объект.РабочееМесто,Объект.Исполнитель) Тогда	
					Прервать; //Переходим к следующей МТК			
					КонецЕсли;
						Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПЗ.ДатаЗапуска) Тогда
						Результат = ОбщийМодульВызовСервера.ЗапуститьВПроизводство(ВыборкаДетальныеЗаписи.ПЗ,Объект.РабочееМесто,Этапы,,,,ДатаПринятия);
							Если Результат = 0 Тогда
							Прервать; //Переходим к следующей МТК
							ИначеЕсли Результат = -1 Тогда
							ТаблицаЗаданий.Очистить();
							ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
							Возврат(Ложь);
							КонецЕсли; 
						КонецЕсли;
			ТЧ = ТаблицаЗаданий.Добавить();
			ТЧ.ПЗ = ВыборкаДетальныеЗаписи.ПЗ; 
			ТЧ.БарКод = ВыборкаДетальныеЗаписи.ПЗ.БарКод;
				Если ТехОснастка = Неопределено Тогда
				ТехОснастка = ВыборкаДетальныеЗаписи.ПЗ.Изделие.Товар.ТехОснастка;
				КонецЕсли;
			ДатаПринятия = ДатаПринятия + 1; 
				Если ТаблицаЗаданий.Количество() = ТехОснастка.КоличествоМест Тогда
				ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
                Возврат(Истина);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;    
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	ТаблицаЗаданий.Очистить();
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
Возврат(?(ТаблицаЗаданий.Количество() > 0,Истина,Ложь));
КонецФункции

&НаСервере
Функция ПолучитьЗаданияПоследующиеРМНаСервере(ТО,НомерОснастки)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ КАК ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних(, ) КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|   ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто = &РабочееМесто
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Изделие.Товар.ТехОснастка = &ТехОснастка
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ВозвратнаяТара = &ВозвратнаяТара";
Запрос.УстановитьПараметр("ТехОснастка", ТО);
Запрос.УстановитьПараметр("ВозвратнаяТара", НомерОснастки);
	Если Объект.РабочееМесто.ЗаканчиватьПредыдущийЭтап Тогда
	Запрос.Текст = Запрос.Текст + " И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала <> ДАТАВРЕМЯ(1,1,1,0,0,0)";
	Запрос.УстановитьПараметр("РабочееМесто", ОбщийМодульВызовСервера.ПолучитьПредыдущееРабочееМесто(Объект.РабочееМесто));
	Иначе
	Запрос.Текст = Запрос.Текст + " И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала = ДАТАВРЕМЯ(1,1,1,0,0,0)";	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	КонецЕсли; 
		Если Объект.РабочееМесто.ОбработкаЗаданийПоВремениПоступления Тогда
		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ЭтапыПроизводственныхЗаданийСрезПоследних.Период
										|ИТОГИ ПО
										|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование";
		Иначе	
		Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.НомерОчереди,ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.ДатаОтгрузки,ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.Номер
										|ИТОГИ ПО
										|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование";
		КонецЕсли;
Результат = Запрос.Выполнить();
ДатаПринятия = ТекущаяДата();
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	ВыборкаМТК = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаМТК.Следующий() Цикл
		ВыборкаДетальныеЗаписи = ВыборкаМТК.Выбрать();
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ВыборкаДетальныеЗаписи.ПЗ,Этапы,ЭтапыАРМ,ВыборкаДетальныеЗаписи.РабочееМесто,Объект.Исполнитель) Тогда	
				Прервать; //Переходим к следующей МТК			
				КонецЕсли;
					Если Объект.РабочееМесто.ЗаканчиватьПредыдущийЭтап Тогда
					ПредыдущееРабочееМесто = ВыборкаДетальныеЗаписи.РабочееМесто;
					Парам = Новый Структура("РабочееМесто,ДатаОкончания",ПредыдущееРабочееМесто,ДатаПринятия);
					ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(ВыборкаДетальныеЗаписи.ПЗ,Парам);
						Если СокрЛП(ПредыдущееРабочееМесто.ГруппаРабочихМест.Префикс) = "СТ" Тогда
						НаборЗаписей = РегистрыСведений.СтендовыйПрогон.СоздатьНаборЗаписей();
						НаборЗаписей.Отбор.ПЗ.Установить(ВыборкаДетальныеЗаписи.ПЗ);
						НаборЗаписей.Прочитать();
						    Для Каждого Запись Из НаборЗаписей Цикл
								Если Не ЗначениеЗаполнено(Запись.ДатаСнятия) Тогда
								Запись.ИсполнительСнятие = Объект.Исполнитель;
								Запись.ДатаСнятия = ДатаПринятия;
								Прервать; 
								КонецЕсли;  
						    КонецЦикла;
						НаборЗаписей.Записать();
						КонецЕсли; 
					ПолучитьСпецификациюЭтапов(ПредыдущееРабочееМесто,ВыборкаДетальныеЗаписи.ПЗ);
						Если ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(ВыборкаДетальныеЗаписи.ПЗ,ПредыдущееРабочееМесто,Объект.Спецификация,Этапы,ДатаПринятия) Тогда
						ОбщийМодульРаботаСРегистрами.СоздатьЭтапПроизводственногоЗадания(ВыборкаДетальныеЗаписи.ПЗ,Объект.РабочееМесто,Объект.Исполнитель,ДатаПринятия);
						Иначе                                                                                                    
						ТаблицаЗаданий.Очистить();
						Сообщить("Документ выпуска по производственному заданию "+ВыборкаДетальныеЗаписи.ПЗ.Номер+" не создан!");
						ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
						Возврат(Ложь);
						КонецЕсли;
					КонецЕсли;
			ТЧ = ТаблицаЗаданий.Добавить();
			ТЧ.ПЗ = ВыборкаДетальныеЗаписи.ПЗ; 
			ТЧ.БарКод = ВыборкаДетальныеЗаписи.ПЗ.БарКод;
			ДатаПринятия = ДатаПринятия + 1;
			КонецЦикла;
		КонецЦикла;    
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	ТаблицаЗаданий.Очистить();
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
Возврат(?(ТаблицаЗаданий.Количество() > 0,Истина,Ложь));
КонецФункции

&НаСервере
Функция ПолучитьСпецификациюЭтапов(РабочееМесто,ПЗ)
ТаблицаКомплектации.Очистить();
Объект.Спецификация.Очистить();
Возврат(ОбщийМодульАРМ.ПолучитьСпецификациюЭтапов(ПЗ,РабочееМесто,Этапы,Объект.Спецификация,ТаблицаКомплектации)); 
КонецФункции

&НаСервере
Функция НайтиНезавершённыеПЗ()
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ КАК ПЗ
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних(&НаДату, ) КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто = &РабочееМесто
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Исполнитель = &Исполнитель
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("НаДату",ТекущаяДата());
Запрос.УстановитьПараметр("РабочееМесто",Объект.РабочееМесто);
Запрос.УстановитьПараметр("Исполнитель",Объект.Исполнитель);
Результат = Запрос.Выполнить();
флНайдены = Ложь;
Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(Выборка.ПЗ,Этапы,ЭтапыАРМ,Объект.РабочееМесто,Объект.Исполнитель) Тогда	
		Продолжить;			
		КонецЕсли;
	ТЧ = ТаблицаЗаданий.Добавить();
	ТЧ.ПЗ = Выборка.ПЗ;
	ТЧ.БарКод = Выборка.ПЗ.БарКод;
	НомерВТ = Выборка.ПЗ.ВозвратнаяТара;
	флНайдены = Истина;
	КонецЦикла;
Возврат(флНайдены);
КонецФункции
 
&НаСервере
Функция ПолучитьКодРабочегоМеста()
Возврат(Объект.РабочееМесто.Код);
КонецФункции

&НаСервере
Функция ПолучитьСписокБарКодов()
СписокБарКодов = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.БарКод,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто = &РабочееМесто
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Линейка.Наименование";
	Если Объект.РабочееМесто.ЗаканчиватьПредыдущийЭтап Тогда
	Запрос.УстановитьПараметр("РабочееМесто", ОбщийМодульВызовСервера.ПолучитьПредыдущееРабочееМесто(Объект.РабочееМесто));
	Иначе	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	КонецЕсли;
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокБарКодов.Добавить(ВыборкаДетальныеЗаписи.БарКод, ВыборкаДетальныеЗаписи.БарКод+Символы.Таб+"("+ВыборкаДетальныеЗаписи.ПЗ.Номер+")"+Символы.Таб+ВыборкаДетальныеЗаписи.ПЗ.Линейка);
	КонецЦикла;
СписокБарКодов.СортироватьПоЗначению();
Возврат(СписокБарКодов);
КонецФункции

&НаКлиенте
Процедура ПолучитьЗадания(Команда,ТО = Неопределено,НомерОснастки = "")
	Если ОбщийМодульВызовСервера.ОстановкаЛинейки(Объект.РабочееМесто) Тогда
		Если ПолучитьКодРабочегоМеста() = 1 Тогда
			Если Вопрос("Линейка остановлена! Снять остановку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Если Не ОбщийМодульРаботаСРегистрами.СнятьОстановкуЛинейки(ОбщийМодульВызовСервера.ПолучитьЛинейкуПоРабочемуМесту(Объект.РабочееМесто)) Тогда	
				Возврат;
				КонецЕсли;
			Иначе
			Возврат;			
			КонецЕсли;
		Иначе
		Возврат; 
		КонецЕсли;
	КонецЕсли;
		Если Не НайтиНезавершённыеПЗ() Тогда
			Если ПолучитьКодРабочегоМеста() = 1 Тогда
				Если Не ПолучитьЗаданияНаСервере() Тогда
				Сообщить("Нет производственных заданий!");
				Возврат;
				КонецЕсли;
			Иначе
				Если ТО = Неопределено Тогда
					Если Не ВвестиЗначение(ТО,"Выберите тип оснастки",Тип("СправочникСсылка.ТехОснастка")) Тогда
					Возврат;
					КонецЕсли;
						Если Не ВвестиСтроку(НомерОснастки,"Введите номер оснастки",4) Тогда
						Возврат;						
						КонецЕсли;
				КонецЕсли;
					Если Не ПолучитьЗаданияПоследующиеРМНаСервере(ТО,НомерОснастки) Тогда
					Сообщить("Нет производственных заданий!");
					Возврат;
					КонецЕсли;
			КонецЕсли;
		КонецЕсли;                                                  
НомерВТ = НомерОснастки;
Элементы.Завершить.КнопкаПоУмолчанию = Истина;
Элементы.ПолучитьЗадание.Доступность = Ложь;
Элементы.ПростойЛинейки.Доступность = Ложь;
Элементы.ПечатьДокументов.Доступность = Истина;
Элементы.ПечатьКР.Доступность = Истина;
Элементы.Завершить.Доступность = Истина;
КонецПроцедуры 
         
&НаСервере
Функция ТаблицаЗаданийВыборНаСервере(ПЗ)
	Если ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ПЗ,Этапы,ЭтапыАРМ,Объект.РабочееМесто,Объект.Исполнитель) Тогда
	ПолучитьСпецификациюЭтапов(Объект.РабочееМесто,ПЗ);
	Элементы.ТаблицаКомплектации.ТекущаяСтрока = ТаблицаКомплектации[0].ПолучитьИдентификатор();
	Возврат(Истина);
	КонецЕсли;
Возврат(Ложь);
КонецФункции 

&НаКлиенте
Процедура ТаблицаЗаданийВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка);
	Если ТаблицаЗаданийВыборНаСервере(Элементы.ТаблицаЗаданий.ТекущиеДанные.ПЗ) Тогда
	ТаблицаКомплектацииВыбор(Элементы.ТаблицаКомплектации,Элементы.ТаблицаКомплектации.ТекущаяСтрока,,Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьСсылкуНаПЗ()
ТаблицаЗаданий.Очистить();
Этапы.Очистить();
ЭтапыАРМ.Очистить();
ТаблицаКомплектации.Очистить();
Объект.Спецификация.Очистить();
НомерВТ = "";
тДерево = РеквизитФормыВЗначение("ДеревоСпецификации");
тДерево.Строки.Очистить();
ЗначениеВРеквизитФормы(тДерево,"ДеревоСпецификации");
Элементы.ПолучитьЗадание.КнопкаПоУмолчанию = Истина;
Элементы.ПолучитьЗадание.Доступность = Истина;
Элементы.ПростойЛинейки.Доступность = Истина;
Элементы.ПечатьДокументов.Доступность = Ложь;
Элементы.ПечатьКР.Доступность = Ложь;
Элементы.Завершить.Доступность = Ложь;
КонецПроцедуры  

&НаСервере
Функция ЗавершитьЗаданияНаСервере()
НовоеРабочееМесто = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
флТекущийЭтапПоследний = Ложь;
ТекРМ = ЭтапыАРМ.НайтиПоЗначению(Объект.РабочееМесто);
	Если ТекРМ <> Неопределено Тогда
	НомСтр = ЭтапыАРМ.Индекс(ТекРМ)+1;
		Если НомСтр <> ЭтапыАРМ.Количество() Тогда
			Для к = НомСтр По ЭтапыАРМ.Количество()-1 Цикл
				Если ЭтапыАРМ[к].Значение.Авторизовано Тогда
				НовоеРабочееМесто = ЭтапыАРМ[к].Значение;
				Прервать;
				КонецЕсли; 
			КонецЦикла; 	
		Иначе
		флТекущийЭтапПоследний = Истина;			
		КонецЕсли; 
	Иначе
	Сообщить("В списке этапов рабочих мест этого изделия не найдено текущее рабочее место!");
	Возврат("");		
	КонецЕсли;
		Если НовоеРабочееМесто.Пустая() Тогда
			Если Не флТекущийЭтапПоследний Тогда
			Сообщить("Нет авторизованных рабочих мест!");
			Возврат("");
			КонецЕсли; 
		Иначе
		ПрефиксРМ = ОбщийМодульВызовСервера.ПолучитьПрефиксРабочегоМеста(НовоеРабочееМесто);
		КонецЕсли; 
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;		
	ТО = ТаблицаЗаданий[0].ПЗ.Изделие.Товар.ТехОснастка.ПолучитьОбъект();
		Если Объект.РабочееМесто.Код = 1 Тогда	
		ТО.КоличествоВРаботе = ТО.КоличествоВРаботе + 1;
		ИначеЕсли флТекущийЭтапПоследний Тогда
		ТО.КоличествоВРаботе = ТО.КоличествоВРаботе - 1;
		КонецЕсли;
	ТО.Записать();
		Для каждого ТЧ Из ТаблицаЗаданий Цикл 
			Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ТЧ.ПЗ,Этапы,ЭтапыАРМ,Объект.РабочееМесто,Объект.Исполнитель) Тогда	
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат("");			
			КонецЕсли; 
		ПолучитьСпецификациюЭтапов(Объект.РабочееМесто,ТЧ.ПЗ);
			Если Объект.РабочееМесто.Код = 1 Тогда
			СохранитьБарКод(ТЧ.БарКод,ТЧ.ПЗ);	
			КонецЕсли;
		НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(ТЧ.ПЗ);
		НаборЗаписей.Прочитать();
		    Для Каждого Запись Из НаборЗаписей Цикл 
		    	Если Запись.РабочееМесто = Объект.РабочееМесто Тогда
				Запись.ДатаОкончания = ТекущаяДата();
				Прервать;
				КонецЕсли;  
		    КонецЦикла;
				Если Не флТекущийЭтапПоследний Тогда
				ЭПЗ = НаборЗаписей.Добавить();
				ЭПЗ.Период = ТекущаяДата();
				ЭПЗ.ПЗ = ТЧ.ПЗ; 
				ЭПЗ.Линейка = ТЧ.ПЗ.Линейка;
				ЭПЗ.Изделие = ТЧ.ПЗ.Изделие;
				ЭПЗ.Количество = 1;
				ЭПЗ.БарКод = ТЧ.ПЗ.БарКод;
				ЭПЗ.РабочееМесто = НовоеРабочееМесто;
					Если ПрефиксРМ = "СТ" Тогда
					ЭПЗ.ДатаНачала = ТекущаяДата();	
					ЭПЗ.Исполнитель = НовоеРабочееМесто.Стенд.Исполнитель;	
					СуществующийСП = РегистрыСведений.СтендовыйПрогон.ПолучитьПоследнее(,Новый Структура("ПЗ,Стенд",ТЧ.ПЗ,НовоеРабочееМесто.Стенд));
					СП = РегистрыСведений.СтендовыйПрогон.СоздатьМенеджерЗаписи();
					СП.Период = ТекущаяДата();
					СП.ПЗ = ТЧ.ПЗ;
					СП.Изделие = ТЧ.ПЗ.Изделие;
					СП.БарКод = ТЧ.ПЗ.БарКод;
					СП.Стенд = НовоеРабочееМесто.Стенд;
					СП.Прогон = СуществующийСП.Прогон+1;
					СП.ИсполнительПоступление = НовоеРабочееМесто.Стенд.Исполнитель;
					СП.ДатаПоступления = ТекущаяДата();
					СП.ИсполнительПостановка = НовоеРабочееМесто.Стенд.Исполнитель;
					СП.ДатаПостановки = ТекущаяДата();
					СП.Записать();		
					КонецЕсли;
						Если НовоеРабочееМесто.ГруппаРабочихМест <> Объект.РабочееМесто.ГруппаРабочихМест Тогда
							Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(ТЧ.ПЗ,Объект.РабочееМесто,Объект.Спецификация,Этапы,ТекущаяДата()) Тогда
							Сообщить("Документ выпуска не создан!");
							ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
							Возврат("");
							КонецЕсли; 		
						КонецЕсли;
				МестоПередачи = "на "+СокрЛП(НовоеРабочееМесто.Наименование);					
				Иначе
					Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(ТЧ.ПЗ,Объект.РабочееМесто,Объект.Спецификация,Этапы,ТекущаяДата()) Тогда
					Сообщить("Документ выпуска не создан!"); 
					ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
					Возврат("");
					КонецЕсли;
						Если ТЧ.ПЗ.ДокументОснование.МестоХраненияПотребитель.Пустая() Тогда
						МестоПередачи = "на склад линейки";
						Иначе	
						МестоПередачи = "на склад "+СокрЛП(ТЧ.ПЗ.ДокументОснование.МестоХраненияПотребитель.Наименование);
						КонецЕсли;			
				КонецЕсли;
		НаборЗаписей.Записать();
		КонецЦикла;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(МестоПередачи);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат("");
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПроверитьБарКоды()
	Для каждого ТЧ Из ТаблицаЗаданий Цикл
		Если Не ЗначениеЗаполнено(ТЧ.БарКод) Тогда
		Возврат(Ложь);
		КонецЕсли;
	КонецЦикла;
Возврат(Истина);
КонецФункции

&НаКлиенте
Процедура ЗавершитьЗадания(Команда)
	Если ОбщийМодульВызовСервера.ЛинейкаОстановлена(ОбщийМодульВызовСервера.ПолучитьЛинейкуПоРабочемуМесту(Объект.РабочееМесто)) Тогда
	Возврат;
	КонецЕсли;
		Если Не ПроверитьБарКоды() Тогда
		Сообщить("Введите все бар-коды или удалите строки без бар-кодов!");
		Возврат;
		КонецЕсли;
			//Если ПолучитьКодРабочегоМеста() = 1 Тогда
			//	Если Не ЗначениеЗаполнено(НомерВТ) Тогда
			//		Если Не ВвестиСтроку(НомерВТ,"Введите номер оснастки",4) Тогда
			//		Возврат;						
			//		КонецЕсли;
			//	КонецЕсли;
			//КонецЕсли; 
МестоПередачи = ЗавершитьЗаданияНаСервере();
	Если МестоПередачи <> "" Тогда
		Если Найти(МестоПередачи,"Отложите") > 0 Тогда
		Предупреждение(МестоПередачи,,"ВНИМАНИЕ!");
		Иначе	
		ПоказатьОповещениеПользователя("ВНИМАНИЕ!",,"Передайте изделия "+МестоПередачи,БиблиотекаКартинок.Пользователь);
		КонецЕсли; 
	ОчиститьСсылкуНаПЗ();
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Функция ЭтоПереупаковка(РабочееМесто)
	Если РабочееМесто.Линейка.ВидЛинейки = Перечисления.ВидыЛинеек.Переупаковка Тогда
	Возврат(Истина);
	Иначе	
	Возврат(Ложь);
	КонецЕсли; 
КонецФункции

&НаКлиенте
Процедура РабочееМестоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЭтоПереупаковка(ВыбранноеЗначение) Тогда
	Сообщить("Выберите рабочее место из линейки переупаковки приборов!");
	СтандартнаяОбработка = Ложь;
	Возврат;
	КонецЕсли; 
		Если ТаблицаЗаданий.Количество() > 0 Тогда
			Если Вопрос("Задания не завершены. Вы действительно хотите авторизоваться?",РежимДиалогаВопрос.ДаНет,,,"ВНИМАНИЕ!") = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
			КонецЕсли; 
		КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЭтапов()
СписокЭтапов = Новый СписокЗначений;
	Для каждого ТЧ Из ТаблицаКомплектации Цикл
		Если СписокЭтапов.НайтиПоЗначению(ТЧ.ЭтапСпецификации) = Неопределено Тогда
		СписокЭтапов.Добавить(ТЧ.ЭтапСпецификации);
		КонецЕсли; 
	КонецЦикла;
Возврат(СписокЭтапов);
КонецФункции 

&НаКлиенте
Процедура ПечатьДокументов(Команда)
СписокПЗ = Новый СписокЗначений;

	Для каждого ТЧ Из ТаблицаЗаданий Цикл
	СписокПЗ.Добавить(ТЧ.ПЗ); 
	КонецЦикла;
Результат = ОткрытьФормуМодально("Обработка.РабочееМестоГрупповаяПереупаковка.Форма.ФормаВыбораДатПечати",Новый Структура("ПЗ",Элементы.ТаблицаЗаданий.ТекущиеДанные.ПЗ));
	Если Результат <> Неопределено Тогда
	ОткрытьФорму("Обработка.СозданныеБарКоды.Форма.Форма",Новый Структура("СписокПЗ,РабочееМесто,ДатаВыпуска,ДатаПоверки",СписокПЗ,Объект.РабочееМесто,Результат.ДатаВыпуска,Результат.ДатаПоверки));
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
тЭлементы = ДеревоСпецификации.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
   	Элементы.ДеревоСпецификации.Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
тЭлементы = ДеревоСпецификации.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
   Элементы.ДеревоСпецификации.Свернуть(тСтр.ПолучитьИдентификатор());
   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ) = Тип("СправочникСсылка.Документация") Тогда
	ОбщийМодульКлиент.ОткрытьФайлДокумента(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомплектацииВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
ЗаполнитьДерево(Элемент.ТекущиеДанные.ЭтапСпецификации);
РазвернутьДерево(Неопределено);
КонецПроцедуры
                           
&НаСервере
Функция ПроверитьБарКод(БарКод,Код = "")
	Если СтрДлина(СокрЛП(БарКод)) = 18 Тогда
	КодТовара = Число(Лев(БарКод,6));
	Иначе	
	КодТовара = Число(Лев(БарКод,5));	
	КонецЕсли;
		Если ЗначениеЗаполнено(Код) Тогда
			Если Код <> КодТовара Тогда	
			Сообщить("Код товара в производственном задании не совпадает с кодом товара в отсканированном бар-коде!");
			Возврат(Ложь);
			КонецЕсли;
		КонецЕсли;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БарКоды.ПЗ КАК Документ,
	|	БарКоды.Период КАК Период
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.БарКод = &БарКод";	
Запрос.УстановитьПараметр("БарКод",БарКод);
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
	Если Выборка.Количество() > 0 Тогда
	Выборка.Следующий();
		Если Выборка.Документ <> Неопределено Тогда 
			Если Не Выборка.Документ.Пустая() Тогда
				Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
				Сообщить("Бар-код уже прикреплен к другому производственному заданию!");
				Возврат(Ложь);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЕсли;
Возврат(Истина);
КонецФункции

&НаСервере
Процедура ВнестиБарКод(БарКод)
	Для каждого ТЧ Из ТаблицаЗаданий Цикл
		Если ТЧ.БарКод = БарКод Тогда 
		Сообщить("Бар-код уже отсканирован!");
		Возврат;
		КонецЕсли;	
	КонецЦикла;
		Если СтрДлина(СокрЛП(БарКод)) = 18 Тогда
		КодТовара = Число(Лев(БарКод,6));
		Иначе	
		КодТовара = Число(Лев(БарКод,5));	
		КонецЕсли;
			Для каждого ТЧ Из ТаблицаЗаданий Цикл
				Если Не ЗначениеЗаполнено(ТЧ.БарКод) Тогда
					Если ТЧ.ПЗ.Изделие.Товар.Код = КодТовара Тогда
					ТЧ.БарКод = БарКод;
					Возврат;
					КонецЕсли;
				КонецЕсли;	
			КонецЦикла;	
Сообщить("В таблице заданий не найден соответствующий товар!");	
КонецПроцедуры

&НаСервере
Функция СохранитьБарКод(БарКод,ПЗ)
	Если СтрДлина(СокрЛП(БарКод)) = 18 Тогда
	КодТовара = Число(Лев(БарКод,6));
	Иначе	
	КодТовара = Число(Лев(БарКод,5));	
	КонецЕсли;
		Если ПЗ.Изделие.Товар.Код <> КодТовара Тогда	
		Сообщить("Код товара в производственном задании не совпадает с кодом товара в отсканированном бар-коде!");
		Возврат(Ложь);
		КонецЕсли;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БарКоды.ПЗ КАК Документ,
	|	БарКоды.Период КАК Период
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.БарКод = &БарКод";	
Запрос.УстановитьПараметр("БарКод",БарКод);
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
	Если Выборка.Количество() > 0 Тогда
	Выборка.Следующий();
		Если Выборка.Документ <> Неопределено Тогда 
			Если Не Выборка.Документ.Пустая() Тогда
				Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
				Сообщить("Бар-код уже прикреплен к другому производственному заданию!");
				Возврат(Ложь);
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;			
			Попытка	
			НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
			ПЗОбъект = ПЗ.ПолучитьОбъект();
			ПЗОбъект.ВозвратнаяТара = НомерВТ;
			ПЗОбъект.БарКод = БарКод;
			ПЗОбъект.Записать(РежимЗаписиДокумента.Запись);
			НаборЗаписей = РегистрыСведений.БарКоды.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПЗ.Установить(Выборка.Документ);
			НаборЗаписей.Отбор.Товар.Установить(ПЗ.Изделие.Товар);
			НаборЗаписей.Прочитать();
				Для Каждого Запись Из НаборЗаписей Цикл 
					Если Запись.БарКод = БарКод Тогда	
					НаборЗаписей.Удалить(Запись);
					Прервать;
					КонецЕсли;
				КонецЦикла;		
			НаборЗаписей.Записать(Истина);			
			БК = РегистрыСведений.БарКоды.СоздатьМенеджерЗаписи();
			БК.Период = Выборка.Период;
			БК.ПЗ = ПЗ.Ссылка;
			БК.Изделие = ПЗ.Изделие;
			БК.Товар = ПЗ.Изделие.Товар;
			БК.БарКод = БарКод;
			БК.Записать(Истина);
			НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПЗ.Установить(ПЗ.Ссылка);
			НаборЗаписей.Прочитать();
			    Для Каждого Запись Из НаборЗаписей Цикл 
				Запись.БарКод = БарКод;
			    КонецЦикла;
			НаборЗаписей.Записать();
			ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
			Исключение
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Сообщить(ОписаниеОшибки());
			Возврат(Ложь);
			КонецПопытки;
	Иначе
		Попытка	
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		ПЗОбъект = ПЗ.ПолучитьОбъект();
		ПЗОбъект.ВозвратнаяТара = НомерВТ;
		ПЗОбъект.БарКод = БарКод;
		ПЗОбъект.Записать(РежимЗаписиДокумента.Запись);
		БК = РегистрыСведений.БарКоды.СоздатьМенеджерЗаписи();
		БК.Период = ПЗ.Дата;
		БК.ПЗ = ПЗ.Ссылка;
		БК.Изделие = ПЗ.Изделие;
		БК.Товар = ПЗ.Изделие.Товар;
		БК.БарКод = БарКод;
		БК.Записать();
		НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(ПЗ.Ссылка);
		НаборЗаписей.Прочитать();
		    Для Каждого Запись Из НаборЗаписей Цикл 
			Запись.БарКод = БарКод;
		    КонецЦикла;
		НаборЗаписей.Записать();
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Сообщить(ОписаниеОшибки());
		Возврат(Ложь);
		КонецПопытки;	
	КонецЕсли;
Возврат(Истина);
КонецФункции
            
&НаСервере
Функция ПолучитьКодТовара(ПЗ)
Возврат(ПЗ.Изделие.Товар.Код);
КонецФункции 

&НаКлиенте
Процедура ТаблицаЗаданийБарКодПриИзменении(Элемент)
	Если ПроверитьБарКод(Элементы.ТаблицаЗаданий.ТекущиеДанные.БарКод,ПолучитьКодТовара(Элементы.ТаблицаЗаданий.ТекущиеДанные.ПЗ)) Тогда
	РК = ПроверитьРемонт(Элементы.ТаблицаЗаданий.ТекущиеДанные.БарКод);
		Если РК <> Неопределено Тогда				
			Если Вопрос("Изделие находится в ремонте! Завершить ремонт?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Если ЗавершитьРемонт(РК) Тогда
				Возврат;
				КонецЕсли;
			Иначе
			Элементы.ТаблицаЗаданий.ТекущиеДанные.БарКод = "";
			КонецЕсли;
		КонецЕсли;
	Иначе
	Элементы.ТаблицаЗаданий.ТекущиеДанные.БарКод = "";
	КонецЕсли;	 		
КонецПроцедуры
   
&НаСервере
Функция ПолучитьМестоХранения(Линейка)
Возврат(Линейка.МестоХраненияКанбанов);
КонецФункции 
 
&НаСервере
Функция ПроверитьОснастку(ТО)
Возврат(?(ТаблицаЗаданий[0].ПЗ.Изделие.Товар.ТехОснастка = ТО,Истина,Ложь));
КонецФункции

&НаСервере
Функция ПроверитьРемонт(БарКод)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РемонтнаяКарта.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.РемонтнаяКарта КАК РемонтнаяКарта
	|ГДЕ
	|	РемонтнаяКарта.БарКод = &БарКод
	|	И РемонтнаяКарта.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("БарКод", БарКод);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
Возврат(Неопределено);
КонецФункции    

&НаСервере
Функция ЗавершитьРемонт(РК)
	Попытка
	РК_Объект = РК.ПолучитьОбъект();	
	РК_Объект.ДатаОкончания	= ТекущаяДата();
	ТЧ = РК_Объект.Неисправности.Добавить();
	ТЧ.НеисправныйМПЗ = РК_Объект.Изделие;
	ТЧ.ВидБрака = Справочники.ВидыБрака.НайтиПоНаименованию(СокрЛП(РК_Объект.ПричинаРемонта.Наименование),Истина);
	ТЧ.Количество = 1;
	РК_Объект.Записать(РежимЗаписиДокумента.Проведение); 
	Возврат(Истина);
	Исключение
	Сообщить(ОписаниеОшибки());
	КонецПопытки;
Возврат(Ложь);
КонецФункции 
           
&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если ЭтаФорма.ВводДоступен() Тогда
	Массив = ОбщийМодульВызовСервера.РазложитьСтрокуВМассив(Данные,";");
		Если Массив[0] = "3" Тогда
		ЗначениеПараметра1 = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[1]);
			Если ЗначениеПараметра1 = Неопределено Тогда
			Сообщить("Линейка или место хранения не найдена!");
			Возврат;	
			КонецЕсли; 
		МПЗ = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[3]);
			Если МПЗ = Неопределено Тогда
			Сообщить(Массив[3]+" - МПЗ не найдена!");
			Возврат;	
			КонецЕсли;
				Если ТипЗнч(ЗначениеПараметра1) = Тип("СправочникСсылка.Линейки") Тогда
				МестоХранения = ПолучитьМестоХранения(ЗначениеПараметра1);
				Иначе
				МестоХранения = ЗначениеПараметра1;			
				КонецЕсли;
		МестоХраненияОтправитель = ОбщийМодульВызовСервера.ПолучитьМестоХраненияПоКоду(Массив[2]);
		П = Новый Структура("МестоХраненияОтправитель,МестоХраненияКанбанов,МПЗ,НомерЯчейки,Сотрудник",МестоХраненияОтправитель,МестоХранения,МПЗ,Массив[5],Объект.Исполнитель);
		ОткрытьФорму("ОбщаяФорма.ОформлениеПустыхКанбанов",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли Массив.Количество() > 1 Тогда
		ТО = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[0]);
			Если ПолучитьКодРабочегоМеста() = 1 Тогда
				Если ПроверитьОснастку(ТО) Тогда
				НомерВТ = Массив[1];
				Иначе	
				Сообщить("Оснастка не принадлежит изделиям из полученных заданий!");
				КонецЕсли;
			Иначе
			ПолучитьЗадания(Неопределено,ТО,Массив[1]);
			КонецЕсли;		
		Иначе
        БарКод = Данные; 
 			Если ПроверитьБарКод(БарКод) Тогда
			РК = ПроверитьРемонт(БарКод);
				Если РК <> Неопределено Тогда				
					Если Вопрос("Изделие находится в ремонте! Завершить ремонт?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
						Если Не ЗавершитьРемонт(РК) Тогда
						Возврат;
						КонецЕсли;
					Иначе
					Возврат;
					КонецЕсли;
				КонецЕсли;
			ВнестиБарКод(БарКод);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЭтоКанбанБезРезервирования(МПЗ)
	Если Не МПЗ.Канбан.Пустая() Тогда
	 	Если Не МПЗ.Канбан.РезервироватьВПроизводстве Тогда
		Возврат(Истина);
		КонецЕсли;
	КонецЕсли; 
Возврат(Ложь);
КонецФункции 

&НаКлиенте
Процедура ОформитьПустойКанбан(Команда)
	Если Этаформа.ТекущийЭлемент = Этаформа.Элементы.ДеревоСпецификации Тогда
	МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Иначе
	МПЗ = Элементы.ТаблицаКомплектации.ТекущиеДанные.Комплектация;
	КонецЕсли;
		Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ОбщийМодульВызовСервера.МожноОформитьПустойКанбан(МПЗ) Тогда
			П = Новый Структура("МестоХраненияКанбанов,МПЗ",ОбщийМодульВызовСервера.ПолучитьМестоХраненияПоРабочемуМесту(Объект.РабочееМесто),МПЗ);
			ОткрытьФорму("ОбщаяФорма.ОформлениеПустыхКанбанов",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
			КонецЕсли;
		КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЭтоКанбан(МПЗ)
Возврат(МПЗ.Канбан);
КонецФункции 

&НаКлиенте
Процедура ОформитьНедостачу(Команда)
	Если Этаформа.ТекущийЭлемент = Этаформа.Элементы.ДеревоСпецификации Тогда
	МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Иначе
	МПЗ = Элементы.ТаблицаКомплектации.ТекущиеДанные.Комплектация;
	КонецЕсли;
		Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ЭтоКанбан(МПЗ).Пустая() Тогда	
			Сообщить("Выберите МПЗ ячейки канбана!");
			Возврат;
			КонецЕсли;
		ИначеЕсли ТипЗнч(МПЗ) <> Тип("СправочникСсылка.Материалы")Тогда	
		Сообщить("Выберите МПЗ ячейки канбана!");
		Возврат;
		КонецЕсли; 
П = Новый Структура("ВидОперации,МестоХраненияКанбанов,ПЗ,МПЗ",1,ОбщийМодульВызовСервера.ПолучитьМестоХраненияПоРабочемуМесту(Объект.РабочееМесто),Элементы.ТаблицаЗаданий.ТекущиеДанные.ПЗ,МПЗ);
	Если ОткрытьФормуМодально("ОбщаяФорма.ОформлениеНедостачиИзлишков",П) Тогда
		Если ОбщийМодульВызовСервера.МТКОстановлена(Элементы.ТаблицаЗаданий.ТекущиеДанные.ПЗ) Тогда
		ОчиститьСсылкуНаПЗ();
		ПоказатьОповещениеПользователя("ВНИМАНИЕ!",,"МТК остановлена по причине недостачи комплектации. Отложите изготавливаемый полуфабрикат!",БиблиотекаКартинок.Пользователь);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОформитьИзлишки(Команда)
	Если Этаформа.ТекущийЭлемент = Этаформа.Элементы.ДеревоСпецификации Тогда
	МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Иначе
	МПЗ = Элементы.ТаблицаКомплектации.ТекущиеДанные.Комплектация;
	КонецЕсли;
		Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ЭтоКанбан(МПЗ).Пустая() Тогда	
			Сообщить("Выберите МПЗ ячейки канбана!");
			Возврат;
			КонецЕсли;
		ИначеЕсли ТипЗнч(МПЗ) <> Тип("СправочникСсылка.Материалы")Тогда	
		Сообщить("Выберите МПЗ ячейки канбана!");
		Возврат;
		КонецЕсли; 
П = Новый Структура("ВидОперации,МестоХраненияКанбанов,ПЗ,МПЗ",2,ОбщийМодульВызовСервера.ПолучитьМестоХраненияПоРабочемуМесту(Объект.РабочееМесто),Элементы.ТаблицаЗаданий.ТекущиеДанные.ПЗ,МПЗ);
ОткрытьФорму("ОбщаяФорма.ОформлениеНедостачиИзлишков",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьБрак(Команда)
	Если Этаформа.ТекущийЭлемент = Этаформа.Элементы.ДеревоСпецификации Тогда
	МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Количество = Элементы.ДеревоСпецификации.ТекущиеДанные.Количество;
	Иначе
	МПЗ = Элементы.ТаблицаКомплектации.ТекущиеДанные.Комплектация;
	Количество = Элементы.ТаблицаКомплектации.ТекущиеДанные.Количество;
	КонецЕсли;
		Если ОбщийМодульВызовСервера.МожноПеремещатьВБрак(МПЗ) Тогда
		П = Новый Структура("РабочееМесто,ПЗ,ЭтапСпецификации,МПЗ,Количество",Объект.РабочееМесто,Элементы.ТаблицаЗаданий.ТекущиеДанные.ПЗ,Элементы.ТаблицаКомплектации.ТекущиеДанные.ЭтапСпецификации,МПЗ,Количество);
		ОткрытьФорму("ОбщаяФорма.ОформлениеБракаНовый",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		Иначе
		Сообщить("Выбранную МПЗ запрещено перемещать в брак!");
		КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОстановкаЛинейкиНаСервере(МПЗ)
ОбщийМодульРаботаСРегистрами.ОстановитьЛинейку(Объект.РабочееМесто.Линейка,МПЗ);
КонецФункции

&НаКлиенте
Процедура ОстановкаЛинейки(Команда)
	Если Этаформа.ТекущийЭлемент = Этаформа.Элементы.ДеревоСпецификации Тогда
	МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Иначе
	МПЗ = Элементы.ТаблицаКомплектации.ТекущиеДанные.Комплектация;
	КонецЕсли;
		Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ЭтоКанбанБезРезервирования(МПЗ) Тогда
				Если Вопрос("Вы уверены, что хотите остановить линейку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ОстановкаЛинейкиНаСервере(МПЗ);
				КонецЕсли;
			Иначе
			Сообщить("Выберите МПЗ ячейки канбана без резервирования!");
			КонецЕсли;
		Иначе	
		Сообщить("Выберите МПЗ ячейки канбана без резервирования!");
		КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПростойЛинейки(Команда)
Линейка = ОбщийМодульВызовСервера.ПолучитьЛинейкуПоРабочемуМесту(Объект.РабочееМесто);
	Если Не ОбщийМодульВызовСервера.ЛинейкаОстановлена(Линейка) Тогда
	ОткрытьФормуМодально("ОбщаяФорма.ОформлениеПростояЛинейки",Новый Структура("Линейка",Линейка));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьИзделиеРемонта()
	Для каждого ТЧ_Этап Из Этапы Цикл
	ЭтапАРМ = Объект.РабочееМесто.ТабличнаяЧасть.Найти(ТЧ_Этап.ГруппаНоменклатуры,"ГруппаНоменклатуры");
		Если ЭтапАРМ = Неопределено Тогда
		Продолжить;
		ИначеЕсли ЭтапАРМ.Комплектация Тогда
	    Продолжить;
		КонецЕсли;
			Если ТЧ_Этап.ЭтапСпецификации.Виртуальный Тогда
			Продолжить;
			КонецЕсли;
	Возврат(Новый Структура("Изделие,Количество",ТЧ_Этап.ЭтапСпецификации,ТЧ_Этап.Количество));
	КонецЦикла;
КонецФункции
           
&НаСервере
Функция РемонтНаСервере(ПЗ,БарКод,ПричинаРемонта)
Возврат(ОбщийМодульСозданиеДокументов.СоздатьРемонтнуюКарту(ПЗ,Объект.РабочееМесто,ПолучитьИзделиеРемонта(),Объект.Исполнитель,Перечисления.ВидыРемонта.Сторонний,ПричинаРемонта,,,БарКод));		
КонецФункции

&НаКлиенте
Процедура Ремонт(Команда)
	Если Элементы.ТаблицаЗаданий.ТекущаяСтрока <> Неопределено Тогда
		Если Вопрос("ВНИМАНИЕ! На изделие с выбранным бар-кодом будет оформлен ремонт! Подтверждаете?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Если ЗначениеЗаполнено(Элементы.ТаблицаЗаданий.ТекущиеДанные.БарКод) Тогда
			Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборПричинРемонта",Новый Структура("РабочееМесто",Объект.РабочееМесто));
				Если Результат <> Неопределено Тогда
					Если РемонтНаСервере(Элементы.ТаблицаЗаданий.ТекущиеДанные.ПЗ,Элементы.ТаблицаЗаданий.ТекущиеДанные.БарКод,Результат) Тогда
					Элементы.ТаблицаЗаданий.ТекущиеДанные.БарКод = "";
					КонецЕсли; 
				КонецЕсли;
			Иначе
			Сообщить("По выбранному ПЗ не отсканирован бар-код!"); 		
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры
             
&НаСервере 
Функция ПолучитьФайлыДокументовДляПечати()
Возврат(ОбщийМодульВызовСервера.ПолучитьФайлыДокументовДляПечати(Объект.Спецификация));
КонецФункции

&НаКлиенте
Процедура ПечатьКР(Команда)
ОбщийМодульАРМКлиент.ПечатьДокументовА4(ПолучитьФайлыДокументовДляПечати());
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаданийПередУдалением(Элемент, Отказ)
	Если ЗначениеЗаполнено(Элементы.ТаблицаЗаданий.ТекущиеДанные.БарКод) Тогда
	Сообщить("Запрещено удалять строку с бар-кодом!");
	Отказ = Истина;
	Иначе
	Отказ = Не ОбщийМодульВызовСервера.ОтменаЗапускаПЗ(Элементы.ТаблицаЗаданий.ТекущиеДанные.ПЗ,,Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЗаданийПослеУдаления(Элемент)
	Если ТаблицаЗаданий.Количество() = 0 Тогда
	ОчиститьСсылкуНаПЗ();
	КонецЕсли;
КонецПроцедуры
