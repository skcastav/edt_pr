
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Объект.Исполнитель = ПараметрыСеанса.Пользователь; 
Показать = 0;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если Не Объект.Линейка.Пустая() Тогда
	ЛинейкаПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоПриИзменении(Элемент)
	Если СортироватьПо = 1 Тогда
	ТаблицаЗаданий.Сортировать("ЛОПриборов Убыв,ДатаЛО,ДатаПЗ");
	ИначеЕсли СортироватьПо = 2 Тогда
	ТаблицаЗаданий.Сортировать("Приоритет Убыв,НомерОчереди,ЛОПриборов Убыв,ДатаЛО,ДатаПЗ");		
	Иначе
	ТаблицаЗаданий.Сортировать("Спецификация,ЛОПриборов Убыв,ДатаЛО,ДатаПЗ");			
	КонецЕсли;
		//Если Показать = 0 и СортироватьПо = 1 Тогда
		//Элементы.ПолучитьЗадания.Доступность = Истина;
		//Иначе
		//Элементы.ПолучитьЗадания.Доступность = Ложь; 
		//КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПриИзменении(Элемент)
ПроверитьТаблицуЗаданий();
	//Если Показать = 0 и СортироватьПо = 1 Тогда
	//Элементы.ПолучитьЗадания.Доступность = Истина;
	//Иначе
	//Элементы.ПолучитьЗадания.Доступность = Ложь; 
	//КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьПервоеРабочееМесто()
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РабочиеМестаЛинеек.Ссылка
	|ИЗ
	|	Справочник.РабочиеМестаЛинеек КАК РабочиеМестаЛинеек
	|ГДЕ
	|	РабочиеМестаЛинеек.Линейка = &Линейка
	|	И РабочиеМестаЛинеек.ПометкаУдаления = ЛОЖЬ
	|	И РабочиеМестаЛинеек.ЭтоГруппа = ЛОЖЬ
	|	И РабочиеМестаЛинеек.Код = 1";
Запрос.УстановитьПараметр("Линейка", Объект.Линейка);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Объект.РабочееМесто = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(Объект.Линейка) Тогда	
	Возврат(Истина);
	Иначе
	Объект.Линейка = Справочники.Линейки.ПустаяСсылка();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЛинейкаПриИзменении(Элемент)
	Если Не МожноРаботатьВАРМ() Тогда
	Возврат;
	КонецЕсли;
ПолучитьПервоеРабочееМесто();
ПолучитьДанныеПоЗаданиямНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьЛинейкиСМД(Изделие)
СписокЛинеек = Новый СписокЗначений;

	Для каждого ТЧ Из Изделие.ЛинейкиSMD Цикл
	СписокЛинеек.Добавить(ТЧ.Линейка);
	КонецЦикла; 
Возврат(СписокЛинеек);
КонецФункции

&НаСервере
Функция ПолучитьПлатуИзделия(ЭтапСпецификации,Плата)
НормРасх = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_М(ЭтапСпецификации,ТекущаяДата());
	Пока НормРасх.Следующий() Цикл			
		Если ТипЗнч(НормРасх.Элемент) = Тип("СправочникСсылка.Материалы")Тогда
			Если Найти(НормРасх.Элемент.Родитель.Наименование,"0 - Платы") > 0 Тогда
			Плата = НормРасх.Элемент;
			Возврат(Плата);
			КонецЕсли;		
		Иначе
		ПолучитьПлатуИзделия(НормРасх.Элемент,Плата);
		КонецЕсли;
	КонецЦикла;
Возврат(Плата);
КонецФункции

&НаСервере
Функция ПолучитьКоличествоПлат(ПЗ)
Плата = ПолучитьПлатуИзделия(ПЗ.Изделие,Справочники.Материалы.ПустаяСсылка());
СписокМестХранения = Новый СписокЗначений;

СписокМестХранения.Добавить(ПЗ.Линейка.Подразделение.МестоХраненияПоУмолчанию);
СписокМестХранения.Добавить(ПЗ.Линейка.Подразделение.МестоХраненияДополнительный);
СписокМестХранения.Добавить(ПЗ.Линейка.МестоХраненияКанбанов);
Возврат(ОбщийМодульВызовСервера.ПолучитьСводныйОстатокПоМестамХранения(СписокМестХранения,Плата));
КонецФункции 

&НаСервере
Процедура ПолучитьДанныеПоЗаданиямНаСервере()
ТаблицаЗаданий.Очистить();
Запрос = Новый Запрос;
ЗапросЛО = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПервых.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПервых.Изделие,
	|	ЭтапыПроизводственныхЗаданийСрезПервых.ДатаНачала
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПервых КАК ЭтапыПроизводственныхЗаданийСрезПервых
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПервых.Линейка = &Линейка
	|	И ЭтапыПроизводственныхЗаданийСрезПервых.ПЗ.ДокументОснование.Статус <> 3";
Запрос.УстановитьПараметр("Линейка",Объект.Линейка);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл   
    ТЧ = ТаблицаЗаданий.Добавить();
	ТЧ.Спецификация = ВыборкаДетальныеЗаписи.Изделие;
	ТЧ.Статус = ПолучитьСтатус(ВыборкаДетальныеЗаписи.Изделие);
	ТЧ.СтатусМТК = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.Статус;
	ТЧ.ПЗ = ВыборкаДетальныеЗаписи.ПЗ;
	ТЧ.ДатаПЗ = ВыборкаДетальныеЗаписи.ПЗ.Дата;
	ТЧ.ДатаЗапуска = ВыборкаДетальныеЗаписи.ПЗ.ДатаЗапуска;
	ТЧ.Приоритет = ?(ВыборкаДетальныеЗаписи.ПЗ.НомерОчереди > 0,Истина,Ложь);
	ТЧ.НомерОчереди = ВыборкаДетальныеЗаписи.ПЗ.НомерОчереди;
	ТЧ.МестоХраненияПотребитель = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.МестоХраненияПотребитель;
	ТЧ.Количество = ВыборкаДетальныеЗаписи.ПЗ.Количество;
	ТЧ.ДатаНачала = ВыборкаДетальныеЗаписи.ДатаНачала;
	ТЧ.СписокЛинеек = ПолучитьЛинейкиСМД(ВыборкаДетальныеЗаписи.Изделие);
	ТЧ.КоличествоПлат = ПолучитьКоличествоПлат(ВыборкаДетальныеЗаписи.ПЗ);
	КоличествоВМТК = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.Количество;
		Если (ТЧ.КоличествоПлат/КоличествоВМТК > 0)и(ТЧ.КоличествоПлат/КоличествоВМТК < 1) Тогда
		ТЧ.Подсветка = Истина;
		ИначеЕсли (ТЧ.КоличествоПлат/КоличествоВМТК > 1)и(ТЧ.КоличествоПлат/КоличествоВМТК <= 2) Тогда	
		ТЧ.Подсветка = Истина;
		КонецЕсли; 
	ЗапросЛО.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЛьготнаяОчередь.Период КАК Период
		|ИЗ
		|	РегистрСведений.ЛьготнаяОчередь КАК ЛьготнаяОчередь
		|ГДЕ
		|	ЛьготнаяОчередь.НормаРасходов.Элемент = &МПЗ
		|	И ЛьготнаяОчередь.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Период";
	ЗапросЛО.УстановитьПараметр("МПЗ",ВыборкаДетальныеЗаписи.Изделие);
	РезультатЗапросаЛО = ЗапросЛО.Выполнить();
	ВыборкаЛО = РезультатЗапросаЛО.Выбрать();
		Пока ВыборкаЛО.Следующий() Цикл
		ТЧ.ЛОПриборов = Истина;
		ТЧ.ДатаЛО = ВыборкаЛО.Период;
		КонецЦикла;
	ЗапросЛО.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЛьготнаяОчередь.НормаРасходов.Элемент КАК МПЗ
		|ИЗ
		|	РегистрСведений.ЛьготнаяОчередь КАК ЛьготнаяОчередь
		|ГДЕ
		|	ЛьготнаяОчередь.ПЗ = &ПЗ
		|	И ЛьготнаяОчередь.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	ЗапросЛО.УстановитьПараметр("ПЗ",ВыборкаДетальныеЗаписи.ПЗ);
	РезультатЗапросаЛО = ЗапросЛО.Выполнить();
	ТЧ.ЛОSMD = Не РезультатЗапросаЛО.Пустой();		    
	КонецЦикла;
		Если СортироватьПо = 1 Тогда
		ТаблицаЗаданий.Сортировать("ЛОПриборов Убыв,ДатаЛО,ДатаПЗ");
		ИначеЕсли СортироватьПо = 2 Тогда
		ТаблицаЗаданий.Сортировать("Приоритет Убыв,НомерОчереди,ЛОПриборов Убыв,ДатаЛО,ДатаПЗ");		
		Иначе
		ТаблицаЗаданий.Сортировать("Спецификация,ЛОПриборов Убыв,ДатаЛО,ДатаПЗ");			
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗадания(Команда)
ПолучитьДанныеПоЗаданиямНаСервере();
ПроверитьТаблицуЗаданий();
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСпецификации(Команда)
	Если Элементы.ТаблицаЗаданий.ТекущаяСтрока <> Неопределено Тогда
	ОткрытьФорму("Отчет.ПечатьСпецификации.Форма.ФормаОтчета",Новый Структура("Спецификация,УникальныеНомера",Элементы.ТаблицаЗаданий.ТекущиеДанные.Спецификация,Истина));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПроверитьТаблицуЗаданий()
	Если СортироватьПо = 1 Тогда
	ТаблицаЗаданий.Сортировать("ЛОПриборов Убыв,ДатаЛО,ДатаПЗ");
	ИначеЕсли СортироватьПо = 2 Тогда
	ТаблицаЗаданий.Сортировать("Приоритет Убыв,НомерОчереди,ЛОПриборов Убыв,ДатаЛО,ДатаПЗ");		
	Иначе
	ТаблицаЗаданий.Сортировать("Спецификация,ЛОПриборов Убыв,ДатаЛО,ДатаПЗ");			
	КонецЕсли;	
		Для каждого ТЧ Из ТаблицаЗаданий Цикл
		ТЧ.Показать = Ложь;
			Если Показать = 0 Тогда
			ТЧ.Показать = Истина;
			ИначеЕсли Показать = 1 Тогда
				Если ТЧ.СтатусМТК = 0 Тогда
	            ТЧ.Показать = Истина;
				КонецЕсли; 
			ИначеЕсли Показать = 2 Тогда
				Если ТЧ.СтатусМТК > 0 Тогда
	            ТЧ.Показать = Истина;
				КонецЕсли;
			Иначе
				Если ТЧ.ЛОSMD = Истина Тогда
				ТЧ.Показать = Истина;
				КонецЕсли;
			КонецЕсли;	
		КонецЦикла;
Отбор = Новый Структура("Показать", Истина);
Элементы.ТаблицаЗаданий.ОтборСтрок = Новый ФиксированнаяСтруктура(Отбор);	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаСкладеНаСервере(МПЗ,Количество)
Выборка = ТаблицаСклада.НайтиСтроки(Новый Структура("МПЗ",МПЗ));
	Если Выборка.Количество() > 0 Тогда
		Если Выборка[0].Количество >= Количество Тогда
		Выборка[0].Количество = Выборка[0].Количество - Количество;
		Возврат(Истина);
		КонецЕсли;
	КонецЕсли;
Возврат(Ложь);
КонецФункции

&НаСервере
Процедура РаскрытьНаМПЗиПроверить(Узел,ЭтапСпецификации,КолУзла)
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_М(ЭтапСпецификации,ТекущаяДата());
	Пока ВыборкаНР.Следующий() Цикл
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Номенклатура")Тогда
			Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда
			РаскрытьНаМПЗиПроверить(Узел,ВыборкаНР.Элемент,ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла);
			Продолжить;
			ИначеЕсли Не ВыборкаНР.Элемент.Канбан.Пустая() Тогда
				Если Не ВыборкаНР.Элемент.Канбан.РезервироватьВПроизводстве Тогда		
				Продолжить;
				КонецЕсли;			
			КонецЕсли;
		Выборка = Этапы.НайтиСтроки(Новый Структура("ЭтапСпецификации",ВыборкаНР.Элемент));
        	Если Выборка.Количество() > 0 Тогда
			Продолжить;
			КонецЕсли;
		КонецЕсли;
	ТаблицаМПЗ.Очистить();	
	ТЧ = ТаблицаМПЗ.Добавить();
	ТЧ.МПЗ = ВыборкаНР.Элемент;
	ТЧ.Количество = ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла;
	ТЧ.Приоритет = 1;
	ТаблицаАналогов = ОбщегоНазначенияПовтИсп.ПолучитьАналогиНормРасходов(ВыборкаНР.Ссылка,ТекущаяДата(),Истина);
		Для каждого ТЧ_ТА Из ТаблицаАналогов Цикл
		ТЧ = ТаблицаМПЗ.Добавить();
		ТЧ.МПЗ = ТЧ_ТА.Элемент;
		ТЧ.Количество = ТЧ_ТА.Норма*КолУзла;
		ТЧ.Приоритет = ?(ПолучитьСтатус(ТЧ_ТА.Элемент) = Перечисления.СтатусыМПЗ.ДоИсчерпанияЗапасов,0,ТЧ_ТА.Ссылка.Приоритет + 1); 
		КонецЦикла;
	ТаблицаМПЗ.Сортировать("Приоритет");
	флЗарезервирован = Ложь;
		Для каждого ТЧ Из ТаблицаМПЗ Цикл
			Если ПроверитьНаСкладеНаСервере(ТЧ.МПЗ,ТЧ.Количество) Тогда 
			флЗарезервирован = Истина;
			Прервать;				
			КонецЕсли; 
		КонецЦикла;
			Если Не флЗарезервирован Тогда
			СписокЛО.Добавить(ВыборкаНР.Ссылка);
			КонецЕсли;  		
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПроверитьНаЛОНаСервере(ПЗ,Спецификация,Количество)
СписокЛО.Очистить();
Этапы.Очистить();
ЭтапыАРМ.Очистить();	
РезультатПроверки = ОбщийМодульСозданиеДокументов.ПроверитьЭтапыСпецификации(Объект.Линейка,Спецификация);
	Если РезультатПроверки.Пустая() Тогда
	ОбщийМодульВызовСервера.ПолучитьТаблицуЭтаповСпецификации(Этапы,Спецификация,Количество,Ложь,ТекущаяДата());
		Для каждого ТЧ_Этап Из Этапы Цикл
		РаскрытьНаМПЗиПроверить(ТЧ_Этап.ЭтапСпецификации,ТЧ_Этап.ЭтапСпецификации,ТЧ_Этап.Количество);
		КонецЦикла;
	ОбщийМодульРаботаСРегистрами.ОбработкаЛьготнойОчереди(ПЗ,СписокЛО);
		Если СписокЛО.Количество() > 0 Тогда
		Возврат(Истина);
		КонецЕсли; 
	Иначе
	Сообщить("Не найдено рабочее место для "+РезультатПроверки);
	КонецЕсли;
Возврат(Ложь);
КонецФункции 

&НаСервере
Процедура ПолучитьТаблицуСклада()
ТаблицаСклада.Очистить();
СписокМестХранения = Новый СписокЗначений;
Запрос = Новый Запрос;

СписокМестХранения.Добавить(Объект.Линейка.Подразделение.МестоХраненияПоУмолчанию);
СписокМестХранения.Добавить(Объект.Линейка.Подразделение.МестоХраненияДополнительный);
СписокМестХранения.Добавить(Объект.Линейка.МестоХраненияКанбанов); 
Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияОстатки.МПЗ КАК МПЗ,
	|	МестаХраненияОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.МестаХранения.Остатки(&НаДату, ) КАК МестаХраненияОстатки
	|ГДЕ
	|	МестаХраненияОстатки.МестоХранения В(&СписокМестХранения)
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	МПЗ";
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
РезультатЗапроса = Запрос.Выполнить();
Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
	ТЧ = ТаблицаСклада.Добавить();
	ТЧ.МПЗ = Выборка.МПЗ;
	ТЧ.Количество = Выборка.Количество;	
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура СохранитьТаблицуСклада()
ТаблицаСкладаКопия.Очистить();
	Для каждого ТЧ_МПЗ Из ТаблицаСклада Цикл
	ТЧ = ТаблицаСкладаКопия.Добавить();
	ТЧ.МПЗ = ТЧ_МПЗ.МПЗ;
	ТЧ.Количество = ТЧ_МПЗ.Количество;
	КонецЦикла; 
КонецПроцедуры 

&НаСервере
Процедура ВосстановитьТаблицуСклада()
ТаблицаСклада.Очистить();
	Для каждого ТЧ_МПЗ Из ТаблицаСкладаКопия Цикл
	ТЧ = ТаблицаСклада.Добавить();
	ТЧ.МПЗ = ТЧ_МПЗ.МПЗ;
	ТЧ.Количество = ТЧ_МПЗ.Количество;
	КонецЦикла; 
КонецПроцедуры 

&НаСервере
Функция УстановитьНомерОчередиПЗ(ПЗ,НО)
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	МТКОбъект = ПЗ.ДокументОснование.ПолучитьОбъект();
	МТКОбъект.НомерОчереди = НО;
	МТКОбъект.Записать();
	ПЗОбъект = ПЗ.ПолучитьОбъект();
	ПЗОбъект.НомерОчереди = НО;
	ПЗОбъект.Записать();
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции

&НаКлиенте
Процедура ИзменитьНомерОчереди(Команда)
	Если Элементы.ТаблицаЗаданий.ТекущаяСтрока <> Неопределено Тогда
	НО = Элементы.ТаблицаЗаданий.ТекущиеДанные.НомерОчереди;
		Если ВвестиЧисло(НО,"Введите номер очереди",6,0) Тогда
			Если УстановитьНомерОчередиПЗ(Элементы.ТаблицаЗаданий.ТекущиеДанные.ПЗ,НО) Тогда
			Элементы.ТаблицаЗаданий.ТекущиеДанные.НомерОчереди = НО;
			Элементы.ТаблицаЗаданий.ТекущиеДанные.Приоритет = ?(НО > 0,Истина,Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПервоеРабочееМестоПоЛинейке(Линейка)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РабочиеМестаЛинеек.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.РабочиеМестаЛинеек КАК РабочиеМестаЛинеек
	|ГДЕ
	|	РабочиеМестаЛинеек.Линейка = &Линейка
	|	И РабочиеМестаЛинеек.Код = 1
	|	И РабочиеМестаЛинеек.ЭтоГруппа = ЛОЖЬ";
Запрос.УстановитьПараметр("Линейка", Линейка);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
Возврат(Справочники.РабочиеМестаЛинеек.ПустаяСсылка());
КонецФункции 

&НаСервере
Процедура ИзменитьЛинейкуНаСервере(Стр,Линейка)
	Если Линейка = Объект.Линейка Тогда
	Сообщить("Новая линейка совпадает с текущей!");
	Возврат;
	КонецЕсли; 
ТЧ = ТаблицаЗаданий.НайтиПоИдентификатору(Стр);
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		Если ОбщийМодульВызовСервера.ОтменаЗапускаМТК(ТЧ.ПЗ.ДокументОснование) Тогда
		МТКОбъект = ТЧ.ПЗ.ДокументОснование.ПолучитьОбъект();
		МТКОбъект.Линейка = Линейка;
		МТКОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ПЗОбъект = ТЧ.ПЗ.ПолучитьОбъект();
		ПЗОбъект.Линейка = Линейка;
		ПЗОбъект.Записать(РежимЗаписиДокумента.Запись);
		НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(ТЧ.ПЗ);
		НаборЗаписей.Прочитать();
		    Для Каждого Запись Из НаборЗаписей Цикл
			Запись.Линейка = Линейка; 
		    Запись.РабочееМесто = ПолучитьПервоеРабочееМестоПоЛинейке(Линейка); 
		    КонецЦикла;
		НаборЗаписей.Записать();
		Иначе
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат;
		КонецЕсли;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	ТаблицаЗаданий.Удалить(ТЧ);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЛинейку(Команда)
	Если Элементы.ТаблицаЗаданий.ТекущаяСтрока <> Неопределено Тогда
	Результат = Вопрос("Все подчиненные документы будут удалены! 
					   |Производственные задания перейдут на начальный этап производства!
			           |Вы уверены, что хотите отменить запуск МТК и изменить линейку?",РежимДиалогаВопрос.ДаНет,,,"Удаление");
		Если Результат = КодВозвратаДиалога.Да Тогда	
		Линейка = Объект.Линейка;
			Если ВвестиЗначение(Линейка,"Выберите новую линейку",Тип("СправочникСсылка.Линейки")) Тогда
			ИзменитьЛинейкуНаСервере(Элементы.ТаблицаЗаданий.ТекущаяСтрока,Линейка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчётПоИзмененияВСпецификации(Команда)
	Если Элементы.ТаблицаЗаданий.ТекущаяСтрока <> Неопределено Тогда
	ОткрытьФорму("Отчет.ОтчётПоИзменениямВСпецификации.Форма.ФормаОтчета",Новый Структура("Спецификация",Элементы.ТаблицаЗаданий.ТекущиеДанные.Спецификация));
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПолучитьПодразделениеSMD()
Возврат(Справочники.Подразделения.НайтиПоНаименованию("Богородицк линия SMD",Истина));
КонецФункции 

&НаКлиенте
Процедура ЛинейкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
Подразделение = ПолучитьПодразделениеSMD();
Ф = ПолучитьФорму("Справочник.Линейки.Форма.ФормаВыбора");
Ф.Элементы.Список.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы;
ЭлементОтбора = Ф.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
ЭлементОтбора.Использование = Истина;
ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
ЭлементОтбора.ПравоеЗначение = Подразделение;

ЭлементОформления = Ф.Список.УсловноеОформление.Элементы.Добавить();
ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

УслОформ = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
УслОформ.Использование = Истина;
УслОформ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
УслОформ.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
УслОформ.ПравоеЗначение = Подразделение;
Результат = Ф.ОткрытьМодально();
	Если Результат <> Неопределено Тогда
	ЭтаФорма.Модифицированность = Истина;
	Объект.Линейка = Результат;
	КонецЕсли; 
КонецПроцедуры
