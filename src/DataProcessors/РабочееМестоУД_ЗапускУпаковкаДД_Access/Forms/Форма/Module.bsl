
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Объект.Исполнитель = ПараметрыСеанса.Пользователь;
	Если Объект.Исполнитель.Пустая() Тогда
	Элементы.РабочееМесто.Доступность = Ложь;
	Сообщить("Вы не внесены в справочник Сотрудников! Работа невозможна!");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
      ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   КонецЕсли;	
	Если СписокРабочихМест.Количество() > 0 Тогда
	СписокРабочихМестПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(ЭтапСпецификации)
Объект.Спецификация.Сортировать("ТипСправочника Убыв,ВидМПЗ,Позиция,МПЗ");
тДерево = РеквизитФормыВЗначение("ДеревоСпецификации");
тДерево.Строки.Очистить();
ТипСпр = "";
	Для каждого ТЧ Из Объект.Спецификация Цикл
		Если ТЧ.ЭтапСпецификации <> ЭтапСпецификации Тогда
		Продолжить;		
		КонецЕсли; 
			Если ТипСпр <> ТЧ.ТипСправочника Тогда
			Стр = тДерево.Строки.Добавить();
			Стр.ТипСправочника = ТЧ.ТипСправочника;
			ТипСпр = ТЧ.ТипСправочника;
			КонецЕсли; 
	СтрЗнч = Стр.Строки.Добавить();
	СтрЗнч.Позиция = ТЧ.Позиция;
	СтрЗнч.ВидЭлемента = ТЧ.ВидМПЗ;
	СтрЗнч.МПЗ = ТЧ.МПЗ;
	СтрЗнч.Количество = ТЧ.Количество;
	СтрЗнч.ЕдиницаИзмерения = ТЧ.ЕдиницаИзмерения;
	СтрЗнч.Аналог = ТЧ.Аналог;
	СтрЗнч.Примечание = ТЧ.Примечание;
		Если ТЧ.Владелец <> Неопределено Тогда
		СтрЗнч.Владелец = ТЧ.Владелец.Элемент;
		КонецЕсли; 		 
	КонецЦикла;
ЗначениеВРеквизитФормы(тДерево, "ДеревоСпецификации");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомплектацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
ЗаполнитьДерево(Элемент.ТекущиеДанные.ЭтапСпецификации);
РазвернутьДерево(Неопределено);
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаданиеНаСервере()
НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
КолПЗ = 0;

СписокИзделийЛО = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование КАК МТК
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто В(&РабочиеМеста)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2";
	Если СписокРабочихМест[0].Значение.ОбработкаЗаданийПоВремениПоступления Тогда
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ЭтапыПроизводственныхЗаданийСрезПоследних.Период
									|ИТОГИ ПО МТК";
	Иначе                           
	Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.НомерОчереди,
									|ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.ДатаОтгрузки,
									|ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.Номер
									|ИТОГИ ПО МТК";
	КонецЕсли; 
Запрос.УстановитьПараметр("РабочиеМеста",СписокРабочихМест); 
Результат = Запрос.Выполнить();

ВыборкаМТК = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМТК.Следующий() Цикл
		Если ОбщийМодульВызовСервера.ЛинейкаОстановлена(ВыборкаМТК.МТК.Линейка) Тогда
		Продолжить;
		КонецЕсли;
	ВыборкаДетальныеЗаписи = ВыборкаМТК.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КолПЗ = КолПЗ + 1;
			Если СписокИзделийЛО.НайтиПоЗначению(ВыборкаДетальныеЗаписи.ПЗ.Изделие) <> Неопределено Тогда
			Прервать; //Переходим к следующей МТК
			КонецЕсли;
				Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ВыборкаДетальныеЗаписи.ПЗ,Этапы,ЭтапыАРМ,ВыборкаДетальныеЗаписи.РабочееМесто,Объект.Исполнитель) Тогда	
				Прервать; //Переходим к следующей МТК			
				КонецЕсли;
					Если ЭтапыАРМ[0].Значение = ВыборкаДетальныеЗаписи.РабочееМесто Тогда
						Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПЗ.ДатаЗапуска) Тогда
						Результат = ОбщийМодульВызовСервера.ЗапуститьВПроизводство(ВыборкаДетальныеЗаписи.ПЗ,ВыборкаДетальныеЗаписи.РабочееМесто,Этапы);
							Если Результат = 0 Тогда
							СписокИзделийЛО.Добавить(ВыборкаДетальныеЗаписи.ПЗ.Изделие);
							Прервать; //Переходим к следующей МТК
							ИначеЕсли Результат = -1 Тогда
							Возврат(-1);
							КонецЕсли; 					
						КонецЕсли;
					КонецЕсли;
						Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаНачала) Тогда	
						Парам = Новый Структура("РабочееМесто,Исполнитель,ДатаНачала",ВыборкаДетальныеЗаписи.РабочееМесто,Объект.Исполнитель,ТекущаяДата());
						ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(ВыборкаДетальныеЗаписи.ПЗ,Парам);						
						КонецЕсли; 
		Объект.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
		Объект.РабочееМесто = ВыборкаДетальныеЗаписи.РабочееМесто;
		НомерВТ = ВыборкаДетальныеЗаписи.ПЗ.ВозвратнаяТара;
			Если Не ПолучитьСпецификациюЭтапов(Объект.РабочееМесто) Тогда
			Прервать; //Переходим к следующей МТК
			КонецЕсли;
		ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,ВыборкаДетальныеЗаписи.РабочееМесто,Объект.ПроизводственноеЗадание.Изделие,КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
		Возврат(1);
		КонецЦикла;
	КонецЦикла;
ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,Объект.РабочееМесто,Справочники.Номенклатура.ПустаяСсылка(),КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
Возврат(0);
КонецФункции

&НаСервере
Функция ПолучитьПричинуРемонтаПоКодуОшибки(КодОшибки)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПричиныРемонта.Ссылка
	|ИЗ
	|	Справочник.ПричиныРемонта КАК ПричиныРемонта
	|ГДЕ
	|	ПричиныРемонта.КодОшибки = &КодОшибки";
Запрос.УстановитьПараметр("КодОшибки", КодОшибки);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
Возврат(Справочники.ПричиныРемонта.ПустаяСсылка());
КонецФункции

&НаСервере
Функция СоздатьРемонтнуюКарту(БарКод,КодОшибки,РабочееМесто)
ПЗ = НайтиПЗ(БарКод);
	Если ПЗ = Неопределено Тогда
	Сообщить(БарКод+" - производственное задание не найдено по бар-коду!");
	Возврат(Ложь);
	КонецЕсли;
		Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ПЗ,Этапы1,ЭтапыАРМ1,РабочееМесто,Объект.Исполнитель) Тогда
		Сообщить("МТК остановлена! Ошибка записана в МТК!");
		Возврат(Ложь);
		КонецЕсли;
			Попытка
			НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1; 	
			Парам = Новый Структура("РабочееМесто,Ремонт",РабочееМесто,Истина);
			ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(ПЗ,Парам);
			НаборЗаписей = РегистрыСведений.СтендовыйПрогон.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПЗ.Установить(ПЗ);
			НаборЗаписей.Отбор.Изделие.Установить(ПЗ.Изделие);
			НаборЗаписей.Прочитать();
			    Для Каждого Запись Из НаборЗаписей Цикл
					Если Не ЗначениеЗаполнено(Запись.ДатаСнятия) Тогда
					Запись.ИсполнительСнятие = Объект.Исполнитель;
					Запись.ДатаСнятия = ТекущаяДата();
					Прервать; 
					КонецЕсли;  
			    КонецЦикла;
			НаборЗаписей.Записать();
			РемонтнаяКарта = Документы.РемонтнаяКарта.СоздатьДокумент();
			РемонтнаяКарта.Номер = ПЗ.Номер+"-"+ПолучитьНомерРемонтнойКарты(ПЗ);
			РемонтнаяКарта.Дата = ТекущаяДата();
			РемонтнаяКарта.ДокументОснование = ПЗ;
			РемонтнаяКарта.Товар = ПЗ.Изделие.Товар;
			РемонтнаяКарта.БарКод = БарКод;
			РемонтнаяКарта.ВидРемонта = Перечисления.ВидыРемонта.Общий;
			РемонтнаяКарта.ВозвратнаяТара = ПЗ.ВозвратнаяТара;
			РемонтнаяКарта.Линейка = ПЗ.Линейка;
			РемонтнаяКарта.Подразделение = ПЗ.Подразделение;
		 	РемонтнаяКарта.РабочееМесто = РабочееМесто;
			РемонтнаяКарта.ПричинаРемонта = ПолучитьПричинуРемонтаПоКодуОшибки(КодОшибки);
			РемонтнаяКарта.Комментарий = "Код ошибки из базы Access";
				Для каждого ТЧ_Этап Из Этапы1 Цикл
				ЭтапАРМ = РабочееМесто.ТабличнаяЧасть.Найти(ТЧ_Этап.ГруппаНоменклатуры,"ГруппаНоменклатуры");
					Если ЭтапАРМ = Неопределено Тогда
					Продолжить;
					ИначеЕсли ЭтапАРМ.Комплектация Тогда
				    Продолжить;
					КонецЕсли;
						Если ТЧ_Этап.ЭтапСпецификации.Виртуальный Тогда
						Продолжить;
						КонецЕсли;
				РемонтнаяКарта.Изделие = ТЧ_Этап.ЭтапСпецификации;
			    РемонтнаяКарта.Количество = ТЧ_Этап.Количество;
				Прервать;
				КонецЦикла;
			РемонтнаяКарта.Записать(РежимЗаписиДокумента.Запись);						
			ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
			Исключение
			Сообщить(ОписаниеОшибки());
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);	
			Возврат(Ложь);
			КонецПопытки;
Возврат(Истина);
КонецФункции 

&НаСервере
Функция ОбработатьВыходнойБуферAccess(ПЗ,РабочееМесто)
conn_str = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + БазаДанных.ПутьКБазеДанных + ";Persist Security Info=True";
cn = Новый COMОбъект("ADODB.Connection");
cn.Open(conn_str);
	Если cn.State <> 1 тогда
    Сообщить("Не удалось открыть ADODB.Connection");
    Возврат(-1);
	КонецЕсли;
rs = Новый COMОбъект("ADODB.Recordset");
rs.CursorLocation = 3;
strSQL = "select * from Выходной_буфер";
rs.Open(strSQL, cn, 2, 2);
Результат = -1; 
	Попытка
		Пока Не rs.EOF Цикл
		КодОшибки = Число(rs.Fields(2).Value);
			Если СокрЛП(rs.Fields(1).Value) = ПЗ.БарКод Тогда
				Если КодОшибки = 0 Тогда
				rs.Delete();
				Результат = 0;
				Иначе	
				Результат = КодОшибки;
				КонецЕсли; 
			Иначе	
				Если КодОшибки <> 0 Тогда
					Если СоздатьРемонтнуюКарту(СокрЛП(rs.Fields(1).Value),КодОшибки,РабочееМесто) Тогда
					rs.Delete();
					КонецЕсли;
				КонецЕсли;			
			КонецЕсли;
		rs.MoveNext();
		КонецЦикла; 
	Исключение
	Сообщить(ОписаниеОшибки());
	КонецПопытки;      
		Если rs.state = 1 тогда
		rs.Close();
		КонецЕсли;
			Если cn.state = 1 тогда
		    cn.Close();
			КонецЕсли;
Возврат(Результат);
КонецФункции

&НаСервере
Функция ПолучитьЗаданиеНаПромежуточномЭтапеНаСервере(БарКод = Неопределено)
НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
КолПЗ = 0;
Запрос = Новый Запрос;

	Если СписокРабочихМест[0].Значение.ЗаканчиватьПредыдущийЭтап Тогда
	СписокРабочихМестПредыдущегоЭтапа = ПолучитьСписокРабочихМест();
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто,
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала
		|ИЗ
		|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
		|ГДЕ
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто В(&РабочиеМеста)
		|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
		|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ";
		Если БарКод <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭтапыПроизводственныхЗаданийСрезПоследних.БарКод = &БарКод";
		Запрос.УстановитьПараметр("БарКод", БарКод);
		КонецЕсли;
			Если СписокРабочихМестПредыдущегоЭтапа[0].Значение.ОбработкаЗаданийПоВремениПоступления Тогда
			Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ЭтапыПроизводственныхЗаданийСрезПоследних.Период";
			Иначе	
			Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.НомерОчереди,ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.ДатаОтгрузки,ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.Номер";
			КонецЕсли;
	Запрос.УстановитьПараметр("РабочиеМеста", СписокРабочихМестПредыдущегоЭтапа);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			КолПЗ = КолПЗ + 1;
				Если ОбщийМодульВызовСервера.ЛинейкаОстановлена(ВыборкаДетальныеЗаписи.РабочееМесто.Линейка) Тогда
				Продолжить;
				КонецЕсли;
					Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ВыборкаДетальныеЗаписи.ПЗ,Этапы,ЭтапыАРМ,ВыборкаДетальныеЗаписи.РабочееМесто,Объект.Исполнитель) Тогда	
					Продолжить;		
					КонецЕсли;
			Объект.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
			ПредыдущееРабочееМесто = ВыборкаДетальныеЗаписи.РабочееМесто;
			НомерВТ = ВыборкаДетальныеЗаписи.ПЗ.ВозвратнаяТара;
			ДатаПринятия = ТекущаяДата();
				Попытка
				НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
					Если СокрЛП(ПредыдущееРабочееМесто.ГруппаРабочихМест.Префикс) = "СТ" Тогда
						Если Не БазаДанных.Пустая() Тогда
						Результат = ОбработатьВыходнойБуферAccess(ВыборкаДетальныеЗаписи.ПЗ,ВыборкаДетальныеЗаписи.РабочееМесто);
							Если Результат <> 0 Тогда
							Сообщить("Датчик забракован!");
							ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
							ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,ПредыдущееРабочееМесто,Объект.ПроизводственноеЗадание.Изделие,КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
							ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
							Возврат(0);						
							КонецЕсли; 							
						КонецЕсли;
					НаборЗаписей = РегистрыСведений.СтендовыйПрогон.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ПЗ.Установить(Объект.ПроизводственноеЗадание);
					НаборЗаписей.Прочитать();
					    Для Каждого Запись Из НаборЗаписей Цикл
							Если Не ЗначениеЗаполнено(Запись.ДатаСнятия) Тогда
							Запись.ИсполнительСнятие = Объект.Исполнитель;
							Запись.ДатаСнятия = ДатаПринятия;
							Прервать; 
							КонецЕсли;  
					    КонецЦикла;
					НаборЗаписей.Записать();
					КонецЕсли;
				Парам = Новый Структура("РабочееМесто,ДатаОкончания",ПредыдущееРабочееМесто,ДатаПринятия);
				ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(Объект.ПроизводственноеЗадание,Парам); 
				ПолучитьСпецификациюЭтапов(ПредыдущееРабочееМесто);
					Если ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(Объект.ПроизводственноеЗадание,ПредыдущееРабочееМесто,Объект.Спецификация,Этапы,ДатаПринятия) Тогда	
					Объект.РабочееМесто = ОбщийМодульВызовСервера.ПолучитьСледующееРабочееМесто(ВыборкаДетальныеЗаписи.РабочееМесто);
					ОбщийМодульРаботаСРегистрами.СоздатьЭтапПроизводственногоЗадания(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,Объект.Исполнитель,ДатаПринятия);
					ПолучитьСпецификациюЭтапов(Объект.РабочееМесто);
					ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
					ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,Объект.РабочееМесто,Объект.ПроизводственноеЗадание.Изделие,КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
					ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
					Возврат(1);
					Иначе
					Сообщить("Документ выпуска по производственному заданию "+Объект.ПроизводственноеЗадание.Номер+" не создан!");
					ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
					КонецЕсли;
				Исключение
				Сообщить(ОписаниеОшибки());
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				КонецПопытки;				
			КонецЦикла;			
		КонецЕсли;
	Иначе
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто,
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала
		|ИЗ
		|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
		|ГДЕ
		|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто В(&РабочиеМеста)
		|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
		|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ";
		Если БарКод <> Неопределено Тогда
		Запрос.Текст = Запрос.Текст + " И ЭтапыПроизводственныхЗаданийСрезПоследних.БарКод = &БарКод";
		Запрос.УстановитьПараметр("БарКод", БарКод);
		КонецЕсли;
			Если СписокРабочихМест[0].Значение.ОбработкаЗаданийПоВремениПоступления Тогда
			Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ЭтапыПроизводственныхЗаданийСрезПоследних.Период";
			Иначе	
			Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.НомерОчереди,ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.ДатаОтгрузки,ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.Номер";
			КонецЕсли;
	Запрос.УстановитьПараметр("РабочиеМеста", СписокРабочихМест);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ОбщийМодульВызовСервера.ЛинейкаОстановлена(ВыборкаДетальныеЗаписи.РабочееМесто.Линейка) Тогда
				Продолжить;
				КонецЕсли;
					Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ВыборкаДетальныеЗаписи.ПЗ,Этапы,ЭтапыАРМ,ВыборкаДетальныеЗаписи.РабочееМесто,Объект.Исполнитель) Тогда	
					Продолжить;		
					КонецЕсли;
			Объект.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
			Объект.РабочееМесто = ВыборкаДетальныеЗаписи.РабочееМесто;
			НомерВТ = ВыборкаДетальныеЗаписи.ПЗ.ВозвратнаяТара;
				Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаНачала) Тогда	
				Парам = Новый Структура("РабочееМесто,Исполнитель,ДатаНачала",Объект.РабочееМесто,Объект.Исполнитель,ТекущаяДата());
				ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(Объект.ПроизводственноеЗадание,Парам);						
				КонецЕсли; 	
			ПолучитьСпецификациюЭтапов(Объект.РабочееМесто);
			ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,Объект.РабочееМесто,Объект.ПроизводственноеЗадание.Изделие,КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
			Возврат(1);				
			КонецЦикла;			
		КонецЕсли;
	КонецЕсли;
ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,Объект.РабочееМесто,Справочники.Номенклатура.ПустаяСсылка(),КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
Возврат(0); 	
КонецФункции

&НаСервере
Функция ПолучитьЗаданиеПоВозвратнойТаре(ВозвратнаяТара)
НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
КолПЗ = 0;
Запрос = Новый Запрос;

Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто В(&СписокРабочихМест)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ВозвратнаяТара = &ВозвратнаяТара
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.НомерОчереди,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.ДатаОтгрузки,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.Номер";
Запрос.УстановитьПараметр("ВозвратнаяТара", ВозвратнаяТара);
	Если СписокРабочихМест[0].Значение.ЗаканчиватьПредыдущийЭтап Тогда
	Запрос.УстановитьПараметр("СписокРабочихМест", ПолучитьСписокРабочихМест());
	Иначе
	Запрос.УстановитьПараметр("СписокРабочихМест", СписокРабочихМест);
	КонецЕсли;
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КолПЗ = КолПЗ + 1;
			Если ОбщийМодульВызовСервера.ЛинейкаОстановлена(ВыборкаДетальныеЗаписи.РабочееМесто.Линейка) Тогда
			Продолжить;
			КонецЕсли;
				Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ВыборкаДетальныеЗаписи.ПЗ,Этапы,ЭтапыАРМ,ВыборкаДетальныеЗаписи.РабочееМесто,Объект.Исполнитель) Тогда	
				Продолжить;		
				КонецЕсли;
		Объект.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
		Объект.РабочееМесто = ВыборкаДетальныеЗаписи.РабочееМесто;
		НомерВТ = ВыборкаДетальныеЗаписи.ПЗ.ВозвратнаяТара; 
		ДатаПринятия = ТекущаяДата();
			Попытка
			НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
				Если СписокРабочихМест[0].Значение.ЗаканчиватьПредыдущийЭтап Тогда
				ПредыдущееРабочееМесто = ВыборкаДетальныеЗаписи.РабочееМесто;
					Если СокрЛП(ПредыдущееРабочееМесто.ГруппаРабочихМест.Префикс) = "СТ" Тогда
						Если Не БазаДанных.Пустая() Тогда
						Результат = ОбработатьВыходнойБуферAccess(ВыборкаДетальныеЗаписи.ПЗ,ВыборкаДетальныеЗаписи.РабочееМесто);
							Если Результат <> 0 Тогда
							Сообщить("Датчик забракован!");
							ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
							ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,ПредыдущееРабочееМесто,Справочники.Номенклатура.ПустаяСсылка(),КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
							ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
							Возврат(0);						
							КонецЕсли; 							
						КонецЕсли;
					НаборЗаписей = РегистрыСведений.СтендовыйПрогон.СоздатьНаборЗаписей();
					НаборЗаписей.Отбор.ПЗ.Установить(Объект.ПроизводственноеЗадание);
					НаборЗаписей.Прочитать();
					    Для Каждого Запись Из НаборЗаписей Цикл
							Если Не ЗначениеЗаполнено(Запись.ДатаСнятия) Тогда
							Запись.ИсполнительСнятие = Объект.Исполнитель;
							Запись.ДатаСнятия = ДатаПринятия;
							Прервать; 
							КонецЕсли;  
					    КонецЦикла;
					НаборЗаписей.Записать();
					КонецЕсли;
				Парам = Новый Структура("РабочееМесто,ДатаОкончания",ПредыдущееРабочееМесто,ДатаПринятия);
				ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(Объект.ПроизводственноеЗадание,Парам);
				ПолучитьСпецификациюЭтапов(ПредыдущееРабочееМесто);
					Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(Объект.ПроизводственноеЗадание,ПредыдущееРабочееМесто,Объект.Спецификация,Этапы,ДатаПринятия) Тогда	
					Сообщить("Документ выпуска по производственному заданию "+Объект.ПроизводственноеЗадание.Номер+" не создан!");
					ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
					КонецЕсли;
				Объект.РабочееМесто = ОбщийМодульВызовСервера.ПолучитьСледующееРабочееМесто(ВыборкаДетальныеЗаписи.РабочееМесто);
				ОбщийМодульРаботаСРегистрами.СоздатьЭтапПроизводственногоЗадания(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,Объект.Исполнитель,ДатаПринятия);
				Иначе
				Парам = Новый Структура("РабочееМесто,Исполнитель,ДатаНачала",Объект.РабочееМесто,Объект.Исполнитель,ДатаПринятия);
				ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(Объект.ПроизводственноеЗадание,Парам);					
				КонецЕсли;
			ПолучитьСпецификациюЭтапов(Объект.РабочееМесто);
			ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
			ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,Объект.РабочееМесто,Объект.ПроизводственноеЗадание.Изделие,КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
			ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
			Возврат(1);
			Исключение
			Сообщить(ОписаниеОшибки());
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			КонецПопытки;				
		КонецЦикла;			
	КонецЕсли;
ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,Объект.РабочееМесто,Справочники.Номенклатура.ПустаяСсылка(),КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
Возврат(0); 	
КонецФункции

&НаСервере
Функция ПолучитьСпецификациюЭтапов(РабочееМесто)
ТаблицаКомплектации.Очистить();
Объект.Спецификация.Очистить();
Возврат(ОбщийМодульАРМ.ПолучитьСпецификациюЭтапов(Объект.ПроизводственноеЗадание,РабочееМесто,Этапы,Объект.Спецификация,ТаблицаКомплектации)); 
КонецФункции

&НаСервере
Функция НеобходимаВозвратнаяТара()
Возврат(Объект.РабочееМесто.ВозвратнаяТара);
КонецФункции 

&НаСервере
Процедура ЗаполнитьТаблицуТехОпераций()
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходов.Элемент
	|ИЗ
	|	Справочник.НормыРасходов КАК НормыРасходов
	|ГДЕ
	|	НормыРасходов.Владелец = &Изделие
	|	И НормыРасходов.Элемент В ИЕРАРХИИ(&СписокТО)";
Запрос.УстановитьПараметр("Изделие", Объект.ПроизводственноеЗадание.Изделие);
Запрос.УстановитьПараметр("СписокТО", Объект.РабочееМесто.ТехОперации.ВыгрузитьКолонку("ТехОперация"));
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = ТаблицаТехОпераций.Добавить();
	ТЧ.ТехОперация = ВыборкаДетальныеЗаписи.Элемент;
	КонецЦикла;
//Запрос = Новый Запрос;

//Запрос.Текст = 
//	"ВЫБРАТЬ
//	|	НормыВремениСрезПоследних.ТехОперация
//	|ИЗ
//	|	РегистрСведений.НормыВремени.СрезПоследних КАК НормыВремениСрезПоследних
//	|ГДЕ
//	|	НормыВремениСрезПоследних.МПЗ = &МПЗ
//	|	И НормыВремениСрезПоследних.ТехОперация В(&СписокТО)";
//Запрос.УстановитьПараметр("МПЗ", Объект.ПроизводственноеЗадание.Изделие);
//Запрос.УстановитьПараметр("СписокТО", Объект.РабочееМесто.ТехОперации.ВыгрузитьКолонку("ТехОперация"));
//РезультатЗапроса = Запрос.Выполнить();
//ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
//	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
//	ТЧ = ТаблицаТехОпераций.Добавить();
//	ТЧ.ТехОперация = ВыборкаДетальныеЗаписи.ТехОперация;
//	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучениеЗаданияСканированием()
Возврат (СписокРабочихМест[0].Значение.ПолучениеЗаданияСканированием);
КонецФункции

&НаСервере
Функция ПолучениеЗаданияСканированиемВТ()
Возврат (СписокРабочихМест[0].Значение.ПолучениеЗаданияСканированиемВТ);
КонецФункции

&НаСервере
Функция ПолучитьНезавершенноеЗадание()
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Количество,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто В(&РабочиеМеста)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2";
Запрос.УстановитьПараметр("РабочиеМеста",СписокРабочихМест);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ОбщийМодульВызовСервера.ЛинейкаОстановлена(ВыборкаДетальныеЗаписи.РабочееМесто.Линейка) Тогда
		Продолжить;
		КонецЕсли;
			Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ВыборкаДетальныеЗаписи.ПЗ,Этапы,ЭтапыАРМ,ВыборкаДетальныеЗаписи.РабочееМесто,Объект.Исполнитель) Тогда	
			Продолжить;			
			КонецЕсли; 
    Объект.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
    Объект.РабочееМесто = ВыборкаДетальныеЗаписи.РабочееМесто;
	НомерВТ = ВыборкаДетальныеЗаписи.ПЗ.ВозвратнаяТара;
	ПолучитьСпецификациюЭтапов(Объект.РабочееМесто);
	Возврат(1); 
	КонецЦикла;
Возврат(0);
КонецФункции

&НаСервере
Функция ПолучитьСписокРабочихМест()
Запрос = Новый Запрос;
СписокРМ = Новый СписокЗначений;

	Для каждого РабочееМесто Из СписокРабочихМест Цикл
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	РабочиеМестаЛинеек.Ссылка
		|ИЗ
		|	Справочник.РабочиеМестаЛинеек КАК РабочиеМестаЛинеек
		|ГДЕ
		|	РабочиеМестаЛинеек.Линейка = &Линейка
		|	И РабочиеМестаЛинеек.Код = &Код"; 
	Запрос.УстановитьПараметр("Код", РабочееМесто.Значение.Код-1);
	Запрос.УстановитьПараметр("Линейка", РабочееМесто.Значение.Линейка);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СписокРМ.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЦикла;
Возврат(СписокРМ);
КонецФункции

&НаСервере
Функция ПолучитьСписокБарКодов()
СписокБарКодов = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.БарКод,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто В(&РабочиеМеста)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Линейка.Наименование";
	Если СписокРабочихМест[0].Значение.ЗаканчиватьПредыдущийЭтап Тогда
	Запрос.УстановитьПараметр("РабочиеМеста", ПолучитьСписокРабочихМест());
	Иначе	
	Запрос.УстановитьПараметр("РабочиеМеста", СписокРабочихМест);
	КонецЕсли;
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ОбщийМодульВызовСервера.ЛинейкаОстановлена(ВыборкаДетальныеЗаписи.РабочееМесто.Линейка) Тогда
		Продолжить;
		КонецЕсли;
	СписокБарКодов.Добавить(ВыборкаДетальныеЗаписи.БарКод, ВыборкаДетальныеЗаписи.БарКод+Символы.Таб+"("+ВыборкаДетальныеЗаписи.ПЗ.Номер+")"+Символы.Таб+ВыборкаДетальныеЗаписи.ПЗ.Линейка+" №в.т. "+ВыборкаДетальныеЗаписи.ПЗ.ВозвратнаяТара);
	КонецЦикла;
СписокБарКодов.СортироватьПоЗначению();
Возврат(СписокБарКодов);
КонецФункции

&НаСервере
Функция ПечатьРабочейБирки()
ТабДок = Новый ТабличныйДокумент;

Макет = ПолучитьОбщийМакет("Бирка_Рабочая");
ОблБирка = Макет.ПолучитьОбласть("Бирка");
ОблБирка.Параметры.НомерМТК = Объект.ПроизводственноеЗадание.ДокументОснование.Номер;
ОблБирка.Параметры.Линейка = СокрЛП(Объект.ПроизводственноеЗадание.ДокументОснование.Линейка.Наименование);
ОблБирка.Параметры.Комментарий = СокрЛП(Объект.ПроизводственноеЗадание.ДокументОснование.Комментарий);
ОблБирка.Параметры.Наименование = СокрЛП(Объект.ПроизводственноеЗадание.Изделие.Наименование);
ОблБирка.Параметры.ВозвратнаяТара = Объект.ПроизводственноеЗадание.ВозвратнаяТара;
ОблБирка.Параметры.ДатаЗапуска = ТекущаяДата();
ТабДок.Вывести(ОблБирка);
Возврат(ТабДок);
КонецФункции

&НаСервере
Функция ПечатьРемонтнойБирки(Комментарии)
ТабДок = Новый ТабличныйДокумент;

Макет = ПолучитьОбщийМакет("Бирка_Ремонтная");
ОблБирка = Макет.ПолучитьОбласть("Бирка");
ОблБирка.Параметры.НомерМТК = Объект.ПроизводственноеЗадание.ДокументОснование.Номер;
ОблБирка.Параметры.Линейка = СокрЛП(Объект.ПроизводственноеЗадание.ДокументОснование.Линейка.Наименование);
ОблБирка.Параметры.Наименование = СокрЛП(Объект.ПроизводственноеЗадание.Изделие.Наименование);
ОблБирка.Параметры.Количество = 1;
ОблБирка.Параметры.ВозвратнаяТара = Объект.ПроизводственноеЗадание.ВозвратнаяТара;
ОблБирка.Параметры.ПричинаРемонта = Комментарии.ПричинаРемонта;
ОблБирка.Параметры.Комментарий = Комментарии.Комментарий;
ТабДок.Вывести(ОблБирка);
Возврат(ТабДок);
КонецФункции

&НаСервере
Процедура ЗаписатьВБазуAccess(ПЗ)
conn_str = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + БазаДанных.ПутьКБазеДанных + ";Persist Security Info=True";
cn = Новый COMОбъект("ADODB.Connection");
cn.Open(conn_str);
	Если cn.State <> 1 тогда
    Сообщить("Не удалось открыть ADODB.Connection");
    Возврат;
	КонецЕсли;
rs = Новый COMОбъект("ADODB.Recordset");
rs.CursorLocation = 3;
strSQL = "select * from Входной_буфер";
rs.Open(strSQL, cn, 2, 2);
	Пока Не rs.EOF Цикл
		Если СокрЛП(rs.Fields(1).Value) = ПЗ.БарКод Тогда
			Если rs.state = 1 тогда
			rs.Close();
			КонецЕсли;
				Если cn.state = 1 тогда
			    cn.Close();
				КонецЕсли;
		Сообщить(ПЗ.БарКод+" - существует во входном буфере!");
		Возврат;
		КонецЕсли;
	rs.MoveNext();
	КонецЦикла; 
		Попытка
		rs.AddNew();
		rs.Fields(0).Value = Формат(ТекущаяДата(),"ДЛФ=DT");
		rs.Fields(1).Value = ПЗ.БарКод;
		rs.Fields(2).Value = ПЗ.ВозвратнаяТара;
		rs.Fields(3).Value = СокрЛП(ПЗ.Изделие.Товар.Наименование);
		rs.Update(); 
		Исключение
		Сообщить(ОписаниеОшибки());
		КонецПопытки;      
			Если rs.state = 1 тогда
			rs.Close();
			КонецЕсли;
				Если cn.state = 1 тогда
			    cn.Close();
				КонецЕсли;
КонецПроцедуры 

&НаСервере
Функция ПолучитьКодРабочегоМеста()
Возврат(СписокРабочихМест[0].Значение.Код);
КонецФункции

&НаКлиенте
Процедура ПолучитьЗадание(Команда,Код = "")
	Если ОбщийМодульВызовСервера.ОстановкаЛинейки(СписокРабочихМест[0].Значение) Тогда
		Если ПолучитьКодРабочегоМеста() = 1 Тогда
			Если Вопрос("Линейка остановлена! Снять остановку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Если Не ОбщийМодульРаботаСРегистрами.СнятьОстановкуЛинейки(ОбщийМодульВызовСервера.ПолучитьЛинейкуПоРабочемуМесту(СписокРабочихМест[0].Значение)) Тогда	
				Возврат;
				КонецЕсли;
			Иначе
			Возврат;			
			КонецЕсли;
		Иначе
		Возврат; 
		КонецЕсли;
	КонецЕсли;
		Если Не ЭтаФорма.ПроверитьЗаполнение() Тогда
		Возврат;
		КонецЕсли;
Состояние("Обработка...",,"Получение задания...");
Результат = ПолучитьНезавершенноеЗадание();
	Если Результат = 0 Тогда
		Если ПолучениеЗаданияСканированием() Тогда
			Если Не ЗначениеЗаполнено(Код) Тогда
			ВвестиСтроку(Код,"Введите номер оснастки",18);
			КонецЕсли;
		Результат = ПолучитьЗаданиеНаПромежуточномЭтапеНаСервере(Код);
			Если Результат = 0 Тогда
			СписокБарКодов = ПолучитьСписокБарКодов();
			ВыбЭлемент = СписокБарКодов.ВыбратьЭлемент("Выберите бар-код",ВыбЭлемент);
				Если ВыбЭлемент <> Неопределено Тогда
				Результат = ПолучитьЗаданиеНаПромежуточномЭтапеНаСервере(ВыбЭлемент.Значение);
				Иначе
				Возврат;		
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ПолучениеЗаданияСканированиемВТ() Тогда
			Если Не ЗначениеЗаполнено(Код) Тогда
			ВвестиСтроку(Код,"Введите номер оснастки",4);
			КонецЕсли;
		Результат = ПолучитьЗаданиеПоВозвратнойТаре(Код);		  	
		Иначе
			Если ОбщийМодульВызовСервера.ПолучитьПрефиксРабочегоМеста(СписокРабочихМест[0].Значение) = "УП" Тогда
			Результат = ПолучитьЗаданиеНаПромежуточномЭтапеНаСервере();
			Иначе	
			Результат = ПолучитьЗаданиеНаСервере();
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
		Если Результат = 1 Тогда  		
			Если ТипЗнч(ТаблицаКомплектации[0].Комплектация) = Тип("СправочникСсылка.Номенклатура") Тогда
			Элементы.ТаблицаКомплектации.ТекущаяСтрока = ТаблицаКомплектации[0].ПолучитьИдентификатор();
			ТаблицаКомплектацииВыборЗначения(Элементы.ТаблицаКомплектации,Элементы.ТаблицаКомплектации.ТекущаяСтрока,Истина);
			КонецЕсли;
		ЗаполнитьТаблицуТехОпераций();
			Если ОбщийМодульВызовСервера.ПолучитьПрефиксРабочегоМеста(Объект.РабочееМесто) = "УП" Тогда
			ОткрытьФорму("Обработка.СозданныеБарКоды.Форма.Форма",Новый Структура("ПЗ,РабочееМесто",Объект.ПроизводственноеЗадание,Объект.РабочееМесто));
			КонецЕсли; 
		Элементы.Завершить.КнопкаПоУмолчанию = Истина;
		Элементы.ПолучитьЗадание.Доступность = Ложь;
		Элементы.ПростойЛинейки.Доступность = Ложь;
		Элементы.Гравировка.Доступность = Истина;
		Элементы.ПечатьДокументов.Доступность = Истина;
		Элементы.Завершить.Доступность = Истина;
		Элементы.Ремонт.Доступность = Истина;		
		ИначеЕсли Результат = 0 Тогда
		ОчиститьСсылкуНаПЗ();
		Сообщить("Нет производственных заданий!");  		
		КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ОчиститьСсылкуНаПЗ()
Объект.ПроизводственноеЗадание = Документы.ПроизводственноеЗадание.ПустаяСсылка();
Объект.РабочееМесто  = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
НомерВТ = "";
Этапы.Очистить();
ЭтапыАРМ.Очистить();
ТаблицаКомплектации.Очистить();
ТаблицаТехОпераций.Очистить();
Объект.Спецификация.Очистить();
тДерево = РеквизитФормыВЗначение("ДеревоСпецификации");
тДерево.Строки.Очистить();
ЗначениеВРеквизитФормы(тДерево,"ДеревоСпецификации");
Элементы.ПолучитьЗадание.КнопкаПоУмолчанию = Истина;
Элементы.ПолучитьЗадание.Доступность = Истина;
Элементы.ПростойЛинейки.Доступность = Истина;
Элементы.ПечатьДокументов.Доступность = Ложь;
Элементы.Гравировка.Доступность = Ложь;
Элементы.Завершить.Доступность = Ложь;
Элементы.Ремонт.Доступность = Ложь;
флПечать = Ложь;
КонецПроцедуры  

&НаСервере
Функция ПоказатьПечать()
РабочееМесто = СписокРабочихМест[0].Значение;
Возврат(?(РабочееМесто.Линейка.Принтеры.Найти(РабочееМесто,"РабочееМесто") = Неопределено,Ложь,Истина));
КонецФункции

&НаСервере
Функция ЗавершитьЗаданиеНаСервере()
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	НовоеРабочееМесто = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
	флТекущийЭтапПоследний = Ложь;
	ТекРМ = ЭтапыАРМ.НайтиПоЗначению(Объект.РабочееМесто);
		Если ТекРМ <> Неопределено Тогда
		НомСтр = ЭтапыАРМ.Индекс(ТекРМ)+1;
			Если НомСтр <> ЭтапыАРМ.Количество() Тогда
				Для к = НомСтр По ЭтапыАРМ.Количество()-1 Цикл
					Если ЭтапыАРМ[к].Значение.Авторизовано Тогда
					НовоеРабочееМесто = ЭтапыАРМ[к].Значение;
					Прервать;
					КонецЕсли; 
				КонецЦикла; 	
			Иначе
			флТекущийЭтапПоследний = Истина;			
			КонецЕсли; 
		Иначе
		Сообщить("В списке этапов рабочих мест этого изделия не найдено текущее рабочее место!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат("");		
		КонецЕсли;
			Если НовоеРабочееМесто.Пустая() Тогда
				Если Не флТекущийЭтапПоследний Тогда
				Сообщить("Нет авторизованных рабочих мест!");
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат("");
				КонецЕсли; 
			Иначе
			ПрефиксРМ = ОбщийМодульВызовСервера.ПолучитьПрефиксРабочегоМеста(НовоеРабочееМесто);
			КонецЕсли;
	НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПЗ.Установить(Объект.ПроизводственноеЗадание);
	НаборЗаписей.Прочитать();
	    Для Каждого Запись Из НаборЗаписей Цикл 
	    	Если Запись.РабочееМесто = Объект.РабочееМесто Тогда
			Запись.ДатаОкончания = ТекущаяДата();
			Прервать;
			КонецЕсли;  
	    КонецЦикла;
			Если Не флТекущийЭтапПоследний Тогда
			МестоПередачи = "на "+СокрЛП(НовоеРабочееМесто.Наименование);
			ЭПЗ = НаборЗаписей.Добавить();
			ЭПЗ.Период = ТекущаяДата();
			ЭПЗ.ПЗ = Объект.ПроизводственноеЗадание; 
			ЭПЗ.Линейка = Объект.ПроизводственноеЗадание.Линейка;
			ЭПЗ.Изделие = Объект.ПроизводственноеЗадание.Изделие;
			ЭПЗ.Количество = 1;
			ЭПЗ.БарКод = Объект.ПроизводственноеЗадание.БарКод;
			ЭПЗ.РабочееМесто = НовоеРабочееМесто;
				Если ПрефиксРМ = "СТ" Тогда
				ЭПЗ.ДатаНачала = ТекущаяДата();	
				ЭПЗ.Исполнитель = НовоеРабочееМесто.Стенд.Исполнитель;	
				СуществующийСП = РегистрыСведений.СтендовыйПрогон.ПолучитьПоследнее(,Новый Структура("ПЗ",Объект.ПроизводственноеЗадание));
				СП = РегистрыСведений.СтендовыйПрогон.СоздатьМенеджерЗаписи();
				СП.Период = ТекущаяДата();
				СП.ПЗ = Объект.ПроизводственноеЗадание;
				СП.Изделие = Объект.ПроизводственноеЗадание.Изделие;
				СП.БарКод = Объект.ПроизводственноеЗадание.БарКод;
				СП.Стенд = НовоеРабочееМесто.Стенд;
				СП.Прогон = СуществующийСП.Прогон+1;
				СП.ИсполнительПоступление = НовоеРабочееМесто.Стенд.Исполнитель;
				СП.ДатаПоступления = ТекущаяДата();
				СП.ИсполнительПостановка = НовоеРабочееМесто.Стенд.Исполнитель;
				СП.ДатаПостановки = ТекущаяДата();
				СП.Записать();		
				КонецЕсли;
					Если НовоеРабочееМесто.ГруппаРабочихМест <> Объект.РабочееМесто.ГруппаРабочихМест Тогда
						Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,Объект.Спецификация,Этапы,ТекущаяДата()) Тогда
						Сообщить("Документ выпуска не создан!");
						ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
						Возврат("");
						КонецЕсли; 		
					КонецЕсли;					
			Иначе
				Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,Объект.Спецификация,Этапы,ТекущаяДата()) Тогда
				Сообщить("Документ выпуска не создан!"); 
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат("");
				КонецЕсли;
					Если Объект.ПроизводственноеЗадание.ДокументОснование.Ремонт Тогда
					МестоПередачи = "ремонтнику";				
					Иначе
					Испытания = Объект.ПроизводственноеЗадание.Испытания;
						Если Испытания = 0 Тогда
							Если Объект.ПроизводственноеЗадание.ДокументОснование.МестоХраненияПотребитель.Пустая() Тогда
							МестоПередачи = "на склад линейки";
							Иначе	
							МестоПередачи = "на склад "+СокрЛП(Объект.ПроизводственноеЗадание.ДокументОснование.МестоХраненияПотребитель.Наименование);
							КонецЕсли;					
						ИначеЕсли Испытания = 1 Тогда
						МестоПередачи = "Отложите изделие для ПСИ!";
						ИначеЕсли Испытания = 2 Тогда	
						МестоПередачи = "Отложите изделие для поверки!";
						КонецЕсли;					
					КонецЕсли;			
			КонецЕсли;
	НаборЗаписей.Записать();
		Если Не ЗначениеЗаполнено(Объект.ПроизводственноеЗадание.ВозвратнаяТара) Тогда
			Если Не ОбщийМодульВызовСервера.СохранитьНомерВозвратнойТары(Объект.ПроизводственноеЗадание,НомерВТ) Тогда
			Сообщить("Не сохранён номер оснастки!"); 
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат("");
			КонецЕсли;
		КонецЕсли; 
			Если Не БазаДанных.Пустая() Тогда
				Если Объект.РабочееМесто.Код = 1 Тогда	
				ЗаписатьВБазуAccess(Объект.ПроизводственноеЗадание);
				КонецЕсли;
			КонецЕсли;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(МестоПередачи);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат("");
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПолучитьБарКод()
Возврат(Объект.ПроизводственноеЗадание.БарКод);
КонецФункции

&НаКлиенте
Процедура ЗавершитьЗадание(Команда)
	Если ОбщийМодульВызовСервера.ЛинейкаОстановлена(ОбщийМодульВызовСервера.ПолучитьЛинейкуПоРабочемуМесту(Объект.РабочееМесто)) Тогда
	Возврат;
	КонецЕсли;
МестоПередачи = ЗавершитьЗаданиеНаСервере();
	Если МестоПередачи <> "" Тогда
		Если Найти(МестоПередачи,"Отложите") > 0 Тогда
		Предупреждение(МестоПередачи,,"ВНИМАНИЕ!");
		Иначе	
		ПоказатьОповещениеПользователя("ВНИМАНИЕ!",,"Передайте изделие "+МестоПередачи,БиблиотекаКартинок.Пользователь);
		КонецЕсли;
	ОчиститьСсылкуНаПЗ(); 
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура ПечатьДокументов(Команда)
	Если флПечать Тогда
		Если Вопрос("Распечатать повторно?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
		КонецЕсли; 
	КонецЕсли;
ОткрытьФорму("Обработка.СозданныеБарКоды.Форма.Форма",Новый Структура("ПЗ,РабочееМесто",Объект.ПроизводственноеЗадание,Объект.РабочееМесто)); 
флПечать = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
тЭлементы = ДеревоСпецификации.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
   Элементы.ДеревоСпецификации.Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
тЭлементы = ДеревоСпецификации.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
   Элементы.ДеревоСпецификации.Свернуть(тСтр.ПолучитьИдентификатор());
   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ) = Тип("СправочникСсылка.Документация") Тогда
	ОбщийМодульКлиент.ОткрытьФайлДокумента(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомплектацииВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
ЗаполнитьДерево(Элемент.ТекущиеДанные.ЭтапСпецификации);
РазвернутьДерево(Неопределено);
КонецПроцедуры

&НаСервере
Функция НайтиПЗ(БарКод)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственноеЗадание.Ссылка
	|ИЗ
	|	Документ.ПроизводственноеЗадание КАК ПроизводственноеЗадание
	|ГДЕ
	|	ПроизводственноеЗадание.БарКод = &БарКод";
Запрос.УстановитьПараметр("БарКод", БарКод);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.Ссылка);
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

&НаСервере
Функция НайтиПЗПоНомеруОснастки(НомерОснастки)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Линейка = &Линейка
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ВозвратнаяТара = &ВозвратнаяТара
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("Линейка", СписокРабочихМест[0].Значение.Линейка);
Запрос.УстановитьПараметр("ВозвратнаяТара", НомерОснастки);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(Новый Структура("ПЗ,Ремонт",ВыборкаДетальныеЗаписи.ПЗ,ВыборкаДетальныеЗаписи.Ремонт));
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

&НаСервере
Функция ЭтоПервоеРабочееМесто()	
Возврат(?(СписокРабочихМест[0].Значение.Код = 1,Истина,Ложь));
КонецФункции 

&НаСервере
Функция СуществуетРемонтнаяКарта(ПЗ)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РемонтнаяКарта.Ссылка
	|ИЗ
	|	Документ.РемонтнаяКарта КАК РемонтнаяКарта
	|ГДЕ
	|	РемонтнаяКарта.ДокументОснование = &ДокументОснование";
Запрос.УстановитьПараметр("ДокументОснование", ПЗ);
РезультатЗапроса = Запрос.Выполнить();
Возврат(Не РезультатЗапроса.Пустой());
КонецФункции
     
&НаСервере
Функция ПолучитьМестоХранения(Линейка)
Возврат(Линейка.МестоХраненияКанбанов);
КонецФункции 

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если ЭтаФорма.ВводДоступен() Тогда
	Массив = ОбщийМодульВызовСервера.РазложитьСтрокуВМассив(Данные,";");
		Если Массив[0] = "3" Тогда
		ЗначениеПараметра1 = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[1]);
			Если ЗначениеПараметра1 = Неопределено Тогда
			Сообщить("Линейка или место хранения не найдена!");
			Возврат;	
			КонецЕсли; 
		МПЗ = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[3]);
			Если МПЗ = Неопределено Тогда
			Сообщить(Массив[3]+" - МПЗ не найдена!");
			Возврат;	
			КонецЕсли;
				Если ТипЗнч(ЗначениеПараметра1) = Тип("СправочникСсылка.Линейки") Тогда
				МестоХранения = ПолучитьМестоХранения(ЗначениеПараметра1);
				Иначе
				МестоХранения = ЗначениеПараметра1;			
				КонецЕсли;
		МестоХраненияОтправитель = ОбщийМодульВызовСервера.ПолучитьМестоХраненияПоКоду(Массив[2]);
		П = Новый Структура("МестоХраненияОтправитель,МестоХраненияКанбанов,МПЗ,НомерЯчейки,Сотрудник",МестоХраненияОтправитель,МестоХранения,МПЗ,Массив[5],Объект.Исполнитель);
		ОткрытьФорму("ОбщаяФорма.ОформлениеПустыхКанбанов",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе		
			Если Объект.ПроизводственноеЗадание.Пустая() Тогда
				Если ЭтоПервоеРабочееМесто() Тогда
				Результат = НайтиПЗПоНомеруОснастки(Данные);
					Если Результат <> Неопределено Тогда	
						Если Не Результат.Ремонт Тогда
							Если СуществуетРемонтнаяКарта(Результат.ПЗ) Тогда
							ЗаписатьВБазуAccess(Результат.ПЗ);
							ПоказатьОповещениеПользователя("ВНИМАНИЕ!",,"Информация о ремонтном датчике записана во входной буфер!",БиблиотекаКартинок.Пользователь);						
							Иначе	
							Сообщить(Данные+" - производственное задание не находилось в ремонте!");
							КонецЕсли; 
						Иначе
		                Сообщить(Данные+" - производственное задание находится в ремонте!");
						КонецЕсли;
					Иначе
					Сообщить(Данные+" - не найдено производственное задание по номеру оснастки!");
					КонецЕсли; 
				Иначе
				ПолучитьЗадание(Неопределено,Данные);			
				КонецЕсли; 
			Иначе
			Результат = НайтиПЗПоНомеруОснастки(Данные);
				Если Результат = Неопределено Тогда
				НомерВТ = Данные;			
				ЗавершитьЗадание(Неопределено); 
				Иначе	
				Сообщить(Данные+" - оснастка находится в производстве!");
				КонецЕсли;				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЭтоКанбанБезРезервирования(МПЗ)
	Если Не МПЗ.Канбан.Пустая() Тогда
	 	Если Не МПЗ.Канбан.РезервироватьВПроизводстве Тогда
		Возврат(Истина);
		КонецЕсли;
	КонецЕсли; 
Возврат(Ложь);
КонецФункции 

&НаКлиенте
Процедура ОформитьПустойКанбан(Команда)
	Если Этаформа.ТекущийЭлемент = Этаформа.Элементы.ДеревоСпецификации Тогда
	МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Иначе
	МПЗ = Элементы.ТаблицаКомплектации.ТекущиеДанные.Комплектация;
	КонецЕсли;
		Если ОбщийМодульВызовСервера.МожноОформитьПустойКанбан(МПЗ) Тогда
		П = Новый Структура("МестоХраненияКанбанов,МПЗ",ОбщийМодульВызовСервера.ПолучитьМестоХраненияПоРабочемуМесту(Объект.РабочееМесто),МПЗ);
		ОткрытьФорму("ОбщаяФорма.ОформлениеПустыхКанбанов",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЭтоКанбан(МПЗ)
Возврат(МПЗ.Канбан);
КонецФункции 

&НаКлиенте
Процедура ОформитьНедостачу(Команда)
	Если Этаформа.ТекущийЭлемент = Этаформа.Элементы.ДеревоСпецификации Тогда
	МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Иначе
	МПЗ = Элементы.ТаблицаКомплектации.ТекущиеДанные.Комплектация;
	КонецЕсли;
		Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ЭтоКанбан(МПЗ).Пустая() Тогда	
			Сообщить("Выберите МПЗ ячейки канбана!");
			Возврат;
			КонецЕсли;
		ИначеЕсли ТипЗнч(МПЗ) <> Тип("СправочникСсылка.Материалы")Тогда	
		Сообщить("Выберите МПЗ ячейки канбана!");
		Возврат;
		КонецЕсли; 
П = Новый Структура("ВидОперации,МестоХраненияКанбанов,ПЗ,МПЗ",1,ОбщийМодульВызовСервера.ПолучитьМестоХраненияПоРабочемуМесту(Объект.РабочееМесто),Объект.ПроизводственноеЗадание,МПЗ);
	Если ОткрытьФормуМодально("ОбщаяФорма.ОформлениеНедостачиИзлишков",П) Тогда
		Если ОбщийМодульВызовСервера.МТКОстановлена(Объект.ПроизводственноеЗадание) Тогда
		ОчиститьСсылкуНаПЗ();
		ПоказатьОповещениеПользователя("ВНИМАНИЕ!",,"МТК остановлена по причине недостачи комплектации. Отложите изготавливаемый полуфабрикат!",БиблиотекаКартинок.Пользователь);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОформитьИзлишки(Команда)
	Если Этаформа.ТекущийЭлемент = Этаформа.Элементы.ДеревоСпецификации Тогда
	МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Иначе
	МПЗ = Элементы.ТаблицаКомплектации.ТекущиеДанные.Комплектация;
	КонецЕсли; 
		Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ЭтоКанбан(МПЗ).Пустая() Тогда	
			Сообщить("Выберите МПЗ ячейки канбана!");
			Возврат;
			КонецЕсли;
		ИначеЕсли ТипЗнч(МПЗ) <> Тип("СправочникСсылка.Материалы")Тогда	
		Сообщить("Выберите МПЗ ячейки канбана!");
		Возврат;
		КонецЕсли; 
П = Новый Структура("ВидОперации,МестоХраненияКанбанов,ПЗ,МПЗ",2,ОбщийМодульВызовСервера.ПолучитьМестоХраненияПоРабочемуМесту(Объект.РабочееМесто),Объект.ПроизводственноеЗадание,МПЗ);
ОткрытьФорму("ОбщаяФорма.ОформлениеНедостачиИзлишков",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьБрак(Команда)
	Если Этаформа.ТекущийЭлемент = Этаформа.Элементы.ДеревоСпецификации Тогда
	МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Количество = Элементы.ДеревоСпецификации.ТекущиеДанные.Количество;
	Иначе
	МПЗ = Элементы.ТаблицаКомплектации.ТекущиеДанные.Комплектация;
	Количество = Элементы.ТаблицаКомплектации.ТекущиеДанные.Количество;
	КонецЕсли;
		Если ОбщийМодульВызовСервера.МожноПеремещатьВБрак(МПЗ) Тогда
		П = Новый Структура("РабочееМесто,ПЗ,ЭтапСпецификации,МПЗ,Количество",Объект.РабочееМесто,Объект.ПроизводственноеЗадание,Элементы.ТаблицаКомплектации.ТекущиеДанные.ЭтапСпецификации,МПЗ,Количество);
		ОткрытьФорму("ОбщаяФорма.ОформлениеБракаНовый",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		Иначе
		Сообщить("Выбранную МПЗ запрещено перемещать в брак!");
		КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОстановкаЛинейкиНаСервере(МПЗ)
ОбщийМодульРаботаСРегистрами.ОстановитьЛинейку(Объект.РабочееМесто.Линейка,МПЗ);
КонецФункции

&НаКлиенте
Процедура ОстановкаЛинейки(Команда)
	Если Этаформа.ТекущийЭлемент = Этаформа.Элементы.ДеревоСпецификации Тогда
	МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Иначе
	МПЗ = Элементы.ТаблицаКомплектации.ТекущиеДанные.Комплектация;
	КонецЕсли;
		Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ЭтоКанбанБезРезервирования(МПЗ) Тогда
				Если Вопрос("Вы уверены, что хотите остановить линейку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				ОстановкаЛинейкиНаСервере(МПЗ);
				КонецЕсли;
			Иначе
			Сообщить("Выберите МПЗ ячейки канбана без резервирования!");
			КонецЕсли;
		Иначе	
		Сообщить("Выберите МПЗ ячейки канбана без резервирования!");
		КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДокумент(Команда)
	Если ТипЗнч(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ) = Тип("СправочникСсылка.Документация") Тогда
	ОбщийМодульКлиент.ОткрытьФайлДокумента(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьИзделие()
Возврат(Объект.ПроизводственноеЗадание.Изделие);
КонецФункции

&НаКлиенте
Процедура ПроизводственноеЗаданиеИзделиеНажатие(Элемент, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
ОткрытьФорму("Справочник.Номенклатура.ФормаСписка",Новый Структура("ТекущаяСтрока",ПолучитьИзделие()));
КонецПроцедуры

&НаСервере
Процедура ПроверитьРабочиеМеста()
УдаляемыеЭлементы = Новый СписокЗначений;
                                                    
БазаДанных = Справочники.ОбменДанными.ПустаяСсылка();
	Для каждого РабочееМесто Из СписокРабочихМест Цикл
		Если РабочееМесто.Значение.Пустая() Тогда
		УдаляемыеЭлементы.Добавить(РабочееМесто);
		Сообщить("Рабочее место пустое! Удалено из списка!");
		Продолжить;
		КонецЕсли; 
			Если РабочееМесто.Значение.Линейка.БазаAccess.Пустая() Тогда
			УдаляемыеЭлементы.Добавить(РабочееМесто);
			Сообщить("Линека рабочего места "+РабочееМесто.Значение+" не содержит ссылку на базу данных! Удалено из списка!");
            Продолжить;
			КонецЕсли;	                              
				Если БазаДанных.Пустая() Тогда
				БазаДанных = РабочееМесто.Значение.Линейка.БазаAccess;	
				Иначе
					Если РабочееМесто.Значение.Линейка.БазаAccess <> БазаДанных Тогда
					УдаляемыеЭлементы.Добавить(РабочееМесто);
					Сообщить("База данных в линеке рабочего места "+РабочееМесто.Значение+" не совпадает с текущей базой данных! Удалено из списка!");
					КонецЕсли;	
				КонецЕсли;
	КонецЦикла;
		Для каждого УдаляемыйЭлемент Из УдаляемыеЭлементы Цикл
		СписокРабочихМест.Удалить(УдаляемыйЭлемент.Значение);	
		КонецЦикла;		
КонецПроцедуры

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(СписокРабочихМест[0].Значение.Линейка) Тогда	
	Возврат(Истина);
	Иначе
	СписокРабочихМест.Очистить();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СписокРабочихМестПриИзменении(Элемент)
	Если СписокРабочихМест.Количество() > 0 Тогда
		Если Не МожноРаботатьВАРМ() Тогда
		Возврат;
		КонецЕсли;
	ПроверитьРабочиеМеста();
	Элементы.ПечатьДокументов.Видимость = ПоказатьПечать();
	Элементы.Завершить.Заголовок = "Завершить и передать на следующее АРМ"; 
	Элементы.ПростойЛинейки.Видимость = ?(ПолучитьКодРабочегоМеста() = 1,Истина,Ложь);
	ПрефиксРМ = ОбщийМодульВызовСервера.ПолучитьПрефиксРабочегоМеста(СписокРабочихМест[0].Значение);
		Если ПрефиксРМ = "УП" Тогда
		Элементы.Завершить.Заголовок = "Выпустить на склад линейки";
		Элементы.ПечатьДокументов.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокРабочихМестНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не Объект.ПроизводственноеЗадание.Пустая() Тогда
		Если Вопрос("Производственное задание не завершено! Продолжить выбор?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		ОчиститьСсылкуНаПЗ();
		Иначе
		СтандартнаяОбработка = Ложь;
		КонецЕсли; 	
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерРемонтнойКарты(ПЗ)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РемонтнаяКарта.Ссылка
	|ИЗ
	|	Документ.РемонтнаяКарта КАК РемонтнаяКарта
	|ГДЕ
	|	РемонтнаяКарта.ДокументОснование = &ДокументОснование";
Запрос.УстановитьПараметр("ДокументОснование", ПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
Возврат(ВыборкаДетальныеЗаписи.Количество()+1); 
КонецФункции

&НаСервере
Функция ПолучитьВидРемонтаОбщий()
Возврат(Перечисления.ВидыРемонта.Общий);	
КонецФункции

&НаСервере
Функция ПолучитьИзделиеРемонта()
	Для каждого ТЧ_Этап Из Этапы Цикл
	ЭтапАРМ = Объект.РабочееМесто.ТабличнаяЧасть.Найти(ТЧ_Этап.ГруппаНоменклатуры,"ГруппаНоменклатуры");
		Если ЭтапАРМ = Неопределено Тогда
		Продолжить;
		ИначеЕсли ЭтапАРМ.Комплектация Тогда
	    Продолжить;
		КонецЕсли;
			Если ТЧ_Этап.ЭтапСпецификации.Виртуальный Тогда
			Продолжить;
			КонецЕсли;
	Возврат(Новый Структура("Изделие,Количество",ТЧ_Этап.ЭтапСпецификации,ТЧ_Этап.Количество));
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура Ремонт(Команда)
	Если Объект.ПроизводственноеЗадание.Пустая() Тогда
	Возврат;
	КонецЕсли;
НомерРемонтнойТары = "";
	Если ВвестиСтроку(НомерРемонтнойТары,"Введите номер ремонтной тары",4) Тогда
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборПричинРемонта",Новый Структура("РабочееМесто",Объект.РабочееМесто));
		Если Результат <> Неопределено Тогда
			Если ОбщийМодульСозданиеДокументов.СоздатьРемонтнуюКарту(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,ПолучитьИзделиеРемонта(),Объект.Исполнитель,ПолучитьВидРемонтаОбщий(),Результат,,НомерРемонтнойТары) Тогда
			ТД = ПечатьРемонтнойБирки(Результат);
			ТД.Показать("Ремонтная бирка");				
			ОчиститьСсылкуНаПЗ();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущееРабочееМестоПЗ(БарКод)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.БарКод = &БарКод
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ";
Запрос.УстановитьПараметр("БарКод", БарКод);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.РабочееМесто);
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

&НаСервере
Процедура ОбработатьОшибкиВВыходномБуфереAccess()
conn_str = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + БазаДанных.ПутьКБазеДанных + ";Persist Security Info=True";
cn = Новый COMОбъект("ADODB.Connection");
cn.Open(conn_str);
	Если cn.State <> 1 тогда
    Сообщить("Не удалось открыть ADODB.Connection");
    Возврат;
	КонецЕсли;
rs = Новый COMОбъект("ADODB.Recordset");
rs.CursorLocation = 3;
strSQL = "select * from Выходной_буфер";
rs.Open(strSQL, cn, 2, 2);
Результат = -1; 
	Попытка
		Пока Не rs.EOF Цикл
		КодОшибки = Число(rs.Fields(2).Value);
			Если КодОшибки <> 0 Тогда
			РабочееМесто = ПолучитьТекущееРабочееМестоПЗ(СокрЛП(rs.Fields(1).Value));
				Если РабочееМесто <> Неопределено Тогда
					Если СоздатьРемонтнуюКарту(СокрЛП(rs.Fields(1).Value),КодОшибки,РабочееМесто) Тогда
					rs.Delete();
					КонецЕсли;
				Иначе
				Сообщить(СокрЛП(rs.Fields(1).Value)+" - ПЗ не найдено или находиться в ремонте!");
				КонецЕсли; 
			КонецЕсли;			
		rs.MoveNext();
		КонецЦикла; 
	Исключение
	Сообщить(ОписаниеОшибки());
	КонецПопытки;      
		Если rs.state = 1 тогда
		rs.Close();
		КонецЕсли;
			Если cn.state = 1 тогда
		    cn.Close();
			КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыходнойБуфер(Команда)
ОбработатьОшибкиВВыходномБуфереAccess();
КонецПроцедуры

&НаСервере
Процедура Тест_AccessНаСервере()
conn_str = "Provider=Microsoft.ACE.OLEDB.12.0;Data Source=" + БазаДанных.ПутьКБазеДанных + ";Persist Security Info=True";
cn = Новый COMОбъект("ADODB.Connection");
cn.Open(conn_str);
	Если cn.State <> 1 тогда
    Сообщить("Не удалось открыть ADODB.Connection");
    Возврат;
	КонецЕсли;
rs = Новый COMОбъект("ADODB.Recordset");
rs.CursorLocation = 3;
strSQL = "select * from Входной_буфер";
rs.Open(strSQL, cn, 2, 2); 
	Попытка
	rs.AddNew();
	rs.Fields(0).Value = Формат(ТекущаяДата(),"ДЛФ=DT");
	rs.Fields(1).Value = "12345678901234567";
	rs.Fields(2).Value = "0001";
	rs.Fields(3).Value = "ПЛК";
	rs.Update(); 
	Исключение
	Сообщить(ОписаниеОшибки());
	КонецПопытки;      
		Если rs.state = 1 тогда
		rs.Close();
		КонецЕсли;
			Если cn.state = 1 тогда
		    cn.Close();
			КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Тест_Access(Команда)
Тест_AccessНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ПростойЛинейки(Команда)
Линейка = ОбщийМодульВызовСервера.ПолучитьЛинейкуПоРабочемуМесту(СписокРабочихМест[0].Значение);
	Если Не ОбщийМодульВызовСервера.ЛинейкаОстановлена(Линейка) Тогда
	ОткрытьФормуМодально("ОбщаяФорма.ОформлениеПростояЛинейки",Новый Структура("Линейка",Линейка));
	КонецЕсли;
КонецПроцедуры
                       
&НаСервере 
Функция ПолучитьФайлыДокументовДляПечати()
Возврат(ОбщийМодульВызовСервера.ПолучитьФайлыДокументовДляПечати(Объект.Спецификация));
КонецФункции

&НаКлиенте
Процедура ПечатьКР(Команда)
ОбщийМодульАРМКлиент.ПечатьДокументовА4(ПолучитьФайлыДокументовДляПечати());
КонецПроцедуры
