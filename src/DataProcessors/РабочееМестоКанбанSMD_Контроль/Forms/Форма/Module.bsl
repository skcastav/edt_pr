
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Объект.Исполнитель = ПараметрыСеанса.Пользователь;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
      ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   КонецЕсли;
СписокРабочихМестПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(СписокРабочихМест[0].Значение.Линейка) Тогда	
	Возврат(Истина);
	Иначе
	СписокРабочихМест.Очистить();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СписокРабочихМестПриИзменении(Элемент)
	Если СписокРабочихМест.Количество() > 0 Тогда
		Если Не МожноРаботатьВАРМ() Тогда
		Возврат;
		КонецЕсли;
	ОчиститьСсылкуНаПЗ();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаданиеНаСервере()
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследных.ПЗ КАК ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследных.РабочееМесто КАК РабочееМесто,
	|	ЭтапыПроизводственныхЗаданийСрезПоследных.Исполнитель КАК Исполнитель,
	|	ЭтапыПроизводственныхЗаданийСрезПоследных.ДатаНачала КАК ДатаНачала,
	|	ЭтапыПроизводственныхЗаданийСрезПоследных.Количество КАК Количество
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследных
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследных.РабочееМесто В(&СписокРабочихМест)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследных.ПЗ.ДокументОснование.Статус = 1
	|	И ЭтапыПроизводственныхЗаданийСрезПоследных.Ремонт = ЛОЖЬ
	|	И ЭтапыПроизводственныхЗаданийСрезПоследных.Изделие.ВидКонтроля = &ВидКонтроля
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводственныхЗаданийСрезПоследных.Период";
Запрос.УстановитьПараметр("СписокРабочихМест",СписокРабочихМест);
Запрос.УстановитьПараметр("ВидКонтроля",ВидКонтроля);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.Исполнитель) Тогда
			Если ВыборкаДетальныеЗаписи.Исполнитель <> Объект.Исполнитель Тогда
			Продолжить;
			КонецЕсли; 		
		КонецЕсли; 
	Объект.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
	Объект.РабочееМесто = ВыборкаДетальныеЗаписи.РабочееМесто;
	КоличествоИзделия = ВыборкаДетальныеЗаписи.Количество;
	КоличествоБрак = ОбщийМодульВызовСервера.ПолучитьКоличествоВБракеПоПЗ(Объект.ПроизводственноеЗадание,Объект.РабочееМесто);
		Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаНачала) Тогда
			Попытка
			Парам = Новый Структура("РабочееМесто,Исполнитель,ДатаНачала",Объект.РабочееМесто,Объект.Исполнитель,ТекущаяДата());
			ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(Объект.ПроизводственноеЗадание,Парам);
			Исключение
			Сообщить(ОписаниеОшибки());
			Возврат(Ложь);
			КонецПопытки;
		КонецЕсли;
	Возврат(Истина); 
	КонецЦикла;
Возврат(Ложь);
КонецФункции

&НаСервере
Процедура ПолучитьТехОснастку()
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_ТОсн(Объект.ПроизводственноеЗадание.Изделие,Объект.ПроизводственноеЗадание.ДатаЗапуска);
	Пока ВыборкаНР.Следующий() Цикл
	ТехОснастка = ВыборкаНР.Элемент;
	ЯХ = ОбщийМодульРаботаСРегистрами.ПолучитьЯчейкуХранения(ВыборкаНР.Элемент);
	Стеллаж = ЯХ.Стеллаж;
	Полка = ЯХ.Полка;
	Прервать;
	КонецЦикла;
КонецПроцедуры 

&НаКлиенте
Процедура ПолучитьЗадание(Команда)
	Если ПолучитьЗаданиеНаСервере() Тогда
	ПолучитьТехОснастку();	
	Элементы.Завершить.КнопкаПоУмолчанию = Истина;
	Иначе
	Сообщить("Нет производственных заданий!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОчиститьСсылкуНаПЗ()
Объект.ПроизводственноеЗадание = Документы.ПроизводственноеЗадание.ПустаяСсылка();
Объект.РабочееМесто = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
КоличествоИзделия = 0;
КоличествоБрак = 0;
ТехОснастка = Справочники.ТехОснастка.ПустаяСсылка();
Стеллаж = Справочники.Стеллажи.ПустаяСсылка();
Полка = 0;
Элементы.ПолучитьЗадание.КнопкаПоУмолчанию = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура ПечатьТекущейСпецификации(Команда)
ОткрытьФорму("Отчет.ПечатьСпецификацииСУчётомАналогов.Форма.ФормаОтчета",Новый Структура("ПЗ",Объект.ПроизводственноеЗадание));
КонецПроцедуры

&НаСервере
Функция ЗавершитьНаСервере(Количество)
ДатаОкончания = ТекущаяДата();
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	ОбщийМодульРаботаСРегистрами.ЗафиксироватьИсполнениеЭтапаПроизводственногоЗадания(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,Объект.ПроизводственноеЗадание.Изделие,Количество,Объект.Исполнитель);
	МТК = Объект.ПроизводственноеЗадание.ДокументОснование;	
	Парам = Новый Структура("РабочееМесто,ДатаОкончания",Объект.РабочееМесто,ДатаОкончания);
	ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(Объект.ПроизводственноеЗадание,Парам);
		Если ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукцииКанбан(Объект.ПроизводственноеЗадание,ДатаОкончания,КоличествоИзделия-КоличествоБрак) Тогда
			Если МТК.НомерЯчейки > 0 Тогда
				Если Не ОбщийМодульСозданиеДокументов.СоздатьПередачуНаЛинейку(МТК,ДатаОкончания+1) Тогда
				Сообщить("Документ передачи на линейку не создан!");
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат(Ложь);				
				КонецЕсли; 
			КонецЕсли;  
		Иначе
		Сообщить("Документ выпуска по ПЗ "+Объект.ПроизводственноеЗадание.Номер+" не создан!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат(Ложь);
		КонецЕсли;		
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(Истина);	
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Ложь);
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПолучитьКоличествоВПЗ()
Возврат(Объект.ПроизводственноеЗадание.Количество);
КонецФункции 

&НаКлиенте
Процедура Завершить(Команда)
	Если Не Объект.ПроизводственноеЗадание.Пустая() Тогда
	КоличествоВсего = КоличествоИзделия - КоличествоБрак;	
		Если ЗавершитьНаСервере(КоличествоВсего) Тогда
		ОчиститьСсылкуНаПЗ();
		КонецЕсли;		 
	Иначе
	Сообщить("Производственное задание не получено!");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьБрак(Команда)
	Если Объект.ПроизводственноеЗадание.Пустая() Тогда
	Сообщить("Нет выбранного производственного задания!");
	Возврат;	
	КонецЕсли;
Результат = ОткрытьФормуМодально("ОбщаяФорма.ОформлениеБракаКанбан",Новый Структура("РабочееМесто,ПЗ,КоличествоИзделия",Объект.РабочееМесто,Объект.ПроизводственноеЗадание,КоличествоИзделия - КоличествоБрак));
	Если Результат <> 0 Тогда
	КоличествоБрак = ОбщийМодульВызовСервера.ПолучитьКоличествоВБракеПоПЗ(Объект.ПроизводственноеЗадание,Объект.РабочееМесто);		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Ремонт(Команда)
	Если Объект.ПроизводственноеЗадание.Пустая() Тогда
	Сообщить("Нет выбранного производственного задания!");
	Возврат;	
	КонецЕсли;
КоличествоИзделия = ОбщийМодульВызовСервера.ПолучитьКоличествоИзделияНаРабочемМесте(Объект.ПроизводственноеЗадание,Объект.РабочееМесто);
Результат = ОткрытьФормуМодально("ОбщаяФорма.ОформлениеРемонтКанбан",Новый Структура("РабочееМесто,ПЗ,КоличествоИзделия",Объект.РабочееМесто,Объект.ПроизводственноеЗадание,КоличествоИзделия - КоличествоБрак));
	Если (Результат <> Неопределено)и(Результат > 0) Тогда
	ОчиститьСсылкуНаПЗ();		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьИзделие()
Возврат(Объект.ПроизводственноеЗадание.Изделие);
КонецФункции

&НаКлиенте
Процедура ОтчётПоИзменениям(Команда)
ОткрытьФорму("Отчет.ОтчётПоИзменениямВСпецификации.Форма.ФормаОтчета",Новый Структура("Спецификация",ПолучитьИзделие()));
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПлат(Команда)
Результат = ОткрытьФормуМодально("Обработка.РабочееМестоКанбанSMD_Электроконтроль.Форма.ПроверкаПлат",Новый Структура("ПЗ",Объект.ПроизводственноеЗадание));
КонецПроцедуры

&НаСервере
Функция ПечатьQRКодыНаСервере()
ТабДок = Новый ТабличныйДокумент;

Макет = ПолучитьОбщийМакет("QRКод_10х17_2");
ОблQRКод = Макет.ПолучитьОбласть("QRКод|Ячейка");
НомерМТК = Объект.ПроизводственноеЗадание.Номер;
Кол = 1;
	Для к = 1 По КоличествоИзделия Цикл
	QRCode = ""+НомерМТК+";"+к;
	ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRCode, 0, 100);	
		Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
		КартинкаQRКода = Новый Картинка(ДанныеQRКода);
		ОблQRКод.Рисунки.QRCode.Картинка = КартинкаQRКода;
		Иначе
		Сообщить("Не удалось сформировать QR-код!");
		КонецЕсли;
			Если Кол = 1 Тогда
			ТабДок.Вывести(ОблQRКод);
			Кол = 2;
			Иначе
			ТабДок.Присоединить(ОблQRКод);
			ТабДок.ВывестиГоризонтальныйРазделительСтраниц();	
			Кол = 1;
			КонецЕсли;
	КонецЦикла; 
ТабДок.РазмерСтраницы = "Custom";
ТабДок.ВысотаСтраницы = 10;
ТабДок.ШиринаСтраницы = 17;
ТабДок.ПолеСлева = 0;
ТабДок.ПолеСверху = 0;
ТабДок.ПолеСнизу = 0;
ТабДок.ПолеСправа = 0;
ТабДок.РазмерКолонтитулаСверху = 0;
ТабДок.РазмерКолонтитулаСнизу = 0;
Возврат(ТабДок);
КонецФункции

&НаКлиенте
Процедура ПечатьQRКоды(Команда)
ТабДок = ПечатьQRКодыНаСервере();
ТабДок.Показать("QR-коды");
КонецПроцедуры
