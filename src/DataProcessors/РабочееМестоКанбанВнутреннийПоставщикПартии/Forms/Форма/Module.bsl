
&НаСервере
Процедура ПриСозданииНаСервере()
Объект.Исполнитель = ПараметрыСеанса.Пользователь;
СортироватьПо = 1;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
      ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   КонецЕсли;
	Если Не Объект.РабочееМесто.Пустая() Тогда
	РабочееМестоПриИзменении(Неопределено);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры

&НаСервере
Функция ПроверитьЛОПотребителя(Изделие,МестоХраненияКанбанов)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЛьготнаяОчередьСрезПоследних.ПЗ
	|ИЗ
	|	РегистрСведений.ЛьготнаяОчередь.СрезПоследних КАК ЛьготнаяОчередьСрезПоследних
	|ГДЕ
	|	ЛьготнаяОчередьСрезПоследних.НормаРасходов.Элемент = &МПЗ
	|	И ЛьготнаяОчередьСрезПоследних.Линейка.МестоХраненияКанбанов = &МестоХраненияКанбанов
	|	И ЛьготнаяОчередьСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("МПЗ", Изделие);
Запрос.УстановитьПараметр("МестоХраненияКанбанов", МестоХраненияКанбанов);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(Истина);
	КонецЦикла;
Возврат(Ложь);
КонецФункции

&НаСервере
Функция ПроверитьЛО(Изделие)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЛьготнаяОчередьСрезПоследних.ПЗ
	|ИЗ
	|	РегистрСведений.ЛьготнаяОчередь.СрезПоследних КАК ЛьготнаяОчередьСрезПоследних
	|ГДЕ
	|	ЛьготнаяОчередьСрезПоследних.Изделие = &Изделие
	|	И ЛьготнаяОчередьСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("Изделие", Изделие);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(Истина);
	КонецЦикла;
Возврат(Ложь);
КонецФункции

&НаСервере
Процедура ПолучитьДанныеНаСервере()
Объект.ТаблицаПЗ.Очистить();
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ КАК ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала КАК ДатаНачала,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Период КАК Период,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Исполнитель КАК Исполнитель
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних(, ) КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто = &РабочееМесто
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("РабочееМесто",Объект.РабочееМесто);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = Объект.ТаблицаПЗ.Добавить();
	ТЧ.Потребитель = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.МестоХраненияПотребитель;
	ТЧ.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
	ТЧ.Партия = ВыборкаДетальныеЗаписи.ПЗ.Партия;
	ТЧ.Изделие = ВыборкаДетальныеЗаписи.ПЗ.Изделие;
	ТЧ.ДатаСоздания = ВыборкаДетальныеЗаписи.ПЗ.Дата;
	ТЧ.ДатаНачала = ВыборкаДетальныеЗаписи.ДатаНачала;
	ТЧ.ЛО = ПроверитьЛО(ТЧ.Изделие);
	ТЧ.ЛОПотребителя = ПроверитьЛОПотребителя(ТЧ.Изделие,ТЧ.Потребитель);
	ТЧ.КоличествоНаСкладеГП = ОбщийМодульРаботаСРегистрами.ПолучитьОстатокПоМестуХранения(Объект.РабочееМесто.Линейка.МестоХраненияГП,ТЧ.Изделие);
	ТЧ.ТребуетсяВТ = ВыборкаДетальныеЗаписи.ПЗ.Изделие.Канбан.Служебный;
	ТЧ.ВозвратнаяТара = ВыборкаДетальныеЗаписи.ПЗ.ВозвратнаяТара;
	КонецЦикла;
КонецПроцедуры
 
&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(Объект.РабочееМесто.Линейка) Тогда	
	Возврат(Истина);
	Иначе
	Объект.РабочееМесто = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура РабочееМестоПриИзменении(Элемент)
	Если Не МожноРаботатьВАРМ() Тогда
	Возврат;
	КонецЕсли;
ПолучитьДанныеНаСервере();
СортироватьПоПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗадания(Команда)
Состояние("Обработка...",,"Получение заданий...");
ПолучитьДанныеНаСервере();
СортироватьПоПриИзменении(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ПолучитьТехОснастку(СписокТО,ЭтапСпецификации,КолУзла)
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_ТОсн(ЭтапСпецификации,ТекущаяДата());
	Пока ВыборкаНР.Следующий() Цикл
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.ТехОснастка") Тогда
		СписокТО.Добавить(ВыборкаНР.Элемент,Строка(ВыборкаНР.Норма*КолУзла));					
		Иначе
			Если ВыборкаНР.Элемент.Канбан.Пустая() Тогда
			ПолучитьТехОснастку(СписокТО,ВыборкаНР.Элемент,ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПринятьВРаботуНаСервере()
Партия = Новый УникальныйИдентификатор;
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		Для каждого ТЧ Из Объект.ТаблицаПЗ Цикл
			Если ТЧ.Пометка Тогда
			ПЗ = ТЧ.ПроизводственноеЗадание;
				Если Не ЗначениеЗаполнено(ПЗ.ДатаЗапуска) Тогда
					Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ПЗ,Этапы,ЭтапыАРМ,Объект.РабочееМесто,Объект.Исполнитель) Тогда	
					Возврат(Ложь);			
					КонецЕсли; 
				Результат = ОбщийМодульВызовСервера.ЗапуститьВПроизводство(ПЗ,Объект.РабочееМесто,Этапы,,Истина,Объект.Исполнитель);
					Если Результат = 1 Тогда                    
					ПЗОбъект = ПЗ.ПолучитьОбъект();
						Если Объект.РабочееМесто.ЗаполнитьТехОснастку Тогда
						СписокТО = Новый СписокЗначений;

						ПолучитьТехОснастку(СписокТО,ПЗ.Изделие,ПЗ.Количество);
							Если СписокТО.Количество() > 0 Тогда
								Для каждого ТО Из СписокТО Цикл
								Выборка = ПЗОбъект.Оборудование.НайтиСтроки(Новый Структура("Оборудование",ТО.Значение));
									Если Выборка.Количество() = 0 Тогда
									ТЧ_О = ПЗОбъект.Оборудование.Добавить();
									ТЧ_О.Оборудование = ТО.Значение;
									ТЧ_О.Количество = Число(ТО.Представление);						
									КонецЕсли; 						
								КонецЦикла;
							Иначе
							Сообщить("Тех. оснастка не найдена в спецификации!");	
							ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);			
							Возврат(Ложь);
							КонецЕсли; 
						КонецЕсли;
					ПЗОбъект.Партия = Партия;
					ПЗОбъект.Записать();
						Если ТЧ.Изделие.Канбан.Подразделение.ОформлятьПустыеКанбаны > 0 Тогда
						ОбщийМодульРаботаСРегистрами.ОформитьПринятиеКанбана(Объект.РабочееМесто.Линейка.МестоХраненияГП,ТЧ.Потребитель,ТЧ.Изделие,ПЗ.ДокументОснование.НомерЯчейки,Объект.Исполнитель);
						КонецЕсли;
					ТЧ.ДатаНачала = ТекущаяДата();
					Иначе
					ТЧ.ЛО = ПроверитьЛО(ТЧ.Изделие);
					ТЧ.ЛОПотребителя = ПроверитьЛОПотребителя(ТЧ.Изделие,ТЧ.Потребитель);
					Сообщить(""+ПЗ+" - не запущено!");
					ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
					Возврат(Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(Истина);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);			
	КонецПопытки;
Возврат(Ложь); 
КонецФункции 

&НаСервере
Функция ПроверитьВыбранныеПЗ()
флОК = Истина;
	Для каждого ТЧ Из Объект.ТаблицаПЗ Цикл
		Если ТЧ.Пометка Тогда
			Если Не ЗначениеЗаполнено(ТЧ.ДатаНачала) Тогда
				Если ОбщийМодульВызовСервера.МТКОстановлена(ТЧ.ПроизводственноеЗадание) Тогда
				Сообщить(""+ТЧ.ПроизводственноеЗадание+" - остановлена МТК!");
				флОК = Ложь;
				КонецЕсли;
			Иначе
			Сообщить(""+ТЧ.ПроизводственноеЗадание+" - уже принято в работу!");
			флОК = Ложь;	
			КонецЕсли;		
		КонецЕсли;
	КонецЦикла;
Возврат(флОК);
КонецФункции

&НаКлиенте
Процедура ПринятьВРаботу(Команда)
	Если ПроверитьВыбранныеПЗ() Тогда
	ПринятьВРаботуНаСервере();
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ЗавершитьНаСервере()
МассивУдаляемых = Новый Массив;

	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		Для каждого ТЧ Из Объект.ТаблицаПЗ Цикл
			Если ТЧ.Пометка Тогда
			ПЗ = ТЧ.ПроизводственноеЗадание;
			ДатаОкончания = ТекущаяДата();
			Парам = Новый Структура("РабочееМесто,ДатаОкончания",Объект.РабочееМесто,ДатаОкончания);
			ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(ПЗ,Парам);
				Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукцииКанбан(ПЗ,ДатаОкончания) Тогда
				Сообщить("Документ выпуска по ПЗ "+ПЗ.Номер+" не создан!");
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат(Ложь);
				КонецЕсли;
					Если ЗначениеЗаполнено(ТЧ.ВозвратнаяТара) Тогда
					ПЗОбъект = ПЗ.ПолучитьОбъект();
					ПЗОбъект.ВозвратнаяТара = ТЧ.ВозвратнаяТара;
					ПЗОбъект.Записать(РежимЗаписиДокумента.Запись);
					КонецЕсли; 
			МассивУдаляемых.Добавить(ТЧ);
			КонецЕсли;
		КонецЦикла;
			Для к = 0 По МассивУдаляемых.ВГраница() Цикл
			Объект.ТаблицаПЗ.Удалить(МассивУдаляемых[к]);		
			КонецЦикла;			
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(Истина);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;                                                                                                                                                                    
Возврат(Ложь);
КонецФункции

&НаСервере
Функция ПроверитьНаЗавершениеВыбранныеПЗ()
флОК = Истина;
	Для каждого ТЧ Из Объект.ТаблицаПЗ Цикл
		Если ТЧ.Пометка Тогда
			Если Не ЗначениеЗаполнено(ТЧ.ДатаНачала) Тогда
			Сообщить(""+ТЧ.ПроизводственноеЗадание+" - не принято в работу!");	
			флОК = Ложь;
			КонецЕсли;		
				Если ОбщийМодульВызовСервера.МТКОстановлена(ТЧ.ПроизводственноеЗадание) Тогда
				Сообщить(""+ТЧ.ПроизводственноеЗадание+" - остановлена МТК!");
				флОК = Ложь;
				КонецЕсли;
					Если ТЧ.ТребуетсяВТ Тогда
						Если Не ЗначениеЗаполнено(ТЧ.ВозвратнаяТара) Тогда
						Сообщить(""+ТЧ.ПроизводственноеЗадание+" - требуется ввод номера возвратной тары!");
						флОК = Ложь;
						КонецЕсли;
					КонецЕсли;
		КонецЕсли;
	КонецЦикла;
Возврат(флОК);
КонецФункции

&НаКлиенте
Процедура Завершить(Команда)
	Если ПроверитьНаЗавершениеВыбранныеПЗ() Тогда
	ЗавершитьНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьТекущейСпецификации(Команда)
ОткрытьФорму("Отчет.ПечатьСпецификацииСУчётомАналогов.Форма.ФормаОтчета",Новый Структура("ПЗ",Элементы.ТаблицаПЗ.ТекущиеДанные.ПроизводственноеЗадание));
КонецПроцедуры

&НаСервере
Функция НайтиПЗ(Данные)
Массив = ОбщийМодульВызовСервера.РазложитьСтрокуВМассив(Данные,";");
	Если Массив[0] = "3" Тогда
	МестоХраненияПотребитель = ЗначениеИзСтрокиВнутр(Массив[1]);
	Спецификация = ЗначениеИзСтрокиВнутр(Массив[3]);
	НомерЯчейки = Число(Массив[5]);
		Для каждого ТЧ Из Объект.ТаблицаПЗ Цикл
			Если ТЧ.ПроизводственноеЗадание.ДокументОснование.МестоХраненияПотребитель = МестоХраненияПотребитель Тогда	
				Если ТЧ.ПроизводственноеЗадание.Изделие = Спецификация Тогда
					Если ТЧ.ПроизводственноеЗадание.ДокументОснование.НомерЯчейки = НомерЯчейки Тогда
					Возврат(ТЧ.ПолучитьИдентификатор());
					КонецЕсли; 
				КонецЕсли; 	
		    КонецЕсли;
		КонецЦикла;
	ИначеЕсли Найти(Массив[0],"{") > 0 Тогда
	МТК = ЗначениеИзСтрокиВнутр(Массив[0]);
		Для каждого ТЧ Из Объект.ТаблицаПЗ Цикл
			Если ТЧ.ПроизводственноеЗадание.ДокументОснование = МТК Тогда	
			Возврат(ТЧ.ПолучитьИдентификатор()); 	
		    КонецЕсли;
		КонецЦикла;	
	КонецЕсли; 
Возврат(Неопределено);
КонецФункции

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если ЭтаФорма.ВводДоступен() Тогда
		Если Найти(Данные,"{") > 0 Тогда
		ВыбСтрока = НайтиПЗ(Данные);
			Если ВыбСтрока <> Неопределено Тогда
			Элементы.ТаблицаПЗ.ТекущаяСтрока = ВыбСтрока;
			Иначе	
			Сообщить("Производственное задание не найдено!");
			КонецЕсли;		
		Иначе
		Массив = ОбщийМодульВызовСервера.РазложитьСтрокуВМассив(Данные,";");	
			Если Элементы.ТаблицаПЗ.ТекущиеДанные.ТребуетсяВТ Тогда
			Элементы.ТаблицаПЗ.ТекущиеДанные.ВозвратнаяТара = Массив[0];
			Иначе
			Сообщить("Для выбранной ПЗ не требуется возвратная тара!");
			КонецЕсли;		
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура СортироватьПоПриИзменении(Элемент)
	Если СортироватьПо = 1 Тогда
	Объект.ТаблицаПЗ.Сортировать("ПроизводственноеЗадание");
	ИначеЕсли СортироватьПо = 2 Тогда
	Объект.ТаблицаПЗ.Сортировать("Потребитель");		
	ИначеЕсли СортироватьПо = 3 Тогда
	Объект.ТаблицаПЗ.Сортировать("Изделие");
	ИначеЕсли СортироватьПо = 4 Тогда
	Объект.ТаблицаПЗ.Сортировать("ДатаНачала");	
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПечатьМТКНаСервере(Стр)
ТабДок = Новый ТабличныйДокумент;

barcode = ПолучитьCOMОбъект("","STROKESCRIBE.StrokeScribeClass.1");
barcode.Alphabet=25; //QRCODE
Макет = ПолучитьОбщийМакет("МТКДетали");
ОблМТК = Макет.ПолучитьОбласть("МТК");
ОблЭтикетка = Макет.ПолучитьОбласть("Этикетка");
ТЧ = Объект.ТаблицаПЗ.НайтиПоИдентификатору(Стр);
МТК = ТЧ.ПроизводственноеЗадание.ДокументОснование;
QRCode = ЗначениеВСтрокуВнутр(МТК);
ИмяФайла=ПолучитьИмяВременногоФайла("wmf");
barcode.Text=QRCode;
barcode.UTF8=1;
barcode.QrECL=2;
код=barcode.SavePicture(ИмяФайла,7,100,100);          
	Если код <> 0 Тогда //Проверка результата генерации штрихкода
	Сообщить(строка(код) + " - " + barcode.ErrorDescription);
	Возврат(ТабДок);
	КонецЕсли;
рис=ОблМТК.Рисунки.QRCode;
рис.РазмерКартинки=РазмерКартинки.Пропорционально;
рис.Линия = Новый Линия(ТипЛинииРисункаТабличногоДокумента.НетЛинии);
рис.Картинка = Новый Картинка(ИмяФайла);
ОблМТК.Параметры.МТКНомер = МТК.Номер;
ОблМТК.Параметры.ДатаСоздания = МТК.Дата;
ОблМТК.Параметры.Счёт = МТК.Счёт;
ОблМТК.Параметры.Номенклатура = СокрЛП(МТК.Номенклатура.Наименование);
ОблМТК.Параметры.Количество = МТК.Количество;
ОблМТК.Параметры.ЕдиницаИзмерения = МТК.Номенклатура.ЕдиницаИзмерения;
ТабДок.Вывести(ОблМТК);
ОблЭтикетка.Параметры.Линейка = МТК.Линейка;
ОблЭтикетка.Параметры.МТКНомер = МТК.Номер;
ОблЭтикетка.Параметры.ДатаСоздания = МТК.Дата;
ОблЭтикетка.Параметры.Номенклатура = СокрЛП(МТК.Номенклатура.Наименование);
ОблЭтикетка.Параметры.Количество = МТК.Количество;
ОблЭтикетка.Параметры.ЕдиницаИзмерения = МТК.Номенклатура.ЕдиницаИзмерения;
ТабДок.Вывести(ОблЭтикетка);
УдалитьФайлы(ИмяФайла);
ТабДок.РазмерСтраницы = "A4";
ТабДок.ПолеСлева = 0;
ТабДок.ПолеСверху = 0;
ТабДок.ПолеСнизу = 0;
ТабДок.ПолеСправа = 0;
ТабДок.РазмерКолонтитулаСверху = 0;
ТабДок.РазмерКолонтитулаСнизу = 0;
Возврат(ТабДок);
КонецФункции

&НаКлиенте
Процедура ПечатьМТК(Команда)
ТабДок = ПечатьМТКНаСервере(Элементы.ТаблицаПЗ.ТекущаяСтрока);
ТабДок.Показать("МТК детали");
КонецПроцедуры

&НаСервере
Функция ЭтоТовар(Изделие)
Возврат(ЗначениеЗаполнено(Изделие.Товар));	
КонецФункции

&НаКлиенте
Процедура ПечатьДокументов(Команда)
	Если ЭтоТовар(Элементы.ТаблицаПЗ.ТекущиеДанные.Изделие) Тогда
	П = Новый Структура("ПЗ,РабочееМесто",Элементы.ТаблицаПЗ.ТекущиеДанные.ПроизводственноеЗадание,Объект.РабочееМесто);
	ОткрытьФорму("Обработка.СозданныеБарКоды.Форма.Форма",П);	
	Иначе	
	Сообщить("Изделию не присвоен товар!");
	КонецЕсли; 
КонецПроцедуры
