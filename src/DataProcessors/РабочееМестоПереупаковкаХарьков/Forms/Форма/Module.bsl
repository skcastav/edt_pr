
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Объект.Исполнитель = ПараметрыСеанса.Пользователь;
	Если Константы.КодБазы.Получить() = "БГР" Тогда
	ИзменитьПоМаске = Истина;
	КонецЕсли; 
		Если Объект.Исполнитель.Пустая() Тогда
		Элементы.РабочееМесто.Доступность = Ложь;
		Сообщить("Вы не внесены в справочник Сотрудников! Работа невозможна!");
		КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
      ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(ЭтапСпецификации)
Объект.Спецификация.Сортировать("ТипСправочника Убыв,ВидМПЗ,Позиция,МПЗ");
тДерево = РеквизитФормыВЗначение("ДеревоСпецификации");
тДерево.Строки.Очистить();
ТипСпр = "";
	Для каждого ТЧ Из Объект.Спецификация Цикл
		Если ТЧ.ЭтапСпецификации <> ЭтапСпецификации Тогда
		Продолжить;		
		КонецЕсли; 
			Если ТипСпр <> ТЧ.ТипСправочника Тогда
			Стр = тДерево.Строки.Добавить();
			Стр.ТипСправочника = ТЧ.ТипСправочника;
			ТипСпр = ТЧ.ТипСправочника;
			КонецЕсли; 
	СтрЗнч = Стр.Строки.Добавить();
	СтрЗнч.Позиция = ТЧ.Позиция;
	СтрЗнч.ВидЭлемента = ТЧ.ВидМПЗ;
	СтрЗнч.МПЗ = ТЧ.МПЗ;
	СтрЗнч.Количество = ТЧ.Количество;
	СтрЗнч.ЕдиницаИзмерения = ТЧ.ЕдиницаИзмерения;
	СтрЗнч.Аналог = ТЧ.Аналог;
	СтрЗнч.Примечание = ТЧ.Примечание;
		Если ТЧ.Владелец <> Неопределено Тогда
		СтрЗнч.Владелец = ТЧ.Владелец.Элемент;
		КонецЕсли;		 
	КонецЦикла;
ЗначениеВРеквизитФормы(тДерево, "ДеревоСпецификации");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомплектацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
ЗаполнитьДерево(Элемент.ТекущиеДанные.ЭтапСпецификации);
РазвернутьДерево(Неопределено);
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаданиеНаСервере(БарКод = Неопределено)
НачалоЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
КолПЗ = 0;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто = &РабочееМесто
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2";
	Если БарКод <> Неопределено Тогда
	Запрос.Текст = Запрос.Текст + " И ЭтапыПроизводственныхЗаданийСрезПоследних.БарКод = &БарКод";
	Запрос.УстановитьПараметр("БарКод", БарКод);
	КонецЕсли;
		Если Объект.РабочееМесто.ЗаканчиватьПредыдущийЭтап Тогда
		Запрос.Текст = Запрос.Текст + " И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала <> ДАТАВРЕМЯ(1,1,1,0,0,0)";
		Запрос.УстановитьПараметр("РабочееМесто", ОбщийМодульВызовСервера.ПолучитьПредыдущееРабочееМесто(Объект.РабочееМесто));
		Иначе
		Запрос.Текст = Запрос.Текст + " И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала = ДАТАВРЕМЯ(1,1,1,0,0,0)";	
		Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
		КонецЕсли; 
			Если Объект.РабочееМесто.ОбработкаЗаданийПоВремениПоступления Тогда
			Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ЭтапыПроизводственныхЗаданийСрезПоследних.Период
											|ИТОГИ ПО
											|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование";
			Иначе	
			Запрос.Текст = Запрос.Текст + " УПОРЯДОЧИТЬ ПО ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.НомерОчереди,ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.Номер
											|ИТОГИ ПО
											|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование";
			КонецЕсли;
Результат = Запрос.Выполнить();

ВыборкаМТК = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМТК.Следующий() Цикл
	ВыборкаДетальныеЗаписи = ВыборкаМТК.Выбрать(ОбходРезультатаЗапроса.Прямой);
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		КолПЗ = КолПЗ + 1;
			Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ВыборкаДетальныеЗаписи.ПЗ,Этапы,ЭтапыАРМ,Объект.РабочееМесто,Объект.Исполнитель) Тогда	
			Прервать; //Переходим к следующей МТК			
			КонецЕсли;
				Если Не ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ПЗ.ДатаЗапуска) Тогда
				Результат = ОбщийМодульВызовСервера.ЗапуститьВПроизводство(ВыборкаДетальныеЗаписи.ПЗ,Объект.РабочееМесто,Этапы);
					Если Результат = 0 Тогда
					Прервать; //Переходим к следующей МТК
					ИначеЕсли Результат = -1 Тогда
					Возврат(-1);
					КонецЕсли; 
				КонецЕсли;
					Если Объект.РабочееМесто.ЗаканчиватьПредыдущийЭтап Тогда
					ПредыдущееРабочееМесто = ВыборкаДетальныеЗаписи.РабочееМесто;
					ДатаПринятия = ТекущаяДата();
						Попытка
						НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
						Парам = Новый Структура("РабочееМесто,ДатаОкончания",ПредыдущееРабочееМесто,ДатаПринятия);
						ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(ВыборкаДетальныеЗаписи.ПЗ,Парам);
							Если СокрЛП(ПредыдущееРабочееМесто.ГруппаРабочихМест.Префикс) = "СТ" Тогда
							НаборЗаписей = РегистрыСведений.СтендовыйПрогон.СоздатьНаборЗаписей();
							НаборЗаписей.Отбор.ПЗ.Установить(ВыборкаДетальныеЗаписи.ПЗ);
							НаборЗаписей.Прочитать();
							    Для Каждого Запись Из НаборЗаписей Цикл
									Если Не ЗначениеЗаполнено(Запись.ДатаСнятия) Тогда
									Запись.ИсполнительСнятие = Объект.Исполнитель;
									Запись.ДатаСнятия = ДатаПринятия;
									Прервать; 
									КонецЕсли;  
							    КонецЦикла;
							НаборЗаписей.Записать();
							КонецЕсли; 
						ПолучитьСпецификациюЭтапов(ПредыдущееРабочееМесто);
							Если ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(ВыборкаДетальныеЗаписи.ПЗ,ПредыдущееРабочееМесто,Объект.Спецификация,Этапы,ДатаПринятия) Тогда
							ОбщийМодульРаботаСРегистрами.СоздатьЭтапПроизводственногоЗадания(ВыборкаДетальныеЗаписи.ПЗ,Объект.РабочееМесто,Объект.Исполнитель,ДатаПринятия);
							Иначе
							Сообщить("Документ выпуска по производственному заданию "+ВыборкаДетальныеЗаписи.ПЗ.Номер+" не создан!");
							ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
							Возврат(-1);
							КонецЕсли;
						ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
						Исключение
						Сообщить(ОписаниеОшибки());
						ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
						Возврат(-1);
						КонецПопытки;
					КонецЕсли;  
		Объект.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ; 
		ПолучитьСпецификациюЭтапов(Объект.РабочееМесто);                          
		ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
		ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,Объект.РабочееМесто,Объект.ПроизводственноеЗадание.Изделие,КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
		Возврат(1);
		КонецЦикла;
	КонецЦикла;
ОкончаниеЗамера = ТекущаяУниверсальнаяДатаВМиллисекундах();
ОбщийМодульРаботаСРегистрами.СборИнформацииПоАРМ(1,Объект.РабочееМесто,Справочники.Номенклатура.ПустаяСсылка(),КолПЗ,(ОкончаниеЗамера - НачалоЗамера)/1000);
Возврат(0);
КонецФункции

&НаСервере
Функция ПолучитьСпецификациюЭтапов(РабочееМесто)
ТаблицаКомплектации.Очистить();
Объект.Спецификация.Очистить();
СписокЭтапов = Новый СписокЗначений;

	Для каждого ТЧ Из Этапы Цикл
	ЭтапРМ = РабочееМесто.ТабличнаяЧасть.Найти(ТЧ.ГруппаНоменклатуры,"ГруппаНоменклатуры");
		Если ЭтапРМ = Неопределено Тогда
		Продолжить;
		КонецЕсли;
			Если ЭтапРМ.Комплектация Тогда
			ОбщийМодульВызовСервера.ПолучитьКомплектацию(ТЧ.ЭтапСпецификации,ТЧ.ЭтапСпецификации,ТЧ.Количество,Истина,ТаблицаКомплектации,Объект.ПроизводственноеЗадание.ДатаЗапуска);
			Иначе
			ОбщийМодульВызовСервера.ПолучитьКомплектацию(ТЧ.ЭтапСпецификации,ТЧ.ЭтапСпецификации,ТЧ.Количество,Ложь,ТаблицаКомплектации,Объект.ПроизводственноеЗадание.ДатаЗапуска);
			Выборка = ТаблицаКомплектации.НайтиСтроки(Новый Структура("ЭтапСпецификации",ТЧ.ЭтапСпецификации));
				Если Выборка.Количество() = 0 Тогда	
				ТЧТК = ТаблицаКомплектации.Добавить();
				ТЧТК.ЭтапСпецификации = ТЧ.ЭтапСпецификации;
				КонецЕсли;
			СписокЭтапов.Добавить(ТЧ.ЭтапСпецификации);
			ОбщийМодульВызовСервера.ПолучитьСпецификациюСАналогами(Объект.Спецификация,Объект.ПроизводственноеЗадание,ТЧ.ЭтапСпецификации,ТЧ.ЭтапСпецификации,ТЧ.Количество);	
			КонецЕсли; 	
	КонецЦикла;
		Если ОбщийМодульВызовСервера.ПроверитьОстановкуКанбана(Объект.ПроизводственноеЗадание,Объект.Спецификация) Тогда
		ТаблицаКомплектации.Сортировать("Компл,ЭтапСпецификации,ВидЭлемента,Комплектация");
		Объект.Спецификация.Сортировать("ЭтапСпецификации,ВидМПЗ,Позиция,МПЗ");
			Если ТаблицаКомплектации.Количество() = 0 Тогда
		    ТЧТК = ТаблицаКомплектации.Добавить();
			ТЧТК.ЭтапСпецификации = СписокЭтапов[0].Значение;
			КонецЕсли;
		Возврат(Истина);
		Иначе
		Сообщить("Остановлен один из канбанов без резервирования!");	
		Возврат(Ложь);
		КонецЕсли; 
КонецФункции

&НаСервере
Функция НайтиНезавершённоеПЗ()
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних(&НаДату, ) КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто = &РабочееМесто
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Исполнитель = &Исполнитель
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1,1,1,0,0,0)";
Запрос.УстановитьПараметр("НаДату",ТекущаяДата());
Запрос.УстановитьПараметр("РабочееМесто",Объект.РабочееМесто);
Запрос.УстановитьПараметр("Исполнитель",Объект.Исполнитель);
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(Выборка.ПЗ,Этапы,ЭтапыАРМ,Объект.РабочееМесто,Объект.Исполнитель) Тогда	
		Продолжить;			
		КонецЕсли;
	Объект.ПроизводственноеЗадание = Выборка.ПЗ;
	БарКодПЗ = Выборка.ПЗ.БарКод;
		Если ПолучитьСпецификациюЭтапов(Объект.РабочееМесто) Тогда
		Возврат(Истина);
		Иначе
		Возврат(Ложь);
		КонецЕсли;
	КонецЦикла;
Возврат(Ложь);
КонецФункции
 
&НаСервере
Функция ПолучитьКодРабочегоМеста()
Возврат(Объект.РабочееМесто.Код);
КонецФункции

&НаСервере
Функция ПолучениеЗаданиеСканированием()
Возврат (Объект.РабочееМесто.ПолучениеЗаданияСканированием);
КонецФункции

&НаСервере
Функция ПолучитьСписокБарКодов()
СписокБарКодов = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.БарКод,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто = &РабочееМесто
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Линейка.Наименование";
	Если Объект.РабочееМесто.ЗаканчиватьПредыдущийЭтап Тогда
	Запрос.УстановитьПараметр("РабочееМесто", ОбщийМодульВызовСервера.ПолучитьПредыдущееРабочееМесто(Объект.РабочееМесто));
	Иначе	
	Запрос.УстановитьПараметр("РабочееМесто", Объект.РабочееМесто);
	КонецЕсли;
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокБарКодов.Добавить(ВыборкаДетальныеЗаписи.БарКод, ВыборкаДетальныеЗаписи.БарКод+Символы.Таб+"("+ВыборкаДетальныеЗаписи.ПЗ.Номер+")"+Символы.Таб+ВыборкаДетальныеЗаписи.ПЗ.Линейка);
	КонецЦикла;
СписокБарКодов.СортироватьПоЗначению();
Возврат(СписокБарКодов);
КонецФункции

&НаКлиенте
Процедура ПолучитьЗадание(Команда)
	Если ОбщийМодульВызовСервера.ОстановкаЛинейки(Объект.РабочееМесто) Тогда
		Если ПолучитьКодРабочегоМеста() = 1 Тогда
			Если Вопрос("Линейка остановлена! Снять остановку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
				Если Не ОбщийМодульРаботаСРегистрами.СнятьОстановкуЛинейки(ОбщийМодульВызовСервера.ПолучитьЛинейкуПоРабочемуМесту(Объект.РабочееМесто)) Тогда	
				Возврат;
				КонецЕсли;
			Иначе
			Возврат;			
			КонецЕсли;
		Иначе
		Возврат; 
		КонецЕсли;
	КонецЕсли;
Результат = НайтиНезавершённоеПЗ();
	Если Не Результат Тогда
		Если ПолучениеЗаданиеСканированием() Тогда
		СписокБарКодов = ПолучитьСписокБарКодов();
		ВыбЭлемент = СписокБарКодов.ВыбратьЭлемент("Выберите бар-код",ВыбЭлемент);
			Если ВыбЭлемент <> Неопределено Тогда
			Результат = ПолучитьЗаданиеНаСервере(ВыбЭлемент.Значение);
			Иначе
			Возврат;		
			КонецЕсли;
		Иначе
		Результат = ПолучитьЗаданиеНаСервере();
		КонецЕсли;
			Если Результат = 0 Тогда
			Сообщить("Нет производственных заданий!");
			Возврат;
			КонецЕсли;
	КонецЕсли;
НомерВТ = ОбщегоНазначенияВызовСервера.ЗначениеРеквизитаОбъекта(Объект.ПроизводственноеЗадание,"ВозвратнаяТара");  
Элементы.ТаблицаКомплектации.ТекущаяСтрока = ТаблицаКомплектации[0].ПолучитьИдентификатор();
ТаблицаКомплектацииВыбор(Элементы.ТаблицаКомплектации,Элементы.ТаблицаКомплектации.ТекущаяСтрока,,Истина);
Элементы.Завершить.КнопкаПоУмолчанию = Истина;
Элементы.ПолучитьЗадание.Доступность = Ложь;
Элементы.ПростойЛинейки.Доступность = Ложь;
Элементы.ПечатьДокументов.Доступность = Истина;
Элементы.Завершить.Доступность = Истина;
Элементы.ВвестиБарКод.Доступность = Истина;
КонецПроцедуры

&НаСервере
Процедура ОчиститьСсылкуНаПЗ()
Объект.ПроизводственноеЗадание = Документы.ПроизводственноеЗадание.ПустаяСсылка();
Этапы.Очистить();
ЭтапыАРМ.Очистить();
ТаблицаКомплектации.Очистить();
Объект.Спецификация.Очистить();
НомерВТ = "";
БарКодПЗ = "";
тДерево = РеквизитФормыВЗначение("ДеревоСпецификации");
тДерево.Строки.Очистить();
ЗначениеВРеквизитФормы(тДерево,"ДеревоСпецификации");
Элементы.ПолучитьЗадание.КнопкаПоУмолчанию = Истина;
Элементы.ПолучитьЗадание.Доступность = Истина;
Элементы.ПростойЛинейки.Доступность = Истина;
Элементы.ПечатьДокументов.Доступность = Ложь;
Элементы.Завершить.Доступность = Ложь;
Элементы.ВвестиБарКод.Доступность = Ложь;
КонецПроцедуры  

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(Объект.РабочееМесто.Линейка) Тогда	
	Возврат(Истина);
	Иначе
	Объект.РабочееМесто = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции 

&НаКлиенте
Процедура РабочееМестоПриИзменении(Элемент)
	Если Не МожноРаботатьВАРМ() Тогда
	Возврат;
	КонецЕсли;
Элементы.ПростойЛинейки.Видимость = ?(ПолучитьКодРабочегоМеста() = 1,Истина,Ложь);
ОчиститьСсылкуНаПЗ();
КонецПроцедуры

&НаСервере
Функция ЗавершитьЗаданиеНаСервере()
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	НовоеРабочееМесто = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
	флТекущийЭтапПоследний = Ложь;
	ТекРМ = ЭтапыАРМ.НайтиПоЗначению(Объект.РабочееМесто);
		Если ТекРМ <> Неопределено Тогда
		НомСтр = ЭтапыАРМ.Индекс(ТекРМ)+1;
			Если НомСтр <> ЭтапыАРМ.Количество() Тогда
				Для к = НомСтр По ЭтапыАРМ.Количество()-1 Цикл
					Если ЭтапыАРМ[к].Значение.Авторизовано Тогда
					НовоеРабочееМесто = ЭтапыАРМ[к].Значение;
					Прервать;
					КонецЕсли; 
				КонецЦикла; 	
			Иначе
			флТекущийЭтапПоследний = Истина;			
			КонецЕсли; 
		Иначе
		Сообщить("В списке этапов рабочих мест этого изделия не найдено текущее рабочее место!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат("");		
		КонецЕсли;
			Если НовоеРабочееМесто.Пустая() Тогда
				Если Не флТекущийЭтапПоследний Тогда
				Сообщить("Нет авторизованных рабочих мест!");
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат("");
				КонецЕсли; 
			Иначе
			ПрефиксРМ = ОбщийМодульВызовСервера.ПолучитьПрефиксРабочегоМеста(НовоеРабочееМесто);
			КонецЕсли;
	НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПЗ.Установить(Объект.ПроизводственноеЗадание);
	НаборЗаписей.Прочитать();
	    Для Каждого Запись Из НаборЗаписей Цикл 
	    	Если Запись.РабочееМесто = Объект.РабочееМесто Тогда
			Запись.ДатаОкончания = ТекущаяДата();
			Прервать;
			КонецЕсли;  
	    КонецЦикла;
			Если Не флТекущийЭтапПоследний Тогда
			ЭПЗ = НаборЗаписей.Добавить();
			ЭПЗ.Период = ТекущаяДата();
			ЭПЗ.ПЗ = Объект.ПроизводственноеЗадание; 
			ЭПЗ.Линейка = Объект.ПроизводственноеЗадание.Линейка;
			ЭПЗ.Изделие = Объект.ПроизводственноеЗадание.Изделие;
			ЭПЗ.Количество = 1;
			ЭПЗ.БарКод = Объект.ПроизводственноеЗадание.БарКод;
			ЭПЗ.РабочееМесто = НовоеРабочееМесто;
				Если ПрефиксРМ = "СТ" Тогда
				ЭПЗ.ДатаНачала = ТекущаяДата();	
				ЭПЗ.Исполнитель = НовоеРабочееМесто.Стенд.Исполнитель;	
				СуществующийСП = РегистрыСведений.СтендовыйПрогон.ПолучитьПоследнее(,Новый Структура("ПЗ,Стенд",Объект.ПроизводственноеЗадание,НовоеРабочееМесто.Стенд));
				СП = РегистрыСведений.СтендовыйПрогон.СоздатьМенеджерЗаписи();
				СП.Период = ТекущаяДата();
				СП.ПЗ = Объект.ПроизводственноеЗадание;
				СП.Изделие = Объект.ПроизводственноеЗадание.Изделие;
				СП.БарКод = Объект.ПроизводственноеЗадание.БарКод;
				СП.Стенд = НовоеРабочееМесто.Стенд;
				СП.Прогон = СуществующийСП.Прогон+1;
				СП.ИсполнительПоступление = НовоеРабочееМесто.Стенд.Исполнитель;
				СП.ДатаПоступления = ТекущаяДата();
				СП.ИсполнительПостановка = НовоеРабочееМесто.Стенд.Исполнитель;
				СП.ДатаПостановки = ТекущаяДата();
				СП.Записать();		
				КонецЕсли;
					Если НовоеРабочееМесто.ГруппаРабочихМест <> Объект.РабочееМесто.ГруппаРабочихМест Тогда
						Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,Объект.Спецификация,Этапы,ТекущаяДата()) Тогда
						Сообщить("Документ выпуска не создан!");
						ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
						Возврат("");
						КонецЕсли; 		
					КонецЕсли;
			МестоПередачи = "на "+СокрЛП(НовоеРабочееМесто.Наименование);					
			Иначе
				Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,Объект.Спецификация,Этапы,ТекущаяДата()) Тогда
				Сообщить("Документ выпуска не создан!"); 
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат("");
				КонецЕсли;
			Испытания = Объект.ПроизводственноеЗадание.Испытания;
				Если Испытания = 0 Тогда
					Если Объект.ПроизводственноеЗадание.ДокументОснование.МестоХраненияПотребитель.Пустая() Тогда
					МестоПередачи = "на склад линейки";
					Иначе	
					МестоПередачи = "на склад "+СокрЛП(Объект.ПроизводственноеЗадание.ДокументОснование.МестоХраненияПотребитель.Наименование);
					КонецЕсли;					
				ИначеЕсли Испытания = 1 Тогда
				МестоПередачи = "Отложите изделие для ПСИ!";
				ИначеЕсли Испытания = 2 Тогда	
				МестоПередачи = "Отложите изделие для поверки!";
				КонецЕсли;			
			КонецЕсли;
	НаборЗаписей.Записать();
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(МестоПередачи);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат("");
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПолучитьБарКод()
Возврат(Объект.ПроизводственноеЗадание.БарКод);
КонецФункции

&НаКлиенте
Процедура ЗавершитьЗадание(Команда)
	Если ОбщийМодульВызовСервера.ЛинейкаОстановлена(ОбщийМодульВызовСервера.ПолучитьЛинейкуПоРабочемуМесту(Объект.РабочееМесто)) Тогда
	Возврат;
	КонецЕсли;
		Если Не ЗначениеЗаполнено(ПолучитьБарКод()) Тогда
		Сообщить("Введите бар-код!");
		Возврат;
		КонецЕсли; 
МестоПередачи = ЗавершитьЗаданиеНаСервере();
	Если МестоПередачи <> "" Тогда
		Если Найти(МестоПередачи,"Отложите") > 0 Тогда
		Предупреждение(МестоПередачи,,"ВНИМАНИЕ!");
		Иначе	
		ПоказатьОповещениеПользователя("ВНИМАНИЕ!",,"Передайте изделие "+МестоПередачи,БиблиотекаКартинок.Пользователь);
		КонецЕсли; 
	ОчиститьСсылкуНаПЗ();
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Функция ЭтоПереупаковка(РабочееМесто)
	Если РабочееМесто.Линейка.ВидЛинейки = Перечисления.ВидыЛинеек.Переупаковка Тогда
	Возврат(Истина);
	Иначе	
	Возврат(Ложь);
	КонецЕсли; 
КонецФункции

&НаКлиенте
Процедура РабочееМестоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЭтоПереупаковка(ВыбранноеЗначение) Тогда
	Сообщить("Выберите рабочее место из линейки переупаковки Харьковских приборов!");
	СтандартнаяОбработка = Ложь;
	Возврат;
	КонецЕсли; 
		Если Не Объект.ПроизводственноеЗадание.Пустая() Тогда
			Если Вопрос("Задание не завершено. Вы действительно хотите авторизоваться?",РежимДиалогаВопрос.ДаНет,,,"ВНИМАНИЕ!") = КодВозвратаДиалога.Нет Тогда
			СтандартнаяОбработка = Ложь;
			КонецЕсли; 
		КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокЭтапов()
СписокЭтапов = Новый СписокЗначений;
	Для каждого ТЧ Из ТаблицаКомплектации Цикл
		Если СписокЭтапов.НайтиПоЗначению(ТЧ.ЭтапСпецификации) = Неопределено Тогда
		СписокЭтапов.Добавить(ТЧ.ЭтапСпецификации);
		КонецЕсли; 
	КонецЦикла;
Возврат(СписокЭтапов);
КонецФункции 

&НаКлиенте
Процедура ПечатьДокументов(Команда)
Результат = ОткрытьФормуМодально("Обработка.РабочееМестоПереупаковкаХарьков.Форма.ФормаВыбораДатПечати",Новый Структура("ПЗ,ИзменитьПоМаске",Объект.ПроизводственноеЗадание,ИзменитьПоМаске));
	Если Результат <> Неопределено Тогда
	ОткрытьФорму("Обработка.СозданныеБарКоды.Форма.Форма",Новый Структура("ПЗ,РабочееМесто,ДатаВыпуска,ДатаПоверки",Объект.ПроизводственноеЗадание,Объект.РабочееМесто,Результат.ДатаВыпуска,Результат.ДатаПоверки));
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
тЭлементы = ДеревоСпецификации.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
   	Элементы.ДеревоСпецификации.Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
тЭлементы = ДеревоСпецификации.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
   Элементы.ДеревоСпецификации.Свернуть(тСтр.ПолучитьИдентификатор());
   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ) = Тип("СправочникСсылка.Документация") Тогда
	ОбщийМодульКлиент.ОткрытьФайлДокумента(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКомплектацииВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
ЗаполнитьДерево(Элемент.ТекущиеДанные.ЭтапСпецификации);
РазвернутьДерево(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ВвестиБарКодНаСервере(БарКод)
	Если СтрДлина(СокрЛП(БарКод)) = 18 Тогда
	КодТовара = Число(Лев(БарКод,6));
	Иначе	
	КодТовара = Число(Лев(БарКод,5));	
	КонецЕсли;
		Если Объект.ПроизводственноеЗадание.Изделие.Товар.Код <> КодТовара Тогда	
		Сообщить("Код товара в производственном задании не совпадает с кодом товара в отсканированном бар-коде!");
		Возврат;
		КонецЕсли;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БарКоды.ПЗ КАК Документ,
	|	БарКоды.Период КАК Период
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.БарКод = &БарКод";	
Запрос.УстановитьПараметр("БарКод",БарКод);
Результат = Запрос.Выполнить();
Выборка = Результат.Выбрать();
	Если Выборка.Количество() > 0 Тогда
	Выборка.Следующий();
		Если Выборка.Документ <> Неопределено Тогда 
			Если Не Выборка.Документ.Пустая() Тогда
				Если ТипЗнч(Выборка.Документ) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
				Сообщить("Бар-код уже прикреплен к другому производственному заданию!");
				Возврат;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;			
			Попытка	
			НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
			ПЗ = Объект.ПроизводственноеЗадание.ПолучитьОбъект();
			ПЗ.БарКод = БарКод;
			ПЗ.Записать(РежимЗаписиДокумента.Запись);
			НаборЗаписей = РегистрыСведений.БарКоды.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПЗ.Установить(Выборка.Документ);
			НаборЗаписей.Отбор.Товар.Установить(ПЗ.Изделие.Товар);
			НаборЗаписей.Прочитать();
				Для Каждого Запись Из НаборЗаписей Цикл 
					Если Запись.БарКод = БарКод Тогда	
					НаборЗаписей.Удалить(Запись);
					Прервать;
					КонецЕсли;
				КонецЦикла;		
			НаборЗаписей.Записать(Истина);			
			БК = РегистрыСведений.БарКоды.СоздатьМенеджерЗаписи();
			БК.Период = Выборка.Период;
			БК.ПЗ = ПЗ.Ссылка;
			БК.Изделие = ПЗ.Изделие;
			БК.Товар = ПЗ.Изделие.Товар;
			БК.БарКод = БарКод;
			БК.Записать(Истина);
			НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПЗ.Установить(ПЗ.Ссылка);
			НаборЗаписей.Прочитать();
			    Для Каждого Запись Из НаборЗаписей Цикл 
				Запись.БарКод = БарКод;
			    КонецЦикла;
			НаборЗаписей.Записать();
			БарКодПЗ = БарКод;
			ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
			Исключение
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Сообщить(ОписаниеОшибки());
			КонецПопытки;
	Иначе
		Попытка	
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		ПЗ = Объект.ПроизводственноеЗадание.ПолучитьОбъект();
		ПЗ.БарКод = БарКод;
		ПЗ.Записать(РежимЗаписиДокумента.Запись);
		БК = РегистрыСведений.БарКоды.СоздатьМенеджерЗаписи();
		БК.Период = ПЗ.Дата;
		БК.ПЗ = ПЗ.Ссылка;
		БК.Изделие = ПЗ.Изделие;
		БК.Товар = ПЗ.Изделие.Товар;
		БК.БарКод = БарКод;
		БК.Записать();
		НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(ПЗ.Ссылка);
		НаборЗаписей.Прочитать();
		    Для Каждого Запись Из НаборЗаписей Цикл 
			Запись.БарКод = БарКод;
		    КонецЦикла;
		НаборЗаписей.Записать();
		БарКодПЗ = БарКод;
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Сообщить(ОписаниеОшибки());
		КонецПопытки;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВвестиБарКод(Команда,БарКод = "")
	Если Не Объект.ПроизводственноеЗадание.Пустая() Тогда
		Если Не ЗначениеЗаполнено(ПолучитьБарКод()) Тогда
			Если Не ЗначениеЗаполнено(БарКод) Тогда
				Если Не ВвестиСтроку(БарКод,"Введите бар-код",18) Тогда
				Возврат;	
				КонецЕсли; 
			КонецЕсли;
		ВвестиБарКодНаСервере(БарКод);		
		Иначе	
		Сообщить("Бар-код уже введён!");
		КонецЕсли;
	Иначе
	Сообщить("Сначала получите производственное задание!");	
	КонецЕсли; 
КонецПроцедуры
   
&НаСервере
Функция ПолучитьМестоХранения(Линейка)
Возврат(Линейка.МестоХраненияКанбанов);
КонецФункции 

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если ЭтаФорма.ВводДоступен() Тогда
	Массив = ОбщийМодульВызовСервера.РазложитьСтрокуВМассив(Данные,";");
		Если Массив[0] = "3" Тогда
		ЗначениеПараметра1 = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[1]);
			Если ЗначениеПараметра1 = Неопределено Тогда
			Сообщить("Линейка или место хранения не найдена!");
			Возврат;	
			КонецЕсли; 
		МПЗ = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[3]);
			Если МПЗ = Неопределено Тогда
			Сообщить(Массив[3]+" - МПЗ не найдена!");
			Возврат;	
			КонецЕсли;
				Если ТипЗнч(ЗначениеПараметра1) = Тип("СправочникСсылка.Линейки") Тогда
				МестоХранения = ПолучитьМестоХранения(ЗначениеПараметра1);
				Иначе
				МестоХранения = ЗначениеПараметра1;			
				КонецЕсли;
		МестоХраненияОтправитель = ОбщийМодульВызовСервера.ПолучитьМестоХраненияПоКоду(Массив[2]);
		П = Новый Структура("МестоХраненияОтправитель,МестоХраненияКанбанов,МПЗ,НомерЯчейки,Сотрудник",МестоХраненияОтправитель,МестоХранения,МПЗ,Массив[5],Объект.Исполнитель);
		ОткрытьФорму("ОбщаяФорма.ОформлениеПустыхКанбанов",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе 		
			Если ПолучениеЗаданиеСканированием() Тогда
				Если ПолучитьЗаданиеНаСервере(СокрЛП(Данные)) = 1 Тогда
				Элементы.ТаблицаКомплектации.ТекущаяСтрока = ТаблицаКомплектации[0].ПолучитьИдентификатор();
				ТаблицаКомплектацииВыбор(Элементы.ТаблицаКомплектации,Элементы.ТаблицаКомплектации.ТекущаяСтрока,,Истина);
				Элементы.Завершить.КнопкаПоУмолчанию = Истина;
				Элементы.ПолучитьЗадание.Доступность = Ложь;
				Элементы.ПростойЛинейки.Доступность = Ложь;
				Элементы.ПечатьДокументов.Доступность = Истина;
				Элементы.Завершить.Доступность = Истина;
				Элементы.ВвестиБарКод.Доступность = Истина;
				Иначе
				Сообщить("Нет производственных заданий!");
				КонецЕсли;
			Иначе
 			ВвестиБарКод(Неопределено,СокрЛП(Данные));
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьНедостачу(Команда)
		Если ОбщийМодульАРМКлиент.ОформитьНедостачу(ЭтаФорма,Объект.РабочееМесто,Объект.ПроизводственноеЗадание) Тогда
		ОчиститьСсылкуНаПЗ();
		КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ЭтоУПЭА()
	Если Найти(Объект.ПроизводственноеЗадание.Подразделение.Наименование,"Богородицк УПЭА") > 0 Тогда
	Возврат(Истина);
	Иначе
	Возврат(Ложь);
	КонецЕсли; 
КонецФункции 

&НаСервере
Функция ПолучитьВидРемонтаРазукомплектовка()
Возврат(Перечисления.ВидыРемонта.Разукомплектовка);
КонецФункции

&НаСервере
Функция ПолучитьИзделиеРемонта()
	Для каждого ТЧ_Этап Из Этапы Цикл
	ЭтапАРМ = Объект.РабочееМесто.ТабличнаяЧасть.Найти(ТЧ_Этап.ГруппаНоменклатуры,"ГруппаНоменклатуры");
		Если ЭтапАРМ = Неопределено Тогда
		Продолжить;
		ИначеЕсли ЭтапАРМ.Комплектация Тогда
	    Продолжить;
		КонецЕсли;
			Если ТЧ_Этап.ЭтапСпецификации.Виртуальный Тогда
			Продолжить;
			КонецЕсли;
	Возврат(Новый Структура("Изделие,Количество",ТЧ_Этап.ЭтапСпецификации,ТЧ_Этап.Количество));
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура Ремонт(Команда)
	Если ЭтоУПЭА() Тогда
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ОформлениеРемонта",Новый Структура("РабочееМесто,ПроизводственноеЗадание,Исполнитель,Этапы",Объект.РабочееМесто,Объект.ПроизводственноеЗадание,Объект.Исполнитель,Этапы));
		Если Результат <> Неопределено Тогда
		ОчиститьСсылкуНаПЗ(); 
		КонецЕсли;
	Иначе
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборПричинРемонта",Новый Структура("РабочееМесто",Объект.РабочееМесто));
		Если Результат <> Неопределено Тогда
		НомерБирки = "";
			Если ВвестиСтроку(НомерБирки,"Введите номер бирки",4) Тогда
				Если ОбщийМодульСозданиеДокументов.СоздатьРемонтнуюКарту(Объект.ПроизводственноеЗадание,Объект.РабочееМесто,ПолучитьИзделиеРемонта(),Объект.Исполнитель,ПолучитьВидРемонтаРазукомплектовка(),Результат,,НомерБирки) Тогда
				ОчиститьСсылкуНаПЗ();
				КонецЕсли;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры
                 
&НаСервере 
Функция ПолучитьФайлыДокументовДляПечати()
Возврат(ОбщийМодульВызовСервера.ПолучитьФайлыДокументовДляПечати(Объект.Спецификация));
КонецФункции

&НаКлиенте
Процедура ПечатьКР(Команда)
ОбщийМодульАРМКлиент.ПечатьДокументовА4(ПолучитьФайлыДокументовДляПечати());
КонецПроцедуры
