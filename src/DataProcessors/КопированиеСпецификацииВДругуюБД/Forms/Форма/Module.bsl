
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
САналогами = Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьГруппуДокумента(БазаПроизв,СписокГрупп)
ТекГруппа = БазаПроизв.Справочники.Документация.ПустаяСсылка();
	Для каждого НаименГруппы Из СписокГрупп Цикл	
	Группа = БазаПроизв.Справочники.Документация.НайтиПоНаименованию(НаименГруппы.Значение,Истина,ТекГруппа);
		Если Группа.ЭтоГруппа Тогда	
		ТекГруппа = Группа;
		Иначе
		ГруппаОбъект = БазаПроизв.Справочники.Документация.СоздатьГруппу();
		ГруппаОбъект.Родитель = ТекГруппа;
		ГруппаОбъект.Наименование = НаименГруппы.Значение;
		ГруппаОбъект.Записать();
		ТекГруппа = ГруппаОбъект.Ссылка;
		КонецЕсли; 
	КонецЦикла;
Возврат(ТекГруппа); 
КонецФункции

&НаСервере
Функция СоздатьДокумент(БазаПроизв,Документ)
СписокГрупп = Новый СписокЗначений;

ТекРодитель = Документ.Родитель;
	Пока Не ТекРодитель.Пустая() Цикл	
	СписокГрупп.Вставить(0,СокрЛП(ТекРодитель.Наименование));
	ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
Группа = ПолучитьГруппуДокумента(БазаПроизв,СписокГрупп);
Док = БазаПроизв.Справочники.Документация.СоздатьЭлемент();
//Док.ВидДокумента = БазаПроизв.Перечисления.ВидыДокументов.Получить(Перечисления.ВидыДокументов.Индекс(Документ.ВидДокумента));
ВД = XMLстрока(Документ.ВидДокумента);
	Если ЗначениеЗаполнено(ВД) Тогда
	Док.ВидДокумента = БазаПроизв.Перечисления.ВидыДокументов[XMLстрока(Документ.ВидДокумента)];
	КонецЕсли;
Док.Наименование = СокрЛП(Документ.Наименование);
Док.ИмяФайла = Документ.ИмяФайла;
Док.Извещение = Документ.Извещение;
Док.Комментарий = Документ.Комментарий;
Док.Родитель = Группа;
Док.Записать();
Возврат(Док.Ссылка);
КонецФункции

&НаСервере
Функция ПолучитьГруппуМатериала(БазаПроизв,СписокГрупп)
ТекГруппа = БазаПроизв.Справочники.Материалы.ПустаяСсылка();
	Для каждого НаименГруппы Из СписокГрупп Цикл	
	Группа = БазаПроизв.Справочники.Материалы.НайтиПоНаименованию(НаименГруппы.Значение,Истина,ТекГруппа);
		Если Группа.ЭтоГруппа Тогда	
		ТекГруппа = Группа;
		Иначе
		ГруппаОбъект = БазаПроизв.Справочники.Материалы.СоздатьГруппу();
		ГруппаОбъект.Родитель = ТекГруппа;
		ГруппаОбъект.Наименование = НаименГруппы.Значение;
		ГруппаОбъект.Записать();
		ТекГруппа = ГруппаОбъект.Ссылка;
		КонецЕсли; 
	КонецЦикла;
Возврат(ТекГруппа); 
КонецФункции 

&НаСервере
Процедура СоздатьОсновныеЕдиницыИзмерений(БазаПроизв,Элемент,Элемент_БП)
Выборка = Справочники.ОсновныеЕдиницыИзмерений.Выбрать(,Элемент);
	Пока Выборка.Следующий() Цикл
	ОснЕИ_БП = БазаПроизв.Справочники.ОсновныеЕдиницыИзмерений.СоздатьЭлемент();
	ОснЕИ_БП.Владелец = Элемент_БП;
	ОснЕИ_БП.Наименование = Выборка.ЕдиницаИзмерения.Наименование;
	ОснЕИ_БП.ЕдиницаИзмерения = БазаПроизв.Справочники.ЕдиницыИзмерений.НайтиПоНаименованию(СокрЛП(Элемент.ЕдиницаИзмерения.Наименование),Истина);
	ОснЕИ_БП.Коэффициент = Выборка.Коэффициент;
	ОснЕИ_БП.Записать();
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Функция СоздатьМатериал(БазаПроизв,Материал)
СписокГрупп = Новый СписокЗначений;

ТекРодитель = Материал.Родитель;
	Пока Не ТекРодитель.Пустая() Цикл	
	СписокГрупп.Вставить(0,СокрЛП(ТекРодитель.Наименование));
	ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
Группа = ПолучитьГруппуМатериала(БазаПроизв,СписокГрупп);
Мат = БазаПроизв.Справочники.Материалы.СоздатьЭлемент();
Мат.Наименование = СокрЛП(Материал.Наименование);
Мат.ПолнНаименование = Материал.ПолнНаименование;
Мат.ПричинаВнесения = Материал.ПричинаВнесения;
Мат.Комментарий = Материал.Комментарий;
Мат.ЕдиницаИзмерения = БазаПроизв.Справочники.ЕдиницыИзмерений.НайтиПоНаименованию(СокрЛП(Материал.ЕдиницаИзмерения.Наименование),Истина);
Мат.Родитель = Группа;
	Если Не Материал.ИмяФайла.Пустая() Тогда
	Док = БазаПроизв.Справочники.Документация.НайтиПоНаименованию(СокрЛП(Материал.ИмяФайла.Наименование),Истина);
		Если Док.Пустая() Тогда
		Док = СоздатьДокумент(БазаПроизв,Материал.ИмяФайла);
		КонецЕсли;	
	Мат.ИмяФайла = Док;
	КонецЕсли;
Мат.Записать();
СоздатьОсновныеЕдиницыИзмерений(БазаПроизв,Материал,Мат.Ссылка);
Мат.ОсновнаяЕдиницаИзмерения = БазаПроизв.Справочники.ОсновныеЕдиницыИзмерений.НайтиПоНаименованию(СокрЛП(Материал.ОсновнаяЕдиницаИзмерения.Наименование),Истина,,Мат.Ссылка);
Мат.Записать();
СМ_БП = БазаПроизв.РегистрыСведений.СтатусыМПЗ.СоздатьМенеджерЗаписи();
СМ_БП.Период = ТекущаяДата();
СМ_БП.МПЗ = Мат.Ссылка;
СМ_БП.Статус = Перечисления.СтатусыМПЗ[XMLстрока(ПолучитьСтатус(Материал))];
СМ_БП.Записать();
Возврат(Мат.Ссылка);
КонецФункции

&НаСервере
Функция ПолучитьГруппуНоменклатуры(БазаПроизв,СписокГрупп)
ТекГруппа = БазаПроизв.Справочники.Номенклатура.ПустаяСсылка();
	Для каждого НаименГруппы Из СписокГрупп Цикл	
	Группа = БазаПроизв.Справочники.Номенклатура.НайтиПоНаименованию(НаименГруппы.Значение,Истина,ТекГруппа);
		Если Группа.ЭтоГруппа Тогда	
		ТекГруппа = Группа;
		Иначе
		ГруппаОбъект = БазаПроизв.Справочники.Номенклатура.СоздатьГруппу();
		ГруппаОбъект.Родитель = ТекГруппа;
		ГруппаОбъект.Наименование = НаименГруппы.Значение;
		ГруппаОбъект.Записать();
		ТекГруппа = ГруппаОбъект.Ссылка;
		КонецЕсли; 
	КонецЦикла;
Возврат(ТекГруппа); 
КонецФункции 

&НаСервере
Процедура ПроверитьАналоги(БазаПроизв,НР,НР_БП)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	АналогиНормРасходов.Ссылка КАК Ссылка,
	|	АналогиНормРасходов.ВидЭлемента КАК ВидЭлемента,
	|	АналогиНормРасходов.Элемент КАК Элемент,
	|	АналогиНормРасходов.Наименование КАК Наименование,
	|	АналогиНормРасходов.Примечание КАК Примечание,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних КАК НормыРасходовСрезПоследних
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.АналогиНормРасходов КАК АналогиНормРасходов
	|		ПО НормыРасходовСрезПоследних.НормаРасходов = АналогиНормРасходов.Владелец
	|ГДЕ
	|	АналогиНормРасходов.Владелец = &Владелец
	|	И НормыРасходовСрезПоследних.Норма > 0";
Запрос.УстановитьПараметр("Владелец", НР);

РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
	Пока ВыборкаНР.Следующий() Цикл
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Номенклатура") Тогда
		Выборка = ТаблицаЭтапов.НайтиСтроки(Новый Структура("ЭтапСпецификации",ВыборкаНР.Элемент));
			Если Выборка.Количество() > 0 Тогда
			Наименование = СокрЛП(Выборка[0].Наименование);
			Иначе	
			Наименование = СокрЛП(ВыборкаНР.Элемент.Наименование);
			КонецЕсли; 
		ПФ = БазаПроизв.Справочники.Номенклатура.НайтиПоНаименованию(Наименование,Истина);
			Если ПФ.Пустая() Тогда
			Сообщить(Наименование+" - не найден в справочнике Номенклатуры!");
			Продолжить;
			КонецЕсли;
		//ВидЭлемента = БазаПроизв.Перечисления.ВидыЭлементовНормРасходов.Получить(Перечисления.ВидыЭлементовНормРасходов.Индекс(ВыборкаНР.ВидЭлемента));
		ВидЭлемента = БазаПроизв.Перечисления.ВидыЭлементовНормРасходов[XMLстрока(ВыборкаНР.ВидЭлемента)];
		АНР = БазаПроизв.Справочники.АналогиНормРасходов.СоздатьЭлемент();
		АНР.Владелец = НР_БП;
		АНР.ВидЭлемента = ВидЭлемента;
		АНР.Приоритет = ВыборкаНР.Ссылка.Приоритет;
		АНР.Элемент = ПФ;
		АНР.Наименование = ""+ВыборкаНР.ВидЭлемента+", "+СокрЛП(ПФ.Наименование);
		АНР.ОграниченноеИспользование = ВыборкаНР.Ссылка.ОграниченноеИспользование;
		АНР.Примечание = ВыборкаНР.Примечание;
		АНР.Записать();
		РНР = БазаПроизв.РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
		РНР.Период = ТекущаяДата();
		РНР.НормаРасходов = АНР.Ссылка;
		РНР.Норма = ВыборкаНР.Норма;
		РНР.Записать();
		ИначеЕсли ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Материалы") Тогда
		Мат = БазаПроизв.Справочники.Материалы.НайтиПоНаименованию(СокрЛП(ВыборкаНР.Элемент.Наименование),Истина);
			Если Мат.Пустая() Тогда
			Мат = СоздатьМатериал(БазаПроизв,ВыборкаНР.Элемент);
			КонецЕсли;		
		АНР = БазаПроизв.Справочники.АналогиНормРасходов.СоздатьЭлемент();
		АНР.Владелец = НР_БП;
		АНР.ВидЭлемента = БазаПроизв.Перечисления.ВидыЭлементовНормРасходов.Материал;
		АНР.Приоритет = ВыборкаНР.Ссылка.Приоритет;
		АНР.Элемент = Мат;
		АНР.Наименование = ВыборкаНР.Наименование;
		АНР.ОграниченноеИспользование = ВыборкаНР.Ссылка.ОграниченноеИспользование;
		АНР.Примечание = ВыборкаНР.Примечание;
		АНР.Записать();
		РНР = БазаПроизв.РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
		РНР.Период = ТекущаяДата();
		РНР.НормаРасходов = АНР.Ссылка;
		РНР.Норма = ВыборкаНР.Норма;
		РНР.Записать();
		ИначеЕсли ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Документация") Тогда
		Док = БазаПроизв.Справочники.Документация.НайтиПоНаименованию(СокрЛП(ВыборкаНР.Элемент.Наименование),Истина);
			Если Док.Пустая() Тогда
			Док = СоздатьДокумент(БазаПроизв,ВыборкаНР.Элемент);
			КонецЕсли;
		//ВидЭлемента = БазаПроизв.Перечисления.ВидыЭлементовНормРасходов.Получить(Перечисления.ВидыЭлементовНормРасходов.Индекс(ВыборкаНР.ВидЭлемента));
		ВидЭлемента = БазаПроизв.Перечисления.ВидыЭлементовНормРасходов[XMLстрока(ВыборкаНР.ВидЭлемента)];
		АНР = БазаПроизв.Справочники.АналогиНормРасходов.СоздатьЭлемент();
		АНР.Владелец = НР_БП;
		АНР.ВидЭлемента = ВидЭлемента;
		АНР.Приоритет = ВыборкаНР.Ссылка.Приоритет;
		АНР.Элемент = Док;
		АНР.Наименование = ВыборкаНР.Наименование;
		АНР.ОграниченноеИспользование = ВыборкаНР.Ссылка.ОграниченноеИспользование;
		АНР.Примечание = ВыборкаНР.Примечание;
		АНР.Записать();
		РНР = БазаПроизв.РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
		РНР.Период = ТекущаяДата();
		РНР.НормаРасходов = АНР.Ссылка;
		РНР.Норма = ВыборкаНР.Норма;
		РНР.Записать();
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура КопироватьЭтапСпецификации(БазаПроизв,ТЧ)
	Если ЗначениеЗаполнено(ТЧ.Наименование) Тогда
	Возврат;
	КонецЕсли;
СписокГрупп = Новый СписокЗначений;
Запрос = Новый Запрос;

ТекРодитель = ТЧ.ЭтапСпецификации.Родитель;
	Пока Не ТекРодитель.Пустая() Цикл	
	СписокГрупп.Вставить(0,СокрЛП(ТекРодитель.Наименование));
	ТекРодитель = ТекРодитель.Родитель;
	КонецЦикла;
Группа = ПолучитьГруппуНоменклатуры(БазаПроизв,СписокГрупп);
Наименование = глНаименованиеВСкобкахБезЭтапа(ТЧ.ЭтапСпецификации.Наименование);
Номен = БазаПроизв.Справочники.Номенклатура.СоздатьЭлемент();
Нумератор = БазаПроизв.Справочники.НумераторСпецификаций.НайтиПоКоду(Лев(СокрЛП(ТЧ.ЭтапСпецификации.Наименование),3));
	Если Нумератор.Пустая() Тогда
	Номен.Наименование = СокрЛП(ТЧ.ЭтапСпецификации.Наименование);
	Иначе	
	 	Если ЗначениеЗаполнено(ПрефиксОбозначения) Тогда
		Номен.Наименование = ""+Нумератор.Код+"."+Формат(Нумератор.СледующийНомер,"ЧЦ=6; ЧВН=; ЧГ=")+ПрефиксОбозначения+" ("+БазаПроизв.ПолучитьПрефиксЭтапаПроизводства(Группа)+"-"+Наименование+")";
		Иначе
		Номен.Наименование = ""+Нумератор.Код+"."+Формат(Нумератор.СледующийНомер,"ЧЦ=6; ЧВН=; ЧГ=")+" ("+БазаПроизв.ПолучитьПрефиксЭтапаПроизводства(Группа)+"-"+Наименование+")";
		КонецЕсли;
	НовыйНумератор = Нумератор.ПолучитьОбъект();
	НовыйНумератор.СледующийНомер = НовыйНумератор.СледующийНомер + 1;
	НовыйНумератор.Записать();	
	КонецЕсли;
Номен.ПолнНаименование = Номен.Наименование;
Номен.Комментарий = ТЧ.ЭтапСпецификации.Комментарий;
Номен.ЕдиницаИзмерения = БазаПроизв.Справочники.ЕдиницыИзмерений.НайтиПоНаименованию(СокрЛП(ТЧ.ЭтапСпецификации.ЕдиницаИзмерения.Наименование),Истина);
Номен.Родитель = Группа;
Номен.ДатаСозданияСпецификации = ТекущаяДата();
Номен.Записать();
СоздатьОсновныеЕдиницыИзмерений(БазаПроизв,ТЧ.ЭтапСпецификации,Номен.Ссылка);
Номен.ОсновнаяЕдиницаИзмерения = БазаПроизв.Справочники.ОсновныеЕдиницыИзмерений.НайтиПоНаименованию(СокрЛП(ТЧ.ЭтапСпецификации.ОсновнаяЕдиницаИзмерения.Наименование),Истина,,Номен.Ссылка);
Номен.Записать();
ВыборкаТЭ = ТаблицаЭтапов.НайтиСтроки(Новый Структура("ЭтапСпецификации",ТЧ.ЭтапСпецификации));
	Для к = 0 по ВыборкаТЭ.ВГраница() Цикл
	ВыборкаТЭ[к].Наименование = СокрЛП(Номен.Наименование);
	КонецЦикла; 
//ТЧ.Наименование = СокрЛП(Номен.Наименование);

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходов.Ссылка КАК Ссылка,
	|	НормыРасходов.Элемент КАК Элемент,
	|	НормыРасходов.ВидЭлемента КАК ВидЭлемента,
	|	НормыРасходов.Позиция КАК Позиция,
	|	НормыРасходов.Наименование КАК Наименование,
	|	НормыРасходов.Примечание КАК Примечание,
	|	НормыРасходовСрезПоследних.Норма КАК Норма
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(&НаДату, ) КАК НормыРасходовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыРасходов КАК НормыРасходов
	|		ПО НормыРасходовСрезПоследних.НормаРасходов = НормыРасходов.Ссылка
	|ГДЕ
	|	НормыРасходов.ПометкаУдаления = ЛОЖЬ
	|	И НормыРасходов.Владелец = &Владелец
	|	И НормыРасходовСрезПоследних.Норма > 0";
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
Запрос.УстановитьПараметр("Владелец", ТЧ.ЭтапСпецификации);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
	Пока ВыборкаНР.Следующий() Цикл
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Номенклатура") Тогда
		Выборка = ТаблицаЭтапов.НайтиСтроки(Новый Структура("ЭтапСпецификации",ВыборкаНР.Элемент));
			Если Выборка.Количество() > 0 Тогда
			Наименование = СокрЛП(Выборка[0].Наименование);
			Иначе	
			Наименование = СокрЛП(ВыборкаНР.Элемент.Наименование);
			КонецЕсли; 
		ПФ = БазаПроизв.Справочники.Номенклатура.НайтиПоНаименованию(Наименование,Истина);
			Если ПФ.Пустая() Тогда
			Сообщить(Наименование+" - не найден в справочнике Номенклатуры!");
			Продолжить;
			КонецЕсли;
		//ВидЭлемента = БазаПроизв.Перечисления.ВидыЭлементовНормРасходов.Получить(Перечисления.ВидыЭлементовНормРасходов.Индекс(ВыборкаНР.ВидЭлемента));
		ВидЭлемента = БазаПроизв.Перечисления.ВидыЭлементовНормРасходов[XMLстрока(ВыборкаНР.ВидЭлемента)];
		НР = БазаПроизв.Справочники.НормыРасходов.СоздатьЭлемент();
		НР.Владелец = Номен.Ссылка;
		НР.ВидЭлемента = ВидЭлемента;
		НР.Позиция = ВыборкаНР.Позиция;
		НР.Элемент = ПФ;
		НР.Наименование = ""+ВыборкаНР.ВидЭлемента+", "+СокрЛП(ПФ.Наименование);
		НР.Примечание = ВыборкаНР.Примечание;
		НР.Записать();
		РНР = БазаПроизв.РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
		РНР.Период = ТекущаяДата();
		РНР.НормаРасходов = НР.Ссылка;
		РНР.Норма = ВыборкаНР.Норма;
		РНР.Записать();
			Если САналогами Тогда
			ПроверитьАналоги(БазаПроизв,ВыборкаНР.Ссылка,НР.Ссылка);			
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Материалы") Тогда
		Мат = БазаПроизв.Справочники.Материалы.НайтиПоНаименованию(СокрЛП(ВыборкаНР.Элемент.Наименование),Истина);
			Если Мат.Пустая() Тогда
			Мат = СоздатьМатериал(БазаПроизв,ВыборкаНР.Элемент);
			КонецЕсли;		
		НР = БазаПроизв.Справочники.НормыРасходов.СоздатьЭлемент();
		НР.Владелец = Номен.Ссылка;
		НР.ВидЭлемента = БазаПроизв.Перечисления.ВидыЭлементовНормРасходов.Материал;
		НР.Позиция = ВыборкаНР.Позиция;
		НР.Элемент = Мат;
		НР.Наименование = ВыборкаНР.Наименование;
		НР.Примечание = ВыборкаНР.Примечание;
		НР.Записать();
		РНР = БазаПроизв.РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
		РНР.Период = ТекущаяДата();
		РНР.НормаРасходов = НР.Ссылка;
		РНР.Норма = ВыборкаНР.Норма;
		РНР.Записать();
			Если САналогами Тогда
			ПроверитьАналоги(БазаПроизв,ВыборкаНР.Ссылка,НР.Ссылка);			
			КонецЕсли;
		ИначеЕсли ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Документация") Тогда
		Док = БазаПроизв.Справочники.Документация.НайтиПоНаименованию(СокрЛП(ВыборкаНР.Элемент.Наименование),Истина);
			Если Док.Пустая() Тогда
			Док = СоздатьДокумент(БазаПроизв,ВыборкаНР.Элемент);
			КонецЕсли;
		//ВидЭлемента = БазаПроизв.Перечисления.ВидыЭлементовНормРасходов.Получить(Перечисления.ВидыЭлементовНормРасходов.Индекс(ВыборкаНР.ВидЭлемента));
		ВидЭлемента = БазаПроизв.Перечисления.ВидыЭлементовНормРасходов[XMLстрока(ВыборкаНР.ВидЭлемента)];
		НР = БазаПроизв.Справочники.НормыРасходов.СоздатьЭлемент();
		НР.Владелец = Номен.Ссылка;
		НР.ВидЭлемента = ВидЭлемента;
		НР.Позиция = ВыборкаНР.Позиция;
		НР.Элемент = Док;
		НР.Наименование = ВыборкаНР.Наименование;
		НР.Примечание = ВыборкаНР.Примечание;
		НР.Записать();
		РНР = БазаПроизв.РегистрыСведений.НормыРасходов.СоздатьМенеджерЗаписи();
		РНР.Период = ТекущаяДата();
		РНР.НормаРасходов = НР.Ссылка;
		РНР.Норма = ВыборкаНР.Норма;
		РНР.Записать();
			Если САналогами Тогда
			ПроверитьАналоги(БазаПроизв,ВыборкаНР.Ссылка,НР.Ссылка);			
			КонецЕсли;
		КонецЕсли;		 		
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура КопироватьСпецификациюНаСервере()
БазаПроизв = ОбщийМодульСинхронизации.УстановитьCOMСоединение(БазаДанных);
	Если БазаПроизв = Неопределено Тогда
	Сообщить("Не открыто соединение с выбранной базой!");
	Возврат;
	КонецЕсли;
		Попытка
		БазаПроизв.НачатьТранзакцию();БазаПроизв.ПараметрыСеанса.АктивнаТранзакция = БазаПроизв.ПараметрыСеанса.АктивнаТранзакция + 1;	
			Для каждого ТЧ Из ТаблицаЭтапов Цикл
			КопироватьЭтапСпецификации(БазаПроизв,ТЧ);
			КонецЦикла;
		БазаПроизв.ЗафиксироватьТранзакцию();БазаПроизв.ПараметрыСеанса.АктивнаТранзакция = БазаПроизв.ПараметрыСеанса.АктивнаТранзакция-1;Если БазаПроизв.ПараметрыСеанса.АктивнаТранзакция = 0 тогда БазаПроизв.СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Исключение
		М = БазаПроизв.NewObject("Массив");
		ХЗ = БазаПроизв.NewObject("ХранилищеЗначения",М);
		БазаПроизв.ОтменитьТранзакцию();БазаПроизв.ПараметрыСеанса.АктивнаТранзакция = БазаПроизв.ПараметрыСеанса.АктивнаТранзакция-1;БазаПроизв.ПараметрыСеанса.ОбъектыСозданныеВТранзакции = ХЗ;
		Сообщить(ОписаниеОшибки());
		КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура КопироватьСпецификацию(Команда)
Состояние("Обработка",,"Копирование спецификации...");
КопироватьСпецификациюНаСервере();
КонецПроцедуры

&НаСервере
Процедура РаскрытьНаПФ(БазаПроизв,ЭтапСпецификации)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	НормыРасходов.Элемент
	|ИЗ
	|	РегистрСведений.НормыРасходов.СрезПоследних(&НаДату, ) КАК НормыРасходовСрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.НормыРасходов КАК НормыРасходов
	|		ПО НормыРасходовСрезПоследних.НормаРасходов = НормыРасходов.Ссылка
	|ГДЕ
	|	НормыРасходов.ПометкаУдаления = ЛОЖЬ
	|	И НормыРасходов.Владелец = &Владелец
	|	И ТИПЗНАЧЕНИЯ(НормыРасходов.Элемент) = ТИП(Справочник.Номенклатура)
	|	И НормыРасходовСрезПоследних.Норма > 0";
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
Запрос.УстановитьПараметр("Владелец", ЭтапСпецификации);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаНР = РезультатЗапроса.Выбрать();
	Пока ВыборкаНР.Следующий() Цикл
		Если БазаПроизв.Справочники.Номенклатура.НайтиПоНаименованию(СокрЛП(ВыборкаНР.Элемент.Наименование),Истина).Пустая() Тогда
		ТЧ = ТаблицаЭтапов.Вставить(0);
		ТЧ.ЭтапСпецификации = ВыборкаНР.Элемент;
		КонецЕсли;
	РаскрытьНаПФ(БазаПроизв,ВыборкаНР.Элемент);				
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПолучитьЭтапыСпецификации()
БазаПроизв = ОбщийМодульСинхронизации.УстановитьCOMСоединение(БазаДанных);
	Если БазаПроизв = Неопределено Тогда
	Сообщить("Не открыто соединение с выбранной базой!");
	Возврат;
	КонецЕсли;
ТаблицаЭтапов.Очистить();
	Если БазаПроизв.Справочники.Номенклатура.НайтиПоНаименованию(СокрЛП(Спецификация.Наименование),Истина).Пустая() Тогда
	ТЧ = ТаблицаЭтапов.Добавить();
	ТЧ.ЭтапСпецификации = Спецификация;
	РаскрытьНаПФ(БазаПроизв,Спецификация);
	Иначе
	Сообщить("Специкация существует в другой базе!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СпецификацияПриИзмененииНаСервере()
ПолучитьЭтапыСпецификации();
КонецПроцедуры

&НаКлиенте
Процедура СпецификацияПриИзменении(Элемент)
СпецификацияПриИзмененииНаСервере();
КонецПроцедуры
