
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Объект.Исполнитель = ПараметрыСеанса.Пользователь;
	Если Объект.Исполнитель.Пустая() Тогда
	Элементы.СписокЛинеек.Доступность = Ложь;
	Сообщить("Вы не внесены в справочник Сотрудников! Работа невозможна!");
	КонецЕсли; 
флСортировка = 1;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
    ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
    Сообщить(ТекстСообщения);
	КонецЕсли;
		Если СписокЛинеек.Количество() > 0 Тогда
		СписокЛинеекПриИзменении(Неопределено);
		КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоСтендуНаСервере()
тДеревоЗаданий = РеквизитФормыВЗначение("ДеревоЗаданий");
тДеревоЗаданий.Строки.Очистить();

Запрос = Новый Запрос;
ЗапросСП = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Изделие,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.БарКод,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Линейка КАК Линейка
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Линейка В ИЕРАРХИИ(&СписокЛинеек)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто.ГруппаРабочихМест.Префикс ПОДОБНО &Префикс
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Изделие.Товар.Наименование,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.Номер
	|ИТОГИ ПО
	|	Линейка";
Запрос.УстановитьПараметр("СписокЛинеек",СписокЛинеек);
Запрос.УстановитьПараметр("Префикс","СТ%");
Результат = Запрос.Выполнить();
ВыборкаЛинейки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЛинейки.Следующий() Цикл
	СтрЛинейка = тДеревоЗаданий.Строки.Добавить();
	СтрЛинейка.Линейка = ВыборкаЛинейки.Линейка;
	ВыборкаДетальныеЗаписи = ВыборкаЛинейки.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		СтрПЗ = СтрЛинейка.Строки.Добавить();
		СтрПЗ.Линейка = ВыборкаДетальныеЗаписи.ПЗ.Линейка;
		СтрПЗ.Ремонтная = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.Ремонт;
		СтрПЗ.Ремонт = ВыборкаДетальныеЗаписи.Ремонт;
		СтрПЗ.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
		СтрПЗ.ВозвратнаяТара = ВыборкаДетальныеЗаписи.ПЗ.ВозвратнаяТара;
		СтрПЗ.Товар = СокрЛП(ВыборкаДетальныеЗаписи.Изделие.Товар.Наименование);
		СтрПЗ.РабочееМесто = ВыборкаДетальныеЗаписи.РабочееМесто;
			Если Не ВыборкаДетальныеЗаписи.Ремонт Тогда 
			ЗапросСП.Текст = 
				"ВЫБРАТЬ
				|	СтендовыйПрогонСрезПоследних.ДатаПоступления,
				|	СтендовыйПрогонСрезПоследних.ДатаПостановки,
				|	СтендовыйПрогонСрезПоследних.Прогон,
				|	СтендовыйПрогонСрезПоследних.Стенд
				|ИЗ
				|	РегистрСведений.СтендовыйПрогон.СрезПоследних КАК СтендовыйПрогонСрезПоследних
				|ГДЕ
				|	СтендовыйПрогонСрезПоследних.ПЗ = &ПЗ
				|	И СтендовыйПрогонСрезПоследних.ДатаСнятия = ДАТАВРЕМЯ(1,1,1,0,0,0)";		
			ЗапросСП.УстановитьПараметр("ПЗ", ВыборкаДетальныеЗаписи.ПЗ);	
			РезультатЗапросаСП = ЗапросСП.Выполнить();	
			ВыборкаДетальныеЗаписиСП = РезультатЗапросаСП.Выбрать();	
				Пока ВыборкаДетальныеЗаписиСП.Следующий() Цикл
				СтрПЗ.Прогон = ВыборкаДетальныеЗаписиСП.Прогон;
				СтрПЗ.Постановка = ВыборкаДетальныеЗаписиСП.ДатаПостановки;				
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
ЗначениеВРеквизитФормы(тДеревоЗаданий, "ДеревоЗаданий");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПоСтенду() Экспорт
ПолучитьДанныеПоСтендуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПроверитьСписокЛинеек()
СписокУдаления  = Новый СписокЗначений;
	
	Для каждого Лин Из СписокЛинеек Цикл	
		Если Лин.Значение.Пустая() Тогда
		СписокУдаления.Добавить(Лин);
		КонецЕсли; 
	КонецЦикла; 
		Для каждого Лин Из СписокУдаления Цикл	
		СписокЛинеек.Удалить(Лин.Значение);
		КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(СписокЛинеек[0].Значение) Тогда	
	Возврат(Истина);
	Иначе
	СписокЛинеек.Очистить();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СписокЛинеекПриИзменении(Элемент)
	Если Не МожноРаботатьВАРМ() Тогда
	Возврат;
	КонецЕсли;
ПроверитьСписокЛинеек();
ПолучитьДанныеПоСтендуНаСервере();
	Если Объект.ИнтервалОбновления > 0 Тогда
	ПодключитьОбработчикОжидания("ПолучитьДанныеПоСтенду", Объект.ИнтервалОбновления*60);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОбновленияПриИзменении(Элемент)
ОтключитьОбработчикОжидания("ПолучитьДанныеПоСтенду");
	Если Объект.ИнтервалОбновления > 0 Тогда
	ПодключитьОбработчикОжидания("ПолучитьДанныеПоСтенду", Объект.ИнтервалОбновления*60);
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Функция НайтиЭтапСтенд(Спецификация,ЭтапСТ)
НР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н(Спецификация,ТекущаяДата());
	Пока НР.Следующий() Цикл
		Если НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа Тогда
			Если Найти(НР.Элемент.Наименование,"СТ-") > 0 Тогда
			ЭтапСТ = НР.Элемент;
			Прервать;
			Иначе
			НайтиЭтапСтенд(НР.Элемент,ЭтапСТ);
			КонецЕсли; 	
		КонецЕсли; 
	КонецЦикла;
Возврат(ЭтапСТ);	
КонецФункции

&НаСервере
Функция ПолучитьНомерРазукомплектовки(ПЗ)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Разукомплектовка.Ссылка
	|ИЗ
	|	Документ.Разукомплектовка КАК Разукомплектовка
	|ГДЕ
	|	Разукомплектовка.ДокументОснование = &ДокументОснование";
Запрос.УстановитьПараметр("ДокументОснование", ПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
Возврат(ВыборкаДетальныеЗаписи.Количество()+1); 
КонецФункции

&НаСервере
Процедура ПолучитьЭтапыСпецификации(ПЗ,РабочееМесто)
Этапы.Очистить();
Объект.Спецификация.Очистить();
ОбщийМодульВызовСервера.ПолучитьТаблицуЭтаповСпецификации(Этапы,ПЗ.Изделие,1,Ложь,ПЗ.ДатаЗапуска);
	Для каждого ТЧ Из Этапы Цикл
		Если РабочееМесто.ТабличнаяЧасть.Найти(ТЧ.ГруппаНоменклатуры,"ГруппаНоменклатуры") = Неопределено Тогда
		Продолжить;
		КонецЕсли;
	ОбщийМодульВызовСервера.ПолучитьСпецификациюСАналогами(Объект.Спецификация,ПЗ,ТЧ.ЭтапСпецификации,ТЧ.ЭтапСпецификации,ТЧ.Количество);	
	КонецЦикла;
Объект.Спецификация.Сортировать("ЭтапСпецификации,ВидМПЗ,Позиция,МПЗ");
КонецПроцедуры

&НаСервере
Функция ПолучитьВидРемонтаОбщий()
Возврат(Перечисления.ВидыРемонта.Общий);	
КонецФункции

&НаСервере
Функция ПечатьРемонтнойБирки(ПЗ,Комментарии,Количество,НомерРемонтнойТары)
ТабДок = Новый ТабличныйДокумент;

Макет = ПолучитьОбщийМакет("Бирка_Ремонтная");
ОблБирка = Макет.ПолучитьОбласть("Бирка");
ОблБирка.Параметры.НомерМТК = ПЗ.ДокументОснование.Номер;
ОблБирка.Параметры.Линейка = СокрЛП(ПЗ.ДокументОснование.Линейка.Наименование);
ОблБирка.Параметры.Наименование = СокрЛП(ПЗ.Изделие.Наименование);
ОблБирка.Параметры.Количество = Количество;
ОблБирка.Параметры.ВозвратнаяТара = НомерРемонтнойТары;
ОблБирка.Параметры.ПричинаРемонта = Комментарии.ПричинаРемонта;
ОблБирка.Параметры.Комментарий = Комментарии.Комментарий;
ТабДок.Вывести(ОблБирка);
Возврат(ТабДок);
КонецФункции

&НаСервере
Функция ПолучитьСписокПЗПоВозвратнойТаре(ВозвратнаяТара)
СписокПЗ = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Изделие
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Линейка В ИЕРАРХИИ(&СписокЛинеек)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто.ГруппаРабочихМест.Префикс ПОДОБНО &Префикс
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ВозвратнаяТара = &ВозвратнаяТара
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.Номер";
Запрос.УстановитьПараметр("СписокЛинеек",СписокЛинеек);
Запрос.УстановитьПараметр("Префикс","СТ%");
Запрос.УстановитьПараметр("ВозвратнаяТара",ВозвратнаяТара);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокПЗ.Добавить(ВыборкаДетальныеЗаписи.ПЗ,ВыборкаДетальныеЗаписи.ПЗ.Номер+" ("+СокрЛП(ВыборкаДетальныеЗаписи.Изделие.Наименование)+")");
	КонецЦикла;
Возврат(СписокПЗ);
КонецФункции 

&НаСервере
Функция ПолучитьРабочееМестоВПЗ(ПЗ)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ = &ПЗ";
Запрос.УстановитьПараметр("ПЗ",ПЗ);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.РабочееМесто);
	КонецЦикла;
КонецФункции

&НаСервере
Функция ПолучитьИзделиеРемонта(РабочееМесто)
	Для каждого ТЧ_Этап Из Этапы Цикл
	ЭтапАРМ = РабочееМесто.ТабличнаяЧасть.Найти(ТЧ_Этап.ГруппаНоменклатуры,"ГруппаНоменклатуры");
		Если ЭтапАРМ = Неопределено Тогда
		Продолжить;
		ИначеЕсли ЭтапАРМ.Комплектация Тогда
	    Продолжить;
		КонецЕсли;
			Если ТЧ_Этап.ЭтапСпецификации.Виртуальный Тогда
			Продолжить;
			КонецЕсли;
	Возврат(Новый Структура("Изделие,Количество",ТЧ_Этап.ЭтапСпецификации,ТЧ_Этап.Количество));
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура Ремонт(Команда,НомерВТ = "")
	Если НомерВТ = "" Тогда
		Если Не ВвестиСтроку(НомерВТ,"Введите номер возвратной тары",4,Ложь) Тогда	
		Сообщить("Не введён номер возвратной тары!");
		Возврат;
		КонецЕсли;
	КонецЕсли;
СписокПЗ = ПолучитьСписокПЗПоВозвратнойТаре(НомерВТ);
	Если СписокПЗ.ОтметитьЭлементы("Выберите ПЗ для отправки в ремонт") Тогда
	Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборПричинРемонта",Новый Структура("РабочееМесто",ПолучитьРабочееМестоВПЗ(СписокПЗ[0].Значение)));
		Если Результат <> Неопределено Тогда
		НомерРемонтнойТары = "";
			Если ВвестиСтроку(НомерРемонтнойТары,"Введите номер ремонтной тары",4) Тогда
			КоличествоВРемонт = 0;
				Для каждого ПЗ Из СписокПЗ Цикл			
					Если ПЗ.Пометка Тогда
					КоличествоВРемонт = КоличествоВРемонт + 1;
					ТекущееРабочееМесто = ПолучитьРабочееМестоВПЗ(ПЗ.Значение);
					ПолучитьЭтапыСпецификации(ПЗ.Значение,ТекущееРабочееМесто);
					ОбщийМодульСозданиеДокументов.СоздатьРемонтнуюКарту(ПЗ.Значение,ТекущееРабочееМесто,ПолучитьИзделиеРемонта(ТекущееРабочееМесто),Объект.Исполнитель,ПолучитьВидРемонтаОбщий(),Результат,,НомерРемонтнойТары);				
					КонецЕсли; 
				КонецЦикла;
			ТД = ПечатьРемонтнойБирки(СписокПЗ[0].Значение,Результат,КоличествоВРемонт,НомерРемонтнойТары);
			ТД.Показать("Ремонтная бирка"); 
			КонецЕсли;
		КонецЕсли; 
	КонецЕсли;
ПолучитьДанныеПоСтендуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
ПолучитьДанныеПоСтендуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры

&НаСервере
Процедура ПолучитьФайлы(СписокФайлов,ПЗ,ЭтапСпецификации)
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_Д(ЭтапСпецификации,ПЗ.ДатаЗапуска);
	Пока ВыборкаНР.Следующий() Цикл
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Документация") Тогда
			Если Найти(ВыборкаНР.Ссылка.Владелец.Наименование,"СБ-") Тогда
				Если Найти(ВыборкаНР.Элемент.Наименование,"СБ") Тогда
				СписокФайлов.Добавить(ВыборкаНР.Элемент);
				КонецЕсли;
			КонецЕсли;				
		Иначе 
		ПолучитьФайлы(СписокФайлов,ПЗ,ВыборкаНР.Элемент);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьИзделие(ПЗ)
Возврат(ПЗ.Изделие);
КонецФункции 

&НаКлиенте
Процедура ОткрытьФайл(Команда)
СписокФайлов = Новый СписокЗначений;

ПолучитьФайлы(СписокФайлов,Элементы.ДеревоЗаданий.ТекущиеДанные.ПроизводственноеЗадание,ПолучитьИзделие(Элементы.ДеревоЗаданий.ТекущиеДанные.ПроизводственноеЗадание));
	Если СписокФайлов.Количество() > 0 Тогда
	Док = СписокФайлов[0].Значение;
		Если Док <> Неопределено Тогда
		ОбщийМодульКлиент.ОткрытьФайлДокумента(Док);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ВыпускРемонтнойМТКНаСервере(Стр)
ТЧ = ДеревоЗаданий.НайтиПоИдентификатору(Стр);
	Если ТЧ.ПроизводственноеЗадание.ДокументОснование.Ремонт Тогда
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		ДатаОкончания = ТекущаяДата();
		НаборЗаписей = РегистрыСведений.СтендовыйПрогон.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(ТЧ.ПроизводственноеЗадание);
		НаборЗаписей.Прочитать();
		    Для Каждого Запись Из НаборЗаписей Цикл
				Если Не ЗначениеЗаполнено(Запись.ДатаСнятия) Тогда
				Запись.ИсполнительСнятие = Объект.Исполнитель;
				Запись.ДатаСнятия = ДатаОкончания;
				Прервать; 
				КонецЕсли;  
		    КонецЦикла;
		НаборЗаписей.Записать();

		НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПЗ.Установить(ТЧ.ПроизводственноеЗадание);
		НаборЗаписей.Прочитать();
		    Для Каждого Запись Из НаборЗаписей Цикл 
		    	Если Запись.РабочееМесто = ТЧ.РабочееМесто Тогда
					Если Не ЗначениеЗаполнено(Запись.ДатаОкончания) Тогда
					Запись.Исполнитель = Объект.Исполнитель;
					Запись.ДатаОкончания = ДатаОкончания;					
					КонецЕсли; 
				Прервать;
				КонецЕсли;  
		    КонецЦикла;
		НаборЗаписей.Записать();
		ПолучитьЭтапыСпецификации(ТЧ.ПроизводственноеЗадание,ТЧ.РабочееМесто);
			Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(ТЧ.ПроизводственноеЗадание,ТЧ.РабочееМесто,Объект.Спецификация,Этапы,ДатаОкончания) Тогда
			Сообщить("Документ выпуска по производственному заданию "+ТЧ.ПроизводственноеЗадание.Номер+" не создан!");
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат(Ложь);
			КонецЕсли;
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Возврат(Истина);	
		Исключение
		Сообщить(ОписаниеОшибки());
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат(Ложь);	
		КонецПопытки;
	Иначе
	Сообщить("Выберите производственное задание, созданное по ремонтной МТК!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВыпускРемонтнойМТК(Команда)
	Если ВыпускРемонтнойМТКНаСервере(Элементы.ДеревоЗаданий.ТекущаяСтрока) Тогда
	ПолучитьДанныеПоСтендуНаСервере();
	ПоказатьОповещениеПользователя("ВНИМАНИЕ!",,"Передайте изделие ремонтнику",БиблиотекаКартинок.Пользователь);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиПоВозвратнойТареВДереве(КоллекцияСтрокДереваОдногоУровня,НомерВТ,Идентификатор = Неопределено) 
    Для Каждого Стр Из КоллекцияСтрокДереваОдногоУровня Цикл
        Если Стр.ВозвратнаяТара = НомерВТ Тогда
		Идентификатор = Стр.ПолучитьИдентификатор();
		Прервать;
        КонецЕсли;
    НайтиПоВозвратнойТареВДереве(Стр.ПолучитьЭлементы(),НомерВТ,Идентификатор);
    КонецЦикла;
Возврат(Идентификатор);   
КонецФункции

&НаСервере
Процедура НайтиПоВозвратнойТареНаСервере(НомерВТ) 
Элементы.ДеревоЗаданий.ТекущаяСтрока = НайтиПоВозвратнойТареВДереве(ДеревоЗаданий.ПолучитьЭлементы(),НомерВТ); 
КонецПроцедуры 

&НаКлиенте
Процедура НайтиПоВозвратнойТаре(Команда)
НомерВТ = "";
	Если ВвестиСтроку(НомерВТ,"Введите номер возвратной тары",4,Ложь) Тогда	
	НайтиПоВозвратнойТареНаСервере(НомерВТ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСпецификации(Команда)
ОткрытьФорму("Отчет.ПечатьСпецификации.Форма.ФормаОтчета",Новый Структура("ПЗ",Элементы.ДеревоЗаданий.ТекущиеДанные.ПроизводственноеЗадание));
КонецПроцедуры

&НаСервере
Функция ПечатьНомеровВТНаСервере(СписокИзделий)
ТабДок = Новый ТабличныйДокумент;
ТЗ = Новый ТаблицаЗначений;

ТЗ.Колонки.Добавить("Наименование");
ТЗ.Колонки.Добавить("ВозвратнаяТара");
ТЗ.Колонки.Добавить("Количество");

ОбъектЗн = РеквизитФормыВЗначение("Объект");
Макет = ОбъектЗн.ПолучитьМакет("Макет");

ОблШапка = Макет.ПолучитьОбласть("Шапка");
ОблСтрока = Макет.ПолучитьОбласть("Строка");

ТабДок.Вывести(ОблШапка);
	Для каждого Стр Из СписокИзделий Цикл
	ТЧ = ТЗ.Добавить();	
	ТЧ.Наименование = Стр.Значение;
	ТЧ.ВозвратнаяТара = Стр.Представление;
	ТЧ.Количество = 1;
	КонецЦикла;
ТЗ.Свернуть("Наименование,ВозвратнаяТара","Количество");
ТЗ.Сортировать("Наименование");
	Для каждого ТЧ Из ТЗ Цикл	
	ОблСтрока.Параметры.Наименование = ТЧ.Наименование;
	ОблСтрока.Параметры.ВозвратнаяТара = ТЧ.ВозвратнаяТара;
	ОблСтрока.Параметры.Количество = ТЧ.Количество;
	ТабДок.Вывести(ОблСтрока);
	КонецЦикла; 
Возврат(ТабДок);
КонецФункции

&НаСервере
Процедура ПолучитьПомеченныеЗаданияПодчиненные(тДерево,СписокИзделий)
   	Для Каждого тСтр Из тДерево.Строки Цикл
		Если тСтр.Пометка Тогда
		СписокИзделий.Добавить(тСтр.Товар,тСтр.ВозвратнаяТара);
		КонецЕсли;
   	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьПомеченныеЗадания()
СписокИзделий = Новый СписокЗначений;

тДерево = РеквизитФормыВЗначение("ДеревоЗаданий");
   	Для Каждого тСтр Из тДерево.Строки Цикл
	ПолучитьПомеченныеЗаданияПодчиненные(тСтр,СписокИзделий);
   	КонецЦикла;
Возврат(СписокИзделий);
КонецФункции

&НаКлиенте
Процедура РазвернутьДерево(Команда)
тЭлементы = ДеревоЗаданий.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
   Элементы.ДеревоЗаданий.Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
тЭлементы = ДеревоЗаданий.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
   Элементы.ДеревоЗаданий.Свернуть(тСтр.ПолучитьИдентификатор());
   КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеПодчиненныеНаСервере(тДерево)
   	Для Каждого тСтр Из тДерево.Строки Цикл
   	тСтр.Пометка = Ложь;
	ОтменитьВсеПодчиненныеНаСервере(тСтр);
   	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОтменитьВсеНаСервере()
тДерево = РеквизитФормыВЗначение("ДеревоЗаданий");
   	Для Каждого тСтр Из тДерево.Строки Цикл
	ОтменитьВсеПодчиненныеНаСервере(тСтр);
   	КонецЦикла;
ЗначениеВРеквизитФормы(тДерево, "ДеревоЗаданий");
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсе(Команда)
ОтменитьВсеНаСервере();
РазвернутьДерево(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ВыбратьВсеПодчиненныеНаСервере(тДерево,НомерВТ,Пометка)
   	Для Каждого тСтр Из тДерево.Строки Цикл
		Если тСтр.ВозвратнаяТара = НомерВТ Тогда
			Если Не тСтр.Ремонт Тогда
			тСтр.Пометка = Пометка;
			КонецЕсли;
		КонецЕсли; 
	ВыбратьВсеПодчиненныеНаСервере(тСтр,НомерВТ,Пометка);
   	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВыбратьПоНомеруВТНаСервере(Стр)
ТЧ = ДеревоЗаданий.НайтиПоИдентификатору(Стр);
тДерево = РеквизитФормыВЗначение("ДеревоЗаданий");
   	Для Каждого тСтр Из тДерево.Строки Цикл
	ВыбратьВсеПодчиненныеНаСервере(тСтр,ТЧ.ВозвратнаяТара,ТЧ.Пометка);
   	КонецЦикла;
ЗначениеВРеквизитФормы(тДерево, "ДеревоЗаданий");
КонецПроцедуры

&НаСервере
Функция НайтиВДереве(КоллекцияСтрокДереваОдногоУровня,ПЗ,Идентификатор = Неопределено)
    Для Каждого Стр Из КоллекцияСтрокДереваОдногоУровня Цикл
        Если Стр.ПроизводственноеЗадание = ПЗ Тогда
		Идентификатор = Стр.ПолучитьИдентификатор();
        КонецЕсли;
    НайтиВДереве(Стр.ПолучитьЭлементы(),ПЗ,Идентификатор);
    КонецЦикла;
Возврат(Идентификатор);   
КонецФункции

&НаСервере
Процедура НайтиНаСервере(ПЗ)
Элементы.ДеревоЗаданий.ТекущаяСтрока = НайтиВДереве(ДеревоЗаданий.ПолучитьЭлементы(),ПЗ); 
КонецПроцедуры 

&НаКлиенте
Процедура ДеревоЗаданийПометкаПриИзменении(Элемент)
ПЗ = Элементы.ДеревоЗаданий.ТекущиеДанные.ПроизводственноеЗадание;
ВыбратьПоНомеруВТНаСервере(Элементы.ДеревоЗаданий.ТекущаяСтрока);
НайтиНаСервере(ПЗ);
КонецПроцедуры

&НаСервере
Функция ПринятьНаСтендПомеченные(КоллекцияСтрокДереваОдногоУровня)
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;    
		Для Каждого Стр Из КоллекцияСтрокДереваОдногоУровня Цикл
	        Если Стр.Пометка Тогда
			НаборЗаписей = РегистрыСведений.СтендовыйПрогон.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПЗ.Установить(Стр.ПроизводственноеЗадание);
			НаборЗаписей.Прочитать();
			    Для Каждого Запись Из НаборЗаписей Цикл
					Если Не ЗначениеЗаполнено(Запись.ДатаПостановки) Тогда	
					Запись.ДатаПостановки = ТекущаяДата();
					Запись.ИсполнительПостановка = Объект.Исполнитель;
					Прервать;
					КонецЕсли; 
				КонецЦикла;
			НаборЗаписей.Записать(Истина);
	        КонецЕсли;
	    ПринятьНаСтендПомеченные(Стр.ПолучитьЭлементы());
	    КонецЦикла;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;  
Возврат(Истина);   
КонецФункции

&НаСервере
Функция ПринятьНаСтендНаСервере()
Возврат(ПринятьНаСтендПомеченные(ДеревоЗаданий.ПолучитьЭлементы()));
КонецФункции

&НаКлиенте
Процедура ПринятьНаСтенд(Команда)
	Если ПринятьНаСтендНаСервере() Тогда
	ПЗ = Элементы.ДеревоЗаданий.ТекущиеДанные.ПроизводственноеЗадание;
	СписокИзделий = ПолучитьПомеченныеЗадания();
	ТД = ПечатьНомеровВТНаСервере(СписокИзделий);
	ТД.Показать("Номера возвратных тар");
	ПолучитьДанныеПоСтендуНаСервере();
	НайтиНаСервере(ПЗ);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗавершитьЗаданиеПомеченные(КоллекцияСтрокДереваОдногоУровня)
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;    
		Для Каждого Стр Из КоллекцияСтрокДереваОдногоУровня Цикл
	        Если Стр.Пометка Тогда
				Если Не ЗначениеЗаполнено(Стр.Постановка) Тогда	
				Сообщить(""+Стр.ВозвратнаяТара+" - не принято на стенд!");
				Продолжить;
				КонецЕсли; 
			ПолучитьЭтапыСпецификации(Стр.ПроизводственноеЗадание,Стр.РабочееМесто);
				Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(Стр.ПроизводственноеЗадание,Стр.РабочееМесто,Объект.Спецификация,Этапы,ТекущаяДата()) Тогда
				Сообщить("Документ выпуска по производственному заданию "+Стр.ПроизводственноеЗадание.Номер+" не создан!");
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат(Ложь);
				КонецЕсли;
			НаборЗаписей = РегистрыСведений.СтендовыйПрогон.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ПЗ.Установить(Стр.ПроизводственноеЗадание);
			НаборЗаписей.Прочитать();
			    Для Каждого Запись Из НаборЗаписей Цикл
					Если Не ЗначениеЗаполнено(Запись.ДатаСнятия) Тогда	
					Запись.ДатаСнятия = ТекущаяДата();
					Запись.ИсполнительСнятие = Объект.Исполнитель;
					Прервать;
					КонецЕсли; 
				КонецЦикла;
			НаборЗаписей.Записать(Истина);
			Парам = Новый Структура("РабочееМесто,Исполнитель,ДатаОкончания",Стр.РабочееМесто,Объект.Исполнитель,ТекущаяДата());
			ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(Стр.ПроизводственноеЗадание,Парам);
			ОбщийМодульРаботаСРегистрами.СоздатьЭтапПроизводственногоЗадания(Стр.ПроизводственноеЗадание,ОбщийМодульВызовСервера.ПолучитьСледующееРабочееМесто(Стр.РабочееМесто),Неопределено,Неопределено);
	        КонецЕсли;
	    ЗавершитьЗаданиеПомеченные(Стр.ПолучитьЭлементы());
	    КонецЦикла;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;  
Возврат(Истина);   
КонецФункции

&НаСервере
Функция ЗавершитьЗаданиеНаСервере()
Возврат(ЗавершитьЗаданиеПомеченные(ДеревоЗаданий.ПолучитьЭлементы()));
КонецФункции

&НаКлиенте
Процедура ЗавершитьЗадание(Команда)
	Если ЗавершитьЗаданиеНаСервере() Тогда
	ПоказатьОповещениеПользователя("ВНИМАНИЕ!",,"Передайте изделия на следующее АРМ",БиблиотекаКартинок.Пользователь);
	ПолучитьДанныеПоСтендуНаСервере();	
	КонецЕсли;
КонецПроцедуры
