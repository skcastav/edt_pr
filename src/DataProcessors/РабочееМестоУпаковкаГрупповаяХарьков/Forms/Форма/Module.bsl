
&НаКлиенте
Процедура ОткрытьСпецификациюПриИзменении(Элемент)
Элементы.Спецификация.Видимость = ОткрытьСпецификацию;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоУпаковкеНаСервере()
Объект.Упаковка.Очистить();
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала КАК ДатаНачала,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Изделие,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.БарКод,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Линейка
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто В(&СписокРабочихМест)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДатаЗапуска <> ДАТАВРЕМЯ(1,1,1,0,0,0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1,1,1,0,0,0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала";
Запрос.УстановитьПараметр("СписокРабочихМест",СписокРабочихМестСтенд); 
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = Объект.Упаковка.Добавить();
	ТЧ.Линейка = ВыборкаДетальныеЗаписи.Линейка; 
	ТЧ.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
	ТЧ.Изделие = ВыборкаДетальныеЗаписи.Изделие;
	ТЧ.БарКод = ВыборкаДетальныеЗаписи.БарКод;
	БК = РегистрыСведений.БарКоды.ПолучитьПоследнее(,Новый Структура("ПЗ",ВыборкаДетальныеЗаписи.ПЗ));
	ТЧ.КодDanfoss = БК.КодDanfoss;	 	
	КонецЦикла;
Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала КАК ДатаНачала,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Изделие,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.БарКод,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Линейка
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто В(&СписокРабочихМест)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДатаЗапуска <> &ПустаяДата
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДатаГрупповойУпаковки = &ПустаяДата
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаНачала";
Запрос.УстановитьПараметр("СписокРабочихМест",СписокРабочихМестУпаковка); 
Запрос.УстановитьПараметр("ПустаяДата",Дата(1,1,1));
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	ТЧ = Объект.Упаковка.Добавить(); 
	ТЧ.Линейка = ВыборкаДетальныеЗаписи.Линейка;
	ТЧ.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
	ТЧ.Изделие = ВыборкаДетальныеЗаписи.Изделие;
	ТЧ.БарКод = ВыборкаДетальныеЗаписи.БарКод;
	БК = РегистрыСведений.БарКоды.ПолучитьПоследнее(,Новый Структура("ПЗ",ВыборкаДетальныеЗаписи.ПЗ));
	ТЧ.КодDanfoss = БК.КодDanfoss;	
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаНачала) Тогда
		ТЧ.Поступление = ВыборкаДетальныеЗаписи.ДатаНачала;
			Если Не ВыборкаДетальныеЗаписи.Линейка.НумераторГрупповойУпаковки.Пустая() Тогда
			ТЧ.Тара = ВыборкаДетальныеЗаписи.Линейка.НумераторГрупповойУпаковки.СледующийНомер;
			Иначе
				Если Не ВыборкаДетальныеЗаписи.Изделие.Товар.НумераторГрупповойУпаковки.Пустая() Тогда
				ТЧ.Тара = ВыборкаДетальныеЗаписи.Изделие.Товар.НумераторГрупповойУпаковки.СледующийНомер;
				КонецЕсли; 
			КонецЕсли;		
		КонецЕсли;  	
	КонецЦикла; 
Объект.Упаковка.Сортировать("Поступление");
ОбновитьТаблицуГрупповойУпаковки();
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПоУпаковке()
ПолучитьДанныеПоУпаковкеНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОбновленияПриИзменении(Элемент)
ОтключитьОбработчикОжидания("ПолучитьДанныеПоУпаковке");
	Если Объект.ИнтервалОбновления > 0 Тогда
	ПодключитьОбработчикОжидания("ПолучитьДанныеПоУпаковке", Объект.ИнтервалОбновления*60);
	КонецЕсли; 
КонецПроцедуры
 
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
ДатаВыпуска = ТекущаяДата();
Объект.Исполнитель = ПараметрыСеанса.Пользователь;
	Если Объект.Исполнитель.Пустая() Тогда
	Элементы.СписокЛинеек.Доступность = Ложь;
	Сообщить("Вы не внесены в справочник Сотрудников! Работа невозможна!");
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПолучитьРМ()
СписокРабочихМестСтенд.Очистить();
СписокРабочихМестУпаковка.Очистить();
	Для каждого Стр Из СписокЛинеек Цикл
	РабочиеМеста = Справочники.РабочиеМестаЛинеек.Выбрать(,,Новый Структура("Линейка",Стр.Значение));
	флНайдено = Ложь;
		Пока РабочиеМеста.Следующий() Цикл
			Если РабочиеМеста.ЭтоГруппа Тогда
			Продолжить;		
			КонецЕсли;
				Если СокрЛП(РабочиеМеста.ГруппаРабочихМест.Префикс) = "СТ" Тогда
					Если Не РабочиеМеста.Стенд.СБуфером Тогда
					СписокРабочихМестСтенд.Добавить(РабочиеМеста.Ссылка);
					КонецЕсли;		
				ИначеЕсли СокрЛП(РабочиеМеста.ГруппаРабочихМест.Префикс) = "УП" Тогда
				СписокРабочихМестУпаковка.Добавить(РабочиеМеста.Ссылка);		
				флНайдено = Истина;
				КонецЕсли; 
		КонецЦикла;
			Если Не флНайдено Тогда
			Сообщить("Рабочее место <Упаковка> не найдено в линейке "+Стр.Значение+"!");
			КонецЕсли;
	КонецЦикла;  
КонецПроцедуры 

&НаСервере
Процедура СброситьНумераторГрупповойУпаковки()
	Для каждого Стр Из СписокЛинеек Цикл		
	НумераторГрупповойУпаковки = Справочники.НумераторГрупповыхУпаковок.Выбрать(,,Новый Структура("Линейка",Стр.Значение));
		Пока НумераторГрупповойУпаковки.Следующий() Цикл
			Если НачалоДня(НумераторГрупповойУпаковки.ДатаСброса) = НачалоДня(ТекущаяДата()) Тогда
			НГУ = НумераторГрупповойУпаковки.ПолучитьОбъект();
			НГУ.СледующийНомер = 1;
			НГУ.ДатаСброса = НачалоДня(ТекущаяДата()+604800);
			НГУ.Записать();		
			КонецЕсли; 	
		КонецЦикла;	
	КонецЦикла;  
КонецПроцедуры

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(СписокРабочихМестСтенд[0].Значение.Линейка) Тогда	
	Возврат(Истина);
	Иначе
	СписокРабочихМестСтенд.Очистить();
	СписокРабочихМестУпаковка.Очистить();
	СписокЛинеек.Очистить();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции 

&НаКлиенте
Процедура СписокЛинеекПриИзменении(Элемент)
ПолучитьРМ();
	Если Не МожноРаботатьВАРМ() Тогда
	Возврат;
	КонецЕсли;
СброситьНумераторГрупповойУпаковки(); 
ПолучитьДанныеПоУпаковкеНаСервере();
	Если Объект.ИнтервалОбновления > 0 Тогда
	ПодключитьОбработчикОжидания("ПолучитьДанныеПоУпаковке", Объект.ИнтервалОбновления*60);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ПоступлениеНаУпаковкуНаСервере(Стр)
ТЧ = Объект.Упаковка.НайтиПоИдентификатору(Стр);
ПроизводственноеЗадание = ТЧ.ПроизводственноеЗадание;
Линейка = ТЧ.Линейка;
Изделие = ТЧ.Изделие;
БарКод = ТЧ.БарКод;
	Если ЗначениеЗаполнено(ТЧ.Поступление) Тогда
	Сообщить("Изделие с бар-кодом "+ТЧ.БарКод+" уже поступило на упаковку!");
	Возврат(Ложь);
	КонецЕсли;
		Если Изделие.Товар.ТребуетсяСерийныйНомерEnLogic Тогда			
			Если Не ЗначениеЗаполнено(ОбщийМодульВызовСервера.ПолучитьСерийныйНомерEnLogic(БарКод)) Тогда
			Сообщить("Не получен серийный номер EnLogic!");
			Возврат(Ложь);			
			КонецЕсли;
		КонецЕсли; 
			Если Изделие.Товар.ТребуетсяВводНапряженияБатарейки Тогда
				Если ОбщийМодульВызовСервера.ПолучитьНапряжениеБатарейкиНаСтенде(ПроизводственноеЗадание) = Неопределено Тогда
				Сообщить("Не введено напряжение батарейки на стенде!");
				Возврат(Ложь);			
				КонецЕсли;
			КонецЕсли;
				Если Не Линейка.НумераторГрупповойУпаковки.Пустая() Тогда
				ОбщийНумератор = Истина;
				НГУ = Линейка.НумераторГрупповойУпаковки;
				Иначе
				ОбщийНумератор = Ложь;
				НГУ = Изделие.Товар.НумераторГрупповойУпаковки;			
				КонецЕсли; 
					Если НГУ.Пустая() Тогда
					Сообщить("Нумератор групповой упаковки не установлен!");
					Возврат(Ложь);				
					КонецЕсли;
КолУпаковано = 0;
	Для каждого ТЧ_УП Из Объект.Упаковка Цикл
		Если ОбщийНумератор Тогда
			Если ТЧ_УП.Линейка = Линейка Тогда
				Если ТЧ_УП.Тара > 0 Тогда
				КолУпаковано = КолУпаковано + 1;
				КонецЕсли;			
			КонецЕсли; 
		Иначе
			Если ТЧ_УП.Изделие = Изделие Тогда
				Если ТЧ_УП.Тара > 0 Тогда
				КолУпаковано = КолУпаковано + 1;
				КонецЕсли;					
			КонецЕсли;  
		КонецЕсли; 	
	КонецЦикла; 	
		Если КолУпаковано < НГУ.КоличествоВТаре Тогда
		Тара = НГУ.СледующийНомер;
		Иначе
			Если ОбщийНумератор Тогда
			Сообщить("Групповая упаковка укомплектована! Сделайте выпуск групповой упаковки!" );
			Иначе
			Сообщить("Групповая упаковка изделия <"+СокрЛП(Изделие.Наименование)+"> укомплектована! Сделайте выпуск групповой упаковки!" );
			КонецЕсли; 
		Возврат(Ложь);
		КонецЕсли;
			Попытка
			НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
			РабочееМестоСтенд = ОбщийМодульВызовСервера.ПолучитьРабочееМестоВЛинейке(Линейка,"Стенд",Ложь);
			РабочееМестоУпаковка = ОбщийМодульВызовСервера.ПолучитьРабочееМестоВЛинейке(Линейка,"Упаковка");
			ДатаПоступления = ТекущаяДата();
			ПЗ = ПроизводственноеЗадание.ПолучитьОбъект();
			ПЗ.ВозвратнаяТара = "";
 			ПЗ.ДатаГрупповойУпаковки = Дата(1,1,1);
			ПЗ.Записать();
			ЭПЗ = РегистрыСведений.ЭтапыПроизводственныхЗаданий.ПолучитьПоследнее(,Новый Структура("ПЗ",ПроизводственноеЗадание));
				Если ЭПЗ.РабочееМесто = РабочееМестоСтенд Тогда
				НаборЗаписей = РегистрыСведений.СтендовыйПрогон.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПЗ.Установить(ПроизводственноеЗадание);
				НаборЗаписей.Отбор.БарКод.Установить(БарКод);
				НаборЗаписей.Отбор.Изделие.Установить(Изделие);
				НаборЗаписей.Прочитать();
				    Для Каждого Запись Из НаборЗаписей Цикл
						Если Не ЗначениеЗаполнено(Запись.ДатаСнятия) Тогда
						Запись.ИсполнительСнятие = РабочееМестоСтенд.Стенд.Исполнитель;
						Запись.ДатаСнятия = ДатаПоступления;
						Прервать; 
						КонецЕсли;  
				    КонецЦикла;
				НаборЗаписей.Записать();

				НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПЗ.Установить(ПроизводственноеЗадание);
				НаборЗаписей.Прочитать();
				    Для Каждого Запись Из НаборЗаписей Цикл 
				    	Если Запись.РабочееМесто = РабочееМестоСтенд Тогда
							Если Не ЗначениеЗаполнено(Запись.ДатаОкончания) Тогда
							Запись.Исполнитель = РабочееМестоСтенд.Стенд.Исполнитель;
							Запись.ДатаОкончания = ДатаПоступления;					
							КонецЕсли; 
						Прервать;
						КонецЕсли;  
				    КонецЦикла;
				ЭПЗ = НаборЗаписей.Добавить();
				ЭПЗ.Период = ДатаПоступления;
				ЭПЗ.ПЗ = ПроизводственноеЗадание; 
				ЭПЗ.Линейка = Линейка;
				ЭПЗ.Изделие = Изделие;
				ЭПЗ.Количество = 1;
				ЭПЗ.БарКод = БарКод;
				ЭПЗ.РабочееМесто = РабочееМестоУпаковка;
				ЭПЗ.Исполнитель = Объект.Исполнитель;
				ЭПЗ.ДатаНачала = ДатаПоступления;
				ЭПЗ.ДатаОкончания = ДатаПоступления+60;
				НаборЗаписей.Записать();
				ПолучитьЭтапыСпецификации(ПроизводственноеЗадание,РабочееМестоСтенд);
					Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(ПроизводственноеЗадание,РабочееМестоСтенд,Объект.Спецификация,Этапы,ДатаПоступления) Тогда
					Сообщить("Документ выпуска по производственному заданию "+ПроизводственноеЗадание.Номер+" не создан!");
					ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
					Возврат(Ложь);
					КонецЕсли;
				Иначе
				НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.ПЗ.Установить(ПроизводственноеЗадание);
				НаборЗаписей.Прочитать();
				    Для Каждого Запись Из НаборЗаписей Цикл 
				    	Если Запись.РабочееМесто = РабочееМестоУпаковка Тогда
						Запись.Исполнитель = Объект.Исполнитель;
						Запись.ДатаНачала = ДатаПоступления;
						Запись.ДатаОкончания = ДатаПоступления+60;					
						Прервать;
						КонецЕсли;  
				    КонецЦикла;
				НаборЗаписей.Записать();
				КонецЕсли;
			ПолучитьЭтапыСпецификации(ПроизводственноеЗадание,РабочееМестоУпаковка);
				Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(ПроизводственноеЗадание,РабочееМестоУпаковка,Объект.Спецификация,Этапы,ДатаПоступления+60) Тогда
			 	Сообщить("Документ выпуска по производственному заданию "+ПроизводственноеЗадание.Номер+" не создан!");
				ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
				Возврат(Ложь);
				КонецЕсли; 
			ТЧ.Поступление = ДатаПоступления;
			ТЧ.Тара = Тара; 
			ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
			ОбновитьТаблицуГрупповойУпаковки();
			Возврат(Истина);
			Исключение
			Сообщить(ОписаниеОшибки());
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			КонецПопытки; 
Возврат(Ложь);
КонецФункции 

&НаКлиенте
Процедура ПоступлениеНаУпаковку(Команда,БарКод = "")
	Если Не ЗначениеЗаполнено(БарКод) Тогда
		Если Не ВвестиСтроку(БарКод,"Введите бар-код",18) Тогда
		Возврат;
		КонецЕсли; 
	КонецЕсли; 
ОтключитьОбработчикОжидания("ПолучитьДанныеПоУпаковке");
	Если СтрДлина(СокрЛП(БарКод)) > 16 Тогда
	Отбор = Новый Структура("БарКод",БарКод);		
	Иначе
	Отбор = Новый Структура("КодDanfoss",БарКод);
	КонецЕсли;
Выборка = Объект.Упаковка.НайтиСтроки(Отбор);
	Если Выборка.Количество() > 0 Тогда	
	Стр = Выборка[0].ПолучитьИдентификатор();
	Элементы.Упаковка.ТекущаяСтрока = Стр;
		Если ПоступлениеНаУпаковкуНаСервере(Стр) Тогда	
		ОткрытьФорму("Обработка.СозданныеБарКоды.Форма.Форма", Новый Структура("ПЗ,РабочееМесто,ДатаВыпуска",Выборка[0].ПроизводственноеЗадание,ОбщийМодульВызовСервера.ПолучитьРабочееМестоВЛинейке(Выборка[0].Линейка,"Упаковка"),ДатаВыпуска));
		КонецЕсли; 
	Иначе
	Сообщить("Бар-код не найден!");
	КонецЕсли;
		Если Объект.ИнтервалОбновления > 0 Тогда
		ПодключитьОбработчикОжидания("ПолучитьДанныеПоУпаковке", Объект.ИнтервалОбновления*60);
		КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоБарКоду(Команда)
БарКод = "";
	Если ВвестиСтроку(БарКод,"Введите бар-код",18) Тогда
		Если СтрДлина(СокрЛП(БарКод)) > 16 Тогда
		Отбор = Новый Структура("БарКод",БарКод);		
		Иначе
		Отбор = Новый Структура("КодDanfoss",БарКод);
		КонецЕсли; 
	Выборка = Объект.Упаковка.НайтиСтроки(Отбор);
		Если Выборка.Количество() > 0 Тогда	
		Элементы.Упаковка.ТекущаяСтрока = Выборка[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуГрупповойУпаковки()
ТаблицаГрупповойУпаковки.Очистить();
	Для каждого ТЧ Из Объект.Упаковка Цикл
		Если ТЧ.Линейка.НумераторГрупповойУпаковки.Пустая() Тогда
		НГУ = ТЧ.Изделие.Товар.НумераторГрупповойУпаковки;
		Иначе
		НГУ = ТЧ.Линейка.НумераторГрупповойУпаковки;
		КонецЕсли;	
	НайденныеСтроки = ТаблицаГрупповойУпаковки.НайтиСтроки(Новый Структура("Нумератор",НГУ));
		Если НайденныеСтроки.Количество() = 0 Тогда
		ТЧ_ТГУ = ТаблицаГрупповойУпаковки.Добавить();
		ТЧ_ТГУ.Нумератор = НГУ;
			Если ТЧ.Линейка.НумераторГрупповойУпаковки.Пустая() Тогда
	    	ТЧ_ТГУ.Изделие = ТЧ.Изделие;
			КонецЕсли;
				Если ЗначениеЗаполнено(ТЧ.Поступление) Тогда
				ТЧ_ТГУ.Тара = ТЧ.Тара;
				ТЧ_ТГУ.Количество = 1;
				КонецЕсли; 
		ТЧ_ТГУ.КоличествоВТаре = НГУ.КоличествоВТаре;
		Иначе
			Если ЗначениеЗаполнено(ТЧ.Поступление) Тогда
			НайденныеСтроки[0].Тара = ТЧ.Тара;
			НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + 1;
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Функция ПечатьГрупповойУпаковкиНаСервере(ТД)

Парам = Новый Структура("Результат, Изделие, Количество,QRCode",Ложь,Справочники.Номенклатура.ПустаяСсылка(),0,"");

//Каталог = Новый Файл(Константы.КаталогОбменаДанными.Получить());
//	Если Не Каталог.Существует() Тогда
//    Сообщить("Каталог обмена данными не существует!");
//	Возврат(Парам);
//	КонецЕсли;

ТЧ = ТаблицаГрупповойУпаковки.НайтиПоИдентификатору(Элементы.ТаблицаГрупповойУпаковки.ТекущаяСтрока);
Линейка = ТЧ.Нумератор.Линейка;
НГУ = ТЧ.Нумератор;
Изделие	= ТЧ.Изделие;
Тара = ТЧ.Тара;
	Если Не Линейка.НумераторГрупповойУпаковки.Пустая() Тогда
	ОбщийНумератор = Истина;
	Иначе
	ОбщийНумератор = Ложь;
	Парам.Изделие = Изделие;
	КонецЕсли;
		Если НГУ.Пустая() Тогда
		Сообщить("Нумератор групповой упаковки не установлен!");
		Возврат(Парам);				
		КонецЕсли;  	
МассивКУдалению = Новый Массив; 
ТаблицаВыпуска = Новый ТаблицаЗначений;

ТаблицаВыпуска.Колонки.Добавить("Продукция",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ТаблицаВыпуска.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(9,3)));

Макет = ПолучитьОбщийМакет("ОтчетПоУпаковочнойТаре"); 
ОблШапка = Макет.ПолучитьОбласть("Шапка");	
ОблПЗ = Макет.ПолучитьОбласть("ПЗ");
ОблИтого = Макет.ПолучитьОбласть("Итого");
ОблИзделие = Макет.ПолучитьОбласть("Изделие");
ОблКонец = Макет.ПолучитьОбласть("Конец");
ОблШапка.Параметры.ВыбЛинейка = Линейка.Наименование;
ОблШапка.Параметры.Тара = НГУ.СледующийНомер;
ОблШапка.Параметры.ДатаОтчёта = Формат(ДатаВыпуска,"ДФ=dd.MM.yyyy");
ТД.Вывести(ОблШапка);
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	НомСтр = 0;              
	КолВсего = 0;
		Для каждого ТЧ Из Объект.Упаковка Цикл
			Если ТЧ.Линейка <> Линейка Тогда
			Продолжить;			
			КонецЕсли; 
				Если ТЧ.Тара <> Тара Тогда
				Продолжить;	
				КонецЕсли;
					Если Не ОбщийНумератор Тогда
						Если ТЧ.Изделие <> Изделие Тогда
						Продолжить;
						КонецЕсли; 
					КонецЕсли; 
		НомСтр = НомСтр + 1;
		МассивКУдалению.Добавить(ТЧ);
		ТЧ_ТВ = ТаблицаВыпуска.Добавить();
		ТЧ_ТВ.Продукция = ТЧ.Изделие;
		ТЧ_ТВ.Количество = 1;
		ОблПЗ.Параметры.НомСтр = НомСтр;
		ОблПЗ.Параметры.Наимен = ТЧ.Изделие; 
		ОблПЗ.Параметры.НомерПЗ = ТЧ.ПроизводственноеЗадание.Номер;
		ОблПЗ.Параметры.ПЗ = ТЧ.ПроизводственноеЗадание;
		ОблПЗ.Параметры.Счёт = ТЧ.ПроизводственноеЗадание.ДокументОснование.Счёт;
		ОблПЗ.Параметры.БарКод = ТЧ.БарКод;
		КодDanfoss = ОбщийМодульВызовСервера.ПолучитьКодDanfoss(ТЧ.БарКод);
			Если ЗначениеЗаполнено(КодDanfoss) Тогда
			ОблПЗ.Параметры.ЗавНомер = ТЧ.БарКод + "\" + КодDanfoss;
			Иначе
			ОблПЗ.Параметры.ЗавНомер = ТЧ.БарКод;
			КонецЕсли; 
		ТД.Вывести(ОблПЗ);
		КолВсего = КолВсего + 1; 
		Парам.QRCode = Парам.QRCode+ТЧ.БарКод+"!";
		ПЗ = ТЧ.ПроизводственноеЗадание.ПолучитьОбъект();
		ПЗ.ВозвратнаяТара = ТЧ.Тара;
	    ПЗ.ДатаГрупповойУпаковки = ТекущаяДата();
		ПЗ.Записать();
		КонецЦикла;
	ОблИтого.Параметры.КолВсего = КолВсего;
	ТД.Вывести(ОблИтого);
	Парам.Количество = КолВсего;	
	ТаблицаВыпуска.Свернуть("Продукция","Количество"); 
	ТаблицаВыпуска.Сортировать("Продукция");
		Для каждого ТЧ из ТаблицаВыпуска Цикл
		ОблИзделие.Параметры.Наимен = ТЧ.Продукция;                  
		ОблИзделие.Параметры.Кол = ТЧ.Количество; 
		ТД.Вывести(ОблИзделие);		        	
		КонецЦикла;
			Если Константы.КодБазы.Получить() <> "ХРК" Тогда
			ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(Парам.QRCode, 0, 200);	
				Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
				КартинкаQRКода = Новый Картинка(ДанныеQRКода);
				ОблКонец.Рисунки.QRCode.Картинка = КартинкаQRКода;
				Иначе
				Сообщить("Не удалось сформировать QR-код!");
				КонецЕсли;
			КонецЕсли;	
	ОблКонец.Параметры.Исполнитель = Объект.Исполнитель;
	ТД.Вывести(ОблКонец);
	НГУОбъект = НГУ.ПолучитьОбъект();
	НГУОбъект.СледующийНомер = НГУОбъект.СледующийНомер + 1;
	НГУОбъект.Записать();
		Для каждого ТЧ Из МассивКУдалению Цикл
		СоздатьXMLНаСервере(ТЧ.ПроизводственноеЗадание);
		Объект.Упаковка.Удалить(ТЧ);
		КонецЦикла;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	ТД.РазмерСтраницы = "A4";
	ТД.ПолеСлева = 0;
	ТД.ПолеСверху = 0;
	ТД.ПолеСнизу = 0;
	ТД.ПолеСправа = 0;
	ТД.РазмерКолонтитулаСверху = 0;
	ТД.РазмерКолонтитулаСнизу = 0;
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ОбновитьТаблицуГрупповойУпаковки();
	Парам.Результат = Истина;
	Возврат(Парам);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Парам);
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПечатьЭтикеткиГрупповойУпаковкиНаСервере(ТД_ГУ,Изделие,Количество,QRCode)
ШаблонПД = Изделие.Товар.ТоварнаяГруппа.ШаблоныПечатныхДокументов;
	Для каждого ТЧ Из ШаблонПД Цикл
		Если ТЧ.Шаблон.Групповой Тогда
		Макет = ПолучитьОбщийМакет(СокрЛП(ТЧ.Шаблон.Шаблон));
		ОблЭтикетка = Макет.ПолучитьОбласть("Этикетка");
		ТекНаимен = СокрЛП(Изделие.Товар.Наименование);
		Модиф = "";
			Если Найти(ТекНаимен,"[") > 0 Тогда                         
			Модиф = Сред(ТекНаимен,Найти(ТекНаимен,"[")+1);	
			Модиф = Лев(Модиф,Найти(Модиф,"]")-1);
			ТекНаимен = СокрП(Сред(ТекНаимен,1,Найти(ТекНаимен,"[")-1)); 
			КонецЕсли;
		ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(QRCode, 0, 200);	
			Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
			КартинкаQRКода = Новый Картинка(ДанныеQRКода);
			ОблЭтикетка.Рисунки.QRCode.Картинка = КартинкаQRКода;
			Иначе
			Сообщить("Не удалось сформировать QR-код!");
			КонецЕсли;
		ОблЭтикетка.Параметры.ДатаВыпуска = Формат(ДатаВыпуска,"ДФ=dd.MM.yyyy"); 
		ОблЭтикетка.Параметры.ТекНаименование = ТекНаимен;
		ОблЭтикетка.Параметры.Модиф = Модиф;
		ОблЭтикетка.Параметры.ПолнНаименование = СокрЛП(Изделие.Товар.ПолнНаименование);
		ОблЭтикетка.Параметры.КодDanfoss = Изделие.Товар.КодДанфосс;
		ОблЭтикетка.Параметры.Количество = Количество;
		ТД_ГУ.Вывести(ОблЭтикетка);
		ТД_ГУ.РазмерСтраницы = "A4";
		ТД_ГУ.ПолеСлева = 0;
		ТД_ГУ.ПолеСверху = 0;
		ТД_ГУ.ПолеСнизу = 0;
		ТД_ГУ.ПолеСправа = 0;
		ТД_ГУ.РазмерКолонтитулаСверху = 0;
		ТД_ГУ.РазмерКолонтитулаСнизу = 0;
		ТД_ГУ.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Возврат(Истина);						
		КонецЕсли; 
	КонецЦикла;
Возврат(Ложь);
КонецФункции

&НаСервере
Функция ЕстьНумераторГУНаЛинейке(Нумератор)	
Возврат(Не Нумератор.Линейка.НумераторГрупповойУпаковки.Пустая());
КонецФункции

&НаКлиенте
Процедура ПечатьГрупповойУпаковки(Команда)
	Если Элементы.ТаблицаГрупповойУпаковки.ТекущаяСтрока = Неопределено Тогда
	Сообщить("Выберите группу упакованных изделий!");
	Возврат;		
	КонецЕсли;
ТЧ = ТаблицаГрупповойУпаковки.НайтиПоИдентификатору(Элементы.ТаблицаГрупповойУпаковки.ТекущаяСтрока);
	Если Элементы.ТаблицаГрупповойУпаковки.ТекущиеДанные.Количество = 0 Тогда
	Сообщить("В групповой упаковке нет ни одного изделия!");
	Возврат;		
	КонецЕсли; 
		Если Не ЕстьНумераторГУНаЛинейке(Элементы.ТаблицаГрупповойУпаковки.ТекущиеДанные.Нумератор) Тогда
			Если Элементы.ТаблицаГрупповойУпаковки.ТекущиеДанные.Количество <> Элементы.ТаблицаГрупповойУпаковки.ТекущиеДанные.КоличествоВТаре Тогда
				Если Вопрос("Групповая упаковка не укомплектована! Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
				Возврат;
				КонецЕсли;				
			КонецЕсли; 
		КонецЕсли; 
ТД = Новый ТабличныйДокумент;

Парам = ПечатьГрупповойУпаковкиНаСервере(ТД);
	Если Парам.Результат Тогда 
	ТД.Показать("Отчёт по упаковочной таре. Выпуск на "+Формат(ДатаВыпуска,"ДФ=dd.MM.yyyy"));
		Если Не Парам.Изделие.Пустая() Тогда
		ТД_ГУ = Новый ТабличныйДокумент;

			Если ПечатьЭтикеткиГрупповойУпаковкиНаСервере(ТД_ГУ,Парам.Изделие,Парам.Количество,Парам.QRCode) Тогда
			ТД_ГУ.Показать("Этикетка групповой упаковки");	
			КонецЕсли; 		
		КонецЕсли; 	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПовторнаяПечатьГрупповойУпаковкиНаСервере(ТД,ВыбДата,ВыбЛинейка,ВыбТара,ВыбИзделие)
Парам = Новый Структура("Результат, Изделие, Количество,QRCode",Ложь,ВыбИзделие,0,""); 
ТаблицаВыпуска = Новый ТаблицаЗначений;

ТаблицаВыпуска.Колонки.Добавить("Продукция",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
ТаблицаВыпуска.Колонки.Добавить("Количество",Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(9,3)));

Макет = ПолучитьОбщийМакет("ОтчетПоУпаковочнойТаре"); 
ОблШапка = Макет.ПолучитьОбласть("Шапка");	
ОблПЗ = Макет.ПолучитьОбласть("ПЗ");
ОблИтого = Макет.ПолучитьОбласть("Итого");
ОблИзделие = Макет.ПолучитьОбласть("Изделие");
ОблКонец = Макет.ПолучитьОбласть("Конец");
ОблШапка.Параметры.ВыбЛинейка = ВыбЛинейка.Наименование;
ОблШапка.Параметры.Тара = ВыбТара;
ОблШапка.Параметры.ДатаОтчёта = Формат(ДатаВыпуска,"ДФ=dd.MM.yyyy");
ТД.Вывести(ОблШапка);
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	НомСтр = 0;              
	КолВсего = 0;

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ПроизводственноеЗадание.Ссылка,
		|	ПроизводственноеЗадание.Линейка КАК Линейка,
		|	ПроизводственноеЗадание.Изделие КАК Изделие,
		|	ПроизводственноеЗадание.БарКод КАК БарКод
		|ИЗ
		|	Документ.ПроизводственноеЗадание КАК ПроизводственноеЗадание
		|ГДЕ
		|	ПроизводственноеЗадание.Линейка = &Линейка
		|	И ПроизводственноеЗадание.ВозвратнаяТара = &ВозвратнаяТара
		|	И ПроизводственноеЗадание.ДатаГрупповойУпаковки МЕЖДУ &ДатаНач И &ДатаКон";
		Если Не ВыбИзделие.Пустая() Тогда
		Запрос.Текст = Запрос.Текст + " И ПроизводственноеЗадание.Изделие = &Изделие";
		Запрос.УстановитьПараметр("Изделие", ВыбИзделие);
		КонецЕсли; 
	Запрос.УстановитьПараметр("Линейка", ВыбЛинейка);
	Запрос.УстановитьПараметр("ВозвратнаяТара", ВыбТара);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ВыбДата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ВыбДата));
	РезультатЗапроса = Запрос.Выполнить();	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			НомСтр = НомСтр + 1;
			ТЧ_ТВ = ТаблицаВыпуска.Добавить();
			ТЧ_ТВ.Продукция = ВыборкаДетальныеЗаписи.Изделие;
			ТЧ_ТВ.Количество = 1;
			ОблПЗ.Параметры.НомСтр = НомСтр;
			ОблПЗ.Параметры.Наимен = ВыборкаДетальныеЗаписи.Изделие; 
			ОблПЗ.Параметры.НомерПЗ = ВыборкаДетальныеЗаписи.Ссылка.Номер;
			ОблПЗ.Параметры.ПЗ = ВыборкаДетальныеЗаписи.Ссылка;
			ОблПЗ.Параметры.Счёт = ВыборкаДетальныеЗаписи.Ссылка.ДокументОснование.Счёт;
			ОблПЗ.Параметры.БарКод = ВыборкаДетальныеЗаписи.БарКод;
			КодDanfoss = ОбщийМодульВызовСервера.ПолучитьКодDanfoss(ВыборкаДетальныеЗаписи.БарКод);
				Если ЗначениеЗаполнено(КодDanfoss) Тогда
				ОблПЗ.Параметры.ЗавНомер = ВыборкаДетальныеЗаписи.БарКод + "\" + КодDanfoss;
				Иначе
				ОблПЗ.Параметры.ЗавНомер = ВыборкаДетальныеЗаписи.БарКод;
				КонецЕсли; 
			ТД.Вывести(ОблПЗ);
			КолВсего = КолВсего + 1; 
			Парам.QRCode = Парам.QRCode+ВыборкаДетальныеЗаписи.БарКод+"!";
			КонецЦикла;	
		Иначе
	    Сообщить("Групповая упаковка не найдена по выбранным условиям!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат(Парам);
		КонецЕсли; 	
	ОблИтого.Параметры.КолВсего = КолВсего;
	ТД.Вывести(ОблИтого);
	Парам.Количество = КолВсего;	
	ТаблицаВыпуска.Свернуть("Продукция","Количество"); 
	ТаблицаВыпуска.Сортировать("Продукция");
		Для каждого ТЧ из ТаблицаВыпуска Цикл
		ОблИзделие.Параметры.Наимен = ТЧ.Продукция;                  
		ОблИзделие.Параметры.Кол = ТЧ.Количество; 
		ТД.Вывести(ОблИзделие);		        	
		КонецЦикла;
	ДанныеQRКода = УправлениеПечатью.ДанныеQRКода(Парам.QRCode, 0, 200);	
		Если ТипЗнч(ДанныеQRКода) = Тип("ДвоичныеДанные") Тогда
		КартинкаQRКода = Новый Картинка(ДанныеQRКода);
		ОблКонец.Рисунки.QRCode.Картинка = КартинкаQRКода;
		Иначе
		Сообщить("Не удалось сформировать QR-код!");
		КонецЕсли;
	ОблКонец.Параметры.Исполнитель = Объект.Исполнитель;	
	ТД.Вывести(ОблКонец);
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	ТД.РазмерСтраницы = "A4";
	ТД.ПолеСлева = 0;
	ТД.ПолеСверху = 0;
	ТД.ПолеСнизу = 0;
	ТД.ПолеСправа = 0;
	ТД.РазмерКолонтитулаСверху = 0;
	ТД.РазмерКолонтитулаСнизу = 0;
	ТД.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ОбновитьТаблицуГрупповойУпаковки();
	Парам.Результат = Истина;
	Возврат(Парам);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Парам);
	КонецПопытки;
КонецФункции

&НаСервере
Функция ПолучитьСписокИзделийВГрупповыхУпаковках(ВыбДата,ВыбТара);
СписокИзделий = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Изделие
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто В(&СписокРабочихМест)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания МЕЖДУ &ДатаНач И &ДатаКон
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ВозвратнаяТара = &ВозвратнаяТара";
Запрос.УстановитьПараметр("ВозвратнаяТара", ВыбТара);
Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ВыбДата));
Запрос.УстановитьПараметр("ДатаКон", КонецДня(ВыбДата));
Запрос.УстановитьПараметр("СписокРабочихМест", СписокРабочихМестУпаковка);
РезультатЗапроса = Запрос.Выполнить();	
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокИзделий.Добавить(ВыборкаДетальныеЗаписи.Изделие);
	КонецЦикла;
Возврат(СписокИзделий);
КонецФункции 

&НаСервере
Функция ПолучитьПустуюСсылкуНоменклатуры()
Возврат(Справочники.Номенклатура.ПустаяСсылка());
КонецФункции 

&НаСервере
Функция НумераторГрупповойУпаковкиНеЗаполнен(ВыбЛинейка)
Возврат(ВыбЛинейка.НумераторГрупповойУпаковки.Пустая());
КонецФункции 

&НаКлиенте
Процедура ПовторнаяПечатьГрупповойУпаковки(Команда)
ВыбДата = ТекущаяДата();
	Если СписокЛинеек.Количество() > 1 Тогда
	ВыбЛин = СписокЛинеек.ВыбратьЭлемент("Выберите линейку",ВыбЛин);
		Если ВыбЛин <> Неопределено Тогда
		ВыбЛинейка = ВыбЛин.Значение;
		Иначе
		Возврат;
		КонецЕсли;	
	Иначе
	ВыбЛинейка = СписокЛинеек.Получить(0).Значение;
	КонецЕсли; 
		Если Не ВвестиДату(ВыбДата,"Введите дату групповой упаковки",ЧастиДаты.Дата) Тогда
		Возврат;
		КонецЕсли;
ВыбТара = 0;
	Если Не ВвестиЧисло(ВыбТара,"Введите номер тары",2,0) Тогда
	Возврат;
	КонецЕсли;
ВыбИзделие = ПолучитьПустуюСсылкуНоменклатуры();
		Если НумераторГрупповойУпаковкиНеЗаполнен(ВыбЛинейка) Тогда
		СписокИзделий = ПолучитьСписокИзделийВГрупповыхУпаковках(ВыбДата,Строка(ВыбТара));
		ВыбЭлемент = СписокИзделий.ВыбратьЭлемент("Выберите изделие",ВыбЭлемент);
			Если ВыбЭлемент <> Неопределено Тогда
			ВыбИзделие = ВыбЭлемент.Значение;
			Иначе
			Возврат;
			КонецЕсли; 	
		КонецЕсли; 
ТД = Новый ТабличныйДокумент;

Парам = ПовторнаяПечатьГрупповойУпаковкиНаСервере(ТД,ВыбДата,ВыбЛинейка,Строка(ВыбТара),ВыбИзделие);
	Если Парам.Результат Тогда
	ТД.Показать("Отчёт по упаковочной таре. Выпуск на "+Формат(ВыбДата,"ДФ=dd.MM.yyyy"));
		Если Не Парам.Изделие.Пустая() Тогда
		ТД_ГУ = Новый ТабличныйДокумент;
			Если ПечатьЭтикеткиГрупповойУпаковкиНаСервере(ТД_ГУ,Парам.Изделие,Парам.Количество,Парам.QRCode) Тогда
			ТД_ГУ.Показать("Этикетка групповой упаковки");	
			КонецЕсли; 		
		КонецЕсли;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
ПолучитьДанныеПоУпаковкеНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьЭтапыСпецификации(ПЗ,РабочееМесто)
Этапы.Очистить();
Объект.Спецификация.Очистить();
ОбщийМодульВызовСервера.ПолучитьТаблицуЭтаповСпецификации(Этапы,ПЗ.Изделие,1,Ложь,ПЗ.ДатаЗапуска);
	Для каждого ТЧ Из Этапы Цикл
		Если РабочееМесто.ТабличнаяЧасть.Найти(ТЧ.ГруппаНоменклатуры,"ГруппаНоменклатуры") = Неопределено Тогда
		Продолжить;
		КонецЕсли;
	ОбщийМодульВызовСервера.ПолучитьСпецификациюСАналогами(Объект.Спецификация,ПЗ,ТЧ.ЭтапСпецификации,ТЧ.ЭтапСпецификации,ТЧ.Количество);	
	КонецЦикла;
Объект.Спецификация.Сортировать("ЭтапСпецификации,ВидМПЗ,Позиция,МПЗ");
КонецПроцедуры

&НаКлиенте
Процедура ПечатьДокументов(Команда)
ОткрытьФорму("Обработка.СозданныеБарКоды.Форма.Форма",Новый Структура("ПЗ,РабочееМесто,ДатаВыпуска",Элементы.Упаковка.ТекущиеДанные.ПроизводственноеЗадание,ОбщийМодульВызовСервера.ПолучитьРабочееМестоВЛинейке(Элементы.Упаковка.ТекущиеДанные.Линейка,"Упаковка"),ДатаВыпуска));
КонецПроцедуры

&НаСервере
Процедура СоздатьXMLНаСервере(ПЗ)
	//Попытка
	//ЗаписьXML = Новый ЗаписьXML;
	//ЗаписьXML.ОткрытьФайл(Константы.КаталогОбменаДанными.Получить()+СокрЛП(ПЗ.Линейка.Наименование)+"_"+Формат(ТекущаяДата(),"ДФ=yyyyMMddHHmmss")+".xml");
	//ЗаписьXML.ЗаписатьОбъявлениеXML();
	//ЗаписьXML.ЗаписатьНачалоЭлемента("Корневой");

	//ЗаписьXML.ЗаписатьАтрибут("Документ", "Выпуск");
	//ЗаписьXML.ЗаписатьКомментарий("Выпущенная продукция");
	//ЗаписьXML.ЗаписатьНачалоЭлемента("Продукция");

	//ЗаписьXML.ЗаписатьНачалоЭлемента("Линейка");
	//ЗаписьXML.ЗаписатьТекст(ПЗ.Линейка.Наименование);
	//ЗаписьXML.ЗаписатьКонецЭлемента();

	//ЗаписьXML.ЗаписатьНачалоЭлемента("МТК");
	//ЗаписьXML.ЗаписатьТекст(ПЗ.ДокументОснование.Номер);
	//ЗаписьXML.ЗаписатьКонецЭлемента();

	//ЗаписьXML.ЗаписатьНачалоЭлемента("БарКод");
	//ЗаписьXML.ЗаписатьТекст(ПЗ.БарКод);
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 

	//ЗаписьXML.ЗаписатьНачалоЭлемента("Товар");
	//ЗаписьXML.ЗаписатьТекст(ПЗ.Изделие.Товар.Наименование);
	//ЗаписьXML.ЗаписатьКонецЭлемента(); 

	//ЗаписьXML.ЗаписатьНачалоЭлемента("Выпущен");
	//ЗаписьXML.ЗаписатьТекст(Строка(ТекущаяДата()));
	//ЗаписьXML.ЗаписатьКонецЭлемента();          

	//ЗаписьXML.ЗаписатьКонецЭлемента();

	//ЗаписьXML.ЗаписатьКонецЭлемента();
	//ЗаписьXML.Закрыть();
	//Исключение
	//Сообщить(ОписаниеОшибки());
	//ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	//КонецПопытки;
КонецПроцедуры
          
&НаСервере
Функция ПолучитьМестоХранения(Линейка)
Возврат(Линейка.МестоХраненияКанбанов);
КонецФункции 

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если ЭтаФорма.ВводДоступен() Тогда
	Массив = ОбщийМодульВызовСервера.РазложитьСтрокуВМассив(Данные,";");
		Если Массив[0] = "3" Тогда
		ЗначениеПараметра1 = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[1]);
			Если ЗначениеПараметра1 = Неопределено Тогда
			Сообщить("Линейка или место хранения не найдена!");
			Возврат;	
			КонецЕсли; 
		МПЗ = ОбщийМодульВызовСервера.ПолучитьЗначениеИзСтрокиВнутр(Массив[3]);
			Если МПЗ = Неопределено Тогда
			Сообщить(Массив[3]+" - МПЗ не найдена!");
			Возврат;	
			КонецЕсли;
				Если ТипЗнч(ЗначениеПараметра1) = Тип("СправочникСсылка.Линейки") Тогда
				МестоХранения = ПолучитьМестоХранения(ЗначениеПараметра1);
				Иначе
				МестоХранения = ЗначениеПараметра1;			
				КонецЕсли;
		МестоХраненияОтправитель = ОбщийМодульВызовСервера.ПолучитьМестоХраненияПоКоду(Массив[2]);
		П = Новый Структура("МестоХраненияОтправитель,МестоХраненияКанбанов,МПЗ,НомерЯчейки,Сотрудник",МестоХраненияОтправитель,МестоХранения,МПЗ,Массив[5],Объект.Исполнитель);
		ОткрытьФорму("ОбщаяФорма.ОформлениеПустыхКанбанов",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
		ПоступлениеНаУпаковку(Неопределено,СокрЛП(Данные));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
тЭлементы = ДеревоСпецификации.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
   Элементы.ДеревоСпецификации.Развернуть(тСтр.ПолучитьИдентификатор(), Истина);
   КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
тЭлементы = ДеревоСпецификации.ПолучитьЭлементы();
   Для Каждого тСтр Из тЭлементы Цикл
   Элементы.ДеревоСпецификации.Свернуть(тСтр.ПолучитьИдентификатор());
   КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДерево(ЭтапСпецификации)
Объект.Спецификация.Сортировать("ТипСправочника,ВидМПЗ,Позиция,МПЗ");
тДерево = РеквизитФормыВЗначение("ДеревоСпецификации");
тДерево.Строки.Очистить();
ТипСпр = "";
	Для каждого ТЧ Из Объект.Спецификация Цикл
		Если ТЧ.ЭтапСпецификации <> ЭтапСпецификации Тогда
		Продолжить;		
		КонецЕсли; 
			Если ТипСпр <> ТЧ.ТипСправочника Тогда
			Стр = тДерево.Строки.Добавить();
			Стр.ТипСправочника = ТЧ.ТипСправочника;
			ТипСпр = ТЧ.ТипСправочника;
			КонецЕсли; 
	СтрЗнч = Стр.Строки.Добавить();
	СтрЗнч.Позиция = ТЧ.Позиция;
	СтрЗнч.ВидЭлемента = ТЧ.ВидМПЗ;
	СтрЗнч.МПЗ = ТЧ.МПЗ;
	СтрЗнч.Количество = ТЧ.Количество;
	СтрЗнч.ЕдиницаИзмерения = ТЧ.ЕдиницаИзмерения;
	СтрЗнч.Аналог = ТЧ.Аналог;
	СтрЗнч.Примечание = ТЧ.Примечание;
	КонецЦикла;
ЗначениеВРеквизитФормы(тДерево, "ДеревоСпецификации");
КонецПроцедуры

&НаКлиенте
Процедура УпаковкаИзделиеОткрытие(Элемент, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
ПолучитьСпецификацию(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСпецификацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если ТипЗнч(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ) = Тип("СправочникСсылка.Документация") Тогда
	ОбщийМодульКлиент.ОткрытьФайлДокумента(Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСпецификацию(Команда)
Элементы.Спецификация.Видимость = Истина;
ОткрытьСпецификацию = Истина;
Элементы.ДеревоСпецификации.Заголовок = "Спецификация: "+Элементы.Упаковка.ТекущиеДанные.Изделие;
ПолучитьЭтапыСпецификации(Элементы.Упаковка.ТекущиеДанные.ПроизводственноеЗадание,ОбщийМодульВызовСервера.ПолучитьРабочееМестоВЛинейке(Элементы.Упаковка.ТекущиеДанные.Линейка,"Упаковка"));
ЗаполнитьДерево(Элементы.Упаковка.ТекущиеДанные.Изделие);
РазвернутьДерево(Неопределено);
КонецПроцедуры

&НаСервере
Процедура ПоказатьУпакованныеПриборыНаСервере(СписокУпакованных)
СписокИзделий = Объект.Упаковка.Выгрузить(,"Изделие");
СписокИзделий.Свернуть("Изделие");
	Для каждого ТЧ Из СписокИзделий Цикл
	КолВып = 0;
	НГУ = ТЧ.Изделие.Товар.НумераторГрупповойУпаковки;
		Если НГУ.Пустая() Тогда
		Продолжить;		
		КонецЕсли; 
			Для каждого ТЧ_УП Из Объект.Упаковка Цикл
				Если ТЧ_УП.Изделие = ТЧ.Изделие Тогда
					Если ТЧ_УП.Тара > 0 Тогда
					КолВып = КолВып + 1;
					КонецЕсли; 
				КонецЕсли; 
			КонецЦикла; 
	СписокУпакованных.Добавить(ТЧ.Изделие,СокрЛП(ТЧ.Изделие.Наименование)+" ("+КолВып+" из "+НГУ.КоличествоВТаре+")");	
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьУпакованныеПриборы(Команда)
СписокУпакованных = Новый СписокЗначений;
ПоказатьУпакованныеПриборыНаСервере(СписокУпакованных);
ВыбЭлемент = СписокУпакованных.ВыбратьЭлемент("Список упакованных приборов",ВыбЭлемент);
КонецПроцедуры

&НаСервере
Функция ПолучитьИзделиеПоПЗ(ПЗ)
Возврат(ПЗ.Изделие);
КонецФункции 

&НаСервере
Функция ПолучитьДатуЗапускаПоПЗ(ПЗ)
Возврат(ПЗ.ДатаЗапуска);
КонецФункции 

&НаСервере
Функция ПолучитьВидРемонтаОбщий()
Возврат(Перечисления.ВидыРемонта.Общий);
КонецФункции

&НаСервере
Функция ПолучитьИзделиеРемонта(РабочееМесто)
	Для каждого ТЧ_Этап Из Этапы Цикл
	ЭтапАРМ = РабочееМесто.ТабличнаяЧасть.Найти(ТЧ_Этап.ГруппаНоменклатуры,"ГруппаНоменклатуры");
		Если ЭтапАРМ = Неопределено Тогда
		Продолжить;
		ИначеЕсли ЭтапАРМ.Комплектация Тогда
	    Продолжить;
		КонецЕсли;
			Если ТЧ_Этап.ЭтапСпецификации.Виртуальный Тогда
			Продолжить;
			КонецЕсли;
	Возврат(Новый Структура("Изделие,Количество",ТЧ_Этап.ЭтапСпецификации,ТЧ_Этап.Количество));
	КонецЦикла;
КонецФункции

&НаКлиенте
Процедура Ремонт(Команда)
РабочееМесто = ОбщийМодульВызовСервера.ПолучитьРабочееМестоВЛинейке(Элементы.Упаковка.ТекущиеДанные.Линейка,"Упаковка");
ПЗ = Элементы.Упаковка.ТекущиеДанные.ПроизводственноеЗадание;
НомерВТ = "";
	Если Не ВвестиСтроку(НомерВТ,"Введите номер возвратной тары",4) Тогда
	Сообщить("Номер возвратной тары не введён!");
	Возврат;
	КонецЕсли;
Этапы.Очистить();
ОбщийМодульВызовСервера.ПолучитьТаблицуЭтаповСпецификации(Этапы,ПолучитьИзделиеПоПЗ(ПЗ),1,Ложь,ПолучитьДатуЗапускаПоПЗ(ПЗ));
Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборПричинРемонта",Новый Структура("РабочееМесто",РабочееМесто));
	Если Результат <> Неопределено Тогда
	ОбщийМодульСозданиеДокументов.СоздатьРемонтнуюКарту(ПЗ,РабочееМесто,ПолучитьИзделиеРемонта(РабочееМесто),Объект.Исполнитель,ПолучитьВидРемонтаОбщий(),Результат,,НомерВТ);
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ЭтоКанбанБезРезервирования(МПЗ)
	Если Не МПЗ.Канбан.Пустая() Тогда
	 	Если Не МПЗ.Канбан.РезервироватьВПроизводстве Тогда
		Возврат(Истина);
		КонецЕсли;
	КонецЕсли; 
Возврат(Ложь);
КонецФункции 

&НаКлиенте
Процедура ОформитьПустойКанбан(Команда)
МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ОбщийМодульВызовСервера.МожноОформитьПустойКанбан(МПЗ) Тогда
		П = Новый Структура("МестоХраненияКанбанов,МПЗ",ПолучитьМестоХранения(Элементы.Упаковка.ТекущиеДанные.Линейка),МПЗ);
		ОткрытьФорму("ОбщаяФорма.ОформлениеПустыхКанбанов",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЭтоКанбан(МПЗ)
Возврат(МПЗ.Канбан);
КонецФункции 

&НаКлиенте
Процедура ОформитьНедостачу(Команда)
МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ЭтоКанбан(МПЗ).Пустая() Тогда	
		Сообщить("Выберите МПЗ ячейки канбана!");
		Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(МПЗ) <> Тип("СправочникСсылка.Материалы")Тогда	
	Сообщить("Выберите МПЗ ячейки канбана!");
	Возврат;
	КонецЕсли; 
П = Новый Структура("ВидОперации,МестоХраненияКанбанов,ПЗ,МПЗ",1,ПолучитьМестоХранения(Элементы.Упаковка.ТекущиеДанные.Линейка),Элементы.Упаковка.ТекущиеДанные.ПроизводственноеЗадание,МПЗ);
	Если ОткрытьФормуМодально("ОбщаяФорма.ОформлениеНедостачиИзлишков",П) Тогда
		Если ОбщийМодульВызовСервера.МТКОстановлена(Элементы.Упаковка.ТекущиеДанные.ПроизводственноеЗадание) Тогда
		ПоказатьОповещениеПользователя("ВНИМАНИЕ!",,"МТК остановлена по причине недостачи комплектации. Отложите изготавливаемый полуфабрикат!",БиблиотекаКартинок.Пользователь);
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьИзлишки(Команда)
МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ЭтоКанбан(МПЗ).Пустая() Тогда	
		Сообщить("Выберите МПЗ ячейки канбана!");
		Возврат;
		КонецЕсли;
	ИначеЕсли ТипЗнч(МПЗ) <> Тип("СправочникСсылка.Материалы")Тогда	
	Сообщить("Выберите МПЗ ячейки канбана!");
	Возврат;
	КонецЕсли; 
П = Новый Структура("ВидОперации,МестоХраненияКанбанов,ПЗ,МПЗ",2,ПолучитьМестоХранения(Элементы.Упаковка.ТекущиеДанные.Линейка),Элементы.Упаковка.ТекущиеДанные.ПроизводственноеЗадание,МПЗ);
ОткрытьФорму("ОбщаяФорма.ОформлениеНедостачиИзлишков",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьБрак(Команда)
МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
Количество = Элементы.ДеревоСпецификации.ТекущиеДанные.Количество;
	Если ОбщийМодульВызовСервера.МожноПеремещатьВБрак(МПЗ) Тогда
	П = Новый Структура("РабочееМесто,ПЗ,МПЗ,Количество",ОбщийМодульВызовСервера.ПолучитьРабочееМестоВЛинейке(Элементы.Упаковка.ТекущиеДанные.Линейка,"Упаковка"),Элементы.Упаковка.ТекущиеДанные.ПроизводственноеЗадание,МПЗ,Количество);
	ОткрытьФорму("ОбщаяФорма.ОформлениеБракаНовый",П,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
	Иначе
	Сообщить("Выбранную МПЗ запрещено перемещать в брак!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ОстановкаЛинейкиНаСервере(Линейка,МПЗ)
ОбщийМодульРаботаСРегистрами.ОстановитьЛинейку(Линейка,МПЗ);
КонецФункции

&НаКлиенте
Процедура ОстановкаЛинейки(Команда)
МПЗ = Элементы.ДеревоСпецификации.ТекущиеДанные.МПЗ;
	Если ТипЗнч(МПЗ) = Тип("СправочникСсылка.Номенклатура") Тогда
		Если ЭтоКанбанБезРезервирования(МПЗ) Тогда
			Если Вопрос("Вы уверены, что хотите остановить линейку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ОстановкаЛинейкиНаСервере(Элементы.Упаковка.ТекущиеДанные.Линейка,МПЗ);
			КонецЕсли;
		Иначе
		Сообщить("Выберите МПЗ ячейки канбана без резервирования!");
		КонецЕсли;
	Иначе	
	Сообщить("Выберите МПЗ ячейки канбана без резервирования!");
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
      ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры
