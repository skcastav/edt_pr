
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Объект.Исполнитель = ПараметрыСеанса.Пользователь;
КонецПроцедуры

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(Объект.РабочееМесто.Линейка) Тогда	
	Возврат(Истина);
	Иначе
	Объект.РабочееМесто = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура РабочееМестоПриИзменении(Элемент)
	Если Не МожноРаботатьВАРМ() Тогда
	Возврат;
	КонецЕсли;
ОчиститьСсылкуНаПЗ();
КонецПроцедуры

&НаКлиенте
Процедура РабочийКаталогНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
Диалог.Заголовок = "Выберите рабочий каталог";
Диалог.ПолноеИмяФайла = ""; 
Фильтр = "Все файлы (*.*)|*.*"; 
Диалог.Фильтр = Фильтр; 
Диалог.МножественныйВыбор = Ложь;
Диалог.Каталог = РабочийКаталог;
	Если Диалог.Выбрать() Тогда
	РабочийКаталог = Диалог.Каталог+"\"; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаданияНаСервере()
Запрос = Новый Запрос;
СписокПЗ = Новый СписокЗначений;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ КАК ПЗ
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто = &РабочееМесто
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус = 1
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Период";
Запрос.УстановитьПараметр("РабочееМесто",Объект.РабочееМесто);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
		СписокПЗ.Добавить(ВыборкаДетальныеЗаписи.ПЗ,СокрЛП(ВыборкаДетальныеЗаписи.ПЗ.Номер)+" ("+СокрЛП(ВыборкаДетальныеЗаписи.ПЗ.Изделие.Наименование)+")");
		КонецЦикла;
	КонецЕсли;
Возврат(СписокПЗ); 
КонецФункции

&НаСервере
Процедура ПолучитьИсходныеДанныеИзСпецификации(ЭтапСпецификации,КолУзла)
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_М(ЭтапСпецификации,Объект.ПроизводственноеЗадание.ДатаЗапуска);
	Пока ВыборкаНР.Следующий() Цикл
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Материалы") Тогда
		Выборка = ТаблицаОсновныхМПЗ.НайтиСтроки(Новый Структура("МПЗ",ВыборкаНР.Элемент));					
			Если Выборка.Количество() = 0 Тогда
			ТЧ = ТаблицаОсновныхМПЗ.Добавить();
			ТЧ.МПЗ = ВыборкаНР.Элемент;
			ТЧ.Количество = 1;
			Иначе
			Выборка[0].Количество = Выборка[0].Количество + 1;
			КонецЕсли; 
		Иначе
			Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа Тогда
			ПолучитьИсходныеДанныеИзСпецификации(ВыборкаНР.Элемент,ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Процедура АнализироватьЗаменуНаАналоги()
ПолучитьИсходныеДанныеИзСпецификации(Объект.ПроизводственноеЗадание.Изделие,1);
	Если Объект.ПроизводственноеЗадание.ДокументОснование.Аналоги.Количество() > 0 Тогда
	ТЗ = Новый ТаблицаЗначений;

	ТЗ.Колонки.Добавить("МПЗ");
	ТЗ.Колонки.Добавить("Аналог");
	ТЗ.Колонки.Добавить("Количество");
		Для каждого ТЧ Из Объект.ПроизводственноеЗадание.ДокументОснование.Аналоги Цикл		
		Выборка = ТЗ.НайтиСтроки(Новый Структура("МПЗ,Аналог",ТЧ.НормаРасходов.Элемент,ТЧ.АналогНормыРасходов.Элемент));
			Если Выборка.Количество() = 0 Тогда
			ТЧ_ТЗ = ТЗ.Добавить();
			ТЧ_ТЗ.МПЗ = ТЧ.НормаРасходов.Элемент;
			ТЧ_ТЗ.Аналог = ТЧ.АналогНормыРасходов.Элемент;
			ТЧ_ТЗ.Количество = 1;
			Иначе	
			Выборка[0].Количество = Выборка[0].Количество + 1;
			КонецЕсли; 
		КонецЦикла;
			Для каждого ТЧ Из ТЗ Цикл	
			Выборка = ТаблицаОсновныхМПЗ.НайтиСтроки(Новый Структура("МПЗ",ТЧ.МПЗ));
				Если Выборка[0].Количество = ТЧ.Количество Тогда
				//полная замена
					Для каждого ТЧ_МТК Из Объект.ПроизводственноеЗадание.ДокументОснование.Аналоги Цикл
						Если (ТЧ_МТК.НормаРасходов.Элемент = ТЧ.МПЗ)и(ТЧ_МТК.АналогНормыРасходов.Элемент = ТЧ.Аналог) Тогда
						ТЧ_ТПЗ = ТаблицаПолныхЗамен.Добавить();
						ТЧ_ТПЗ.Позиция = СокрЛП(ТЧ_МТК.НормаРасходов.Позиция);
						ТЧ_ТПЗ.МПЗ = ТЧ.МПЗ;
						ТЧ_ТПЗ.Аналог = ТЧ.Аналог;
						КонецЕсли; 
					КонецЦикла;
				Иначе
				//частичная замена
					Для каждого ТЧ_МТК Из Объект.ПроизводственноеЗадание.ДокументОснование.Аналоги Цикл
						Если (ТЧ_МТК.НормаРасходов.Элемент = ТЧ.МПЗ)и(ТЧ_МТК.АналогНормыРасходов.Элемент = ТЧ.Аналог) Тогда
						ТЧ_ТЧЗ = ТаблицаЧастичныхЗамен.Добавить();
						ТЧ_ТЧЗ.Позиция = СокрЛП(ТЧ_МТК.НормаРасходов.Позиция);
						ТЧ_ТЧЗ.МПЗ = ТЧ.МПЗ;
						ТЧ_ТЧЗ.Аналог = ТЧ.Аналог;						
						КонецЕсли; 
					КонецЦикла; 
				ТаблицаЧастичныхЗамен.Сортировать("Позиция");
				КонецЕсли; 
			КонецЦикла; 
	КонецЕсли; 
КонецПроцедуры 

&НаСервере
Функция ПолучитьНаименованиеПлаты()
Возврат(глНаименованиеВСкобкахБезЭтапа(Объект.ПроизводственноеЗадание.Изделие));
КонецФункции 

&НаСервере
Функция ПолучитьЛинейку()
Возврат(Объект.РабочееМесто.Линейка);
КонецФункции

&НаКлиенте
Процедура ВыбратьФайлыПрограммДляСтанка()
НомерМТК = ПолучитьНомерМТК(); 
МассивНайденных = НайтиФайлы(РабочийКаталог+ОбщийМодульВызовСервера.ПолучитьПодкаталогЛинейкиSMD(ПолучитьЛинейку()),"*.ygx",Истина);
к = 0;
НаименованиеПлаты = СокрЛП(ПолучитьНаименованиеПлаты());
НомСтр = 1;
	Для Каждого Файл из МассивНайденных Цикл	
	ОбработкаПрерыванияПользователя();
	к = к + 1;
	Состояние("Обработка каталога...",к*100/МассивНайденных.Количество(),"Поиск файлов (для отмены Ctrl+Break)"); 
		Если Не Файл.ЭтоФайл() Тогда
		Продолжить;		
		КонецЕсли;		
			Если Найти(Файл.Имя,"_") = 1 Тогда
			Продолжить;
			КонецЕсли; 
				Если (Найти(Файл.Имя,НаименованиеПлаты+"_") = 1)или(Файл.Имя = НаименованиеПлаты+".ygx") Тогда
				ТЧ = ТаблицаФайлов.Добавить();
				ТЧ.НомерСтроки = НомСтр;
				ТЧ.ИсходныйФайл = Файл.ПолноеИмя;
				ТЧ.ИмяИсходногоФайла = Файл.Имя;
				ИмяРабочегоФайла = "_"+СтрЗаменить(НомерМТК,"С","C")+"_"+ТЧ.ИмяИсходногоФайла;
				РабочийФайл = СтрЗаменить(ТЧ.ИсходныйФайл,ТЧ.ИмяИсходногоФайла,ИмяРабочегоФайла);
				Ф = Новый Файл(РабочийФайл);
					Если Ф.Существует() Тогда
					ТЧ.ИмяРабочегоФайла = ИмяРабочегоФайла;
					ТЧ.РабочийФайл = РабочийФайл;
					КонецЕсли; 				
				НомСтр = НомСтр + 1;
				КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Функция ПолучитьНаименованиеЛинейки()
Возврат(СокрЛП(Объект.РабочееМесто.Линейка.Наименование));
КонецФункции

&НаСервере
Процедура ОбработатьВыбранноеПЗ(ПЗ)
Объект.ПроизводственноеЗадание = ПЗ;
Парам = Новый Структура("РабочееМесто,Исполнитель,ДатаНачала",Объект.РабочееМесто,Объект.Исполнитель,ТекущаяДата());
ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(Объект.ПроизводственноеЗадание,Парам);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗадание(Команда)
ОчиститьСообщения();
	Если Объект.ПроизводственноеЗадание.Пустая() Тогда
	Состояние("Обработка...",,"Получение производственного задания");
	СписокПЗ = ПолучитьЗаданияНаСервере();
 		Если СписокПЗ.Количество() > 0 Тогда
		ПЗ = СписокПЗ.ВыбратьЭлемент("Выберите производственное задание");
			Если ПЗ <> Неопределено Тогда
			ОбработатьВыбранноеПЗ(ПЗ.Значение);
			Иначе
			Сообщить("Производственное задание не выбрано!");
			Возврат;
			КонецЕсли; 
				Если Найти(ПолучитьНаименованиеЛинейки(),"С03") > 0 Тогда
				Элементы.Завершить.Доступность = Истина;
				Элементы.ОбработатьФайлыПрограмм.Доступность = Ложь;			
				Возврат;
				КонецЕсли;
		Состояние("Обработка...",,"Получение файлов для станка");
		ВыбратьФайлыПрограммДляСтанка();
		Состояние("Обработка...",,"Получение таблиц аналоговых замен");
		АнализироватьЗаменуНаАналоги();
			Если ТаблицаФайлов.Количество() > 0 Тогда
				Если ЗначениеЗаполнено(ТаблицаФайлов[0].ИмяРабочегоФайла) Тогда
				Состояние("Обработка файлов программ...",,"Проверка рабочих файлов...");
				Результат = ПроверитьФайлыСАналогами();
					Если Результат = 0 Тогда
				    Элементы.Завершить.Доступность = Истина;
					Элементы.ОбработатьФайлыПрограмм.Доступность = Ложь;
					ИначеЕсли Результат = 1 Тогда
					Сообщить("В рабочих файлах для станка обнаружены расхождения в наименованиях! Обработайте файлы заново!");
					Иначе
				    Сообщить("В рабочих файлах для станка обнаружены ошибки (см. таблицу сверки)! Остановите МТК!");
					Элементы.Группа4.Показать();
					КонецЕсли;
				Иначе
				Состояние("Обработка...",,"Копирование файлов...");
				КопироватьФайлы();
				КонецЕсли;
			КонецЕсли; 
		Иначе
		Сообщить("Нет производственных заданий!");
		КонецЕсли;
	Иначе
	Сообщить("Завершите текущее производственное задание!");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьНомерМТК()
Возврат(СокрЛП(Объект.ПроизводственноеЗадание.ДокументОснование.Номер));
КонецФункции

&НаСервере
Функция ПолучитьНаименованиеSMD(МПЗ)
Возврат(СокрЛП(МПЗ.НаименованиеSMD));
КонецФункции

&НаСервере
Функция ПолучитьНаименованиеSMDИзНР(НР)
Возврат(СокрЛП(НР.Элемент.НаименованиеSMD));
КонецФункции

&НаСервере
Функция ПолучитьИзделие()
Возврат(Объект.ПроизводственноеЗадание.Изделие);
КонецФункции

&НаСервере
Функция ПолучитьСписокМПЗ(ЭтапСпецификации,СписокМПЗ,САналогами)
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_М(ЭтапСпецификации,Объект.ПроизводственноеЗадание.ДатаЗапуска);
	Пока ВыборкаНР.Следующий() Цикл
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Материалы") Тогда
			Если СписокГруппМПЗ.Количество() > 0 Тогда
			флПринадлежит = Ложь;
				Для каждого ГруппаМПЗ Из СписокГруппМПЗ Цикл
					Если ВыборкаНР.Элемент.ПринадлежитЭлементу(ГруппаМПЗ.Значение) Тогда
					флПринадлежит = Истина;
					Прервать;
					КонецЕсли;
				КонецЦикла;
					Если флПринадлежит Тогда
					Продолжить;
					КонецЕсли; 			
			КонецЕсли; 
				Если САналогами Тогда
				ВыборкаАНР = Объект.ПроизводственноеЗадание.ДокументОснование.Аналоги.Найти(ВыборкаНР.Ссылка,"НормаРасходов");
					Если ВыборкаАНР = Неопределено Тогда
					СписокМПЗ.Добавить(ВыборкаНР.Элемент,СокрЛП(ВыборкаНР.Позиция));
					Иначе	
					СписокМПЗ.Добавить(ВыборкаАНР.АналогНормыРасходов.Элемент,СокрЛП(ВыборкаНР.Позиция));
					КонецЕсли; 
				Иначе	
				СписокМПЗ.Добавить(ВыборкаНР.Ссылка,СокрЛП(ВыборкаНР.Позиция));			
				КонецЕсли;
		Иначе
			Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа Тогда
			ПолучитьСписокМПЗ(ВыборкаНР.Элемент,СписокМПЗ,САналогами);
			КонецЕсли;  
		КонецЕсли;
	КонецЦикла;
КонецФункции

&НаСервере
Функция ПолучитьСписокВозможныхМПЗ(НР)
СписокВозможныхМПЗ = Новый СписокЗначений;

СписокВозможныхМПЗ.Добавить(НР.Элемент);
ВыборкаАНР = Объект.ПроизводственноеЗадание.ДокументОснование.Аналоги.Найти(НР,"НормаРасходов");
ТаблицаАналогов = ОбщегоНазначенияПовтИсп.ПолучитьАналогиНормРасходов(НР,Объект.ПроизводственноеЗадание.ДатаЗапуска,Истина);
	Для каждого ТЧ_ТА Из ТаблицаАналогов Цикл
	СписокВозможныхМПЗ.Добавить(ТЧ_ТА.Элемент);
	КонецЦикла;
Возврат(СписокВозможныхМПЗ);
КонецФункции

&НаСервере
Функция ПолучитьЭлементНР(НР)
Возврат(НР.Элемент);
КонецФункции

&НаКлиенте
Функция ПроверитьИсходныеФайлы()
СписокМПЗ = Новый СписокЗначений;
Парсер = Новый ЧтениеXML;

ТаблицаСверки.Очистить();
ПолучитьСписокМПЗ(ПолучитьИзделие(),СписокМПЗ,Ложь);
	Для каждого Ф Из ТаблицаФайлов Цикл
	Парсер.ОткрытьФайл(Ф.ИсходныйФайл);
    Построитель = Новый ПостроительDOM;
    Документ = Построитель.Прочитать(Парсер);
        Для каждого Узел Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
			Если Узел.ИмяУзла = "Machine" Тогда
				Для каждого Узел_Machine Из Узел.ДочерниеУзлы Цикл
					Если Узел_Machine.ИмяУзла = "Mounts" Тогда
						Для каждого Узел_Mounts Из Узел_Machine.ДочерниеУзлы Цикл
							Если Узел_Mounts.ИмяУзла = "Mount" Тогда
							Позиция = СокрЛП(Узел_Mounts.Атрибуты.ПолучитьИменованныйЭлемент("Comment").Значение);
							Comp = СокрЛП(Узел_Mounts.Атрибуты.ПолучитьИменованныйЭлемент("Comp").Значение);
							Выборка = ТаблицаСверки.НайтиСтроки(Новый Структура("Файл,Позиция,Comp",Ф.НомерСтроки,Позиция,Comp));
								Если Выборка.Количество() = 0 Тогда
								ТЧ_МПЗ = ТаблицаСверки.Добавить();
							    ТЧ_МПЗ.Файл = Ф.НомерСтроки;               
				                ТЧ_МПЗ.Позиция = Позиция;
				                ТЧ_МПЗ.Comp = Comp;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли Узел_Machine.ИмяУзла = "Parts" Тогда
						Для каждого Узел_Parts Из Узел_Machine.ДочерниеУзлы Цикл
							Если Узел_Parts.ИмяУзла = "Part" Тогда
							Выборка = ТаблицаСверки.НайтиСтроки(Новый Структура("Файл,Comp",Ф.НомерСтроки,Узел_Parts.Атрибуты.ПолучитьИменованныйЭлемент("No").Значение));
						    	Если Выборка.Количество() > 0 Тогда
									Для каждого Узел_Part Из Узел_Parts.ДочерниеУзлы Цикл
										Если Узел_Part.ИмяУзла = "Part_001" Тогда
											Для к = 0 По Выборка.ВГраница() Цикл
											Выборка[к].МПЗИзФайла = Узел_Part.Атрибуты.ПолучитьИменованныйЭлемент("PartsName").Значение;
											КонецЦикла;	
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
 		КонецЦикла;
	Парсер.Закрыть();
	КонецЦикла;
флОшибка = Ложь;
	Для каждого НР Из СписокМПЗ Цикл
		Если ЗначениеЗаполнено(НР.Представление) Тогда
		Выборка = ТаблицаСверки.НайтиСтроки(Новый Структура("Позиция",НР.Представление));
			Если Выборка.Количество() > 0 Тогда
			ОснМПЗ_СМД = ПолучитьНаименованиеSMD(ПолучитьЭлементНР(НР.Значение));
			флНайден = Ложь;
				Для к = 0 По Выборка.ВГраница() Цикл
				СписокВозможныхМПЗ = ПолучитьСписокВозможныхМПЗ(НР.Значение);
					Для каждого МПЗ Из СписокВозможныхМПЗ Цикл
					МПЗ_СМД = ПолучитьНаименованиеSMD(МПЗ.Значение);
						Если Выборка[к].МПЗИзФайла = МПЗ_СМД Тогда
						Выборка[к].МПЗ = ОснМПЗ_СМД;
					    флНайден = Истина;
						Прервать;				
						КонецЕсли;
					КонецЦикла; 
						Если Не флНайден Тогда
						Выборка[к].КодОшибки = 1;//не совпадает наименование
						флОшибка = Истина;
						КонецЕсли; 
				КонецЦикла;	
			Иначе
			ТЧ_МПЗ = ТаблицаСверки.Добавить();
			ТЧ_МПЗ.Позиция = НР.Представление;
			ТЧ_МПЗ.МПЗ = ПолучитьНаименованиеSMDИзНР(НР.Значение);
			ТЧ_МПЗ.КодОшибки = 2;//нет позиции в файле
			флОшибка = Истина;			
			КонецЕсли;
		КонецЕсли;  
	КонецЦикла;
ТаблицаСверки.Сортировать("Позиция"); 
	Для каждого ТЧ_МПЗ Из ТаблицаСверки Цикл
	флНайден = Ложь;	
		Для каждого НР Из СписокМПЗ Цикл
		 	Если НР.Представление = ТЧ_МПЗ.Позиция Тогда
			флНайден = Истина;
			Прервать;
			КонецЕсли;				
		КонецЦикла;
			Если Не флНайден Тогда
			ТЧ_МПЗ.КодОшибки = 3;//нет позиции в спецификации
			флОшибка = Истина;
			КонецЕсли;
	КонецЦикла;			
Возврат(Не флОшибка);
КонецФункции

&НаКлиенте
Функция ПроверитьФайлыСАналогами()
СписокМПЗ = Новый СписокЗначений;
Парсер = Новый ЧтениеXML;

ТаблицаСверки.Очистить();
ПолучитьСписокМПЗ(ПолучитьИзделие(),СписокМПЗ,Истина);	
	Для каждого Ф Из ТаблицаФайлов Цикл
	Парсер.ОткрытьФайл(Ф.РабочийФайл);
    Построитель = Новый ПостроительDOM;
    Документ = Построитель.Прочитать(Парсер);
        Для каждого Узел Из Документ.ЭлементДокумента.ДочерниеУзлы Цикл
			Если Узел.ИмяУзла = "Machine" Тогда
				Для каждого Узел_Machine Из Узел.ДочерниеУзлы Цикл
					Если Узел_Machine.ИмяУзла = "Mounts" Тогда
						Для каждого Узел_Mounts Из Узел_Machine.ДочерниеУзлы Цикл
							Если Узел_Mounts.ИмяУзла = "Mount" Тогда
							Позиция = СокрЛП(Узел_Mounts.Атрибуты.ПолучитьИменованныйЭлемент("Comment").Значение);
							Comp = СокрЛП(Узел_Mounts.Атрибуты.ПолучитьИменованныйЭлемент("Comp").Значение);
							Выборка = ТаблицаСверки.НайтиСтроки(Новый Структура("Файл,Позиция,Comp",Ф.НомерСтроки,Позиция,Comp));
								Если Выборка.Количество() = 0 Тогда
								ТЧ_МПЗ = ТаблицаСверки.Добавить();
							    ТЧ_МПЗ.Файл = Ф.НомерСтроки;               
				                ТЧ_МПЗ.Позиция = Позиция;
				                ТЧ_МПЗ.Comp = Comp;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли Узел_Machine.ИмяУзла = "Parts" Тогда
						Для каждого Узел_Parts Из Узел_Machine.ДочерниеУзлы Цикл
							Если Узел_Parts.ИмяУзла = "Part" Тогда
							Выборка = ТаблицаСверки.НайтиСтроки(Новый Структура("Файл,Comp",Ф.НомерСтроки,Узел_Parts.Атрибуты.ПолучитьИменованныйЭлемент("No").Значение));
						    	Если Выборка.Количество() > 0 Тогда
									Для каждого Узел_Part Из Узел_Parts.ДочерниеУзлы Цикл
										Если Узел_Part.ИмяУзла = "Part_001" Тогда
											Для к = 0 По Выборка.ВГраница() Цикл
											Выборка[к].МПЗИзФайла = Узел_Part.Атрибуты.ПолучитьИменованныйЭлемент("PartsName").Значение;
											КонецЦикла;	
										КонецЕсли;
									КонецЦикла;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
 		КонецЦикла;
	Парсер.Закрыть();
	КонецЦикла;
флОшибка = 0;
	Для каждого МПЗ Из СписокМПЗ Цикл
		Если ЗначениеЗаполнено(МПЗ.Представление) Тогда
		Выборка = ТаблицаСверки.НайтиСтроки(Новый Структура("Позиция",МПЗ.Представление));
			Если Выборка.Количество() > 0 Тогда
				Для к = 0 По Выборка.ВГраница() Цикл
				Выборка[к].МПЗ = ПолучитьНаименованиеSMD(МПЗ.Значение);
					Если Выборка[к].МПЗИзФайла <> Выборка[к].МПЗ Тогда
				    Выборка[к].КодОшибки = 1;//не совпадает наименование
						Если флОшибка = 0 Тогда
						флОшибка = 1;
						КонецЕсли;				
					КонецЕсли;
				КонецЦикла;	
			Иначе
			ТЧ_МПЗ = ТаблицаСверки.Добавить();
			ТЧ_МПЗ.Позиция = МПЗ.Представление;
			ТЧ_МПЗ.МПЗ = МПЗ.Значение;
			ТЧ_МПЗ.КодОшибки = 2;//нет позиции в файле
			флОшибка = 2;			
			КонецЕсли;
		КонецЕсли;  
	КонецЦикла;
ТаблицаСверки.Сортировать("Позиция"); 
	Для каждого ТЧ_МПЗ Из ТаблицаСверки Цикл
	флНайден = Ложь;	
		Для каждого МПЗ Из СписокМПЗ Цикл
		 	Если СокрЛП(МПЗ.Представление) = ТЧ_МПЗ.Позиция Тогда
			флНайден = Истина;
			Прервать;
			КонецЕсли;				
		КонецЦикла;
			Если Не флНайден Тогда
			ТЧ_МПЗ.КодОшибки = 3;//нет позиции в спецификации
			флОшибка = 3;
			КонецЕсли;
	КонецЦикла;			
Возврат(флОшибка);
КонецФункции

&НаКлиенте
Процедура ПоместитьВТаблицу(СкопированныйФайл,ДополнительныеПараметры) Экспорт
// 
КонецПроцедуры

&НаКлиенте
Процедура КопироватьФайлы()
Парам = Новый Структура("ИмяРабочегоФайла,РабочийФайл,НомерСтроки");

НомерМТК = ПолучитьНомерМТК();
	Для каждого ТЧ_Ф Из ТаблицаФайлов Цикл
	ИмяРабочегоФайла = "_"+СтрЗаменить(НомерМТК,"С","C")+"_"+ТЧ_Ф.ИмяИсходногоФайла;
	РабочийФайл = СтрЗаменить(ТЧ_Ф.ИсходныйФайл,ТЧ_Ф.ИмяИсходногоФайла,ИмяРабочегоФайла);
	Парам.ИмяРабочегоФайла = ИмяРабочегоФайла;
	Парам.РабочийФайл = РабочийФайл;
	Парам.НомерСтроки = ТЧ_Ф.НомерСтроки;
	КонецЗаписи = Новый ОписаниеОповещения("ПоместитьВТаблицу",ЭтотОбъект,Парам); 
	НачатьКопированиеФайла(КонецЗаписи,ТЧ_Ф.ИсходныйФайл,РабочийФайл);
	ТЧ_Ф.ИмяРабочегоФайла = ИмяРабочегоФайла;
	ТЧ_Ф.РабочийФайл = РабочийФайл;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьТаблицуФайлов()
	Для каждого ТЧ_Ф Из ТаблицаФайлов Цикл
	ЧтениеТекста = Новый ЧтениеТекста(ТЧ_Ф.ИсходныйФайл);
	ЗаписьТекста = Новый ЗаписьТекста(ТЧ_Ф.РабочийФайл);

	Стр = ЧтениеТекста.ПрочитатьСтроку();	
		Пока Стр <> Неопределено Цикл
			Если Найти(Стр,"<Part No=") > 0 Тогда
			ЗаписьТекста.ЗаписатьСтроку(Стр);
			Comp = Сред(Стр,Найти(Стр,"=")+2);
			Comp = Лев(Comp,Найти(Comp,">")-2);
			Стр = ЧтениеТекста.ПрочитатьСтроку();
			ВыборкаТС = ТаблицаСверки.НайтиСтроки(Новый Структура("Comp,Файл",Comp,ТЧ_Ф.НомерСтроки));
			флЗаменили = Ложь;
				Для к = 0 По ВыборкаТС.ВГраница() Цикл
				ВыборкаТПЗ = ТаблицаПолныхЗамен.НайтиСтроки(Новый Структура("Позиция",ВыборкаТС[к].Позиция));
					Если ВыборкаТПЗ.Количество() > 0 Тогда
						Если Не флЗаменили Тогда
						Стр = Лев(Стр,Найти(Стр,"=")+1)+ПолучитьНаименованиеSMD(ВыборкаТПЗ[0].Аналог)+""""+Сред(Стр,Найти(Стр," Comment"));
						флЗаменили = Истина;
						КонецЕсли;
					ВыборкаТПЗ[0].Comp = ВыборкаТС[к].Comp;
					ВыборкаТПЗ[0].Файл = ТЧ_Ф.НомерСтроки;
					Иначе
						Если Не флЗаменили Тогда	
							Если СокрЛП(ВыборкаТС[к].МПЗ) <> СокрЛП(ВыборкаТС[к].МПЗИзФайла) Тогда
							Стр = Лев(Стр,Найти(Стр,"=")+1)+СокрЛП(ВыборкаТС[к].МПЗ)+""""+Сред(Стр,Найти(Стр," Comment"));
							флЗаменили = Истина;
							КонецЕсли; 
						КонецЕсли; 
					КонецЕсли;
				КонецЦикла; 
			КонецЕсли;
		ЗаписьТекста.ЗаписатьСтроку(Стр); 
	    Стр = ЧтениеТекста.ПрочитатьСтроку();
		КонецЦикла;
	ЧтениеТекста.Закрыть();
	ЗаписьТекста.Закрыть();
	КонецЦикла;
		Для каждого ТЧ Из ТаблицаПолныхЗамен Цикл
			Если ТЧ.Файл = 0 Тогда				
			Сообщить("Имеются незавершенные полные замены на аналоги! Остановите МТК!");
			Элементы.Группа6.Показать();
			Элементы.Завершить.Доступность = Ложь;
			Возврат;
			КонецЕсли; 				
		КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьФайлыПрограмм(Команда)
ОчиститьСообщения();
Состояние("Обработка файлов программ...",,"Проверка исходных файлов");
	Если ПроверитьИсходныеФайлы() Тогда
	Состояние("Обработка файлов программ...",,"Замена на аналоги...");
	ОбработатьТаблицуФайлов();
		Если ТаблицаЧастичныхЗамен.Количество() > 0 Тогда
		Сообщить("Имеются частичные замены на аналоги! Остановите МТК!");
		Элементы.Группа5.Показать();
		Элементы.Завершить.Доступность = Ложь;
		Иначе
		Элементы.Завершить.Доступность = Истина;
		КонецЕсли;
	Иначе
	Сообщить("В файлах для станка обнаружены ошибки (см. таблицу сверки)! Остановите МТК!");
	Элементы.Группа4.Показать();
	КонецЕсли;   
КонецПроцедуры

&НаСервере
Процедура ОчиститьСсылкуНаПЗ()
Объект.ПроизводственноеЗадание = Документы.ПроизводственноеЗадание.ПустаяСсылка();
ТаблицаФайлов.Очистить();
ТаблицаЧастичныхЗамен.Очистить();
ТаблицаПолныхЗамен.Очистить();
ТаблицаОсновныхМПЗ.Очистить();
ТаблицаСверки.Очистить();
Элементы.Завершить.Доступность = Ложь;
Элементы.ОбработатьФайлыПрограмм.Доступность = Истина;
КонецПроцедуры 

&НаКлиенте
Процедура ПечатьСпецификации(Команда)
ОткрытьФорму("Отчет.ПечатьСпецификацииСУчётомАналогов.Форма.ФормаОтчета",Новый Структура("ПЗ",Объект.ПроизводственноеЗадание));
КонецПроцедуры

&НаКлиенте
Процедура ПечатьВедомости(Команда)
ОткрытьФорму("Отчет.ПечатьСпецификацииСУчётомАналогов.Форма.ФормаОтчета",Новый Структура("ПЗ,ВедомостьЭлементов",Объект.ПроизводственноеЗадание,Истина));
КонецПроцедуры

&НаСервере
Функция ПолучитьМТК()
Возврат(Объект.ПроизводственноеЗадание.ДокументОснование);
КонецФункции 

&НаКлиенте
Процедура Остановить(Команда)
	Если Объект.ПроизводственноеЗадание.Пустая() Тогда
	Сообщить("Нет выбранного производственного задания!");
	Возврат;	
	КонецЕсли;
Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборПричинОстановки");
	Если Результат <> Неопределено Тогда
		Если ОбщийМодульВызовСервера.ОстановитьМТК(ПолучитьМТК(),Объект.Исполнитель,Результат.ПричинаОстановки,Неопределено,Неопределено,Объект.РабочееМесто,Результат.Комментарий) Тогда
		ОчиститьСсылкуНаПЗ();				
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЗавершитьНаСервере()
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Парам = Новый Структура("РабочееМесто,ДатаОкончания",Объект.РабочееМесто,ТекущаяДата());
	ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(Объект.ПроизводственноеЗадание,Парам);
	ОбщийМодульРаботаСРегистрами.СоздатьЭтапПроизводственногоЗадания(Объект.ПроизводственноеЗадание,ОбщийМодульВызовСервера.ПолучитьСледующееРабочееМесто(Объект.РабочееМесто),Неопределено,Неопределено);
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;	
	Исключение
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Сообщить(ОписаниеОшибки());
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции

&НаКлиенте
Процедура Завершить(Команда)
	Если Объект.ПроизводственноеЗадание.Пустая() Тогда
	Сообщить("Нет выбранного производственного задания!");
	Возврат;	
	КонецЕсли;
		Если ЗавершитьНаСервере() Тогда
		ОчиститьСсылкуНаПЗ();
		КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСпецификацию()
Возврат(Объект.ПроизводственноеЗадание.Изделие);
КонецФункции 

&НаКлиенте
Процедура ОтчётПоИзмененияВСпецификации(Команда)
	Если Не Объект.ПроизводственноеЗадание.Пустая() Тогда
	ОткрытьФорму("Отчет.ОтчётПоИзменениямВСпецификации.Форма.ФормаОтчета",Новый Структура("Спецификация",ПолучитьСпецификацию()));
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлДляСтанка(Команда)
ЗапуститьПриложение(Элементы.ТаблицаФайлов.ТекущиеДанные.РабочийФайл);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлПЗ(Команда)
Выборка = ТаблицаФайлов.НайтиСтроки(Новый Структура("НомерСтроки",Элементы.ТаблицаПолныхЗамен.ТекущиеДанные.НомерСтрокиТФ));
	Если Выборка.Количество() > 0 Тогда
	ЗапуститьПриложение(Выборка[0].РабочийФайл);		
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайлЧЗ(Команда)
Выборка = ТаблицаФайлов.НайтиСтроки(Новый Структура("НомерСтроки",Элементы.ТаблицаЧастичныхЗамен.ТекущиеДанные.НомерСтрокиТФ));
	Если Выборка.Количество() > 0 Тогда
	ЗапуститьПриложение(Выборка[0].РабочийФайл);		
	КонецЕсли; 
КонецПроцедуры
