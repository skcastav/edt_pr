
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Объект.Исполнитель = ПараметрыСеанса.Пользователь;
	Если Объект.Исполнитель.Пустая() Тогда
	Элементы.Линейка.Доступность = Ложь;
	Сообщить("Вы не внесены в справочник Сотрудников! Работа невозможна!");
	КонецЕсли; 
флСортировка = 1;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТаблицуИзделийСводную()
ТаблицаИзделийСводная.Очистить();
	Для каждого ТЧ Из Объект.Стенд Цикл
	НайденныеСтроки = ТаблицаИзделийСводная.НайтиСтроки(Новый Структура("Изделие",ТЧ.Изделие));
		Если НайденныеСтроки.Количество() = 0 Тогда
		ТЧ_ТИС = ТаблицаИзделийСводная.Добавить();
    	ТЧ_ТИС.Изделие = ТЧ.Изделие;
		ТЧ_ТИС.Количество = 1;
		Иначе
		НайденныеСтроки[0].Количество = НайденныеСтроки[0].Количество + 1;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоСтендуНаСервере()
Объект.Стенд.Очистить();
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Изделие,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.БарКод,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто = &РабочееМесто
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1,1,1,0,0,0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.НомерОчереди";
Запрос.УстановитьПараметр("РабочееМесто",Объект.РабочееМесто);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СтендовыйПрогон = РегистрыСведений.СтендовыйПрогон.СрезПоследних(,Новый Структура("ПЗ",ВыборкаДетальныеЗаписи.ПЗ));
		Для каждого Строка Из СтендовыйПрогон Цикл
		ТЧ = Объект.Стенд.Добавить();
		ТЧ.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
		ТЧ.Изделие = ВыборкаДетальныеЗаписи.Изделие;
		ТЧ.БарКод = ВыборкаДетальныеЗаписи.БарКод;
		БК = РегистрыСведений.БарКоды.ПолучитьПоследнее(,Новый Структура("ПЗ",ВыборкаДетальныеЗаписи.ПЗ));
		ТЧ.КодDanfoss = БК.КодDanfoss;
		ТЧ.Стенд = Строка.Стенд;
		ТЧ.Прогон = Строка.Прогон;
		ТЧ.НачалоПроверки = Строка.ДатаСнятия;
		ТЧ.ОкончаниеПроверки = Строка.ДатаСнятия + ВыборкаДетальныеЗаписи.Изделие.ВремяНахожденияВБуфере*3600;
			Если ТЧ.ОкончаниеПроверки <= ТекущаяДата() Тогда
			ТЧ.ПроверкаОкончена = Истина;
			КонецЕсли; 
		НапряжениеБатарейки = РегистрыСведений.НапряжениеБатарейки.ПолучитьПоследнее(,Новый Структура("ПЗ",ВыборкаДетальныеЗаписи.ПЗ));			
		ТЧ.НапряжениеНаСтенде = НапряжениеБатарейки.НапряжениеНаСтенде;	
		КонецЦикла;	 
	КонецЦикла;
ОбновитьТаблицуИзделийСводную();
	Если флСортировка = 1 Тогда
	Объект.Стенд.Сортировать("ОкончаниеПроверки");
	Иначе
	Объект.Стенд.Сортировать("ПроизводственноеЗадание");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПоСтенду()
ПолучитьДанныеПоСтендуНаСервере();
КонецПроцедуры
 
&НаСервере
Процедура ОчиститьПЗНаСервере()
Объект.ПроизводственноеЗадание = Документы.ПроизводственноеЗадание.ПустаяСсылка();
КонецПроцедуры 

&НаСервере
Процедура ПолучитьРМ()
Объект.РабочееМесто = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
РабочееМестоСтенд = Справочники.РабочиеМестаЛинеек.ПустаяСсылка();
РабочееМестоУпаковка = Справочники.РабочиеМестаЛинеек.ПустаяСсылка(); 
Отбор = Новый Структура("Линейка",Линейка);
РМ = Справочники.РабочиеМестаЛинеек.Выбрать(,,Отбор);
	Пока РМ.Следующий() Цикл
		Если РМ.ЭтоГруппа Тогда
		Продолжить;		
		КонецЕсли;
			Если СокрЛП(РМ.ГруппаРабочихМест.Префикс) = "СТ" Тогда
			РабочееМестоСтенд = РМ.Ссылка;
			ИначеЕсли СокрЛП(РМ.ГруппаРабочихМест.Префикс) = "БФ" Тогда
			Объект.РабочееМесто = РМ.Ссылка;
			ИначеЕсли СокрЛП(РМ.ГруппаРабочихМест.Префикс) = "УП" Тогда
			РабочееМестоУпаковка = РМ.Ссылка;		
			КонецЕсли; 
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(Линейка) Тогда	
	Возврат(Истина);
	Иначе
	Линейка = Справочники.Линейки.ПустаяСсылка();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЛинейкаПриИзменении(Элемент)
ОтключитьОбработчикОжидания("ПолучитьДанныеПоСтенду");
	Если Не МожноРаботатьВАРМ() Тогда	
	Возврат;
	КонецЕсли; 
ПолучитьРМ();
ПолучитьДанныеПоСтендуНаСервере();
	Если Объект.ИнтервалОбновления > 0 Тогда
	ПодключитьОбработчикОжидания("ПолучитьДанныеПоСтенду", Объект.ИнтервалОбновления*60);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОбновленияПриИзменении(Элемент)
ОтключитьОбработчикОжидания("ПолучитьДанныеПоСтенду");
	Если Объект.ИнтервалОбновления > 0 Тогда
	ПодключитьОбработчикОжидания("ПолучитьДанныеПоСтенду", Объект.ИнтервалОбновления*60);
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Функция ПолучитьИзделиеРемонта()
	Для каждого ТЧ_Этап Из Этапы Цикл
	ЭтапАРМ = Объект.РабочееМесто.ТабличнаяЧасть.Найти(ТЧ_Этап.ГруппаНоменклатуры,"ГруппаНоменклатуры");
		Если ЭтапАРМ = Неопределено Тогда
		Продолжить;
		ИначеЕсли ЭтапАРМ.Комплектация Тогда
	    Продолжить;
		КонецЕсли;
			Если ТЧ_Этап.ЭтапСпецификации.Виртуальный Тогда
			Продолжить;
			КонецЕсли;
	Возврат(Новый Структура("Изделие,Количество",ТЧ_Этап.ЭтапСпецификации,ТЧ_Этап.Количество));
	КонецЦикла;
КонецФункции 

&НаСервере
Процедура ОтправкаВРемонтНаСервере(Стр,ПричиныРемонта,Напряжение)
ТЧ = Объект.Стенд.НайтиПоИдентификатору(Стр);
Этапы.Очистить();
ОбщийМодульВызовСервера.ПолучитьТаблицуЭтаповСпецификации(Этапы,ТЧ.ПроизводственноеЗадание.Изделие,1,Ложь,ТЧ.ПроизводственноеЗадание.ДатаЗапуска);
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		Если Не ОбщийМодульСозданиеДокументов.СоздатьРемонтнуюКарту(ТЧ.ПроизводственноеЗадание,Объект.РабочееМесто,ПолучитьИзделиеРемонта(),Объект.Исполнитель,Перечисления.ВидыРемонта.Общий,ПричиныРемонта) Тогда
	    Сообщить("Ремонтная карта не создана!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);		
		Возврат;
		КонецЕсли;	
	СохранитьНапряжениеБатарейки(ТЧ,Напряжение);		
	НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПЗ.Установить(ТЧ.ПроизводственноеЗадание);
	НаборЗаписей.Прочитать();
	    Для Каждого Запись Из НаборЗаписей Цикл 
		РегистрСведенийМенеджерЗаписи = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(РегистрСведенийМенеджерЗаписи, Запись);
		РегистрСведенийМенеджерЗаписи.Прочитать();
			Если Запись.РабочееМесто = РабочееМестоСтенд Тогда
			РегистрСведенийМенеджерЗаписи.Ремонт = Истина;
			РегистрСведенийМенеджерЗаписи.ДатаОкончания = Дата(1,1,1);
			РегистрСведенийМенеджерЗаписи.Записать();
			ИначеЕсли Запись.РабочееМесто = Объект.РабочееМесто Тогда
			РегистрСведенийМенеджерЗаписи.Удалить();
			Иначе			
			РегистрСведенийМенеджерЗаписи.Записать();
			КонецЕсли;  
	    КонецЦикла;
	Объект.Стенд.Удалить(Объект.Стенд.Индекс(ТЧ));
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;	
	ОбновитьТаблицуИзделийСводную();
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция НайтиЭтапСтенд(Спецификация,ЭтапСТ)
НР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н(Спецификация,ТекущаяДата());
	Пока НР.Следующий() Цикл	
		Если НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа Тогда
			Если Найти(НР.Элемент.Наименование,"СТ-") > 0 Тогда
			ЭтапСТ = НР.Элемент;
			Прервать;
			Иначе
			НайтиЭтапСтенд(НР.Элемент,ЭтапСТ);
			КонецЕсли; 	
		КонецЕсли; 
	КонецЦикла;
Возврат(ЭтапСТ);	
КонецФункции

&НаКлиенте
Процедура ОтправкаВРемонт(Команда,БарКод = "")
	Если Не ЗначениеЗаполнено(БарКод) Тогда
		Если Не ВвестиСтроку(БарКод,"Введите бар-код",18) Тогда
		Возврат;
		КонецЕсли; 
	КонецЕсли;
ОтключитьОбработчикОжидания("ПолучитьДанныеПоСтенду");
	Если СтрДлина(СокрЛП(БарКод)) = 17 Тогда
	Отбор = Новый Структура("БарКод",БарКод);		
	Иначе
	Отбор = Новый Структура("КодDanfoss",БарКод);
	КонецЕсли; 
Выборка = Объект.Стенд.НайтиСтроки(Отбор);
	Если Выборка.Количество() > 0 Тогда	
	Напряжение = 0;
		Если ВвестиЧисло(Напряжение,"Введите напряжение батарейки",4,2) Тогда
			Если Напряжение > 0 Тогда	
			Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборПричинРемонта",Новый Структура("РабочееМесто",Объект.РабочееМесто));
				Если Результат <> Неопределено Тогда
				Стр = Выборка[0].ПолучитьИдентификатор();
				ОтправкаВРемонтНаСервере(Стр,Результат,Напряжение);	
				КонецЕсли;
			Иначе
			Сообщить("Введите напряжение батарейки отличное от нуля!");
			КонецЕсли;
		Иначе
		Сообщить("Введите напряжение батарейки отличное от нуля!");
		КонецЕсли;	
	Иначе
	Сообщить("Бар-код не найден!");
	КонецЕсли;
		Если Объект.ИнтервалОбновления > 0 Тогда
		ПодключитьОбработчикОжидания("ПолучитьДанныеПоСтенду", Объект.ИнтервалОбновления*60);
		КонецЕсли; 	
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоБарКоду(Команда)
БарКод = "";
	Если ВвестиСтроку(БарКод,"Введите бар-код",18) Тогда
		Если СтрДлина(СокрЛП(БарКод)) > 16 Тогда
		Отбор = Новый Структура("БарКод",БарКод);		
		Иначе
		Отбор = Новый Структура("КодDanfoss",БарКод);
		КонецЕсли;
	Выборка = Объект.Стенд.НайтиСтроки(Отбор);
		Если Выборка.Количество() > 0 Тогда	
		Элементы.Стенд.ТекущаяСтрока = Выборка[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВсёОРемонте(Команда)
П = Новый Структура("ПЗ",Объект.Стенд.НайтиПоИдентификатору(Элементы.Стенд.ТекущаяСтрока).ПроизводственноеЗадание);
ОткрытьФорму("Отчет.ОтчетПоРемонту.Форма.ФормаОтчета",П);
КонецПроцедуры

&НаКлиенте
Процедура флСортировкаПриИзменении(Элемент)
флСортировкаПриИзмененииНаСервере();
КонецПроцедуры

&НаСервере
Процедура флСортировкаПриИзмененииНаСервере()
	Если флСортировка = 1 Тогда
	Объект.Стенд.Сортировать("ОкончаниеПроверки");
	Иначе
	Объект.Стенд.Сортировать("ПроизводственноеЗадание");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
ПриЗакрытииНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПриЗакрытииНаСервере()
//РМ = Объект.РабочееМесто.ПолучитьОбъект();
//РМ.Авторизовано = Ложь;
//РМ.Записать();
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
ПолучитьДанныеПоСтендуНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если ЭтаФорма.ВводДоступен() Тогда
	СписокДействий = Новый СписокЗначений;

	СписокДействий.Добавить(1,"Отправка в ремонт");
	СписокДействий.Добавить(2,"Передача на упаковку или в ремонт");
	Действие = 1;
	Действие = СписокДействий.ВыбратьЭлемент("Выберите действие",Действие);
		Если Действие.Значение = 1 Тогда
		ОтправкаВРемонт(Неопределено,СокрЛП(Данные));
		ИначеЕсли Действие.Значение = 2 Тогда
	 	ПередачаНаУпаковкуИлиВРемонт(Неопределено,СокрЛП(Данные));
		КонецЕсли; 
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьЭтапыСпецификации(ПЗ,РабочееМесто)
Этапы.Очистить();
Объект.Спецификация.Очистить();
ОбщийМодульВызовСервера.ПолучитьТаблицуЭтаповСпецификации(Этапы,ПЗ.Изделие,1,Ложь,ПЗ.ДатаЗапуска);
	Для каждого ТЧ Из Этапы Цикл
		Если РабочееМесто.ТабличнаяЧасть.Найти(ТЧ.ГруппаНоменклатуры,"ГруппаНоменклатуры") <> Неопределено Тогда
		ОбщийМодульВызовСервера.ПолучитьСпецификациюСАналогами(Объект.Спецификация,ПЗ,ТЧ.ЭтапСпецификации,ТЧ.ЭтапСпецификации,ТЧ.Количество);
		КонецЕсли;
	КонецЦикла;
Объект.Спецификация.Сортировать("ЭтапСпецификации,ВидМПЗ,Позиция,МПЗ");
КонецПроцедуры

&НаСервере
Процедура СохранитьНапряжениеБатарейки(ТЧ,Напряжение)
НаборЗаписей = РегистрыСведений.НапряжениеБатарейки.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.ПЗ.Установить(ТЧ.ПроизводственноеЗадание);
НаборЗаписей.Прочитать();
    Для Каждого Запись Из НаборЗаписей Цикл
		Если Запись.НапряжениеПослеБуфера = 0 Тогда
		Запись.НапряжениеПослеБуфера = Напряжение;
		КонецЕсли;  
    КонецЦикла;
НаборЗаписей.Записать(Истина);
КонецПроцедуры

&НаСервере
Процедура ПередачаНаУпаковкуНаСервере(Стр,Напряжение)
ТЧ = Объект.Стенд.НайтиПоИдентификатору(Стр);
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	СохранитьНапряжениеБатарейки(ТЧ,Напряжение);
	ПолучитьЭтапыСпецификации(ТЧ.ПроизводственноеЗадание,РабочееМестоСтенд);
		Если ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(ТЧ.ПроизводственноеЗадание,РабочееМестоСтенд,Объект.Спецификация,Этапы,ТекущаяДата()) Тогда
		МестоПередачи = Объект.РабочееМесто.Наименование;
		Иначе
		Сообщить("Документ выпуска по производственному заданию "+ТЧ.ПроизводственноеЗадание.Номер+" не создан!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Возврат;
		КонецЕсли;
	НаборЗаписей = РегистрыСведений.ЭтапыПроизводственныхЗаданий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПЗ.Установить(ТЧ.ПроизводственноеЗадание);
	НаборЗаписей.Прочитать();
	    Для Каждого Запись Из НаборЗаписей Цикл 
	    	Если Запись.РабочееМесто = Объект.РабочееМесто Тогда
			Запись.ДатаОкончания = ТекущаяДата();
			Запись.Исполнитель = Объект.Исполнитель;
			Прервать;
			КонецЕсли;  
	    КонецЦикла;
	ЭПЗ = НаборЗаписей.Добавить();
	ЭПЗ.Период = ТекущаяДата();
	ЭПЗ.ПЗ = ТЧ.ПроизводственноеЗадание; 
	ЭПЗ.Линейка = ТЧ.ПроизводственноеЗадание.Линейка;
	ЭПЗ.Изделие = ТЧ.Изделие;
	ЭПЗ.Количество = 1;
	ЭПЗ.БарКод = ТЧ.БарКод;
	ЭПЗ.РабочееМесто = РабочееМестоУпаковка;
	НаборЗаписей.Записать();
	Объект.Стенд.Удалить(Объект.Стенд.Индекс(ТЧ));	
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	ОбновитьТаблицуИзделийСводную();
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки; 
КонецПроцедуры 

&НаКлиенте
Процедура ПередачаНаУпаковкуИлиВРемонт(Команда,БарКод = "")
	Если Не ЗначениеЗаполнено(БарКод) Тогда
		Если Не ВвестиСтроку(БарКод,"Введите бар-код",18) Тогда
		Возврат;
		КонецЕсли; 
	КонецЕсли;
ОтключитьОбработчикОжидания("ПолучитьДанныеПоСтенду");
	Если СтрДлина(СокрЛП(БарКод)) > 16 Тогда
	Отбор = Новый Структура("БарКод",БарКод);		
	Иначе
	Отбор = Новый Структура("КодDanfoss",БарКод);
	КонецЕсли; 
Выборка = Объект.Стенд.НайтиСтроки(Отбор);
	Если Выборка.Количество() > 0 Тогда	
	Стр = Выборка[0].ПолучитьИдентификатор();
	НапряжениеПослеБуфера = 0;
		Если ВвестиЧисло(НапряжениеПослеБуфера,"Введите напряжение батарейки",3,2) Тогда
			Если НапряжениеПослеБуфера > 0 Тогда	
			Результат = ОткрытьФормуМодально("Обработка.РабочееМестоБуфер.Форма.ПроверкаНапряжения",Новый Структура("ПЗ,НапряжениеПослеБуфера",Выборка[0].ПроизводственноеЗадание,НапряжениеПослеБуфера));
				Если Результат = 0 Тогда
				РезультатПричиныРемонта = ОткрытьФормуМодально("ОбщаяФорма.ВыборПричинРемонта",Новый Структура("РабочееМесто",Объект.РабочееМесто));
					Если РезультатПричиныРемонта <> Неопределено Тогда
					ОтправкаВРемонтНаСервере(Стр,РезультатПричиныРемонта,НапряжениеПослеБуфера);
					КонецЕсли;
				ИначеЕсли Результат = 1 Тогда
				ПередачаНаУпаковкуНаСервере(Стр,НапряжениеПослеБуфера);
				КонецЕсли;
			Иначе
			Сообщить("Введите напряжение батарейки отличное от нуля!");
			КонецЕсли; 
		Иначе
		Сообщить("Введите напряжение батарейки отличное от нуля!");
		КонецЕсли;
	Иначе
	Сообщить("Бар-код не найден!");
	КонецЕсли;
		Если Объект.ИнтервалОбновления > 0 Тогда
		ПодключитьОбработчикОжидания("ПолучитьДанныеПоСтенду", Объект.ИнтервалОбновления*60);
		КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
      ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   КонецЕсли;
КонецПроцедуры
