
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Объект.Исполнитель = ПараметрыСеанса.Пользователь; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
      ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   КонецЕсли;
	Если Не Объект.Линейка.Пустая() Тогда
	ЛинейкаПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДополнительныеНастройки()
СписокМестХранения.Очистить();
СписокМестХранения.Добавить(Объект.Линейка.МестоХраненияКанбанов);
СписокМестХранения.Добавить(Объект.Линейка.Подразделение.МестоХраненияДополнительный);
СписокМестХранения.Добавить(Объект.Линейка.Подразделение.МестоХраненияПоУмолчанию);
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РабочиеМестаЛинеек.Ссылка
	|ИЗ
	|	Справочник.РабочиеМестаЛинеек КАК РабочиеМестаЛинеек
	|ГДЕ
	|	РабочиеМестаЛинеек.Линейка = &Линейка
	|	И РабочиеМестаЛинеек.ПометкаУдаления = ЛОЖЬ
	|	И РабочиеМестаЛинеек.ЭтоГруппа = ЛОЖЬ
	|	И РабочиеМестаЛинеек.Код = 1";
Запрос.УстановитьПараметр("Линейка", Объект.Линейка);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Объект.РабочееМесто = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(Объект.Линейка) Тогда	
	Возврат(Истина);
	Иначе
	Объект.Линейка = Справочники.Линейки.ПустаяСсылка();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ЛинейкаПриИзменении(Элемент)
	Если Не МожноРаботатьВАРМ() Тогда
	Возврат;
	КонецЕсли;
ПолучитьДополнительныеНастройки();
ПолучитьДанныеПоЗаданиямНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоЗаданиямНаСервере()
ТаблицаЗаданий.Очистить();
Запрос = Новый Запрос;
ЗапросЛО = Новый Запрос;
ЗапросДок = Новый Запрос;
СписокСтатусов = Новый СписокЗначений;

СписокСтатусов.Добавить(0);
СписокСтатусов.Добавить(1);

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Изделие,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Исполнитель
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Линейка = &Линейка
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус В(&СписокСтатусов)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ЛинияSMD <> &ПустаяЛиния
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("Линейка",Объект.Линейка);
Запрос.УстановитьПараметр("СписокСтатусов",СписокСтатусов);
Запрос.УстановитьПараметр("ПустаяЛиния",Справочники.ЛинииSMD.ПустаяСсылка());
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл	  
    ТЧ = ТаблицаЗаданий.Добавить();
	ТЧ.Спецификация = ВыборкаДетальныеЗаписи.Изделие;
	ТЧ.Статус = ПолучитьСтатус(ВыборкаДетальныеЗаписи.Изделие);
	ТЧ.ПЗ = ВыборкаДетальныеЗаписи.ПЗ;
	ТЧ.ДатаПЗ = ВыборкаДетальныеЗаписи.ПЗ.Дата;
	ТЧ.СтатусМТК = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.Статус;
	ТЧ.Приоритет = ?(ВыборкаДетальныеЗаписи.ПЗ.НомерОчереди = -1,Истина,Ложь);
	ТЧ.МестоХраненияПотребитель = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.МестоХраненияПотребитель;
	ТЧ.Количество = ВыборкаДетальныеЗаписи.ПЗ.Количество;
	ТЧ.Линия = ВыборкаДетальныеЗаписи.ПЗ.ЛинияSMD;
	ЗапросЛО.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЛьготнаяОчередь.НормаРасходов.Элемент КАК МПЗ
		|ИЗ
		|	РегистрСведений.ЛьготнаяОчередь КАК ЛьготнаяОчередь
		|ГДЕ
		|	ЛьготнаяОчередь.ПЗ = &ПЗ
		|	И ЛьготнаяОчередь.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	ЗапросЛО.УстановитьПараметр("ПЗ",ВыборкаДетальныеЗаписи.ПЗ);
	РезультатЗапросаЛО = ЗапросЛО.Выполнить();
	ТЧ.ЛОSMD = Не РезультатЗапросаЛО.Пустой(); 
	//ЗапросДок.Текст = 
	//	"ВЫБРАТЬ
	//	|	СтруктураПодчиненности.Ссылка
	//	|ИЗ
	//	|	КритерийОтбора.ПодчиненныеДокументы(&ЗначениеКритерияОтбора) КАК СтруктураПодчиненности
	//	|
	//	|УПОРЯДОЧИТЬ ПО
	//	|	СтруктураПодчиненности.Ссылка.Дата";
	//ЗапросДок.УстановитьПараметр("ЗначениеКритерияОтбора", ВыборкаДетальныеЗаписи.ПЗ);
	//РезультатЗапросаДок = ЗапросДок.Выполнить();
	//ВыборкаДок = РезультатЗапросаДок.Выбрать();
	//	Пока ВыборкаДок.Следующий() Цикл
	//		Если ТипЗнч(ВыборкаДок.Ссылка) = Тип("ДокументСсылка.ДвижениеМПЗ") Тогда
	//		ТЧ.Перемещение = ВыборкаДок.Ссылка;
	//		Прервать;
	//		КонецЕсли; 
	//	КонецЦикла;   
	КонецЦикла;
ТаблицаЗаданий.Сортировать("ДатаПЗ");
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапущенныеВРаботу()
ТаблицаЗаданий.Очистить();
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственноеЗадание.Ссылка КАК ПЗ,
	|	ПроизводственноеЗадание.Изделие
	|ИЗ
	|	Документ.ПроизводственноеЗадание КАК ПроизводственноеЗадание
	|ГДЕ
	|	ПроизводственноеЗадание.Линейка = &Линейка
	|	И ПроизводственноеЗадание.ДокументОснование.Статус = 4";
Запрос.УстановитьПараметр("Линейка",Объект.Линейка);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл	  
    ТЧ = ТаблицаЗаданий.Добавить();
	ТЧ.Спецификация = ВыборкаДетальныеЗаписи.Изделие;
	ТЧ.Статус = ПолучитьСтатус(ВыборкаДетальныеЗаписи.Изделие);
	ТЧ.ПЗ = ВыборкаДетальныеЗаписи.ПЗ;
	ТЧ.ДатаПЗ = ВыборкаДетальныеЗаписи.ПЗ.Дата;
	ТЧ.СтатусМТК = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.Статус;
	ТЧ.Приоритет = ?(ВыборкаДетальныеЗаписи.ПЗ.НомерОчереди = -1,Истина,Ложь);
	ТЧ.МестоХраненияПотребитель = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.МестоХраненияПотребитель;
	ТЧ.Количество = ВыборкаДетальныеЗаписи.ПЗ.Количество;
	ТЧ.Линия = ВыборкаДетальныеЗаписи.ПЗ.ЛинияSMD;
	КонецЦикла;
ТаблицаЗаданий.Сортировать("ДатаПЗ");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗадания(Команда)
	Если ПоказатьЗапущенныеВРаботу Тогда
	ПолучитьЗапущенныеВРаботу();
	Иначе	
	ПолучитьДанныеПоЗаданиямНаСервере();
	КонецЕсли; 
Элементы.ПереместитьПлаты.Доступность = Не ПоказатьЗапущенныеВРаботу;
Элементы.ПолучитьСписокПеремещения.Доступность = Не ПоказатьЗапущенныеВРаботу;
Элементы.СоздатьПередачиВПроизводство.Доступность = Не ПоказатьЗапущенныеВРаботу;
Элементы.ЗапуститьВПроизводство.Доступность = Не ПоказатьЗапущенныеВРаботу;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСпецификаций(Команда)
СписокПЗ = Новый СписокЗначений;

	Для каждого ТЧ Из ТаблицаЗаданий Цикл
		Если ТЧ.Пометка Тогда
		ВыбСтатус = ПолучитьСтатусМТК(ТЧ.ПЗ);
			Если (ВыбСтатус = 1)или(ВыбСтатус = 4) Тогда
			СписокПЗ.Добавить(ТЧ.ПЗ);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
		Если СписокПЗ.Количество() > 0 Тогда
		ОткрытьФорму("Отчет.ПечатьСпецификацииСУчётомАналогов.Форма.ФормаОтчета",Новый Структура("СписокПЗ",СписокПЗ));
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьВедомостейЭлементов(Команда)
СписокПЗ = Новый СписокЗначений;

	Для каждого ТЧ Из ТаблицаЗаданий Цикл
		Если ТЧ.Пометка Тогда
		ВыбСтатус = ПолучитьСтатусМТК(ТЧ.ПЗ);
			Если (ВыбСтатус = 1)или(ВыбСтатус = 4) Тогда
			СписокПЗ.Добавить(ТЧ.ПЗ);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
		Если СписокПЗ.Количество() > 0 Тогда
		ОткрытьФорму("Отчет.ПечатьСпецификацииСУчётомАналогов.Форма.ФормаОтчета",Новый Структура("СписокПЗ,ВедомостьЭлементов",СписокПЗ,Истина));
		КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПлатуИзделия(ЭтапСпецификации,Плата)
НормРасх = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_М(ЭтапСпецификации,ТекущаяДата());
	Пока НормРасх.Следующий() Цикл			
		Если ТипЗнч(НормРасх.Элемент) = Тип("СправочникСсылка.Материалы")Тогда
			Если Найти(НормРасх.Элемент.Родитель.Наименование,"0 - Платы") > 0 Тогда
			Плата = НормРасх.Элемент;
			Возврат(Плата);
			КонецЕсли;		
		Иначе
		ПолучитьПлатуИзделия(НормРасх.Элемент,Плата);
		КонецЕсли;
	КонецЦикла;
Возврат(Плата);
КонецФункции

&НаСервере
Функция СоздатьПеремещение(ПЗ,Плата)
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	Перемещение = Документы.ДвижениеМПЗ.СоздатьДокумент();
	Перемещение.Дата = ТекущаяДата();
	Перемещение.УстановитьНовыйНомер(ПрисвоитьПрефикс(ПЗ.Линейка.Подразделение.МестоХраненияПоУмолчанию.Подразделение));
	Перемещение.Автор = ПараметрыСеанса.Пользователь;
	Перемещение.Подразделение = ПЗ.Линейка.Подразделение.МестоХраненияПоУмолчанию.Подразделение;
	Перемещение.ДокументОснование = ПЗ;
	Перемещение.МестоХранения = ПЗ.Линейка.Подразделение.МестоХраненияПоУмолчанию;
	Перемещение.МестоХраненияВ = ПЗ.Линейка.МестоХраненияКанбанов;  
	Перемещение.Сотрудник = Объект.Исполнитель;
	Перемещение.Комментарий = "Перемещение 0-плат на линейку";					
	ТЧ = Перемещение.ТабличнаяЧасть.Добавить();
	ТЧ.ВидМПЗ = Перечисления.ВидыМПЗ.Материалы;
	ТЧ.МПЗ = Плата;
	ТЧ.Количество = ПЗ.Количество;
	ТЧ.ЕдиницаИзмерения =  ТЧ.МПЗ.ОсновнаяЕдиницаИзмерения;	
	Перемещение.Записать(РежимЗаписиДокумента.Проведение); 
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Возврат(Перемещение.Ссылка);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат(Документы.ДвижениеМПЗ.ПустаяСсылка());
	КонецПопытки; 
КонецФункции

&НаСервере
Функция СоздатьПеремещенияПлатНаСервере()
ТабДок = Новый ТабличныйДокумент;

ОбъектЗн = РеквизитФормыВЗначение("Объект");
Макет = ОбъектЗн.ПолучитьМакет("Макет1");

ОблШапка = Макет.ПолучитьОбласть("Шапка");
ОблЛиния = Макет.ПолучитьОбласть("Линия");
ОблПЗ = Макет.ПолучитьОбласть("ПЗ");
ОблКонец = Макет.ПолучитьОбласть("Конец");

ТабДок.Вывести(ОблШапка);
ТаблицаЗаданий.Сортировать("Линия,ПЗ");
Линия = Неопределено;
	Для каждого ТЧ Из ТаблицаЗаданий Цикл
		Если ТЧ.Пометка Тогда
			Если ТЧ.ПЗ.ДокументОснование.Статус = 0 Тогда
				Если ТЧ.Перемещение.Пустая() Тогда
				Плата = ПолучитьПлатуИзделия(ТЧ.ПЗ.Изделие,Справочники.Материалы.ПустаяСсылка());
					Если Не Плата.Пустая() Тогда 
					ТЧ.Перемещение = СоздатьПеремещение(ТЧ.ПЗ,Плата);
						Если Не ТЧ.Перемещение.Пустая() Тогда
							Если ТЧ.Линия <> Линия Тогда
							ОблЛиния.Параметры.Линия = ТЧ.Линия;
							ТабДок.Вывести(ОблЛиния);	
							Линия = ТЧ.Линия;
							КонецЕсли;
						ОблПЗ.Параметры.Номер = ТЧ.ПЗ.Номер;
						ОблПЗ.Параметры.ПЗ = ТЧ.ПЗ;				
						ОблПЗ.Параметры.Наименование = СокрЛП(Плата.Наименование);
						ОблПЗ.Параметры.МПЗ = Плата;
						ОблПЗ.Параметры.Количество = ТЧ.ПЗ.Количество;
						ОблПЗ.Параметры.ЕдиницаИзмерения = СокрЛП(Плата.ЕдиницаИзмерения.Наименование);
						ОблПЗ.Параметры.НомерДок = ТЧ.Перемещение.Номер;
						ОблПЗ.Параметры.Док = ТЧ.Перемещение;
						ОблПЗ.Параметры.НомерЯчейки = ТЧ.ПЗ.ДокументОснование.НомерЯчейки;
						ТабДок.Вывести(ОблПЗ);
						Иначе
						Сообщить("Для изделия "+СокрЛП(ТЧ.ПЗ.Изделие.Наименование)+" не создано перемещение 0-платы!");
						КонецЕсли;
					Иначе
					Сообщить("Для изделия "+СокрЛП(ТЧ.ПЗ.Изделие.Наименование)+" не найдена 0-плата!");
					КонецЕсли;
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
ТабДок.Вывести(ОблКонец);
ТабДок.Защита = Истина;
ТаблицаЗаданий.Сортировать("ДатаПЗ");
Возврат(ТабДок);
КонецФункции

&НаКлиенте
Процедура СоздатьПеремещенияПлат(Команда)
ТД = СоздатьПеремещенияПлатНаСервере();
ТД.Показать("Список созданных перемещений с основного склада на склад канбанов");
ТД.ФиксацияСверху = 2;
КонецПроцедуры

&НаСервере
Функция СоздатьПередачиВПроизводствоНаСервере(ПЗ)
	Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ПЗ,Этапы,ЭтапыАРМ,Объект.РабочееМесто,Объект.Исполнитель) Тогда	
	Возврат(-1);			
	КонецЕсли;
		Если Не ЗначениеЗаполнено(ПЗ.ДатаЗапуска) Тогда
		Возврат(ОбщийМодульВызовСервера.ЗапуститьВПроизводство(ПЗ,Объект.РабочееМесто,Этапы,Неопределено,Ложь)); 
		КонецЕсли;
Возврат(1);
КонецФункции 

&НаСервере
Функция ПолучитьСтатусМТК(ПЗ)
Возврат(ПЗ.ДокументОснование.Статус);
КонецФункции

&НаСервере
Процедура ОчиститьОборудование(ПЗ)
ПЗОбъект = ПЗ.ПолучитьОбъект();
ПЗОбъект.ЛинияSMD = Справочники.ЛинииSMD.ПустаяСсылка();
ПЗОбъект.Записать();
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьПередачиВПроизводство(Команда)
	Для каждого ТЧ Из ТаблицаЗаданий Цикл
		Если ТЧ.Пометка Тогда
			Если ПолучитьСтатусМТК(ТЧ.ПЗ) = 0 Тогда
				//Если Не ТЧ.Перемещение.Пустая() Тогда
				Состояние("Обработка...",,ТЧ.ПЗ);
				Результат = СоздатьПередачиВПроизводствоНаСервере(ТЧ.ПЗ);
					Если Результат = 0 Тогда
					ОчиститьОборудование(ТЧ.ПЗ);
					ТЧ.ЛОSMD = Истина;
					ИначеЕсли Результат = 1 Тогда
					ТЧ.ЛОSMD = Ложь;
					ТЧ.СтатусМТК = 1;
					КонецЕсли; 
				//КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗапуститьВПроизводствоНаСервере(ПЗ)
	Попытка	
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;	
		Если ОбщийМодульРаботаСРегистрами.ОформитьПринятиеКанбана(ПЗ.ДокументОснование.МестоХраненияПотребитель,ПЗ.Изделие,ПЗ.ДокументОснование.НомерЯчейки,Объект.Исполнитель) Тогда
		МТКОбъект = ПЗ.ДокументОснование.ПолучитьОбъект();
		МТКОбъект.Статус = 4;
		МТКОбъект.Записать();
		Иначе
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);	
		Возврат(Ложь);
		КонецЕсли;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции

&НаКлиенте
Процедура ЗапуститьВПроизводство(Команда)
МассивКУдалению = Новый Массив;

	Для каждого ТЧ Из ТаблицаЗаданий Цикл
		Если ТЧ.Пометка Тогда
			Если ПолучитьСтатусМТК(ТЧ.ПЗ) = 1 Тогда
			Результат = ЗапуститьВПроизводствоНаСервере(ТЧ.ПЗ);
				Если Результат Тогда
				МассивКУдалению.Добавить(ТЧ);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
		Для каждого ТЧ Из МассивКУдалению Цикл
		ТаблицаЗаданий.Удалить(ТЧ);
		КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверитьНаСкладе(НомерСклада)
	Для каждого ТЧ Из ТаблицаМПЗ Цикл
	Выборка = ТаблицаСклада.НайтиСтроки(Новый Структура("МестоХранения,МПЗ",СписокМестХранения[НомерСклада].Значение,ТЧ.МПЗ));
		Если Выборка.Количество() > 0 Тогда
			Если Выборка[0].Количество >= ТЧ.Количество Тогда
			Выборка[0].Количество = Выборка[0].Количество - ТЧ.Количество;
			Возврат(Новый Структура("МПЗ,Количество",ТЧ.МПЗ,ТЧ.Количество));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

&НаСервере
Процедура РаскрытьНаМПЗиПроверить(ЭтапСпецификации,КолУзла)
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_М(ЭтапСпецификации,ТекущаяДата());
	Пока ВыборкаНР.Следующий() Цикл
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Номенклатура")Тогда
			Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда
			РаскрытьНаМПЗиПроверить(ВыборкаНР.Элемент,ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла);
			Продолжить;
			ИначеЕсли Не ВыборкаНР.Элемент.Канбан.Пустая() Тогда
				Если Не ВыборкаНР.Элемент.Канбан.РезервироватьВПроизводстве Тогда		
				Продолжить;
				КонецЕсли;			
			КонецЕсли;
		Выборка = Этапы.НайтиСтроки(Новый Структура("ЭтапСпецификации",ВыборкаНР.Элемент));
        	Если Выборка.Количество() > 0 Тогда
			Продолжить;
			КонецЕсли;
		КонецЕсли;
	ТаблицаМПЗ.Очистить();
	ТЧ = ТаблицаМПЗ.Добавить();
	ТЧ.МПЗ = ВыборкаНР.Элемент;
	ТЧ.Количество = ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла;
	ТЧ.Приоритет = 1;
	ТаблицаАналогов = ОбщегоНазначенияПовтИсп.ПолучитьАналогиНормРасходов(ВыборкаНР.Ссылка,ТекущаяДата(),Истина);
		Для каждого ТЧ_ТА Из ТаблицаАналогов Цикл
		ТЧ = ТаблицаМПЗ.Добавить();
		ТЧ.МПЗ = ТЧ_ТА.Элемент;
		ТЧ.Количество = ПолучитьБазовоеКоличество(ТЧ_ТА.Норма,ТЧ_ТА.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла; 
		ТЧ.Приоритет = ?(ПолучитьСтатус(ТЧ_ТА.Элемент) = Перечисления.СтатусыМПЗ.ДоИсчерпанияЗапасов,0,ТЧ_ТА.Ссылка.Приоритет + 1);
		КонецЦикла;
 	ТаблицаМПЗ.Сортировать("Приоритет");
		Если ПроверитьНаСкладе(0) = Неопределено Тогда
		Результат = ПроверитьНаСкладе(1);
			Если Результат <> Неопределено Тогда
			Выборка = ТаблицаПеремещения.НайтиСтроки(Новый Структура("МПЗ",Результат.МПЗ));					
				Если Выборка.Количество() = 0 Тогда
				ТЧ_П = ТаблицаПеремещения.Добавить();
				ТЧ_П.МПЗ = Результат.МПЗ;
				ТЧ_П.Количество =  Результат.Количество;
				Иначе
				Выборка[0].Количество = Выборка[0].Количество + Результат.Количество;	
				КонецЕсли;
			Иначе
			Результат = ПроверитьНаСкладе(2);
				Если Результат <> Неопределено Тогда
				Выборка = ТаблицаПеремещения2.НайтиСтроки(Новый Структура("МПЗ",Результат.МПЗ));					
					Если Выборка.Количество() = 0 Тогда
					ТЧ_П = ТаблицаПеремещения2.Добавить();
					ТЧ_П.МПЗ = Результат.МПЗ;
					ТЧ_П.Количество =  Результат.Количество;
					Иначе
					Выборка[0].Количество = Выборка[0].Количество + Результат.Количество;	
					КонецЕсли;
				Иначе
		        СписокЛО.Добавить(ВыборкаНР.Ссылка);
				КонецЕсли;			
			КонецЕсли;							
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуМПЗИПроверить(ПЗ)
Этапы.Очистить();
ЭтапыАРМ.Очистить();
СписокЛО.Очистить();
РезультатПроверки = ОбщийМодульСозданиеДокументов.ПроверитьЭтапыСпецификации(Объект.Линейка,ПЗ.Изделие);
	Если Не РезультатПроверки.Пустая() Тогда
	Сообщить("Не найдено рабочее место для "+РезультатПроверки);
	Возврат(Истина);
	КонецЕсли;
ОбщийМодульВызовСервера.ПолучитьТаблицуЭтаповСпецификации(Этапы,ПЗ.Изделие,ПЗ.Количество,Ложь,ТекущаяДата());
СохранитьТаблицуСклада();
	Для каждого ТЧ Из Этапы Цикл
	РаскрытьНаМПЗиПроверить(ТЧ.ЭтапСпецификации,ТЧ.Количество);
	КонецЦикла;
		Если СписокЛО.Количество() = 0 Тогда
		Возврат(Истина);
		Иначе
		ОбщийМодульРаботаСРегистрами.ОбработкаЛьготнойОчереди(ПЗ,СписокЛО);
		ВосстановитьТаблицуСклада();
		Возврат(Ложь);
		КонецЕсли; 
КонецФункции 

&НаСервере
Процедура ПолучитьТаблицуСклада()
ТаблицаСклада.Очистить();
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияОстатки.МестоХранения,
	|	МестаХраненияОстатки.МПЗ КАК МПЗ,
	|	МестаХраненияОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.МестаХранения.Остатки(&НаДату, ) КАК МестаХраненияОстатки
	|ГДЕ
	|	МестаХраненияОстатки.МестоХранения В(&СписокМестХранения)";
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
РезультатЗапроса = Запрос.Выполнить();
Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
	ТЧ = ТаблицаСклада.Добавить();
	ТЧ.МестоХранения = Выборка.МестоХранения;
	ТЧ.МПЗ = Выборка.МПЗ;
	ТЧ.Количество = Выборка.Количество;	
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура СохранитьТаблицуСклада()
ТаблицаСкладаКопия.Очистить();
	Для каждого ТЧ_МПЗ Из ТаблицаСклада Цикл
	ТЧ = ТаблицаСкладаКопия.Добавить();
	ТЧ.МестоХранения = ТЧ_МПЗ.МестоХранения;
	ТЧ.МПЗ = ТЧ_МПЗ.МПЗ;
	ТЧ.Количество = ТЧ_МПЗ.Количество;
	КонецЦикла; 
КонецПроцедуры 

&НаСервере
Процедура ВосстановитьТаблицуСклада()
ТаблицаСклада.Очистить();
	Для каждого ТЧ_МПЗ Из ТаблицаСкладаКопия Цикл
	ТЧ = ТаблицаСклада.Добавить();
	ТЧ.МестоХранения = ТЧ_МПЗ.МестоХранения;
	ТЧ.МПЗ = ТЧ_МПЗ.МПЗ;
	ТЧ.Количество = ТЧ_МПЗ.Количество;
	КонецЦикла; 
КонецПроцедуры 

&НаСервере
Функция ОтчётПоПеремещениюНаСервере()
ТабДок = Новый ТабличныйДокумент;

ОбъектЗн = РеквизитФормыВЗначение("Объект");
Макет = ОбъектЗн.ПолучитьМакет("Макет");

ОблШапка = Макет.ПолучитьОбласть("Шапка");
ОблМестоХранения = Макет.ПолучитьОбласть("МестоХранения");
ОблМПЗ = Макет.ПолучитьОбласть("МПЗ");
ОблКонец = Макет.ПолучитьОбласть("Конец");
ТабДок.Вывести(ОблШапка);			
	Если ТаблицаПеремещения.Количество() > 0 Тогда
	ТаблицаПеремещения.Сортировать("МПЗ");
	ОблМестоХранения.Параметры.МестоХранения = Объект.Линейка.Подразделение.МестоХраненияДополнительный;
	ТабДок.Вывести(ОблМестоХранения);
		Для каждого ТЧ Из ТаблицаПеремещения Цикл
		ОблМПЗ.Параметры.Наименование = ТЧ.МПЗ.Наименование;
		ОблМПЗ.Параметры.МПЗ = ТЧ.МПЗ;
		ОблМПЗ.Параметры.Количество = ТЧ.Количество;
		ОблМПЗ.Параметры.ЕдиницаИзмерения = СокрЛП(ТЧ.МПЗ.ЕдиницаИзмерения.Наименование);
		ТабДок.Вывести(ОблМПЗ);				
		КонецЦикла;
	КонецЕсли;
	Если ТаблицаПеремещения2.Количество() > 0 Тогда
	ТаблицаПеремещения2.Сортировать("МПЗ");
	ОблМестоХранения.Параметры.МестоХранения = Объект.Линейка.Подразделение.МестоХраненияПоУмолчанию;
	ТабДок.Вывести(ОблМестоХранения);
		Для каждого ТЧ Из ТаблицаПеремещения2 Цикл
		ОблМПЗ.Параметры.Наименование = ТЧ.МПЗ.Наименование;
		ОблМПЗ.Параметры.МПЗ = ТЧ.МПЗ;
		ОблМПЗ.Параметры.Количество = ТЧ.Количество;
		ОблМПЗ.Параметры.ЕдиницаИзмерения = СокрЛП(ТЧ.МПЗ.ЕдиницаИзмерения.Наименование);
		ТабДок.Вывести(ОблМПЗ);				
		КонецЦикла;
	КонецЕсли;
ТабДок.Вывести(ОблКонец);
Возврат(ТабДок);
КонецФункции 

&НаКлиенте
Процедура ПолучитьСписокПеремещения(Команда)
ТаблицаПеремещения.Очистить();
ТаблицаПеремещения2.Очистить();	
Состояние("Обработка...",,"Получение остатков по местам хранения");
ПолучитьТаблицуСклада();
	Если ТаблицаСклада.Количество() > 0 Тогда
		Для каждого ТЧ Из ТаблицаЗаданий Цикл
			Если ТЧ.Пометка Тогда
				Если ТЧ.СтатусМТК = 0 Тогда
				Состояние("Обработка...",,"Создание списка перемещения "+ТЧ.ПЗ);
				ТЧ.ЛОSMD = Не ПолучитьТаблицуМПЗИПроверить(ТЧ.ПЗ); 
				КонецЕсли;
			КонецЕсли;  	
		КонецЦикла;	
	ТД = ОтчётПоПеремещениюНаСервере();
	ТД.Показать("Список перемещения на склад канбанов");
	ТД.ФиксацияСверху = 2; 
	Иначе
	Сообщить("Таблица остатков по местам хранения пустая!");
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	Для каждого ТЧ Из ТаблицаЗаданий Цикл
	ТЧ.Пометка = Истина;	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсе(Команда)
	Для каждого ТЧ Из ТаблицаЗаданий Цикл
	ТЧ.Пометка = Ложь;	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры

