Перем КомпонентаЛазерныйМаркировщик;

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("Документ") Тогда
	Док = Параметры.Документ;
		Если ТипЗнч(Док) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
			Если Док.ДокументОснование.Ремонт Тогда
			Запрос = Новый Запрос;

			Запрос.Текст = 
				"ВЫБРАТЬ
				|	РемонтнаяКартаЗаменяемыеЭлементы.Ссылка.ДокументОснование КАК ДокументОснование
				|ИЗ
				|	Документ.РемонтнаяКарта.ЗаменяемыеЭлементы КАК РемонтнаяКартаЗаменяемыеЭлементы
				|ГДЕ
				|	РемонтнаяКартаЗаменяемыеЭлементы.Документ = &Документ";
			Запрос.УстановитьПараметр("Документ", Док.ДокументОснование);
			РезультатЗапроса = Запрос.Выполнить();		
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();		
				Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Объект.Документ = ВыборкаДетальныеЗаписи.ДокументОснование;
				КонецЦикла;
			Иначе
			Объект.Документ = Док;
			КонецЕсли;
		Иначе
	    Объект.Документ = Док;
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
      ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   КонецЕсли;
ДокументПриИзмененииНаСервере();
	Если Не СписокШаблоновПуст() Тогда
	Элементы.СписокШаблонов.ТекущаяСтрока = Объект.СписокШаблонов[0].ПолучитьИдентификатор();
	СписокШаблоновВыбор(,Элементы.СписокШаблонов.ТекущаяСтрока,,Истина);
	КонецЕсли; 
		Если Не СписокБарКодовПуст() Тогда
		Элементы.СписокБарКодов.ТекущаяСтрока = Объект.СписокБарКодов[0].ПолучитьИдентификатор();
		СписокБарКодовВыбор(,Элементы.СписокБарКодов.ТекущаяСтрока,,Истина);
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если ЭтаФорма.ВводДоступен() Тогда
		Если НайтиПоБарКодуНаСервере(Данные) Тогда
			Если Не СписокШаблоновПуст() Тогда
			Элементы.СписокШаблонов.ТекущаяСтрока = Объект.СписокШаблонов[0].ПолучитьИдентификатор();
			СписокШаблоновВыбор(,Элементы.СписокШаблонов.ТекущаяСтрока,,Истина);
			КонецЕсли; 
				Если Не СписокБарКодовПуст() Тогда
				Элементы.СписокБарКодов.ТекущаяСтрока = Объект.СписокБарКодов[0].ПолучитьИдентификатор();
				СписокБарКодовВыбор(,Элементы.СписокБарКодов.ТекущаяСтрока,,Истина);
				КонецЕсли;
		Иначе
		СписокСпецификаций = ПолучитьСпецификацииПоБарКоду(Данные);
			Если СписокСпецификаций.Количество() = 1 Тогда
			Спецификация = СписокСпецификаций.Получить(0).Значение;
			ЗаполнитьДляНеНайденногоБарКода(Спецификация,Данные);
			ИначеЕсли СписокСпецификаций.Количество() > 1 Тогда
			ВыбЭлемент = СписокСпецификаций.ВыбратьЭлемент("Выберите спецификацию",Спецификация);
				Если ВыбЭлемент <> Неопределено Тогда
				ЗаполнитьДляНеНайденногоБарКода(ВыбЭлемент.Значение,Данные);
				КонецЕсли;
			Иначе
			Сообщить("Спецификации не найдены!");			
			КонецЕсли;
		КонецЕсли; 	
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Функция ConnectНаСервере(ТекстОшибки)
    Если РольДоступна("Отладка") Тогда
    КомпонентаЛазерныйМаркировщик = Истина;
    Возврат Истина;    
    Иначе
        Попытка          
        КомпонентаЛазерныйМаркировщик = Новый COMОбъект("LDesignerAuto");
		//КомпонентаЛазерныйМаркировщик = ПолучитьCOMОбъект("","LDesignerAuto");
        Результат = КомпонентаЛазерныйМаркировщик.Connect("");
            Если Результат = 0 Тогда
            Возврат Истина;
            Иначе
            ТекстОшибки = СформироватьТекстОшибки(Результат);
            Возврат Ложь;
            КонецЕсли;            
        Исключение            
        ТекстОшибки = ОписаниеОшибки();
        Возврат Ложь;    
        КонецПопытки
    КонецЕсли;    
КонецФункции

&НаСервере
Функция ДоступностьОтладки()
Возврат(РольДоступна("Отладка"));	
КонецФункции

&НаКлиенте
Функция Connect(КомпонентаЛазерныйМаркировщик,ТекстОшибки)
    Если ДоступностьОтладки() Тогда
    КомпонентаЛазерныйМаркировщик = Истина;
    Возврат Истина;    
    Иначе
        Попытка          
        Результат = КомпонентаЛазерныйМаркировщик.Connect("");
            Если Результат = 0 Тогда
            Возврат Истина;
            Иначе
            ТекстОшибки = СформироватьТекстОшибки(Результат);
            Возврат Ложь;
            КонецЕсли;            
        Исключение            
        ТекстОшибки = ОписаниеОшибки();
        Возврат Ложь;    
        КонецПопытки
    КонецЕсли;    
КонецФункции

&НаСервере
Функция DisconnectНаСервере(ТекстОшибки)
    
    Если РольДоступна("Отладка") Тогда
        
        Если КомпонентаЛазерныйМаркировщик <> Неопределено Тогда
            КомпонентаЛазерныйМаркировщик = Неопределено;
            Возврат Истина;
        Иначе
            ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(1);
            Возврат Ложь;
        КонецЕсли;
        
    Иначе
        Попытка
            
            Если КомпонентаЛазерныйМаркировщик <> Неопределено Тогда
                КомпонентаЛазерныйМаркировщик.Disconnect();
            КонецЕсли;
            Возврат Истина;
            
        Исключение
            
            ТекстОшибки = ОписаниеОшибки();
            Возврат Ложь;
            
        КонецПопытки
    КонецЕсли;    
    
КонецФункции    

&НаКлиенте
Функция Disconnect(КомпонентаЛазерныйМаркировщик,ТекстОшибки)
   Если ДоступностьОтладки() Тогда
        Если КомпонентаЛазерныйМаркировщик <> Неопределено Тогда
        КомпонентаЛазерныйМаркировщик = Неопределено;
        Возврат Истина;
        Иначе
        ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(1);
        Возврат Ложь;
        КонецЕсли;
    Иначе
        Попытка
            Если КомпонентаЛазерныйМаркировщик <> Неопределено Тогда
            КомпонентаЛазерныйМаркировщик.Disconnect();
            КонецЕсли;
        Возврат Истина;
        Исключение
        ТекстОшибки = ОписаниеОшибки();
        Возврат Ложь;
        КонецПопытки
    КонецЕсли;     
КонецФункции 

&НаСервере
Функция GetSize(ФайлШаблона, КоличествоЭлементов, ТекстОшибки)
    
    Если РольДоступна("Отладка") Тогда
        
        Если КомпонентаЛазерныйМаркировщик <> Неопределено Тогда
            
            КоличествоЭлементов = 16;
            Возврат Истина;
            
        Иначе
            
            ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(4);
            Возврат Ложь;
            
        КонецЕсли;
        
    Иначе
        Если КомпонентаЛазерныйМаркировщик = Неопределено Тогда
            ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(4);
            Возврат Ложь;
        КонецЕсли;    
        
        Попытка
            
            Результат = КомпонентаЛазерныйМаркировщик.GetSize(ФайлШаблона, КоличествоЭлементов);
            Если Результат = 0 Тогда
                Возврат Истина;
            Иначе
                ТекстОшибки = СформироватьТекстОшибки(Результат);
                Возврат Ложь;
            КонецЕсли;
            
        Исключение
            
            ТекстОшибки = ОписаниеОшибки();
            Возврат Ложь;
            
        КонецПопытки
    КонецЕсли;    
    
КонецФункции    

&НаСервере
Функция GetName(ИндексЭлемента, ИмяЭлемента, ТекстОшибки)
    
    Если РольДоступна("Отладка") Тогда
        
        Если КомпонентаЛазерныйМаркировщик <> Неопределено Тогда
            
            Если ИндексЭлемента%2 = 0 Тогда
                ИмяЭлемента = "Barcode" + Цел(ИндексЭлемента/2);
            Иначе
                ИмяЭлемента = "Code"    + Цел((ИндексЭлемента+1)/2);
            КонецЕсли;
            
            Возврат Истина;
            
        Иначе
            
            ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(5);
            Возврат Ложь;
            
        КонецЕсли;
        
    Иначе
        
        Если КомпонентаЛазерныйМаркировщик = Неопределено Тогда
            ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(5);
            Возврат Ложь;
        КонецЕсли;    
        
        Попытка
            
            Результат = КомпонентаЛазерныйМаркировщик.GetName(ИндексЭлемента, ИмяЭлемента);
            Если Результат = 0 Тогда
                Возврат Истина;
            Иначе
                ТекстОшибки = СформироватьТекстОшибки(Результат);
                Возврат Ложь;
            КонецЕсли;
            
        Исключение
            
            ТекстОшибки = ОписаниеОшибки();
            Возврат Ложь;
            
        КонецПопытки
    КонецЕсли;    
    
КонецФункции    

&НаСервере
Функция StartНаСервере(ФайлШаблона, ТекстОшибки)
    
    Если РольДоступна("Отладка") Тогда
        
        Если КомпонентаЛазерныйМаркировщик <> Неопределено Тогда
            
            Возврат Истина;
            
        Иначе
            
            ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(6);
            Возврат Ложь;
            
        КонецЕсли;
        
    Иначе
        Если КомпонентаЛазерныйМаркировщик = Неопределено Тогда
            ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(6);
            Возврат Ложь;
        КонецЕсли;    
        
        Попытка
            
            Результат = КомпонентаЛазерныйМаркировщик.Start(ФайлШаблона);
            Если Результат = 0 Тогда
                Возврат Истина;
            Иначе
                ТекстОшибки = СформироватьТекстОшибки(Результат);
                Возврат Ложь;
            КонецЕсли;
            
        Исключение
            
            ТекстОшибки = ОписаниеОшибки();
            Возврат Ложь;
            
        КонецПопытки
    КонецЕсли;    
    
КонецФункции

&НаКлиенте
Функция Start(КомпонентаЛазерныйМаркировщик,ФайлШаблона, ТекстОшибки)
    Если ДоступностьОтладки() Тогда
        Если КомпонентаЛазерныйМаркировщик <> Неопределено Тогда
        Возврат Истина;
        Иначе
        ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(6);
        Возврат Ложь;
        КонецЕсли;
    Иначе
        Если КомпонентаЛазерныйМаркировщик = Неопределено Тогда
        ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(6);
        Возврат Ложь;
        КонецЕсли;    
	        Попытка
	        Результат = КомпонентаЛазерныйМаркировщик.Start(ФайлШаблона);
	            Если Результат = 0 Тогда
	            Возврат Истина;
	            Иначе
	            ТекстОшибки = СформироватьТекстОшибки(Результат);
	            Возврат Ложь;
	            КонецЕсли;
	        Исключение
	        ТекстОшибки = ОписаниеОшибки();
	        Возврат Ложь;
	        КонецПопытки
    КонецЕсли;    
КонецФункции

&НаСервере
Функция SetНаСервере(ИндексЭлемента, ЗначениеЭлемента, ТекстОшибки)
    
    Если РольДоступна("Отладка") Тогда
        
        Если КомпонентаЛазерныйМаркировщик <> Неопределено Тогда
            
            Возврат Истина;
            
        Иначе
            
            ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(7);
            Возврат Ложь;
            
        КонецЕсли;
        
    Иначе
        
        Если КомпонентаЛазерныйМаркировщик = Неопределено Тогда
            ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(7);
            Возврат Ложь;
        КонецЕсли;    
        
        Попытка
            
            Результат = КомпонентаЛазерныйМаркировщик.Set(ИндексЭлемента, ЗначениеЭлемента);
            Если Результат = 0 Тогда
                Возврат Истина;
            Иначе
                ТекстОшибки = СформироватьТекстОшибки(Результат);
                Возврат Ложь;
            КонецЕсли;
            
        Исключение
            
            ТекстОшибки = ОписаниеОшибки();
            Возврат Ложь;
            
        КонецПопытки
    КонецЕсли;    
    
КонецФункции    

&НаКлиенте
Функция Set(КомпонентаЛазерныйМаркировщик,ИндексЭлемента, ЗначениеЭлемента, ТекстОшибки)
    Если ДоступностьОтладки() Тогда
        Если КомпонентаЛазерныйМаркировщик <> Неопределено Тогда
        Возврат Истина;
        Иначе
        ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(7);
        Возврат Ложь;
        КонецЕсли;
    Иначе
        Если КомпонентаЛазерныйМаркировщик = Неопределено Тогда
        ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(7);
        Возврат Ложь;
        КонецЕсли;    
	        Попытка
	        Результат = КомпонентаЛазерныйМаркировщик.Set(ИндексЭлемента, ЗначениеЭлемента);
	            Если Результат = 0 Тогда
	            Возврат Истина;
	            Иначе
	            ТекстОшибки = СформироватьТекстОшибки(Результат);
	            Возврат Ложь;
	            КонецЕсли;
	        Исключение
	        ТекстОшибки = ОписаниеОшибки();
	        Возврат Ложь;
	        КонецПопытки;
    КонецЕсли;    
КонецФункции 

&НаСервере
Функция BurnНаСервере(РежимОтладки, ТекстОшибки)
    
    Если РольДоступна("Отладка") Тогда
        
        Если КомпонентаЛазерныйМаркировщик <> Неопределено Тогда
            
            Возврат Истина;
            
        Иначе
            
            ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(8);
            Возврат Ложь;
            
        КонецЕсли;
        
    Иначе
        Если КомпонентаЛазерныйМаркировщик = Неопределено Тогда
            ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(8);
            Возврат Ложь;
        КонецЕсли;    
        
        Попытка
            
            Результат = КомпонентаЛазерныйМаркировщик.Burn(?(РежимОтладки, 1, 0));
            Если Результат = 0 Тогда
                Возврат Истина;
            Иначе
                ТекстОшибки = СформироватьТекстОшибки(Результат);
                Возврат Ложь;
            КонецЕсли;
            
        Исключение
            
            ТекстОшибки = ОписаниеОшибки();
            Возврат Ложь;
            
        КонецПопытки
    КонецЕсли;    
    
КонецФункции

&НаКлиенте
Функция Burn(КомпонентаЛазерныйМаркировщик, РежимОтладки, ТекстОшибки)
    Если ДоступностьОтладки() Тогда
        Если КомпонентаЛазерныйМаркировщик <> Неопределено Тогда
        Возврат Истина;
        Иначе
        ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(8);
        Возврат Ложь;
        КонецЕсли;
    Иначе
        Если КомпонентаЛазерныйМаркировщик = Неопределено Тогда
        ТекстОшибки = СформироватьТекстОшибкиДляРежимаОтладки(8);
        Возврат Ложь;
        КонецЕсли;    
	        Попытка
	        Результат = КомпонентаЛазерныйМаркировщик.Burn(?(РежимОтладки, 1, 0));
	            Если Результат = 0 Тогда
	            Возврат Истина;
	            Иначе
	            ТекстОшибки = СформироватьТекстОшибки(Результат);
	            Возврат Ложь;
	            КонецЕсли;
	        Исключение
	        ТекстОшибки = ОписаниеОшибки();
	        Возврат Ложь;
	        КонецПопытки;
    КонецЕсли;    
КонецФункции

// описание кодов ошибок компоненты 
&НаСервере
Функция СформироватьТекстОшибки(КодОшибки)
    
    Если КодОшибки = 1 Тогда
        Возврат "Ошибка подключения компоненты";
        
    Иначе
        Возврат "Неизвестная ошибка";
    КонецЕсли;
    
КонецФункции    

// описание кодов ошибок для режима отладки функциональности 1С и ошибок, вывленных до вызова компоненты
&НаСервере
Функция СформироватьТекстОшибкиДляРежимаОтладки(КодОшибки)
    
    Если КодОшибки = 1 Тогда
        Возврат "Не установлена связь с компонентой маркировщика. Отключение не выполнено!";
    ИначеЕсли КодОшибки = 2 Тогда
        Возврат "Каталог шаблонов маркировщика не существует!"
    ИначеЕсли КодОшибки = 3 Тогда
        Возврат "Не установлена связь с компонентой маркировщика. Каталог шаблонов не установлен!"
    ИначеЕсли КодОшибки = 4 Тогда
        Возврат "Не установлена связь с компонентой маркировщика. Получить параметры шаблона невозможно!"
    ИначеЕсли КодОшибки = 5 Тогда
        Возврат "Не установлена связь с компонентой маркировщика. Получить параметры элемента шаблона невозможно!"
    ИначеЕсли КодОшибки = 6 Тогда
        Возврат "Не установлена связь с компонентой маркировщика. Режим установки значений недоступен!"
    ИначеЕсли КодОшибки = 7 Тогда
        Возврат "Не установлена связь с компонентой маркировщика. Установить параметры элемента шаблона невозможно!"
    ИначеЕсли КодОшибки = 8 Тогда
        Возврат "Не установлена связь с компонентой маркировщика. Выполнить нанесение изображения невозможно!"
    ИначеЕсли КодОшибки = 9 Тогда
        Возврат "Не установлена связь с компонентой маркировщика. Проверить завершение процесса нанесения изображения невозможно!"
    Иначе
        Возврат "Неизвестная ошибка";
    КонецЕсли;
    
КонецФункции    

// получить описание параметров шаблона одним вызовом
&НаСервере
Функция ПолучитьОписаниеШаблона(ФайлШаблона, КоличествоЭлементов, СтруктураЭлементов, ТекстОшибки)
    
    Результат = GetSize(ФайлШаблона, КоличествоЭлементов, ТекстОшибки);
    
    Если Не Результат Тогда
        Возврат Ложь;
    КонецЕсли;
    
    СтруктураЭлементов = Новый Соответствие;
    
    Для Сч = 1 По КоличествоЭлементов Цикл
        
        ИмяЭлемента = "";
        
        Результат = GetName(Сч, ИмяЭлемента, ТекстОшибки);
        
        Если Не Результат Тогда
            Возврат Ложь;
        КонецЕсли;
        
        СтруктураЭлементов.Вставить(Сч, ИмяЭлемента);
    
    КонецЦикла;
    
    Возврат Истина;
    
КонецФункции    

// установить параметры шаблона одним вызовом
&НаСервере
Функция УстановитьЗначенияПараметровШаблонаИВыполнитьПечатьНаСервере(ТекСтрока,ТекстОшибки) 
Результат = StartНаСервере(Объект.СписокШаблонов.Получить(ТекСтрока), ТекстОшибки);                                                                             
    Если Не Результат Тогда
    Возврат Ложь;
    КонецЕсли;    
	    Для Каждого ТЧ Из Объект.Параметры Цикл
	    Результат = SetНаСервере(ТЧ.Параметр, ТЧ.Значение, ТекстОшибки);  
	        Если Не Результат Тогда
	        Возврат Ложь;
	        КонецЕсли;       
	    КонецЦикла;  
Результат = BurnНаСервере(Ложь,ТекстОшибки);
    Если Не Результат Тогда
    Возврат Ложь;
    КонецЕсли;
Возврат Истина;   
КонецФункции  

&НаСервере
Функция ПолучитьФайлШаблона(Стр)
ФайлШаблона = ОбщийМодульВызовСервера.ПолучитьФайлДокумента(Объект.СписокШаблонов.НайтиПоИдентификатору(Стр).Значение);
//Ф = Новый Файл(ФайлШаблона);
	//Если Ф.Существует() Тогда
	Возврат(ФайлШаблона);
	//Иначе
	//Сообщить("Файл не существует или нет доступа!");	
	//Возврат(Неопределено);
	//КонецЕсли;    
КонецФункции 

&НаКлиенте
Функция УстановитьЗначенияПараметровШаблонаИВыполнитьПечать(КомпонентаЛазерныйМаркировщик,ТекстОшибки) 
ФайлШаблона = ПолучитьФайлШаблона(Элементы.СписокШаблонов.ТекущаяСтрока);
	Если ФайлШаблона <> Неопределено Тогда
	Результат = Start(КомпонентаЛазерныйМаркировщик, ФайлШаблона, ТекстОшибки);	
	    Если Не Результат Тогда
	    Возврат Ложь;
	    КонецЕсли;
	Иначе	
	Возврат Ложь;
	КонецЕсли; 	
	    Для Каждого ТЧ Из Объект.Параметры Цикл
	    Результат = Set(КомпонентаЛазерныйМаркировщик, ТЧ.НомерПараметра, ТЧ.Значение, ТекстОшибки);  
	        Если Не Результат Тогда
	        Возврат Ложь;
	        КонецЕсли;       
	    КонецЦикла;  
Результат = Burn(КомпонентаЛазерныйМаркировщик,Ложь,ТекстОшибки);
Возврат Результат;  
КонецФункции 

&НаСервере
Функция ПроверитьЗаполнениеПараметров()
	Для каждого ТЧ Из Объект.Параметры Цикл
		Если Не ЗначениеЗаполнено(ТЧ.Значение) Тогда
		Возврат(Ложь);		
		КонецЕсли; 
	КонецЦикла;  
Возврат(Истина);  
КонецФункции 

&НаСервере
Функция ПолучитьСтрокуАргументов(ВыбСтрока)
ФайлШаблона = ПолучитьФайлШаблона(ВыбСтрока);
	Если ФайлШаблона <> Неопределено Тогда
	СтрокаАргументов = "fs "+""""+ФайлШаблона+""""+" h";
		Для каждого ТЧ Из Объект.Параметры Цикл	
		СтрокаАргументов = СтрокаАргументов+" "+""""+ТЧ.Параметр+".Data="+ТЧ.Значение+"""";	
		КонецЦикла; 
	Возврат(СтрокаАргументов);
	Иначе	
	Возврат Неопределено;
	КонецЕсли;	
КонецФункции

&НаКлиенте
Процедура Маркировать(Команда)
Перем ТекстОшибки;

	//Если Не ПроверитьЗаполнениеПараметров() Тогда
	//Сообщить("Имеются незаполненные параметры!");
	//Возврат;
	//КонецЕсли;
ТекСтрока = Элементы.СписокБарКодов.ТекущаяСтрока;
	Если ТекСтрока <> Неопределено Тогда
		Если Элементы.СписокБарКодов.ТекущиеДанные.Пометка Тогда
			Если Вопрос("Изделие уже прошло гравировку. Хотите гравировать повторно?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
			КонецЕсли; 		
		КонецЕсли;
	КонецЕсли;
		Если Найти(НРег(Элементы.СписокШаблонов.ТекущиеДанные.Представление),"apf") > 0 Тогда
		    Попытка
			КомпонентаЛазерныйМаркировщик = Новый COMОбъект("LDesignerAuto");
				Если Не Connect(КомпонентаЛазерныйМаркировщик,ТекстОшибки) Тогда
				Сообщить(ТекстОшибки);
				Возврат;
				КонецЕсли;
					Если Не УстановитьЗначенияПараметровШаблонаИВыполнитьПечать(КомпонентаЛазерныйМаркировщик,ТекстОшибки) Тогда
					Сообщить(ТекстОшибки);
					Возврат;
					КонецЕсли;	
						Если Не Disconnect(КомпонентаЛазерныйМаркировщик,ТекстОшибки) Тогда
						Сообщить(ТекстОшибки);
						Возврат;
						КонецЕсли;
							Если ТекСтрока <> Неопределено Тогда
							Объект.СписокБарКодов.НайтиПоИдентификатору(Элементы.СписокБарКодов.ТекущаяСтрока).Пометка = Истина;
							Элементы.СписокБарКодов.ТекущаяСтрока = Элементы.СписокБарКодов.ТекущаяСтрока + 1;
								Если Элементы.СписокБарКодов.ТекущаяСтрока = Неопределено Тогда
								Элементы.СписокБарКодов.ТекущаяСтрока = ТекСтрока;
								КонецЕсли; 
							ПолучитьПараметрыИзделияНаСервере();
							КонецЕсли;
		    Исключение
				Если ТекСтрока <> Неопределено Тогда
				Элементы.СписокБарКодов.ТекущаяСтрока = ТекСтрока;
				ПолучитьПараметрыИзделияНаСервере();
				КонецЕсли;           
		   	Сообщить(ОписаниеОшибки()); 
		    КонецПопытки;			
		Иначе
		СтрокаАргументов = ПолучитьСтрокуАргументов(Элементы.СписокШаблонов.ТекущаяСтрока);
		ЗапуститьПриложение("C:\MaxiGraf\StartMaxiWithArguments.exe "+СтрокаАргументов,"C:\MaxiGraf");
		КонецЕсли; 	
КонецПроцедуры

&НаСервере
Функция СписокШаблоновПуст()
	Если Объект.СписокШаблонов.Количество() = 0 Тогда	
	Возврат Истина;
	Иначе
	Возврат Ложь;
	КонецЕсли; 
КонецФункции 

&НаСервере
Функция СписокБарКодовПуст()
	Если Объект.СписокБарКодов.Количество() = 0 Тогда	
	Возврат Истина;
	Иначе
	Возврат Ложь;
	КонецЕсли; 
КонецФункции 

&НаКлиенте
Процедура ДокументПриИзменении(Элемент)
ДокументПриИзмененииНаСервере();
	Если Не СписокШаблоновПуст() Тогда
	Элементы.СписокШаблонов.ТекущаяСтрока = Объект.СписокШаблонов[0].ПолучитьИдентификатор();
	СписокШаблоновВыбор(,Элементы.СписокШаблонов.ТекущаяСтрока,,Истина);
	КонецЕсли; 
		Если Не СписокБарКодовПуст() Тогда
		Элементы.СписокБарКодов.ТекущаяСтрока = Объект.СписокБарКодов[0].ПолучитьИдентификатор();
		СписокБарКодовВыбор(,Элементы.СписокБарКодов.ТекущаяСтрока,,Истина);
		КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПолучитьСписокШаблонов(ЭтапСпецификации)
НормРасх = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_Д(ЭтапСпецификации,ТекущаяДата());
	Пока НормРасх.Следующий() Цикл			
		Если ТипЗнч(НормРасх.Элемент) = Тип("СправочникСсылка.Номенклатура")Тогда
		ПолучитьСписокШаблонов(НормРасх.Элемент);
		Иначе
	    	Если Найти(НРег(НормРасх.Элемент.ИмяФайла),".apf") > 0 Тогда
			Объект.СписокШаблонов.Добавить(НормРасх.Элемент,НормРасх.Элемент.ИмяФайла);
			ИначеЕсли Найти(НРег(НормРасх.Элемент.ИмяФайла),".le") > 0 Тогда
			Объект.СписокШаблонов.Добавить(НормРасх.Элемент,НормРасх.Элемент.ИмяФайла);
			КонецЕсли; 
		КонецЕсли; 	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДокументПриИзмененииНаСервере()
Объект.Параметры.Очистить();
Объект.СписокШаблонов.Очистить();
Объект.СписокБарКодов.Очистить();
	Если ТипЗнч(Объект.Документ) = Тип("ДокументСсылка.МаршрутнаяКарта") Тогда
	Изделие = Объект.Документ.Номенклатура;	
	ПолучитьСписокШаблонов(Изделие);
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БарКоды.Изделие,
		|	БарКоды.БарКод,
		|	БарКоды.Товар,
		|	БарКоды.Период,
		|	БарКоды.ПЗ
		|ИЗ
		|	РегистрСведений.БарКоды КАК БарКоды
		|ГДЕ
		|	БарКоды.ПЗ.ДокументОснование = &ДокументОснование";	
	Запрос.УстановитьПараметр("ДокументОснование", Объект.Документ);	
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект.СписокБарКодов.Добавить(ВыборкаДетальныеЗаписи.БарКод); 
		КонецЦикла;
	ИначеЕсли ТипЗнч(Объект.Документ) = Тип("ДокументСсылка.ПроизводственноеЗадание") Тогда
	Изделие = Объект.Документ.Изделие;
	ПолучитьСписокШаблонов(Изделие);
	Объект.СписокБарКодов.Добавить(Объект.Документ.БарКод);
	ИначеЕсли ТипЗнч(Объект.Документ) = Тип("ДокументСсылка.Перепрогон") Тогда
	Изделие = Объект.Документ.Изделие;
	ПолучитьСписокШаблонов(Изделие);
	Запрос = Новый Запрос;

	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БарКоды.БарКод КАК БарКод
		|ИЗ
		|	РегистрСведений.БарКоды КАК БарКоды
		|ГДЕ
		|	БарКоды.ПЗ = &ПЗ";
	Запрос.УстановитьПараметр("ПЗ", Объект.Документ);
	РезультатЗапроса = Запрос.Выполнить();
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Объект.СписокБарКодов.Добавить(ВыборкаДетальныеЗаписи.БарКод);
		КонецЦикла;		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрНаСервере(Стр)
	Если ЗначениеЗаполнено(Стр) Тогда
	ТЧ = Объект.Параметры.Добавить();
	ТЧ.НомерПараметра = Число(СокрЛП(Лев(Стр,Найти(Стр,";")-1)));
	ТЧ.Параметр = ВРег(СокрЛП(Сред(Стр,Найти(Стр,";")+1)));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьИмяФайлаПараметров(ВыбСтрока)
Объект.Параметры.Очистить();
ФайлПарам = ОбщийМодульВызовСервера.ПолучитьФайлДокумента(Объект.СписокШаблонов.НайтиПоИдентификатору(ВыбСтрока).Значение);
	Если Найти(ФайлПарам,".apf") > 0 Тогда
	Возврат(СтрЗаменить(ФайлПарам,".apf",".txt"));
	Иначе	
	Возврат(СтрЗаменить(ФайлПарам,".le",".txt"));	
	КонецЕсли;  
КонецФункции 

&НаКлиенте
Процедура СписокШаблоновВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
ФС = Новый Файл(ПолучитьИмяФайлаПараметров(ВыбраннаяСтрока));
	Если ФС.Существует() Тогда
	Текст = Новый ТекстовыйДокумент; 

	Текст.Прочитать(ФС.ПолноеИмя); 
		Для НомерСтроки = 1 По Текст.КоличествоСтрок() Цикл 
	    Стр = Текст.ПолучитьСтроку(НомерСтроки); 
		ДобавитьПараметрНаСервере(Стр);
			Если Элементы.СписокБарКодов.ТекущаяСтрока <> Неопределено Тогда
			ПолучитьПараметрыИзделияНаСервере();
			КонецЕсли; 
	    КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьЧастьСтроки(ЗначениеПараметра,ЧастьЗначения,КолСимволов)
Возврат(Сред(ЗначениеПараметра,(ЧастьЗначения-1)*КолСимволов+1,КолСимволов));
КонецФункции

&НаСервере
Процедура ПолучитьПараметрыИзделияНаСервере()
БарКод = ?(Элементы.СписокБарКодов.ТекущаяСтрока <> Неопределено,Объект.СписокБарКодов.НайтиПоИдентификатору(Элементы.СписокБарКодов.ТекущаяСтрока).Значение,"");
ТоварнаяГруппа = Изделие.Товар.ТоварнаяГруппа;
	Для каждого ТЧ Из Объект.Параметры Цикл
		Если Найти(ТЧ.Параметр,"%") > 0 Тогда
		ИмяПараметра = Лев(ТЧ.Параметр,Найти(ТЧ.Параметр,"%")-1);
		Иначе	
		ИмяПараметра = СокрЛП(ТЧ.Параметр);
		КонецЕсли;
			Если Найти(ИмяПараметра,"NAME") > 0 Тогда
			ИмяТовара = Изделие.Товар.Наименование;
				Если Найти(ИмяТовара,"[М") > 0 Тогда
				ИмяТовара = Сред(ИмяТовара,1,Найти(ИмяТовара,"[М")-1);
				КонецЕсли;
					Если Найти(ИмяПараметра,"_S") = 0 Тогда
					ТЧ.Значение = СокрЛП(ИмяТовара);
					Иначе
					ТЧ.Значение = ПолучитьЧастьСтроки(СокрЛП(ИмяТовара),Число(Прав(ИмяПараметра,1)),5);			
					КонецЕсли;
			ИначеЕсли ИмяПараметра = "ID" Тогда
			ТЧ.Значение = БарКод;
			ИначеЕсли Найти(ИмяПараметра,"ID_N") > 0 Тогда
				Если Найти(ИмяПараметра,"_S") > 0 Тогда  
				ТЧ.Значение = ПолучитьЧастьСтроки(СокрЛП(БарКод),Число(Прав(ИмяПараметра,1)),5);
				ИначеЕсли Найти(ИмяПараметра,"_D") > 0 Тогда
	            ТЧ.Значение = ПолучитьЧастьСтроки(СокрЛП(БарКод),Число(Прав(ИмяПараметра,1)),6);
				Иначе
				ТЧ.Значение = БарКод;		
				КонецЕсли;
			ИначеЕсли ИмяПараметра = "ID6" Тогда
			ТЧ.Значение = Прав(БарКод,6);
			ИначеЕсли ИмяПараметра = "ID6_N" Тогда
			ТЧ.Значение = Прав(БарКод,6);
			ИначеЕсли ИмяПараметра = "ID8_N" Тогда
			ТЧ.Значение = Сред(БарКод,6,2)+Прав(БарКод,6); //год + 6-значный номер
			ИначеЕсли ИмяПараметра = "ID900_5_N" Тогда
			ТЧ.Значение = "900"+Прав(БарКод,5);//900 + 5-значный номер
			ИначеЕсли ИмяПараметра = "IDD" Тогда
			ТЧ.Значение = ОбщийМодульВызовСервера.ПолучитьКодDanfoss(БарКод);
			ИначеЕсли ИмяПараметра = "IDD_N" Тогда
			ТЧ.Значение = ОбщийМодульВызовСервера.ПолучитьКодDanfoss(БарКод);
			ИначеЕсли ИмяПараметра = "V" Тогда
			ПТГ = РегистрыСведений.ПараметрыТоварныхГрупп.СоздатьНаборЗаписей();
			ПТГ.Отбор.ТоварнаяГруппа.Установить(ТоварнаяГруппа);
			ПТГ.Прочитать();
				Для Каждого Запись Из ПТГ Цикл
					Если СокрЛП(Запись.ПараметрТоварнойГруппы.Наименование) = "Параметр10" Тогда
					ТЧ.Значение = СокрЛП(Запись.ЗначениеПараметра);
					ИначеЕсли СокрЛП(Запись.ПараметрТоварнойГруппы.Наименование) = "Параметр14" Тогда
					ТЧ.Значение = СокрЛП(Запись.ЗначениеПараметра);
					КонецЕсли;
				КонецЦикла;	
			ИначеЕсли ИмяПараметра = "V1" Тогда
			ПТГ = РегистрыСведений.ПараметрыТоварныхГрупп.СоздатьНаборЗаписей();
			ПТГ.Отбор.ТоварнаяГруппа.Установить(ТоварнаяГруппа);
			ПТГ.Прочитать();
				Для Каждого Запись Из ПТГ Цикл
					Если СокрЛП(Запись.ПараметрТоварнойГруппы.Наименование) = "Параметр10" Тогда
					ТЧ.Значение = СокрЛП(Запись.ЗначениеПараметра);
					КонецЕсли;
				КонецЦикла;	
			ИначеЕсли ИмяПараметра = "V2" Тогда	
			ПТГ = РегистрыСведений.ПараметрыТоварныхГрупп.СоздатьНаборЗаписей();
			ПТГ.Отбор.ТоварнаяГруппа.Установить(ТоварнаяГруппа);
			ПТГ.Прочитать();
				Для Каждого Запись Из ПТГ Цикл
					Если СокрЛП(Запись.ПараметрТоварнойГруппы.Наименование) = "Параметр14" Тогда
					ТЧ.Значение = СокрЛП(Запись.ЗначениеПараметра);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ИмяПараметра = "W" Тогда	
			ПТГ = РегистрыСведений.ПараметрыТоварныхГрупп.СоздатьНаборЗаписей();
			ПТГ.Отбор.ТоварнаяГруппа.Установить(ТоварнаяГруппа);
			ПТГ.Прочитать();
				Для Каждого Запись Из ПТГ Цикл
					Если СокрЛП(Запись.ПараметрТоварнойГруппы.Наименование) = "Параметр11" Тогда
					ТЧ.Значение = СокрЛП(Запись.ЗначениеПараметра);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ИмяПараметра = "L_IZM" Тогда	
			ПТГ = РегистрыСведений.ПараметрыТоварныхГрупп.СоздатьНаборЗаписей();
			ПТГ.Отбор.ТоварнаяГруппа.Установить(ТоварнаяГруппа);
			ПТГ.Прочитать();
				Для Каждого Запись Из ПТГ Цикл
					Если СокрЛП(Запись.ПараметрТоварнойГруппы.Наименование) = "ДиапазонПреобразования" Тогда
					ТЧ.Значение = СокрЛП(Запись.ЗначениеПараметра);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ИмяПараметра = "T_IZM" Тогда	
			ПТГ = РегистрыСведений.ПараметрыТоварныхГрупп.СоздатьНаборЗаписей();
			ПТГ.Отбор.ТоварнаяГруппа.Установить(ТоварнаяГруппа);
			ПТГ.Прочитать();
				Для Каждого Запись Из ПТГ Цикл
					Если СокрЛП(Запись.ПараметрТоварнойГруппы.Наименование) = "ДиапазонТемператур" Тогда
					ТЧ.Значение = СокрЛП(Запись.ЗначениеПараметра);
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли Найти(ИмяПараметра,"PMAX") > 0 Тогда
			ПТГ = РегистрыСведений.ПараметрыТоварныхГрупп.СоздатьНаборЗаписей();
			ПТГ.Отбор.ТоварнаяГруппа.Установить(ТоварнаяГруппа);
			ПТГ.Прочитать();
				Для Каждого Запись Из ПТГ Цикл
					Если СокрЛП(Запись.ПараметрТоварнойГруппы.Наименование) = "ДиапазонИзмерений" Тогда
						Если Найти(ИмяПараметра,"_S") = 0 Тогда
						ТЧ.Значение = СокрЛП(Запись.ЗначениеПараметра);
						Иначе
						ТЧ.Значение = ПолучитьЧастьСтроки(СокрЛП(Запись.ЗначениеПараметра),Число(Прав(ИмяПараметра,1)),5);			
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
			ИначеЕсли ИмяПараметра = "MAC1" Тогда
			ТЧ.Значение = ОбщийМодульВызовСервера.ПолучитьMACАдрес(БарКод);
			ИначеЕсли ИмяПараметра = "MAC1_N" Тогда
			MAC = ОбщийМодульВызовСервера.ПолучитьMACАдрес(БарКод);
			MAC_N = "";
				Для к = 0 по 5 Цикл
				MAC_N = MAC_N + Сред(MAC,к*2+1,2)+":";
				КонецЦикла;                                                                              
			MAC_N = Лев(MAC_N,СтрДлина(MAC_N)-1);
			ТЧ.Значение = MAC_N;
			ИначеЕсли ИмяПараметра = "IMEI1" Тогда
			ТЧ.Значение = ОбщийМодульВызовСервера.ПолучитьIMEI(БарКод);
			ИначеЕсли ИмяПараметра = "IMEI1_N" Тогда
			ТЧ.Значение = ОбщийМодульВызовСервера.ПолучитьIMEI(БарКод);
			ИначеЕсли ИмяПараметра = "TX" Тогда
			ИмяТовара = Изделие.Товар.Наименование;
			ТЧ.Значение =  Сред(ИмяТовара,Найти(ИмяТовара,"-Т")+1,2);		
			Иначе
			ДХТ = Справочники.ДополнительныеХарактеристикиТовара.Выбрать(,Изделие.Товар);
				Пока ДХТ.Следующий() Цикл
					Если ИмяПараметра = СокрЛП(ДХТ.Наименование) Тогда	
					ТЧ.Значение = СокрЛП(ДХТ.Значение);
					Прервать;
					КонецЕсли;	
				КонецЦикла;
			КонецЕсли; 
	КонецЦикла;  
КонецПроцедуры

&НаКлиенте
Процедура СписокБарКодовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
ПолучитьПараметрыИзделияНаСервере();
КонецПроцедуры

&НаСервере
Функция НайтиПоБарКодуНаСервере(БарКод)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	БарКоды.Изделие,
	|	БарКоды.БарКод,
	|	БарКоды.Товар,
	|	БарКоды.Период,
	|	БарКоды.ПЗ
	|ИЗ
	|	РегистрСведений.БарКоды КАК БарКоды
	|ГДЕ
	|	БарКоды.БарКод ПОДОБНО &БарКод";	
Запрос.УстановитьПараметр("БарКод", "%" + БарКод + "%");	
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Если ВыборкаДетальныеЗаписи.Количество() > 0 Тогда
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			Если ТипЗнч(ВыборкаДетальныеЗаписи.ПЗ) <> Тип("Неопределено") Тогда
			Объект.Документ = ВыборкаДетальныеЗаписи.ПЗ;
			ДокументПриИзмененииНаСервере();			
			Иначе	
			Изделие = ВыборкаДетальныеЗаписи.Изделие;
			ПолучитьСписокШаблонов(Изделие);
			Объект.СписокБарКодов.Добавить(ВыборкаДетальныеЗаписи.БарКод);	
			КонецЕсли; 
		КонецЦикла;	
	Возврат(Истина);	
	Иначе
	Возврат(Ложь);
	КонецЕсли; 
КонецФункции

&НаСервере
Процедура ЗаполнитьДляНеНайденногоБарКода(ВыбИзделие,БарКод)
Объект.Документ = Неопределено;
Объект.Параметры.Очистить();
Объект.СписокШаблонов.Очистить();
Объект.СписокБарКодов.Очистить();	
Объект.СписокБарКодов.Добавить(БарКод);
Изделие = ВыбИзделие;
ПолучитьСписокШаблонов(Изделие);
КонецПроцедуры
 
&НаСервере
Функция ПолучитьСпецификацииПоБарКоду(БарКод)
СписокСпецификаций = Новый СписокЗначений;

	Если СтрДлина(СокрЛП(БарКод)) = 18 Тогда
	КодТовара = Лев(БарКод,6);
	Иначе	
	КодТовара = Лев(БарКод,5);	
	КонецЕсли;
Товар = Справочники.Товары.НайтиПоКоду(Число(КодТовара));
	Если Не Товар.Пустая() Тогда
	Выборка = Справочники.Номенклатура.Выбрать(,,Новый Структура("Товар",Товар));
		Пока Выборка.Следующий() Цикл
		СписокСпецификаций.Добавить(Выборка.Ссылка);
		КонецЦикла;			
	Иначе
	Сообщить("Товар не найден!");
	КонецЕсли;
Возврат(СписокСпецификаций);
КонецФункции

&НаКлиенте
Процедура НайтиПоБарКоду(Команда)
Перем БарКод,Спецификация;

	Если ВвестиСтроку(БарКод,"Введите бар-код",18) Тогда
		Если НайтиПоБарКодуНаСервере(БарКод) Тогда
			Если Не СписокШаблоновПуст() Тогда
			Элементы.СписокШаблонов.ТекущаяСтрока = Объект.СписокШаблонов[0].ПолучитьИдентификатор();
			СписокШаблоновВыбор(,Элементы.СписокШаблонов.ТекущаяСтрока,,Истина);
			КонецЕсли; 
				Если Не СписокБарКодовПуст() Тогда
				Элементы.СписокБарКодов.ТекущаяСтрока = Объект.СписокБарКодов[0].ПолучитьИдентификатор();
				СписокБарКодовВыбор(,Элементы.СписокБарКодов.ТекущаяСтрока,,Истина);
				КонецЕсли;
		Иначе
		СписокСпецификаций = ПолучитьСпецификацииПоБарКоду(БарКод);
			Если СписокСпецификаций.Количество() = 1 Тогда
			Спецификация = СписокСпецификаций.Получить(0).Значение;
			ЗаполнитьДляНеНайденногоБарКода(Спецификация,БарКод);
			ИначеЕсли СписокСпецификаций.Количество() > 1 Тогда
			ВыбЭлемент = СписокСпецификаций.ВыбратьЭлемент("Выберите спецификацию",Спецификация);
				Если ВыбЭлемент <> Неопределено Тогда
				ЗаполнитьДляНеНайденногоБарКода(ВыбЭлемент.Значение,БарКод);
				КонецЕсли;
			Иначе
			Сообщить("Спецификации не найдены!");			
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзделиеПриИзменении(Элемент)
ИзделиеПриИзмененииНаСервере();
	Если Не СписокШаблоновПуст() Тогда
	Элементы.СписокШаблонов.ТекущаяСтрока = Объект.СписокШаблонов[0].ПолучитьИдентификатор();
	СписокШаблоновВыбор(,Элементы.СписокШаблонов.ТекущаяСтрока,,Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзделиеПриИзмененииНаСервере()
Объект.Документ = Неопределено;
Объект.Параметры.Очистить();
Объект.СписокШаблонов.Очистить();
Объект.СписокБарКодов.Очистить();
ПолучитьСписокШаблонов(Изделие);
КонецПроцедуры
