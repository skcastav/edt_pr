
&НаКлиенте
Процедура ПриОткрытии(Отказ)
ПолучитьКрупныеЗаказыНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокПродукции(Товар)
СписокПродукции = Новый СписокЗначений;
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Номенклатура.Ссылка КАК Ссылка,
	|	СтатусыМПЗСрезПоследних.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.СтатусыМПЗ.СрезПоследних(&НаДату, ) КАК СтатусыМПЗСрезПоследних
	|		ПОЛНОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК Номенклатура
	|		ПО СтатусыМПЗСрезПоследних.МПЗ = Номенклатура.Ссылка
	|ГДЕ
	|	Номенклатура.Товар = &Товар
	|	И СтатусыМПЗСрезПоследних.Статус <> &Статус";
Запрос.УстановитьПараметр("Товар", Товар);
Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыСпецификаций.Запрещённая);
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	СписокПродукции.Добавить(ВыборкаДетальныеЗаписи.Ссылка,"["+ВыборкаДетальныеЗаписи.Статус+"] "+СокрЛП(ВыборкаДетальныеЗаписи.Ссылка.Наименование));
	КонецЦикла;
Возврат(СписокПродукции);
КонецФункции

&НаСервере
Процедура ПолучитьКрупныеЗаказыНаСервере()
ТаблицаКрупныхЗаказов.Очистить();
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	КрупныеЗаказы.Период КАК Период,
	|	КрупныеЗаказы.Счёт КАК Счёт,
	|	КрупныеЗаказы.Товар КАК Товар,
	|	КрупныеЗаказы.Продукция КАК Продукция,
	|	КрупныеЗаказы.Количество КАК Количество,
	|	КрупныеЗаказы.Менеджер КАК Менеджер,
	|	КрупныеЗаказы.ДатаПоступленияКомплектации КАК ДатаПоступленияКомплектации,
	|	КрупныеЗаказы.СрокПоставки КАК СрокПоставки,
	|	КрупныеЗаказы.ДатаРезерва КАК ДатаРезерва,
	|	КрупныеЗаказы.Контрагент КАК Контрагент,
	|	КрупныеЗаказы.Проект КАК Проект
	|ИЗ
	|	РегистрСведений.КрупныеЗаказы КАК КрупныеЗаказы
	|ГДЕ
	|	КрупныеЗаказы.Обработан = ЛОЖЬ";
	Если ВидДанных = 0 Тогда
	Запрос.Текст = Запрос.Текст + " И КрупныеЗаказы.ДатаРезерва = ДАТАВРЕМЯ(1,1,1,0,0,0)";
	Иначе	
	Запрос.Текст = Запрос.Текст + " И КрупныеЗаказы.ДатаРезерва <> ДАТАВРЕМЯ(1,1,1,0,0,0)";
	КонецЕсли; 
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();	
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
	ТЧ = ТаблицаКрупныхЗаказов.Добавить();
	ТЧ.Период = ВыборкаДетальныеЗаписи.Период;
	ТЧ.Счёт = ВыборкаДетальныеЗаписи.Счёт;
	ТЧ.Проект = ВыборкаДетальныеЗаписи.Проект;
	ТЧ.Контрагент = ВыборкаДетальныеЗаписи.Контрагент;
	ТЧ.Товар = ВыборкаДетальныеЗаписи.Товар;
	ТЧ.Продукция = ВыборкаДетальныеЗаписи.Продукция;
	ТЧ.Количество = ВыборкаДетальныеЗаписи.Количество;
	ТЧ.Менеджер = ВыборкаДетальныеЗаписи.Менеджер;
	ТЧ.ДатаПоступленияКомплектации = ВыборкаДетальныеЗаписи.ДатаПоступленияКомплектации;
	ТЧ.СрокПоставки = ВыборкаДетальныеЗаписи.СрокПоставки;
	ТЧ.ДатаРезерва = ВыборкаДетальныеЗаписи.ДатаРезерва;
		Если ЗначениеЗаполнено(ВыборкаДетальныеЗаписи.ДатаРезерва) Тогда
			Если ((НачалоДня(ТекущаяДата()) - ВыборкаДетальныеЗаписи.ДатаРезерва)/86400) >= СрокРезервирования Тогда	
			ТЧ.РезервЗавершён = Истина;
			КонецЕсли; 
		КонецЕсли; 
	КоличествоЗапусков = ?(ТЧ.Товар.КратностьЗапуска > 0,ТЧ.Количество/ТЧ.Товар.КратностьЗапуска,0);
		Если КоличествоЗапусков > Цел(КоличествоЗапусков) Тогда
		КоличествоЗапусков = Цел(КоличествоЗапусков) + 1;
		КонецЕсли; 	
	ТЧ.КоличествоЗапусков = КоличествоЗапусков;
		Если ТЧ.Продукция.Пустая() Тогда	
		СписокПродукции = ПолучитьСписокПродукции(ВыборкаДетальныеЗаписи.Товар);
			Если СписокПродукции.Количество() = 1 Тогда	
			ТЧ.Продукция = СписокПродукции[0].Значение;
			НаборЗаписей = РегистрыСведений.КрупныеЗаказы.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Период.Установить(ТЧ.Период);
			НаборЗаписей.Отбор.Счёт.Установить(ТЧ.Счёт);
			НаборЗаписей.Отбор.Товар.Установить(ТЧ.Товар);
			НаборЗаписей.Прочитать();
			    Для Каждого Запись Из НаборЗаписей Цикл 
				Запись.Продукция = ТЧ.Продукция;  
			    КонецЦикла;
			НаборЗаписей.Записать(Истина);
			КонецЕсли; 
		КонецЕсли; 	
	КонецЦикла;
ТаблицаКрупныхЗаказов.Сортировать("Период");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьКрупныеЗаказы(Команда)
ПолучитьКрупныеЗаказыНаСервере();
КонецПроцедуры

&НаСервере
Функция ПолучитьКоличествоОстатокЗП(ТНП)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.МПЗ КАК МПЗ,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&НаДату, МПЗ = &МПЗ) КАК ЗаказыПоставщикамОстатки
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	МПЗ";
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());  
Запрос.УстановитьПараметр("МПЗ", ТНП); 
РезультатЗапроса = Запрос.Выполнить();
ВыборкаМПЗ = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаМПЗ.Следующий() Цикл
	Возврат(ВыборкаМПЗ.КоличествоОстаток); 
	КонецЦикла;
Возврат(0);
КонецФункции

&НаСервере
Функция ПолучитьКоличествоОстатокРезерв(ТНП)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РезервированиеГПОстатки.Продукция КАК Продукция,
	|	РезервированиеГПОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.РезервированиеГП.Остатки(
	|			&НаДату,
	|			МестоХранения = &МестоХранения
	|				И Продукция = &Продукция) КАК РезервированиеГПОстатки
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	Продукция";
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
Запрос.УстановитьПараметр("МестоХранения", Константы.МестоХраненияТНП.Получить());  
Запрос.УстановитьПараметр("Продукция", ТНП); 
РезультатЗапроса = Запрос.Выполнить();
ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПродукция.Следующий() Цикл
	Возврат(ВыборкаПродукция.КоличествоОстаток); 
	КонецЦикла;
Возврат(0);
КонецФункции

&НаСервере
Функция ПолучитьКоличествоОстатокДолг(ТНП)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДолгиОстатки.Продукция КАК Продукция,
	|	ДолгиОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.Долги.Остатки(&НаДату, Продукция = &Продукция) КАК ДолгиОстатки
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	Продукция";
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
Запрос.УстановитьПараметр("Продукция", ТНП);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПродукция.Следующий() Цикл
	Возврат(ВыборкаПродукция.КоличествоОстаток);
	КонецЦикла;
Возврат(0);
КонецФункции

&НаСервере
Функция ПолучитьКоличествоРК(ТНП)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПерспективныеПланы.МПЗ КАК МПЗ,
	|	ПерспективныеПланы.РезКм КАК РезКм
	|ИЗ
	|	РегистрСведений.ПерспективныеПланы КАК ПерспективныеПланы
	|ГДЕ
	|	ПерспективныеПланы.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И ПерспективныеПланы.МПЗ = &МПЗ
	|	И ПерспективныеПланы.РезКм > 0";
Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(ТекущаяДата())); 
Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(ТекущаяДата())); 
Запрос.УстановитьПараметр("МПЗ", ТНП); 
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныхЗаписей = РезультатЗапроса.Выбрать();
РезКм = 0;
	Пока ВыборкаДетальныхЗаписей.Следующий() Цикл
	РезКм = РезКм + ВыборкаДетальныхЗаписей.РезКм; 
	КонецЦикла;
Возврат(РезКм);
КонецФункции

&НаСервере
Функция ПолучитьКоличествоКЗ(ТНП)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	КрупныеЗаказы.Продукция КАК Продукция,
	|	КрупныеЗаказы.Количество КАК Количество
	|ИЗ
	|	РегистрСведений.КрупныеЗаказы КАК КрупныеЗаказы
	|ГДЕ
	|	КрупныеЗаказы.Продукция = &Продукция
	|	И КрупныеЗаказы.ДатаРезерва <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И КрупныеЗаказы.Обработан = ЛОЖЬ
	|ИТОГИ
	|	СУММА(Количество)
	|ПО
	|	Продукция";
Запрос.УстановитьПараметр("Продукция", ТНП); 
РезультатЗапроса = Запрос.Выполнить();
ВыборкаПродукция = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПродукция.Следующий() Цикл
	Возврат(ВыборкаПродукция.Количество); 
	КонецЦикла;
Возврат(0);
КонецФункции

&НаСервере
Функция ПолучитьКоличествоПраздничныхДней(ДатаОтгрузки)
КоличествоПраздничныхДней = 0;
ТекДата = НачалоДня(ТекущаяДата());	
	Пока ТекДата <> ДатаОтгрузки Цикл	
	ДПК = РегистрыСведений.ДанныеПроизводственногоКалендаря.СоздатьНаборЗаписей();
	ДПК.Отбор.ПроизводственныйКалендарь.Установить(Константы.ОсновнойПроизводственныйКалендарь.Получить());
	ДПК.Отбор.Дата.Установить(ТекДата);
	ДПК.Отбор.Год.Установить(Год(ТекДата));
	ДПК.Прочитать();
	    Для Каждого Запись Из ДПК Цикл
			Если Запись.ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда	
			КоличествоПраздничныхДней = КоличествоПраздничныхДней + 1;
			КонецЕсли; 
		КонецЦикла; 	
	ТекДата = ТекДата + 86400;
	КонецЦикла;
Возврат(КоличествоПраздничныхДней); 
КонецФункции

&НаСервере
Функция ПолучитьДатуПоставки(ЗаказПоставщику,МПЗ)
Возврат(ЗаказПоставщику.ТабличнаяЧасть.Найти(МПЗ,"МПЗ").ДатаПоставки);
КонецФункции

&НаСервере
Функция ПолучитьДатуПослеРаспределенияЗП(ТНП,КоличествоНераспределено)
Запрос = Новый Запрос;
ТаблицаОстатков = Новый ТаблицаЗначений;

ТаблицаОстатков.Колонки.Добавить("ДатаПоставки");
ТаблицаОстатков.Колонки.Добавить("Количество");

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику КАК ЗаказПоставщику,
	|	ЗаказыПоставщикамОстатки.КоличествоОстаток КАК КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.ЗаказыПоставщикам.Остатки(&НаДату, ) КАК ЗаказыПоставщикамОстатки
	|ГДЕ
	|	ЗаказыПоставщикамОстатки.МПЗ = &МПЗ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказыПоставщикамОстатки.ЗаказПоставщику
	|ИТОГИ
	|	СУММА(КоличествоОстаток)
	|ПО
	|	ЗаказПоставщику";
Запрос.УстановитьПараметр("НаДату",ТекущаяДата());
Запрос.УстановитьПараметр("МПЗ",ТНП);	
РезультатЗапроса = Запрос.Выполнить();
ВыборкаЗП = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗП.Следующий() Цикл
	ТЧ = ТаблицаОстатков.Добавить();
	ТЧ.Количество = ВыборкаЗП.КоличествоОстаток;
	ТЧ.ДатаПоставки = ПолучитьДатуПоставки(ВыборкаЗП.ЗаказПоставщику,ТНП);		 
	КонецЦикла;
ТаблицаОстатков.Свернуть("ДатаПоставки","Количество");
ТаблицаОстатков.Сортировать("ДатаПоставки");
	Для каждого ТЧ Из ТаблицаОстатков Цикл
		Если ТЧ.Количество >= КоличествоНераспределено Тогда
		Возврат(ТЧ.ДатаПоставки);
		Иначе
		КоличествоНераспределено = КоличествоНераспределено - ТЧ.Количество;
		КонецЕсли;  
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

&НаСервере
Функция ПолучитьДатуОтгрузки(МПЗ,КоличествоСвободныйОстаток)
Запрос = Новый Запрос;

СрокПоставкиПоставщика = Дата(1,1,1);
Запрос.Текст = 
	"ВЫБРАТЬ
	|	СвободныеОстаткиПоставщиков.МПЗ КАК МПЗ,
	|	СвободныеОстаткиПоставщиков.Количество КАК Количество,
	|	СвободныеОстаткиПоставщиков.СрокПоставки КАК СрокПоставки,
	|	СвободныеОстаткиПоставщиков.Период КАК Период
	|ИЗ
	|	РегистрСведений.СвободныеОстаткиПоставщиков КАК СвободныеОстаткиПоставщиков
	|ГДЕ
	|	СвободныеОстаткиПоставщиков.МПЗ = &МПЗ
	|
	|УПОРЯДОЧИТЬ ПО
	|	СвободныеОстаткиПоставщиков.Период";
Запрос.УстановитьПараметр("МПЗ", МПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.Количество >= КоличествоСвободныйОстаток Тогда			
		Возврат(ОбщийМодульВызовСервера.ПолучитьВремяМеждуДатами(НачалоДня(ТекущаяДата()),ВыборкаДетальныеЗаписи.Период,0,Ложь,0,Ложь)+МПЗ.СрокПоставки*5+1);
		Иначе
		КоличествоСвободныйОстаток = КоличествоСвободныйОстаток - ВыборкаДетальныеЗаписи.Количество; 
		КонецЕсли;
	СрокПоставкиПоставщика = ВыборкаДетальныеЗаписи.СрокПоставки; 
	КонецЦикла;
		Если ЗначениеЗаполнено(СрокПоставкиПоставщика) Тогда
		Возврат(СрокПоставкиПоставщика*5);
		Иначе
			Если МПЗ.СрокПоставки > 0 Тогда
			Возврат(МПЗ.СрокПоставки*5+1);
			Иначе
			Возврат(0);
			КонецЕсли;
		КонецЕсли;
КонецФункции 

&НаСервере
Процедура ПолучитьСрокПоставкиТНП(ТНП,ТЧ)
ТЧ_ТНП = ТЧ.ТаблицаТНП.Добавить();
ТЧ_ТНП.КоличествоОстатокМХ = ОбщийМодульВызовСервера.ПолучитьОстатокПоМестуХранения(Константы.МестоХраненияТНП.Получить(),ТНП);
ТЧ_ТНП.КоличествоОстатокТранзит = ОбщийМодульВызовСервера.ПолучитьОстатокПоМестуХранения(Константы.МестоХраненияТранзит.Получить(),ТНП);
ТЧ_ТНП.КоличествоОстатокЗП = ПолучитьКоличествоОстатокЗП(ТНП);
ТЧ_ТНП.КоличествоОстатокРезерв = ПолучитьКоличествоОстатокРезерв(ТНП);
ТЧ_ТНП.КоличествоОстатокДолги = ПолучитьКоличествоОстатокДолг(ТНП);
ТЧ_ТНП.НЗ_50 = Окр(ТНП.МинОстаток/2,0,РежимОкругления.Окр15как20);
ТЧ_ТНП.РезервКомплектов = ПолучитьКоличествоРК(ТНП);
ТЧ_ТНП.КоличествоКЗ = ПолучитьКоличествоКЗ(ТНП);
ТЧ_ТНП.СрокПоставкиДни = ТНП.СрокПоставки*5;
КоличествоСвободныйОстаток = ТЧ_ТНП.КоличествоОстатокМХ - ТЧ_ТНП.КоличествоОстатокДолги + ТЧ_ТНП.КоличествоОстатокТранзит - ТЧ_ТНП.КоличествоКЗ - ТЧ.Количество - ТЧ_ТНП.РезервКомплектов;
	//Если ТЧ.Количество >= ТНП.Товар.КрупностьЗаказа Тогда
	//КоличествоСвободныйОстаток = КоличествоСвободныйОстаток - ТЧ_ТНП.НЗ_50;
	//КонецЕсли; 
		Если КоличествоСвободныйОстаток >= 0 Тогда
		ТЧ_ТНП.ДатаОтгрузкиДней = 1;
		Иначе
			Если ТЧ_ТНП.КоличествоОстатокЗП > 0 Тогда
				Если (-1*КоличествоСвободныйОстаток) > ТЧ_ТНП.КоличествоОстатокЗП Тогда
					Если СокрЛП(ТНП.Товар.Статус) = "Снимаемый с производства" Тогда
					ТЧ_ТНП.Ошибка = 1;
					Иначе
					ТЧ_ТНП.ДатаОтгрузкиДней = ПолучитьДатуОтгрузки(ТНП,-1*КоличествоСвободныйОстаток);	
						Если ТЧ_ТНП.ДатаОтгрузкиДней = 0 Тогда
						ТЧ_ТНП.Ошибка = 2;
						КонецЕсли;
					КонецЕсли;
				Иначе
				ДатаРаспределения = ПолучитьДатуПослеРаспределенияЗП(ТНП,-1*КоличествоСвободныйОстаток);
					Если ДатаРаспределения <> Неопределено Тогда
					ТЧ_ТНП.ДатаОтгрузкиДней = ОбщийМодульВызовСервера.ПолучитьВремяМеждуДатами(НачалоДня(ТекущаяДата()),ДатаРаспределения,0,Ложь,0,Истина)+1;
					КонецЕсли; 	
				КонецЕсли;		
			Иначе    	
				Если СокрЛП(ТНП.Товар.Статус) = "Снимаемый с производства" Тогда
				ТЧ_ТНП.Ошибка = 1;
				Иначе	
				ТЧ_ТНП.ДатаОтгрузкиДней = ПолучитьДатуОтгрузки(ТНП,-1*КоличествоСвободныйОстаток);
					Если ТЧ_ТНП.ДатаОтгрузкиДней = 0 Тогда
					ТЧ_ТНП.Ошибка = 2;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
ТЧ.СрокПоставки = ТЧ_ТНП.ДатаОтгрузкиДней; 
КонецПроцедуры 

&НаСервере
Процедура РассчитатьДатуОтгрузкиТНПНаСервере()
	Для каждого ТЧ Из  ТаблицаКрупныхЗаказов Цикл
		Если ТЧ.Продукция.Пустая() Тогда
		ТНП = Справочники.Материалы.НайтиПоРеквизиту("Товар",ТЧ.Товар);
			Если Не ТНП.Пустая() Тогда
			ПолучитьСрокПоставкиТНП(ТНП,ТЧ);			
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьДатуОтгрузкиТНП(Команда)
РассчитатьДатуОтгрузкиТНПНаСервере();
КонецПроцедуры

&НаСервере
Процедура СохранитьПродукция(Стр)
ТЧ = ТаблицаКрупныхЗаказов.НайтиПоИдентификатору(Стр);	
НаборЗаписей = РегистрыСведений.КрупныеЗаказы.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Период.Установить(ТЧ.Период);
НаборЗаписей.Отбор.Счёт.Установить(ТЧ.Счёт);
НаборЗаписей.Отбор.Товар.Установить(ТЧ.Товар);
НаборЗаписей.Прочитать();
    Для Каждого Запись Из НаборЗаписей Цикл 
	Запись.Продукция = ТЧ.Продукция;  
    КонецЦикла;
НаборЗаписей.Записать(Истина);
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаКрупныхЗаказовПродукцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
СписокПродукции = ПолучитьСписокПродукции(Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.Товар);
Продукция = СписокПродукции.ВыбратьЭлемент("Выберите продукцию");
	Если Продукция <> Неопределено Тогда
	Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.Продукция = Продукция.Значение;
	СохранитьПродукция(Элементы.ТаблицаКрупныхЗаказов.ТекущаяСтрока);	
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ВедомостьДефицита(Команда)
ОткрытьФорму("Отчет.ВедомостьДефицита.Форма.ФормаОтчета",Новый Структура("Номенклатура,Количество",Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.Продукция,Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.Количество));
КонецПроцедуры

&НаСервере
Функция КоличествоРабочихДней(ДатаНач,ДатаКон)
Возврат(КалендарныеГрафики.ПолучитьРазностьДатПоКалендарю(Константы.ОсновнойПроизводственныйКалендарь.Получить(),ДатаНач,ДатаКон));
КонецФункции 

&НаСервере
Процедура СохранитьСрокПоставки(Стр)
ТЧ = ТаблицаКрупныхЗаказов.НайтиПоИдентификатору(Стр);	
НаборЗаписей = РегистрыСведений.КрупныеЗаказы.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Период.Установить(ТЧ.Период);
НаборЗаписей.Отбор.Счёт.Установить(ТЧ.Счёт);
НаборЗаписей.Отбор.Товар.Установить(ТЧ.Товар);
НаборЗаписей.Прочитать();
    Для Каждого Запись Из НаборЗаписей Цикл 
	Запись.ДатаПоступленияКомплектации = ТЧ.ДатаПоступленияКомплектации;
	Запись.СрокПоставки = ТЧ.СрокПоставки;  
    КонецЦикла;
НаборЗаписей.Записать(Истина);
КонецПроцедуры 

&НаКлиенте
Процедура ТаблицаКрупныхЗаказовДатаПоступленияКомплектацииПриИзменении(Элемент)
//Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.СрокПоставки = КоличествоРабочихДней(НачалоДня(Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.Период),Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.ДатаПоступленияКомплектации)+Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.КоличествоЗапусков+1;
СохранитьСрокПоставки(Элементы.ТаблицаКрупныхЗаказов.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Функция ВыгрузитьСрокПоставки(Стр)
БазаСбыта = ОбщийМодульСинхронизации.УстановитьCOMСоединение(Константы.БазаДанных1ССбыт.Получить());
	Если БазаСбыта = Неопределено Тогда
	Сообщить("Не открыто соединение с базой сбыта!");
	Возврат(Ложь);
	КонецЕсли;	
ТЧ = ТаблицаКрупныхЗаказов.НайтиПоИдентификатору(Стр);
	Если Константы.КодБазы.Получить() = "БГР" Тогда
	ЗаказКлиента = БазаСбыта.Документы.ЗаказКлиента.НайтиПоНомеру(СокрЛП(ТЧ.Счёт),ТЧ.Период);	
	Иначе	
	ЗаказКлиента = БазаСбыта.Документы.ЗаказПокупателя.НайтиПоНомеру(СокрЛП(ТЧ.Счёт),ТЧ.Период);	
	КонецЕсли;
		Если ЗаказКлиента.Пустая() Тогда
			Если Константы.КодБазы.Получить() = "БГР" Тогда
			ЗаказКлиента = БазаСбыта.Документы.ЗаказКлиента.НайтиПоНомеру(СокрЛП(ТЧ.Счёт),НачалоГода(ТекущаяДата())-1);	
			Иначе	
			ЗаказКлиента = БазаСбыта.Документы.ЗаказПокупателя.НайтиПоНомеру(СокрЛП(ТЧ.Счёт),НачалоГода(ТекущаяДата())-1);	
			КонецЕсли;
	        	Если ЗаказКлиента.Пустая() Тогда
				Сообщить("Заказ клиента (покупателя) в базе сбыта не найден по номеру счёта!");
				Возврат(Ложь);
				КонецЕсли;	
		КонецЕсли;
Артикул = ОбщийМодульВызовСервера.ПолучитьАртикулПоКодуТовара(ТЧ.Товар.Код);
Номенклатура = БазаСбыта.Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",Артикул);
	Если Номенклатура.Пустая() Тогда
	Сообщить("Номенклатура не найдена в базе сбыта!");
	Возврат(Ложь);
	КонецЕсли;
ЗК = ЗаказКлиента.ПолучитьОбъект(); 
флНайден = Ложь;
	Для каждого ТЧ_ЗК Из ЗК.Товары Цикл	
		Если ТЧ_ЗК.Номенклатура.Наименование = Номенклатура.Наименование Тогда
		флНайден = Истина;
		ТЧ_ЗК.СрокПоставки = ТЧ.СрокПоставки;
		Прервать;
		КонецЕсли; 
	КонецЦикла;  
		Если флНайден Тогда
			Попытка
				Если Константы.КодБазы.Получить() = "БГР" Тогда	
				ЗК.ДатаОтвета = ТекущаяДата();
				Иначе
				ЗК.ОтветПоСроку = ТекущаяДата();				
				КонецЕсли;
			ЗК.Записать(БазаСбыта.РежимЗаписиДокумента.Запись);
			Исключение
			Сообщить(ОписаниеОшибки());
			Возврат(Ложь);			
			КонецПопытки;	
		Иначе
		Сообщить("Номенклатура не найдена в заказе клиента (покупателя) базы сбыта!");
		Возврат(Ложь);
		КонецЕсли;
Возврат(Истина);	
КонецФункции 

&НаСервере
Функция ПолучитьEmailСотрудника()
Возврат(ПараметрыСеанса.Пользователь.Email);
КонецФункции

&НаСервере
Функция ПолучитьEmailПолучателя(Сотрудник)
Возврат(Сотрудник.Email);
КонецФункции

&НаСервере
Процедура СохранитьОбработанНеСтандартный(Стр)
ТЧ = ТаблицаКрупныхЗаказов.НайтиПоИдентификатору(Стр);	
	Если Не ТЧ.Товар.Стандартный Тогда
	НаборЗаписей = РегистрыСведений.КрупныеЗаказы.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Период.Установить(ТЧ.Период);
	НаборЗаписей.Отбор.Счёт.Установить(ТЧ.Счёт);
	НаборЗаписей.Отбор.Товар.Установить(ТЧ.Товар);
	НаборЗаписей.Прочитать();
	    Для Каждого Запись Из НаборЗаписей Цикл 
		Запись.Обработан = Истина; 
	    КонецЦикла;
	НаборЗаписей.Записать(Истина);	
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВнестиСрокПоставкиВМТК(ЗНП,Номенклатура,СрокПоставки)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	МаршрутнаяКарта.Ссылка КАК МТК
	|ИЗ
	|	Документ.МаршрутнаяКарта КАК МаршрутнаяКарта
	|ГДЕ
	|	МаршрутнаяКарта.ДокументОснование = &ДокументОснование
	|	И МаршрутнаяКарта.Номенклатура = &Номенклатура
	|	И МаршрутнаяКарта.Статус <> 3";
Запрос.УстановитьПараметр("ДокументОснование", ЗНП);
Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	МТКОбъект = ВыборкаДетальныеЗаписи.МТК.ПолучитьОбъект();
	МТКОбъект.ДатаОтгрузки = СрокПоставки;
	МТКОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Функция ВыгрузитьСрокПоставкиВЗНП(Стр)
ТЧ = ТаблицаКрупныхЗаказов.НайтиПоИдентификатору(Стр);
ЗНП = Документы.ЗаказНаПроизводство.НайтиПоНомеру(СокрЛП(ТЧ.Счёт),ТЧ.Период);
	Если ЗНП.Пустая() Тогда
	ЗНП = Документы.ЗаказНаПроизводство.НайтиПоНомеру(СокрЛП(ТЧ.Счёт),НачалоГода(ТекущаяДата())-1);
		Если ЗНП.Пустая() Тогда
		Сообщить("Заказ на производство не найден в базе производства по номеру счёта!");
		Возврат(Ложь);
		КонецЕсли;	
	КонецЕсли;
		Попытка
		НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		ЗНПОбъект = ЗНП.ПолучитьОбъект();
		Выборка = ЗНПОбъект.Заказ.НайтиСтроки(Новый Структура("Товар",ТЧ.Товар));
			Если Выборка.Количество() > 0 Тогда
			Выборка[0].СрокПоставки = ТЧ.СрокПоставки;
			Выборка[0].ДатаОтгрузкиОбещанная = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Константы.ОсновнойПроизводственныйКалендарь.Получить(),ЗНПОбъект.Дата,ТЧ.СрокПоставки);
			Иначе
			Сообщить(СокрЛП(ТЧ.Счёт)+ " - в заказе на производство не найден товар!");
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат(Ложь);
			КонецЕсли;
		МаксСрокПоставки = 0;
			Для каждого ТЧ Из ЗНПОбъект.Заказ Цикл
			МаксСрокПоставки = Макс(МаксСрокПоставки,ТЧ.СрокПоставки);
			КонецЦикла;
		ЗНПОбъект.ДатаОтгрузкиОбещанная = КалендарныеГрафики.ПолучитьДатуПоКалендарю(Константы.ОсновнойПроизводственныйКалендарь.Получить(),ЗНПОбъект.Дата,МаксСрокПоставки);  
		ЗНПОбъект.Записать(РежимЗаписиДокумента.Запись);
		ВнестиСрокПоставкиВМТК(ЗНП,Выборка[0].Продукция,ТЧ.СрокПоставки);
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Возврат(Истина);
		Исключение
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		Сообщить(ОписаниеОшибки());
		Возврат(Ложь);
		КонецПопытки;	
КонецФункции 

&НаКлиенте
Процедура ЗавершитьИОтправитьРезультат(Команда)
	Если Не ЗначениеЗаполнено(Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.ДатаПоступленияКомплектации)и
		 Не ЗначениеЗаполнено(Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.СрокПоставки) Тогда
	Возврат;
	КонецЕсли;
Состояние("Обработка...",,"Выгрузка срока поставки в заказ на производство..."); 
ВыгрузитьСрокПоставкиВЗНП(Элементы.ТаблицаКрупныхЗаказов.ТекущаяСтрока);
Состояние("Обработка...",,"Выгрузка срока поставки в базу сбыта...");
	Если ВыгрузитьСрокПоставки(Элементы.ТаблицаКрупныхЗаказов.ТекущаяСтрока) Тогда
	EmailСотрудника = ПолучитьEmailСотрудника();
	Сообщение = Новый ИнтернетПочтовоеСообщение;
	ИПП = Новый ИнтернетПочтовыйПрофиль; 

	НастройкиПочты = ОбщийМодульВызовСервера.ПолучитьНастройкиПочты();
	ИПП.АдресСервераSMTP = НастройкиПочты.АдресСервераSMTP; 
	ИПП.ПортSMTP = НастройкиПочты.ПортSMTP;
	ИПП.ВремяОжидания = 60; 
	ИПП.Пароль = НастройкиПочты.ПарольПочтовогоСервера; 
	ИПП.Пользователь = EmailСотрудника;
	Сообщение.Отправитель.Адрес = EmailСотрудника; 
	Сообщение.Получатели.Добавить(ПолучитьEmailПолучателя(Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.Менеджер));
	Сообщение.Получатели.Добавить(EmailСотрудника);
	Сообщение.Тема = "Срок поставки для крупного заказа!"; 
	Текст = "Здравствуйте!";
	Текст = Текст + Символы.ПС+ "";
	Текст = Текст + Символы.ПС+ "Срок поставки по счёту: "+СокрЛП(Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.Счёт)+", товар: "+СокрЛП(Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.Товар)+" - "+Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.СрокПоставки+" рабочих дней.";	
	Текст = Текст + Символы.ПС+ "";
	Текст = Текст + Символы.ПС+ "С уважением, служба автоматической рассылки производственной базы!";
	Сообщение.Тексты.Добавить(Текст);	
	// Подключиться и отправить. 
	Почта = Новый ИнтернетПочта; 
	Почта.Подключиться(ИПП);
	Почта.Послать(Сообщение); 
	Почта.Отключиться();
	ПоказатьОповещениеПользователя("Сообщение отправлено!");
	//СохранитьОбработанНеСтандартный(Элементы.ТаблицаКрупныхЗаказов.ТекущаяСтрока);
	ПолучитьКрупныеЗаказыНаСервере();	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаКрупныхЗаказовСрокПоставкиПриИзменении(Элемент)
СохранитьСрокПоставки(Элементы.ТаблицаКрупныхЗаказов.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗарезервироватьНаСервере(Стр)
ТЧ = ТаблицаКрупныхЗаказов.НайтиПоИдентификатору(Стр);
НаборЗаписей = РегистрыСведений.КрупныеЗаказы.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Период.Установить(ТЧ.Период);
НаборЗаписей.Отбор.Счёт.Установить(ТЧ.Счёт);
НаборЗаписей.Отбор.Товар.Установить(ТЧ.Товар);
НаборЗаписей.Прочитать();
    Для Каждого Запись Из НаборЗаписей Цикл 
	Запись.ДатаРезерва = ТекущаяДата(); 
	ТЧ.ДатаРезерва = ТекущаяДата();
    КонецЦикла;
НаборЗаписей.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура Зарезервировать(Команда)
	Если ЗначениеЗаполнено(Элементы.ТаблицаКрупныхЗаказов.ТекущиеДанные.ДатаРезерва) Тогда
		Если Вопрос("Зарезервировать заново?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
		КонецЕсли; 
	КонецЕсли; 
ЗарезервироватьНаСервере(Элементы.ТаблицаКрупныхЗаказов.ТекущаяСтрока);
КонецПроцедуры

&НаСервере
Процедура ЗавершитьОбработкуНаСервере(Стр)
ТЧ = ТаблицаКрупныхЗаказов.НайтиПоИдентификатору(Стр);
НаборЗаписей = РегистрыСведений.КрупныеЗаказы.СоздатьНаборЗаписей();
НаборЗаписей.Отбор.Период.Установить(ТЧ.Период);
НаборЗаписей.Отбор.Счёт.Установить(ТЧ.Счёт);
НаборЗаписей.Отбор.Товар.Установить(ТЧ.Товар);
НаборЗаписей.Прочитать();
    Для Каждого Запись Из НаборЗаписей Цикл 
	//Запись.ДатаРезерва = Дата(1,1,1); 
	Запись.Обработан = Истина;
    КонецЦикла;
НаборЗаписей.Записать(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьОбработку(Команда)
ЗавершитьОбработкуНаСервере(Элементы.ТаблицаКрупныхЗаказов.ТекущаяСтрока);
ПолучитьКрупныеЗаказыНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ВидДанныхПриИзменении(Элемент)
ПолучитьКрупныеЗаказыНаСервере();
КонецПроцедуры
