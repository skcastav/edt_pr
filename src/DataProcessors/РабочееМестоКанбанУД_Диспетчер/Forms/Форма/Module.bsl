
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Объект.Исполнитель = ПараметрыСеанса.Пользователь; 
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
   Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
      ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
      ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
      Сообщить(ТекстСообщения);
   КонецЕсли;
		Если Не Объект.Линейка.Пустая() Тогда
	 	ЛинейкаПриИзменении(Неопределено);
		КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьДополнительныеНастройки()
СписокМестХранения.Добавить(Объект.Линейка.МестоХраненияКанбанов);
СписокМестХранения.Добавить(Объект.Линейка.Подразделение.МестоХраненияПоУмолчанию);
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	РабочиеМестаЛинеек.Ссылка
	|ИЗ
	|	Справочник.РабочиеМестаЛинеек КАК РабочиеМестаЛинеек
	|ГДЕ
	|	РабочиеМестаЛинеек.Линейка = &Линейка
	|	И РабочиеМестаЛинеек.ПометкаУдаления = ЛОЖЬ
	|	И РабочиеМестаЛинеек.ЭтоГруппа = ЛОЖЬ
	|	И РабочиеМестаЛинеек.Код = 1";
Запрос.УстановитьПараметр("Линейка", Объект.Линейка);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Объект.РабочееМесто = ВыборкаДетальныеЗаписи.Ссылка;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(Объект.Линейка) Тогда	
	Возврат(Истина);
	Иначе
	Объект.Линейка = Справочники.Линейки.ПустаяСсылка();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции 

&НаКлиенте
Процедура ЛинейкаПриИзменении(Элемент)
	Если Не МожноРаботатьВАРМ() Тогда
	Возврат;
	КонецЕсли;
ПолучитьДополнительныеНастройки();
ПолучитьДанныеПоЗаданиямНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоЗаданиямНаСервере()
ТаблицаЗаданий.Очистить();
Запрос = Новый Запрос;
ЗапросЛО = Новый Запрос;
ЗапросДок = Новый Запрос;
СписокСтатусов = Новый СписокЗначений;

СписокСтатусов.Добавить(0);
СписокСтатусов.Добавить(1);

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Изделие,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Исполнитель
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Линейка = &Линейка
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус В(&СписокСтатусов)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
Запрос.УстановитьПараметр("Линейка",Объект.Линейка);
Запрос.УстановитьПараметр("СписокСтатусов",СписокСтатусов);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если ВыборкаДетальныеЗаписи.ПЗ.Оборудование.Количество() = 0 Тогда	
		Продолжить;
		КонецЕсли; 	  
    ТЧ = ТаблицаЗаданий.Добавить();
	ТЧ.Спецификация = ВыборкаДетальныеЗаписи.Изделие;
	ТЧ.Статус = ПолучитьСтатус(ВыборкаДетальныеЗаписи.Изделие);
	ТЧ.ПЗ = ВыборкаДетальныеЗаписи.ПЗ;
	ТЧ.ДатаПЗ = ВыборкаДетальныеЗаписи.ПЗ.Дата;
	ТЧ.СтатусМТК = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.Статус;
	ТЧ.Приоритет = ?(ВыборкаДетальныеЗаписи.ПЗ.НомерОчереди = -1,Истина,Ложь);
	ТЧ.МестоХраненияПотребитель = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.МестоХраненияПотребитель;
	ТЧ.Количество = ВыборкаДетальныеЗаписи.ПЗ.Количество;
	ТЧ.ОборудованиеНазначено = ?(ВыборкаДетальныеЗаписи.ПЗ.Оборудование.Количество() > 0, Истина, Ложь);
	ЗапросЛО.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ЛьготнаяОчередь.НормаРасходов.Элемент КАК МПЗ
		|ИЗ
		|	РегистрСведений.ЛьготнаяОчередь КАК ЛьготнаяОчередь
		|ГДЕ
		|	ЛьготнаяОчередь.ПЗ = &ПЗ
		|	И ЛьготнаяОчередь.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
	ЗапросЛО.УстановитьПараметр("ПЗ",ВыборкаДетальныеЗаписи.ПЗ);
	РезультатЗапросаЛО = ЗапросЛО.Выполнить();
	ТЧ.ЛО = Не РезультатЗапросаЛО.Пустой();   
	КонецЦикла;
ТаблицаЗаданий.Сортировать("ДатаПЗ");
КонецПроцедуры

&НаСервере
Процедура ПолучитьЗапущенныеВРаботу()
ТаблицаЗаданий.Очистить();
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПроизводственноеЗадание.Ссылка КАК ПЗ,
	|	ПроизводственноеЗадание.Изделие
	|ИЗ
	|	Документ.ПроизводственноеЗадание КАК ПроизводственноеЗадание
	|ГДЕ
	|	ПроизводственноеЗадание.Линейка = &Линейка
	|	И ПроизводственноеЗадание.ДокументОснование.Статус = 4";
Запрос.УстановитьПараметр("Линейка",Объект.Линейка);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл	  
    ТЧ = ТаблицаЗаданий.Добавить();
	ТЧ.Спецификация = ВыборкаДетальныеЗаписи.Изделие;
	ТЧ.Статус = ПолучитьСтатус(ВыборкаДетальныеЗаписи.Изделие);
	ТЧ.ПЗ = ВыборкаДетальныеЗаписи.ПЗ;
	ТЧ.ДатаПЗ = ВыборкаДетальныеЗаписи.ПЗ.Дата;
	ТЧ.СтатусМТК = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.Статус;
	ТЧ.Приоритет = ?(ВыборкаДетальныеЗаписи.ПЗ.НомерОчереди = -1,Истина,Ложь);
	ТЧ.МестоХраненияПотребитель = ВыборкаДетальныеЗаписи.ПЗ.ДокументОснование.МестоХраненияПотребитель;
	ТЧ.Количество = ВыборкаДетальныеЗаписи.ПЗ.Количество;
	ТЧ.ОборудованиеНазначено = ?(ВыборкаДетальныеЗаписи.ПЗ.Оборудование.Количество() > 0, Истина, Ложь);
	КонецЦикла;
ТаблицаЗаданий.Сортировать("ДатаПЗ");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьЗадания(Команда)
	Если ПоказатьЗапущенныеВРаботу Тогда
	ПолучитьЗапущенныеВРаботу();
	Иначе	
	ПолучитьДанныеПоЗаданиямНаСервере();
	КонецЕсли; 
Элементы.ПолучитьСписокПеремещения.Доступность = Не ПоказатьЗапущенныеВРаботу;
Элементы.СоздатьПередачиВПроизводство.Доступность = Не ПоказатьЗапущенныеВРаботу;
Элементы.ЗапуститьВПроизводство.Доступность = Не ПоказатьЗапущенныеВРаботу;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСпецификаций(Команда)
СписокПЗ = Новый СписокЗначений;

	Для каждого ТЧ Из ТаблицаЗаданий Цикл
		Если ТЧ.Пометка Тогда
		ВыбСтатус = ПолучитьСтатусМТК(ТЧ.ПЗ);
			Если (ВыбСтатус = 1)или(ВыбСтатус = 4) Тогда
			СписокПЗ.Добавить(ТЧ.ПЗ);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
		Если СписокПЗ.Количество() > 0 Тогда
		ОткрытьФорму("Отчет.ПечатьСпецификацииСУчётомАналогов.Форма.ФормаОтчета",Новый Структура("СписокПЗ",СписокПЗ));
		КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПечатьВедомостейЭлементов(Команда)
СписокПЗ = Новый СписокЗначений;

	Для каждого ТЧ Из ТаблицаЗаданий Цикл
		Если ТЧ.Пометка Тогда
		ВыбСтатус = ПолучитьСтатусМТК(ТЧ.ПЗ);
			Если (ВыбСтатус = 1)или(ВыбСтатус = 4) Тогда
			СписокПЗ.Добавить(ТЧ.ПЗ);
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
		Если СписокПЗ.Количество() > 0 Тогда
		ОткрытьФорму("Отчет.ПечатьСпецификацииСУчётомАналогов.Форма.ФормаОтчета",Новый Структура("СписокПЗ,ВедомостьЭлементов",СписокПЗ,Истина));
		КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьПередачиВПроизводствоНаСервере(ПЗ)
	Если Не ОбщийМодульВызовСервера.СоздатьТаблицуЭтаповПроизводства(ПЗ,Этапы,ЭтапыАРМ,Объект.РабочееМесто,Объект.Исполнитель) Тогда	
	Возврат(-1);			
	КонецЕсли;
		Если Не ЗначениеЗаполнено(ПЗ.ДатаЗапуска) Тогда
		Возврат(ОбщийМодульВызовСервера.ЗапуститьВПроизводство(ПЗ,Объект.РабочееМесто,Этапы,Неопределено,Ложь)); 
		КонецЕсли;
Возврат(1);
КонецФункции 

&НаСервере
Функция ПолучитьСтатусМТК(ПЗ)
Возврат(ПЗ.ДокументОснование.Статус);
КонецФункции

&НаСервере
Функция ПолучитьНомерЯчейки(ПЗ)	
Возврат(ПЗ.ДокументОснование.НомерЯчейки);
КонецФункции 

&НаСервере
Процедура ОчиститьОборудование(ПЗ)
ПЗОбъект = ПЗ.ПолучитьОбъект();
ПЗОбъект.Оборудование.Очистить();
ПЗОбъект.Записать();
КонецПроцедуры 

&НаСервере
Функция НазначеноОборудование(ПЗ)
Возврат(?(ПЗ.Оборудование.Количество() > 0,Истина,Ложь));
КонецФункции

&НаКлиенте
Процедура СоздатьПередачиВПроизводство(Команда)
	Для каждого ТЧ Из ТаблицаЗаданий Цикл
		Если ТЧ.Пометка Тогда
			Если НазначеноОборудование(ТЧ.ПЗ) Тогда
				Если ПолучитьСтатусМТК(ТЧ.ПЗ) = 0 Тогда
				Состояние("Обработка...",,ТЧ.ПЗ);
					Если ПолучитьНомерЯчейки(ТЧ.ПЗ) = 0 Тогда
					Сообщить(""+ТЧ.ПЗ+" - номер ячейки не установлен! Передача не создана!");
					Продолжить;
					КонецЕсли;
				Результат = СоздатьПередачиВПроизводствоНаСервере(ТЧ.ПЗ);
					Если Результат = 0 Тогда
					ОчиститьОборудование(ТЧ.ПЗ);
					ТЧ.ЛО = Истина;
					ИначеЕсли Результат = 1 Тогда
					ТЧ.ЛО = Ложь;
					ТЧ.СтатусМТК = 1;
					КонецЕсли;  
				КонецЕсли;
			Иначе
			Сообщить(""+ТЧ.ПЗ+" - оборудование не назначено! Передача не создана!");
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьРабочееМесто(ПЗ)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ = &ПЗ";
Запрос.УстановитьПараметр("ПЗ", ПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
	Возврат(ВыборкаДетальныеЗаписи.РабочееМесто);
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

&НаСервере
Функция ЗапуститьВПроизводствоНаСервере(ПЗ)
	Попытка	
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;	
		Если ОбщийМодульРаботаСРегистрами.ОформитьПринятиеКанбана(Объект.Линейка.МестоХраненияГП,ПЗ.ДокументОснование.МестоХраненияПотребитель,ПЗ.Изделие,ПЗ.ДокументОснование.НомерЯчейки,Объект.Исполнитель) Тогда
		ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(ПЗ,Новый Структура("РабочееМесто,ДатаНачала",ПолучитьРабочееМесто(ПЗ),ТекущаяДата()));
		МТКОбъект = ПЗ.ДокументОснование.ПолучитьОбъект();
		МТКОбъект.Статус = 4;
		МТКОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Иначе
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);	
		Возврат(Ложь);
		КонецЕсли;
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	Возврат(Ложь);
	КонецПопытки;
Возврат(Истина);
КонецФункции

&НаКлиенте
Процедура ЗапуститьВПроизводство(Команда)
МассивКУдалению = Новый Массив;

	Для каждого ТЧ Из ТаблицаЗаданий Цикл
		Если ТЧ.Пометка Тогда
			Если ПолучитьСтатусМТК(ТЧ.ПЗ) = 1 Тогда
			Результат = ЗапуститьВПроизводствоНаСервере(ТЧ.ПЗ);
				Если Результат Тогда
				МассивКУдалению.Добавить(ТЧ);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
		Для каждого ТЧ Из МассивКУдалению Цикл
		ТаблицаЗаданий.Удалить(ТЧ);
		КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПроверитьНаСкладе(НомерСклада)
	Для каждого ТЧ Из ТаблицаМПЗ Цикл
	Выборка = ТаблицаСклада.НайтиСтроки(Новый Структура("МестоХранения,МПЗ",СписокМестХранения[НомерСклада].Значение,ТЧ.МПЗ));
		Если Выборка.Количество() > 0 Тогда
			Если Выборка[0].Количество >= ТЧ.Количество Тогда
			Выборка[0].Количество = Выборка[0].Количество - ТЧ.Количество;
			Возврат(Новый Структура("МПЗ,Количество",ТЧ.МПЗ,ТЧ.Количество));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
Возврат(Неопределено);
КонецФункции

&НаСервере
Процедура РаскрытьНаМПЗиПроверить(ЭтапСпецификации,КолУзла)
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_М(ЭтапСпецификации,ТекущаяДата());
	Пока ВыборкаНР.Следующий() Цикл
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Номенклатура")Тогда
			Если ВыборкаНР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Набор Тогда
			РаскрытьНаМПЗиПроверить(ВыборкаНР.Элемент,ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла);
			Продолжить;
			ИначеЕсли Не ВыборкаНР.Элемент.Канбан.Пустая() Тогда
				Если Не ВыборкаНР.Элемент.Канбан.РезервироватьВПроизводстве Тогда		
				Продолжить;
				КонецЕсли;			
			КонецЕсли;
		Выборка = Этапы.НайтиСтроки(Новый Структура("ЭтапСпецификации",ВыборкаНР.Элемент));
        	Если Выборка.Количество() > 0 Тогда
			Продолжить;
			КонецЕсли;
		КонецЕсли;
	ТаблицаМПЗ.Очистить();
	ТЧ = ТаблицаМПЗ.Добавить();
	ТЧ.МПЗ = ВыборкаНР.Элемент;
	ТЧ.Количество = ПолучитьБазовоеКоличество(ВыборкаНР.Норма,ВыборкаНР.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла;
	ТЧ.Приоритет = 1;
	ТаблицаАналогов = ОбщегоНазначенияПовтИсп.ПолучитьАналогиНормРасходов(ВыборкаНР.Ссылка,ТекущаяДата(),Истина);
		Для каждого ТЧ_ТА Из ТаблицаАналогов Цикл
		ТЧ = ТаблицаМПЗ.Добавить();
		ТЧ.МПЗ = ТЧ_ТА.Элемент;
		ТЧ.Количество = ПолучитьБазовоеКоличество(ТЧ_ТА.Норма,ТЧ_ТА.Элемент.ОсновнаяЕдиницаИзмерения)*КолУзла; 
		ТЧ.Приоритет = ?(ПолучитьСтатус(ТЧ_ТА.Элемент) = Перечисления.СтатусыМПЗ.ДоИсчерпанияЗапасов,0,ТЧ_ТА.Ссылка.Приоритет + 1);
		КонецЦикла;
 	ТаблицаМПЗ.Сортировать("Приоритет");
		Если ПроверитьНаСкладе(0) = Неопределено Тогда
		Результат = ПроверитьНаСкладе(1);
			Если Результат <> Неопределено Тогда
			Выборка = ТаблицаПеремещения.НайтиСтроки(Новый Структура("МПЗ",Результат.МПЗ));					
				Если Выборка.Количество() = 0 Тогда
				ТЧ_П = ТаблицаПеремещения.Добавить();
				ТЧ_П.МПЗ = Результат.МПЗ;
				ТЧ_П.Количество =  Результат.Количество;
				Иначе
				Выборка[0].Количество = Выборка[0].Количество + Результат.Количество;	
				КонецЕсли;
			Иначе
	        СписокЛО.Добавить(ВыборкаНР.Ссылка);
			КонецЕсли;							
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьТаблицуМПЗИПроверить(ПЗ)
Этапы.Очистить();
ЭтапыАРМ.Очистить();
СписокЛО.Очистить();
ТаблицаПеремещения.Очистить();
РезультатПроверки = ОбщийМодульСозданиеДокументов.ПроверитьЭтапыСпецификации(Объект.Линейка,ПЗ.Изделие);
	Если Не РезультатПроверки.Пустая() Тогда
	Сообщить("Не найдено рабочее место для "+РезультатПроверки);
	Возврат(Истина);
	КонецЕсли;
ОбщийМодульВызовСервера.ПолучитьТаблицуЭтаповСпецификации(Этапы,ПЗ.Изделие,ПЗ.Количество,Ложь,ТекущаяДата());
СохранитьТаблицуСклада();
	Для каждого ТЧ Из Этапы Цикл
	РаскрытьНаМПЗиПроверить(ТЧ.ЭтапСпецификации,ТЧ.Количество);
	КонецЦикла;
		Если СписокЛО.Количество() = 0 Тогда
			Для каждого ТЧ_П Из ТаблицаПеремещения Цикл
			Выборка = ТаблицаПеремещенияОбщая.НайтиСтроки(Новый Структура("МПЗ",ТЧ_П.МПЗ));					
				Если Выборка.Количество() = 0 Тогда
				ТЧ = ТаблицаПеремещенияОбщая.Добавить();
				ТЧ.МПЗ = ТЧ_П.МПЗ;
				ТЧ.Количество =  ТЧ_П.Количество;
				Иначе
				Выборка[0].Количество = Выборка[0].Количество + ТЧ_П.Количество;	
				КонецЕсли;			
			КонецЦикла; 
		Возврат(Истина);
		Иначе
		ОбщийМодульРаботаСРегистрами.ОбработкаЛьготнойОчереди(ПЗ,СписокЛО);
		ВосстановитьТаблицуСклада();
		Возврат(Ложь);
		КонецЕсли; 
КонецФункции 

&НаСервере
Процедура ПолучитьТаблицуСклада()
ТаблицаСклада.Очистить();
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	МестаХраненияОстатки.МестоХранения,
	|	МестаХраненияОстатки.МПЗ КАК МПЗ,
	|	МестаХраненияОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.МестаХранения.Остатки(&НаДату, ) КАК МестаХраненияОстатки
	|ГДЕ
	|	МестаХраненияОстатки.МестоХранения В(&СписокМестХранения)";
Запрос.УстановитьПараметр("СписокМестХранения", СписокМестХранения);
Запрос.УстановитьПараметр("НаДату", ТекущаяДата());
РезультатЗапроса = Запрос.Выполнить();
Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
	ТЧ = ТаблицаСклада.Добавить();
	ТЧ.МестоХранения = Выборка.МестоХранения;
	ТЧ.МПЗ = Выборка.МПЗ;
	ТЧ.Количество = Выборка.Количество;	
	КонецЦикла; 
КонецПроцедуры

&НаСервере
Процедура СохранитьТаблицуСклада()
ТаблицаСкладаКопия.Очистить();
	Для каждого ТЧ_МПЗ Из ТаблицаСклада Цикл
	ТЧ = ТаблицаСкладаКопия.Добавить();
	ТЧ.МестоХранения = ТЧ_МПЗ.МестоХранения;
	ТЧ.МПЗ = ТЧ_МПЗ.МПЗ;
	ТЧ.Количество = ТЧ_МПЗ.Количество;
	КонецЦикла; 
КонецПроцедуры 

&НаСервере
Процедура ВосстановитьТаблицуСклада()
ТаблицаСклада.Очистить();
	Для каждого ТЧ_МПЗ Из ТаблицаСкладаКопия Цикл
	ТЧ = ТаблицаСклада.Добавить();
	ТЧ.МестоХранения = ТЧ_МПЗ.МестоХранения;
	ТЧ.МПЗ = ТЧ_МПЗ.МПЗ;
	ТЧ.Количество = ТЧ_МПЗ.Количество;
	КонецЦикла; 
КонецПроцедуры 

&НаСервере
Функция ОтчётПоПеремещениюНаСервере()
ТабДок = Новый ТабличныйДокумент;

ОбъектЗн = РеквизитФормыВЗначение("Объект");
Макет = ОбъектЗн.ПолучитьМакет("Макет");

ОблШапка = Макет.ПолучитьОбласть("Шапка");
ОблМПЗ = Макет.ПолучитьОбласть("МПЗ");
ОблКонец = Макет.ПолучитьОбласть("Конец");

ОблШапка.Параметры.МестоХранения = СокрЛП(Объект.Линейка.МестоХраненияКанбанов.Наименование);
ТабДок.Вывести(ОблШапка);			
ТаблицаПеремещенияОбщая.Сортировать("МПЗ");
	Для каждого ТЧ Из ТаблицаПеремещенияОбщая Цикл
	ОблМПЗ.Параметры.Наименование = СокрЛП(ТЧ.МПЗ.Наименование);
	ОблМПЗ.Параметры.МПЗ = ТЧ.МПЗ;
	ОблМПЗ.Параметры.Количество = ТЧ.Количество;
	ОблМПЗ.Параметры.ЕдиницаИзмерения = СокрЛП(ТЧ.МПЗ.ЕдиницаИзмерения.Наименование);
	ТабДок.Вывести(ОблМПЗ);				
	КонецЦикла;				
ТабДок.Вывести(ОблКонец);
ТабДок.Защита = Истина;
Возврат(ТабДок);
КонецФункции 

&НаКлиенте
Процедура ПолучитьСписокПеремещения(Команда)
ТаблицаПеремещенияОбщая.Очистить();
Состояние("Обработка...",,"Получение остатков по местам хранения");
ПолучитьТаблицуСклада();
	Если ТаблицаСклада.Количество() > 0 Тогда
		Для каждого ТЧ Из ТаблицаЗаданий Цикл
			Если ТЧ.Пометка Тогда
				Если НазначеноОборудование(ТЧ.ПЗ) Тогда
					Если ТЧ.СтатусМТК = 0 Тогда
					Состояние("Обработка...",,"Создание списка перемещения "+ТЧ.ПЗ);
					ТЧ.ЛО = Не ПолучитьТаблицуМПЗИПроверить(ТЧ.ПЗ); 
					КонецЕсли;			
				Иначе
				Сообщить(""+ТЧ.ПЗ+" - оборудование не назначено! Передача не создана!");
				КонецЕсли; 
			КонецЕсли;  	
		КонецЦикла;	
			Если ТаблицаПеремещенияОбщая.Количество() > 0 Тогда
			ТД = ОтчётПоПеремещениюНаСервере();
			ТД.Показать("Список перемещения с основного склада на склад канбанов");
			ТД.ФиксацияСверху = 2;
			Иначе
			Сообщить("Перемещения не требуются.");			
			КонецЕсли; 
	Иначе
	Сообщить("Таблица остатков по местам хранения пустая!");
	КонецЕсли;  
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьВсе(Команда)
	Для каждого ТЧ Из ТаблицаЗаданий Цикл
	ТЧ.Пометка = Истина;	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьВсе(Команда)
	Для каждого ТЧ Из ТаблицаЗаданий Цикл
	ТЧ.Пометка = Ложь;	
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры

&НаКлиенте
Процедура ЛинейкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Подразделение) Тогда
	Ф = ПолучитьФорму("Справочник.Линейки.Форма.ФормаВыбора");
	ЭлементОтбора = Ф.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
	ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.Использование = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.ПравоеЗначение = Подразделение;

	ЭлементОформления = Ф.Список.УсловноеОформление.Элементы.Добавить();
	ЭлементОформления.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);

	УслОформ = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	УслОформ.Использование = Истина;
	УслОформ.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение");
	УслОформ.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	УслОформ.ПравоеЗначение = Подразделение;
	Результат = Ф.ОткрытьМодально();
		Если Результат <> Неопределено Тогда
		Объект.Линейка = Результат;
		ПолучитьДополнительныеНастройки();
		КонецЕсли;  
	Иначе
	Сообщить("Выберите подразделение!");
	КонецЕсли;
КонецПроцедуры
