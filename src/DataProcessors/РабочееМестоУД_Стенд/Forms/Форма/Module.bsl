
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
Объект.Исполнитель = ПараметрыСеанса.Пользователь;
	Если Объект.Исполнитель.Пустая() Тогда
	Элементы.СписокЛинеек.Доступность = Ложь;
	Сообщить("Вы не внесены в справочник Сотрудников! Работа невозможна!");
	КонецЕсли; 
флСортировка = 1;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
ОписаниеОшибки = "";
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
	Если Не МенеджерОборудованияКлиент.ПодключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО, ОписаниеОшибки) Тогда
    ТекстСообщения = НСтр("ru = 'При подключении оборудования произошла ошибка:""%ОписаниеОшибки%"".'");
    ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%" , ОписаниеОшибки);
    Сообщить(ТекстСообщения);
	КонецЕсли;
		Если СписокЛинеек.Количество() > 0 Тогда
		СписокЛинеекПриИзменении(Неопределено);
		КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
ПоддерживаемыеТипыВО = Новый Массив();
ПоддерживаемыеТипыВО.Добавить("СканерШтрихкода");
МенеджерОборудованияКлиент.ОтключитьОборудованиеПоТипу(УникальныйИдентификатор, ПоддерживаемыеТипыВО);
КонецПроцедуры

&НаСервере
Процедура ПолучитьДанныеПоСтендуНаСервере()
Объект.Стенд.Очистить();
Запрос = Новый Запрос;
ЗапросСП = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ КАК ПЗ,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаНачала КАК ДатаНачала,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Изделие КАК Изделие,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.БарКод КАК БарКод,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт КАК Ремонт,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ВозвратнаяТара КАК ВозвратнаяТара,
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто КАК РабочееМесто
	|ИЗ
	|	РегистрСведений.ЭтапыПроизводственныхЗаданий.СрезПоследних КАК ЭтапыПроизводственныхЗаданийСрезПоследних
	|ГДЕ
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.РабочееМесто В(&СписокРабочихМестСтенд)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.Статус <> 2
	|	И ЭтапыПроизводственныхЗаданийСрезПоследних.Ремонт = ЛОЖЬ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЭтапыПроизводственныхЗаданийСрезПоследних.ПЗ.ДокументОснование.НомерОчереди";
Запрос.УстановитьПараметр("СписокРабочихМестСтенд",СписокРабочихМестСтенд);
Результат = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = Результат.Выбрать();
	Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
		Если Не ВыборкаДетальныеЗаписи.Ремонт Тогда 
		ЗапросСП.Текст = 
			"ВЫБРАТЬ
			|	СтендовыйПрогонСрезПоследних.ДатаПоступления,
			|	СтендовыйПрогонСрезПоследних.ДатаПостановки,
			|	СтендовыйПрогонСрезПоследних.Прогон,
			|	СтендовыйПрогонСрезПоследних.Стенд
			|ИЗ
			|	РегистрСведений.СтендовыйПрогон.СрезПоследних КАК СтендовыйПрогонСрезПоследних
			|ГДЕ
			|	СтендовыйПрогонСрезПоследних.ПЗ = &ПЗ
			|	И СтендовыйПрогонСрезПоследних.ДатаСнятия = ДАТАВРЕМЯ(1,1,1,0,0,0)";		
		ЗапросСП.УстановитьПараметр("ПЗ", ВыборкаДетальныеЗаписи.ПЗ);	
		РезультатЗапросаСП = ЗапросСП.Выполнить();	
		ВыборкаДетальныеЗаписиСП = РезультатЗапросаСП.Выбрать();
			Если ВыборкаДетальныеЗаписиСП.Количество() > 0 Тогда
				Пока ВыборкаДетальныеЗаписиСП.Следующий() Цикл
				ТЧ = Объект.Стенд.Добавить();
				ТЧ.Линейка = ВыборкаДетальныеЗаписи.ПЗ.Линейка;
				ТЧ.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
				ТЧ.РабочееМесто = ВыборкаДетальныеЗаписи.РабочееМесто;
				ТЧ.Изделие = ВыборкаДетальныеЗаписи.Изделие;
				ТЧ.БарКод = ВыборкаДетальныеЗаписи.БарКод;
				ТЧ.ВозвратнаяТара = ВыборкаДетальныеЗаписи.ВозвратнаяТара;
				ТЧ.Прогон = ВыборкаДетальныеЗаписиСП.Прогон;
				ТЧ.Постановка = ВыборкаДетальныеЗаписиСП.ДатаПостановки;				
				КонецЦикла;	
			Продолжить;
			КонецЕсли;
		КонецЕсли; 
	ТЧ = Объект.Стенд.Добавить();
	ТЧ.Линейка = ВыборкаДетальныеЗаписи.ПЗ.Линейка;
	ТЧ.ПроизводственноеЗадание = ВыборкаДетальныеЗаписи.ПЗ;
	ТЧ.РабочееМесто = ВыборкаДетальныеЗаписи.РабочееМесто;
	ТЧ.Изделие = ВыборкаДетальныеЗаписи.Изделие;
	ТЧ.БарКод = ВыборкаДетальныеЗаписи.БарКод;
	ТЧ.ВозвратнаяТара = ВыборкаДетальныеЗаписи.ВозвратнаяТара;
	КонецЦикла;
ТекДата = ТекущаяДата();
Объект.Стенд.Сортировать("Постановка");
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеПоСтенду() Экспорт
ПолучитьДанныеПоСтендуНаСервере();
КонецПроцедуры
 
&НаСервере
Процедура ПолучитьРМ()
СписокРабочихМестСтенд.Очистить();
	Для каждого Стр Из СписокЛинеек Цикл
	РабочиеМеста = Справочники.РабочиеМестаЛинеек.Выбрать(,,Новый Структура("Линейка",Стр.Значение));
	флНайдено = Ложь;
		Пока РабочиеМеста.Следующий() Цикл
			Если РабочиеМеста.ЭтоГруппа Тогда
			Продолжить;		
			КонецЕсли; 
				Если (СокрЛП(РабочиеМеста.ГруппаРабочихМест.Префикс) = "СТ")или
					 (СокрЛП(РабочиеМеста.ГруппаРабочихМест.Префикс) = "СТ2")Тогда
					Если Не РабочиеМеста.Стенд.СБуфером Тогда
					СписокРабочихМестСтенд.Добавить(РабочиеМеста.Ссылка);
					флНайдено = Истина;
					КонецЕсли;		
				КонецЕсли; 
		КонецЦикла;
			Если Не флНайдено Тогда
			Сообщить("Рабочее место <Стенд> не найдено в линейке "+Стр.Значение+"!");
			КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Функция МожноРаботатьВАРМ()
	Если ОбщийМодульВызовСервера.МожноВыполнить(СписокРабочихМестСтенд[0].Значение.Линейка) Тогда	
	Возврат(Истина);
	Иначе
	СписокЛинеек.Очистить();
	СписокРабочихМестСтенд.Очистить();
	Сообщить("Работа АРМ запрещена в этой базе!");
	Возврат(Ложь);
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СписокЛинеекПриИзменении(Элемент)
ПолучитьРМ();
	Если Не МожноРаботатьВАРМ() Тогда
	Возврат;
	КонецЕсли;
ПолучитьДанныеПоСтендуНаСервере();
	Если Объект.ИнтервалОбновления > 0 Тогда
	ПодключитьОбработчикОжидания("ПолучитьДанныеПоСтенду", Объект.ИнтервалОбновления*60);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИнтервалОбновленияПриИзменении(Элемент)
ОтключитьОбработчикОжидания("ПолучитьДанныеПоСтенду");
	Если Объект.ИнтервалОбновления > 0 Тогда
	ПодключитьОбработчикОжидания("ПолучитьДанныеПоСтенду", Объект.ИнтервалОбновления*60);
	КонецЕсли;  
КонецПроцедуры

&НаСервере
Функция НайтиЭтапСтенд(Спецификация,ЭтапСТ)
НР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н(Спецификация,ТекущаяДата());
	Пока НР.Следующий() Цикл	
		Если НР.ВидЭлемента = Перечисления.ВидыЭлементовНормРасходов.Основа Тогда
			Если Найти(НР.Элемент.Наименование,"СТ-") > 0 Тогда
			ЭтапСТ = НР.Элемент;
			Прервать;
			Иначе
			НайтиЭтапСтенд(НР.Элемент,ЭтапСТ);
			КонецЕсли; 	
		КонецЕсли; 
	КонецЦикла;
Возврат(ЭтапСТ);	
КонецФункции

&НаСервере
Функция ПолучитьЭтапСпецификации(Стр)
ТЧ = Объект.Стенд.НайтиПоИдентификатору(Стр);
Возврат(НайтиЭтапСтенд(ТЧ.Изделие,Справочники.Номенклатура.ПустаяСсылка())); 
КонецФункции

&НаСервере
Функция ПолучитьНомерРазукомплектовки(ПЗ)
Запрос = Новый Запрос;

Запрос.Текст = 
	"ВЫБРАТЬ
	|	Разукомплектовка.Ссылка
	|ИЗ
	|	Документ.Разукомплектовка КАК Разукомплектовка
	|ГДЕ
	|	Разукомплектовка.ДокументОснование = &ДокументОснование";
Запрос.УстановитьПараметр("ДокументОснование", ПЗ);
РезультатЗапроса = Запрос.Выполнить();
ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
Возврат(ВыборкаДетальныеЗаписи.Количество()+1); 
КонецФункции

&НаСервере
Функция ПолучитьИзделиеРемонта(РабочееМесто)
	Для каждого ТЧ_Этап Из Этапы Цикл
	ЭтапАРМ = РабочееМесто.ТабличнаяЧасть.Найти(ТЧ_Этап.ГруппаНоменклатуры,"ГруппаНоменклатуры");
		Если ЭтапАРМ = Неопределено Тогда
		Продолжить;
		ИначеЕсли ЭтапАРМ.Комплектация Тогда
	    Продолжить;
		КонецЕсли;
			Если ТЧ_Этап.ЭтапСпецификации.Виртуальный Тогда
			Продолжить;
			КонецЕсли;
	Возврат(Новый Структура("Изделие,Количество",ТЧ_Этап.ЭтапСпецификации,ТЧ_Этап.Количество));
	КонецЦикла;
КонецФункции

&НаСервере
Процедура РазукомплектовкаНаСервере(Стр,ПричиныРемонта,НомерБирки)
ТЧ = Объект.Стенд.НайтиПоИдентификатору(Стр);
ТекущееРабочееМестоСтенд = ТЧ.РабочееМесто;
Этапы.Очистить();
ОбщийМодульВызовСервера.ПолучитьТаблицуЭтаповСпецификации(Этапы,ТЧ.ПроизводственноеЗадание.Изделие,1,Ложь,ТЧ.ПроизводственноеЗадание.ДатаЗапуска);
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
		Если ОбщийМодульСозданиеДокументов.СоздатьРемонтнуюКарту(ТЧ.ПроизводственноеЗадание,ТекущееРабочееМестоСтенд,ПолучитьИзделиеРемонта(ТекущееРабочееМестоСтенд),Объект.Исполнитель,Перечисления.ВидыРемонта.Разукомплектовка,ПричиныРемонта,,НомерБирки) Тогда
		Объект.Стенд.Удалить(ТЧ);
		ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
		Иначе
		Сообщить("Ремонтная карта не создана!");
		ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
		КонецЕсли;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);	
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура Разукомплектовка(Команда)
	Если Элементы.Стенд.ТекущаяСтрока <> Неопределено Тогда
		Если ЗначениеЗаполнено(Элементы.Стенд.ТекущиеДанные.Постановка) Тогда
		ОтключитьОбработчикОжидания("ПолучитьДанныеПоСтенду");
		Результат = ОткрытьФормуМодально("ОбщаяФорма.ВыборПричинРемонта",Новый Структура("РабочееМесто",Элементы.Стенд.ТекущиеДанные.РабочееМесто));
			Если Результат <> Неопределено Тогда
			НомерБирки = "";
				Если ВвестиСтроку(НомерБирки,"Введите номер бирки",4) Тогда
				РазукомплектовкаНаСервере(Элементы.Стенд.ТекущаяСтрока,Результат,НомерБирки);
				КонецЕсли; 
			КонецЕсли;
				Если Объект.ИнтервалОбновления > 0 Тогда
				ПодключитьОбработчикОжидания("ПолучитьДанныеПоСтенду", Объект.ИнтервалОбновления*60);
				КонецЕсли; 
		Иначе
		Сообщить("ПЗ не принято в работу на рабочем месте!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиПоБарКоду(Команда)
БарКод = "";
	Если ВвестиСтроку(БарКод,"Введите бар-код",18) Тогда 
	Выборка = Объект.Стенд.НайтиСтроки(Новый Структура("БарКод",БарКод));
		Если Выборка.Количество() > 0 Тогда	
		Элементы.Стенд.ТекущаяСтрока = Выборка[0].ПолучитьИдентификатор();
		Иначе
		Сообщить(БарКод + "не найден!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
ПолучитьДанныеПоСтендуНаСервере();
КонецПроцедуры

&НаСервере
Процедура ПринятьВРаботуНаСервере(Стр)
ТЧ = Объект.Стенд.НайтиПоИдентификатору(Стр);
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(ТЧ.ПроизводственноеЗадание,Новый Структура("РабочееМесто,ДатаНачала",ТЧ.РабочееМесто,ТекущаяДата()));
	СуществующийСП = РегистрыСведений.СтендовыйПрогон.ПолучитьПоследнее(,Новый Структура("ПЗ,Стенд",ТЧ.ПроизводственноеЗадание,ТЧ.РабочееМесто.Стенд));
	СП = РегистрыСведений.СтендовыйПрогон.СоздатьМенеджерЗаписи();
	СП.Период = ТекущаяДата();
	СП.ПЗ = ТЧ.ПроизводственноеЗадание;
	СП.Изделие = ТЧ.ПроизводственноеЗадание.Изделие;
	СП.БарКод = ТЧ.ПроизводственноеЗадание.БарКод;
	СП.Стенд = ТЧ.РабочееМесто.Стенд;
	СП.Прогон = СуществующийСП.Прогон+1;
	СП.ИсполнительПоступление = Объект.Исполнитель;
	СП.ДатаПоступления = ТекущаяДата();
	СП.ИсполнительПостановка = Объект.Исполнитель;
	СП.ДатаПостановки = ТекущаяДата();
	СП.Записать();
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	ТЧ.Постановка = СП.ДатаПостановки;
	ТЧ.Прогон = СП.Прогон;
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ПринятьВРаботу(Команда)
	Если Элементы.Стенд.ТекущаяСтрока <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(Элементы.Стенд.ТекущиеДанные.Постановка) Тогда
		ПринятьВРаботуНаСервере(Элементы.Стенд.ТекущаяСтрока);
		Иначе
		Сообщить("Задание уже принято в работу!");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	Если ЭтаФорма.ВводДоступен() Тогда
	Выборка = Объект.Стенд.НайтиСтроки(Новый Структура("БарКод",СокрЛП(Данные)));
		Если Выборка.Количество() > 0 Тогда
		Элементы.Стенд.ТекущаяСтрока = Выборка[0].ПолучитьИдентификатор();
			Если Не ЗначениеЗаполнено(Элементы.Стенд.ТекущиеДанные.Постановка) Тогда
			ПринятьВРаботуНаСервере(Элементы.Стенд.ТекущаяСтрока);
			КонецЕсли; 
		Иначе
		Сообщить(Данные + "не найден!");
		КонецЕсли;
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ПолучитьФайлы(СписокФайлов,ПЗ,ЭтапСпецификации)
ВыборкаНР = ОбщийМодульВызовСервера.ПолучитьНормыРасходовПоВладельцу_Н_Д(ЭтапСпецификации,ПЗ.ДатаЗапуска);
	Пока ВыборкаНР.Следующий() Цикл
		Если ТипЗнч(ВыборкаНР.Элемент) = Тип("СправочникСсылка.Документация") Тогда
			Если Найти(ВыборкаНР.Ссылка.Владелец.Наименование,"СБ-") Тогда
				Если Найти(ВыборкаНР.Элемент.Наименование,"СБ") Тогда
				СписокФайлов.Добавить(ВыборкаНР.Элемент);
				КонецЕсли;
			КонецЕсли;				
		Иначе 
		ПолучитьФайлы(СписокФайлов,ПЗ,ВыборкаНР.Элемент);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
СписокФайлов = Новый СписокЗначений;

ПолучитьФайлы(СписокФайлов,Элементы.Стенд.ТекущиеДанные.ПроизводственноеЗадание,Элементы.Стенд.ТекущиеДанные.Изделие);
	Если СписокФайлов.Количество() > 0 Тогда
	Док = СписокФайлов[0].Значение;
		Если Док <> Неопределено Тогда
		ОбщийМодульКлиент.ОткрытьФайлДокумента(Док);
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСпецификации(Команда)
ОткрытьФорму("Отчет.ПечатьСпецификации.Форма.ФормаОтчета",Новый Структура("ПЗ",Элементы.Стенд.ТекущиеДанные.ПроизводственноеЗадание));
КонецПроцедуры

&НаСервере
Процедура ПолучитьЭтапыСпецификации(ПЗ,РабочееМесто)
Этапы.Очистить();
Объект.Спецификация.Очистить();
ОбщийМодульВызовСервера.ПолучитьТаблицуЭтаповСпецификации(Этапы,ПЗ.Изделие,1,Ложь,ПЗ.ДатаЗапуска);
	Для каждого ТЧ Из Этапы Цикл
		Если РабочееМесто.ТабличнаяЧасть.Найти(ТЧ.ГруппаНоменклатуры,"ГруппаНоменклатуры") = Неопределено Тогда
		Продолжить;
		КонецЕсли;
	ОбщийМодульВызовСервера.ПолучитьСпецификациюСАналогами(Объект.Спецификация,ПЗ,ТЧ.ЭтапСпецификации,ТЧ.ЭтапСпецификации,ТЧ.Количество);	
	КонецЦикла;
Объект.Спецификация.Сортировать("ЭтапСпецификации,ВидМПЗ,Позиция,МПЗ");
КонецПроцедуры

&НаСервере
Функция ЗавершитьЗаданиеНаСервере(Стр)
ТЧ = Объект.Стенд.НайтиПоИдентификатору(Стр);
ПолучитьЭтапыСпецификации(ТЧ.ПроизводственноеЗадание,ТЧ.РабочееМесто);
ДатаЗавершения = ТекущаяДата();
	Попытка
	НачатьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция + 1;
	НовоеРабочееМесто = ОбщийМодульВызовСервера.ПолучитьСледующееРабочееМесто(ТЧ.РабочееМесто);
	ОбщийМодульРаботаСРегистрами.ИзменитьЭтапПроизводственногоЗадания(ТЧ.ПроизводственноеЗадание,Новый Структура("РабочееМесто,Исполнитель,ДатаОкончания",ТЧ.РабочееМесто,Объект.Исполнитель,ДатаЗавершения)); 
	НаборЗаписей = РегистрыСведений.СтендовыйПрогон.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПЗ.Установить(ТЧ.ПроизводственноеЗадание);
	НаборЗаписей.Прочитать();
	    Для Каждого Запись Из НаборЗаписей Цикл
			Если Не ЗначениеЗаполнено(Запись.ДатаСнятия) Тогда
			Запись.ИсполнительСнятие = Объект.Исполнитель;
			Запись.ДатаСнятия = ДатаЗавершения;
			Прервать; 
			КонецЕсли;  
	    КонецЦикла;
	НаборЗаписей.Записать();
	ОбщийМодульРаботаСРегистрами.СоздатьЭтапПроизводственногоЗадания(ТЧ.ПроизводственноеЗадание,НовоеРабочееМесто,Неопределено,Неопределено);
	МестоПередачи = "на "+СокрЛП(НовоеРабочееМесто.Наименование);
		Если НовоеРабочееМесто.ГруппаРабочихМест <> ТЧ.РабочееМесто.ГруппаРабочихМест Тогда
			Если Не ОбщийМодульСозданиеДокументов.СоздатьВыпускПродукции(ТЧ.ПроизводственноеЗадание,ТЧ.РабочееМесто,Объект.Спецификация,Этапы,ДатаЗавершения) Тогда
			Сообщить("Документ выпуска не создан!");
			ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
			Возврат("");
			КонецЕсли; 		
		КонецЕсли;					
	Испытания = ТЧ.ПроизводственноеЗадание.Испытания;
		Если Испытания = 0 Тогда
			Если ТЧ.ПроизводственноеЗадание.ДокументОснование.МестоХраненияПотребитель.Пустая() Тогда
			МестоПередачи = "на склад линейки";
			Иначе	
			МестоПередачи = "на склад "+СокрЛП(ТЧ.ПроизводственноеЗадание.ДокументОснование.МестоХраненияПотребитель.Наименование);
			КонецЕсли;					
		ИначеЕсли Испытания = 1 Тогда
		МестоПередачи = "Отложите изделие для ПСИ!";
		ИначеЕсли Испытания = 2 Тогда	
		МестоПередачи = "Отложите изделие для поверки!";
		КонецЕсли;			
	ОбщийМодульВызовСервера.ОчиститьНомерВозвратнойТары(ТЧ.ПроизводственноеЗадание);
	ЗафиксироватьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;Если ПараметрыСеанса.АктивнаТранзакция = 0 тогда СРМ_ОбменВебСервис.ОтправкаПослеТранзакции();КонецЕсли;
	Объект.Стенд.Удалить(ТЧ);
	Возврат(МестоПередачи);
	Исключение
	Сообщить(ОписаниеОшибки());
	ОтменитьТранзакцию();ПараметрыСеанса.АктивнаТранзакция = ПараметрыСеанса.АктивнаТранзакция-1;ПараметрыСеанса.ОбъектыСозданныеВТранзакции = Новый ХранилищеЗначения(Новый Массив);
	Возврат("");
	КонецПопытки;
КонецФункции

&НаКлиенте
Процедура ЗавершитьЗадание(Команда)
	Если Элементы.Стенд.ТекущаяСтрока <> Неопределено Тогда
		Если ОбщийМодульВызовСервера.ЛинейкаОстановлена(ОбщийМодульВызовСервера.ПолучитьЛинейкуПоРабочемуМесту(Элементы.Стенд.ТекущиеДанные.РабочееМесто)) Тогда
		Возврат;
		КонецЕсли;
	МестоПередачи = ЗавершитьЗаданиеНаСервере(Элементы.Стенд.ТекущаяСтрока);
		Если МестоПередачи <> "" Тогда
			Если Найти(МестоПередачи,"Отложите") > 0 Тогда
			Предупреждение(МестоПередачи,,"ВНИМАНИЕ!");
			Иначе	
			ПоказатьОповещениеПользователя("ВНИМАНИЕ!",,"Передайте изделие "+МестоПередачи,БиблиотекаКартинок.Пользователь);
			КонецЕсли; 
		КонецЕсли; 
	КонецЕсли;  
КонецПроцедуры
